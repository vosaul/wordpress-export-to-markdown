<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

	<!-- generator="WordPress/5.5.3" created="2020-11-10 19:36" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>CoRecursive Podcast</title>
	<link>https://corecursive.com</link>
	<description>Learn From Software Experts</description>
	<pubDate>Tue, 10 Nov 2020 19:36:24 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>https://corecursive.com</wp:base_site_url>
	<wp:base_blog_url>https://corecursive.com</wp:base_blog_url>

		<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[adam]]></wp:author_login><wp:author_email><![CDATA[adam@corecursive.com]]></wp:author_email><wp:author_display_name><![CDATA[Adam Gordon Bell]]></wp:author_display_name><wp:author_first_name><![CDATA[Adam Gordon]]></wp:author_first_name><wp:author_last_name><![CDATA[Bell]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>2</wp:author_id><wp:author_login><![CDATA[john]]></wp:author_login><wp:author_email><![CDATA[john@corecursive.com]]></wp:author_email><wp:author_display_name><![CDATA[John Walker]]></wp:author_display_name><wp:author_first_name><![CDATA[John]]></wp:author_first_name><wp:author_last_name><![CDATA[Walker]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>3</wp:author_id><wp:author_login><![CDATA[webmaster@corecursive.com]]></wp:author_login><wp:author_email><![CDATA[webmaster@corecursive.com]]></wp:author_email><wp:author_display_name><![CDATA[webmaster@corecursive.com]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>

				
	<generator>https://wordpress.org/?v=5.5.3</generator>

		<item>
		<title>Dependent Types in Haskell with Stephanie Weirich</title>
		<link>https://corecursive.com/015-dependant-types-in-haskell-with-stephanie-weirich_/</link>
		<pubDate>Wed, 13 Jun 2018 04:00:00 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">http://707f824699524ca4a44af6980b8a481b</guid>
		<description></description>
		<content:encoded><![CDATA[At Strange Loop 2017, I wandered into a talk where I saw some code that deeply surprised me. The code could have been python if you squinted, passing dictionaries around, no type annotations anywhere.

Yet, key lookup in the dictionary was validated at compile time. It was a compile-time error to access elements that didn't exist. Also, the dictionary was heterogeneous, the elements had different types, and it was all inferred and validated at compile time.

What I was seeing was Dependent types in Haskell. In today's interview, Stephanie Weirich explains her efforts to add dependent types to Haskell and how that example worked.

<a href="https://corecursive.com/015-dependant-types-in-haskell-with-stephanie-weirich" target="_blank" rel="noopener noreferrer">Podcast Transcript</a>

&nbsp;
<ul>
 	<li><a href="https://thestrangeloop.com/2017/dependent-types-in-haskell.html" target="_blank" rel="noopener noreferrer">Dependent Types in Haskell Talk</a></li>
 	<li><a href="https://www.cis.upenn.edu/~sweirich/">https://www.cis.upenn.edu/~sweirich/</a></li>
 	<li><a title="Dependant Types in Haskell Talk " href="https://www.youtube.com/watch?v=wNa3MMbhwS4" target="_blank" rel="noopener noreferrer">https://github.com/sweirich</a></li>
 	<li><a href="http://twitter.com/fancytypes">@fancytypes</a></li>
 	<li><a href="https://github.com/sweirich/dth/tree/master/regexp" target="_blank" rel="noopener noreferrer">Dependent Types Regex</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>536</wp:post_id>
		<wp:post_date><![CDATA[2018-06-13 00:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-13 04:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[015-dependant-types-in-haskell-with-stephanie-weirich_]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="category" nicename="best-of"><![CDATA[Best Of]]></category>
		<category domain="post_tag" nicename="coq"><![CDATA[Coq]]></category>
		<category domain="post_tag" nicename="dependent-types"><![CDATA[Dependent Types]]></category>
		<category domain="post_tag" nicename="gadt"><![CDATA[GADT]]></category>
		<category domain="post_tag" nicename="haskell"><![CDATA[Haskell]]></category>
		<category domain="post_tag" nicename="indexed-type"><![CDATA[Indexed Type]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="regular-expressions"><![CDATA[Regular Expressions]]></category>
		<category domain="post_tag" nicename="singleton-types"><![CDATA[Singleton Types]]></category>
		<category domain="post_tag" nicename="template-haskell"><![CDATA[Template Haskell]]></category>
		<category domain="post_tag" nicename="totality"><![CDATA[Totality]]></category>
		<category domain="post_tag" nicename="type-function"><![CDATA[Type Function]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[5913]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1693]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/015_-_Dependant_Haskell.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[58:44]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[61.9 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:24:{i:0;s:33:"01:20 -- What are Dependent Types";i:1;s:28:"05:10 -- Why are they useful";i:2;s:24:"07:00 -- Dependent Regex";i:3;s:22:"11:56 -- Dictionaires ";i:4;s:35:"14:25 -- Parsing a string to a type";i:5;s:22:"17:00 -- Indexed Types";i:6;s:41:"21:00 -- Generalized Algebraic Data Types";i:7;s:37:"24:00 -- Runtime vs Compile Time Data";i:8;s:38:"26:07 -- Dependent Types can be faster";i:9;s:36:"28:04 -- on not throwing away values";i:10;s:25:"30:27 -- double duty data";i:11;s:22:"31:23 -- on reflection";i:12;s:25:"33:29 -- generic deriving";i:13;s:22:"35:20 -- extending GHC";i:14;s:32:"37:55 -- interacting extensions ";i:15;s:57:"39:00 -- proving type soundness of type system extensions";i:16;s:23:"41:50 -- haskell vs coq";i:17;s:26:"44:48 -- totality checking";i:18;s:24:"45:30 -- equality proofs";i:19;s:29:"48:38 -- how is extending ghc";i:20;s:33:"50:05 -- writing papers about ghc";i:21;s:42:"51:00 -- industry usage of singleton types";i:22;s:44:"52:00 -- Dependent types in industrial usage";i:23;s:32:"56:10 -- What are you working on";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Stephanie Weirich]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Professor of Computer and Information Science]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/fancytypes?lang=en>@fancytypes</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[015-dependent-types-in-haskell-with-stephanie-weirich]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-itunes]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_thumbnail]]></wp:meta_key>
		<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_theme]]></wp:meta_key>
		<wp:meta_value><![CDATA[standard]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_width]]></wp:meta_key>
		<wp:meta_value><![CDATA[450]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_placement]]></wp:meta_key>
		<wp:meta_value><![CDATA[top]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-advanced-destination-form-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[015-dependant-types-in-haskell-with-stephanie-weirich]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[592]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>145</wp:comment_id>
			<wp:comment_author><![CDATA[John Soo]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jsoo1@asu.edu]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[174.66.85.188]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-09-04 19:51:43]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-09-04 23:51:43]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Love the show! Really excellent material and guests. Can I request Alexis King on as a guest? I'd really like to hear about Hackett, macros, academia, and using Haskell at work.

Kindest,

John]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1536105103.3547549;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1536170170.1763339;s:5:"event";s:15:"status-approved";s:4:"user";s:4:"adam";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>146</wp:comment_id>
			<wp:comment_author><![CDATA[Adam Bell]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[adam@corecursive.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[2603:9000:9e02:cc00:797f:23cf:e0d9:8100]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-09-05 13:59:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-09-05 17:59:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey John,
Great suggestion, I'm on it.  Glad you like the show, spread the word :)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>145</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1536170341.378408;s:5:"event";s:9:"check-ham";s:4:"user";s:4:"adam";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>Micro Service Architectures With Jan Machacek</title>
		<link>https://corecursive.com/014-micro-service-architectures-with-jan-machacek/</link>
		<pubDate>Wed, 06 Jun 2018 04:00:00 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">http://e140d755cf9c40a4830311b9ece0aa64</guid>
		<description></description>
		<content:encoded><![CDATA[I don't know a lot about micro services.  Like how to design them and what the various caveats and anti-patterns are.  I'm currently working on a project that involves decomposing a monolithic application into separate parts, integrated together using Kafka and http.

Today I talk to coauthor of upcoming book, Reactive Systems Architecture : Designing and Implementing an Entire Distributed System.  If you want to learn some of the hows and whys of building a distributed system, I think you'll really enjoy this interview.  The insights from this conversation are already helping me.
<ul>
 	<li>Contact
<ul>
 	<li><a href="twitter.com/@honzam399">Jan Machacek</a> is the CTO at <a href="https://www.cakesolutions.net/teamblogs/author/jan-machacek">Cake Solutions</a>.</li>
</ul>
</li>
 	<li>Videos
<ul>
 	<li><a href="https://www.youtube.com/watch?v=ZFo_HoQI5iY">long lived micro services </a></li>
 	<li><a href="https://www.amazon.com/Reactive-Systems-Architecture-Implementing-Distributed/dp/1491980710"> Book - Reactive System Architecture</a></li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>537</wp:post_id>
		<wp:post_date><![CDATA[2018-06-06 00:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-06-06 04:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[014-micro-service-architectures-with-jan-machacek]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="akka"><![CDATA[Akka]]></category>
		<category domain="post_tag" nicename="architecture"><![CDATA[Architecture]]></category>
		<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="author"><![CDATA[Author]]></category>
		<category domain="post_tag" nicename="distributed-systems"><![CDATA[Distributed Systems]]></category>
		<category domain="post_tag" nicename="kafka"><![CDATA[Kafka]]></category>
		<category domain="post_tag" nicename="micro-services"><![CDATA[Micro Services]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="reactive"><![CDATA[Reactive]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[4630]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[589]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/014_-_Distributed_Systems_Design.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[66:32]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[56.0 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Jan Machacek]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[CTO Of Cake Solutions]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/@honzam399">@honzam399</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-itunes]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_thumbnail]]></wp:meta_key>
		<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_theme]]></wp:meta_key>
		<wp:meta_value><![CDATA[standard]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_width]]></wp:meta_key>
		<wp:meta_value><![CDATA[450]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_placement]]></wp:meta_key>
		<wp:meta_value><![CDATA[top]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-advanced-destination-form-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[589]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>1045</wp:comment_id>
			<wp:comment_author><![CDATA[Xandor Schiefer]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[me@xandor.co.za]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[102.177.134.9]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-09-17 03:37:39]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-09-17 07:37:39]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The link to the book is dead. Would you be able to update it, please?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1568705859.3722179;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>1118</wp:comment_id>
			<wp:comment_author><![CDATA[Adam Gordon Bell]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[adam@corecursive.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[174.89.71.244]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-10-05 14:43:23]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-10-05 18:43:23]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I think they have pulled the book down sadly]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>1045</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1570301029.5120189;s:5:"event";s:9:"check-ham";s:4:"user";s:4:"adam";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>Rust And Bitter C++ Developers With Jim Blandy</title>
		<link>https://corecursive.com/013-rust-and-bitter-c-developers-with-jim-blandy/</link>
		<pubDate>Wed, 16 May 2018 04:00:00 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">http://d9392102d3adf90aeea101fc0a2b854c</guid>
		<description></description>
		<content:encoded><![CDATA[Today I talk with Jim Blandy, one of the authors of Programming Rust.  We talk about what problems rust is trying to solve, the unique language features and type system of rust. It includes both algebraic data types, type classes, and generics.  We also touch on why it is so hard to secure code. Jim works on Firefox and his insights into the difficulty of writing secure code are super interesting.

&nbsp;

Show notes
<ul>
 	<li><a href="https://www.rust-lang.org/en-US/">Rust</a></li>
 	<li><a title="Programming Rust Book" href="http://shop.oreilly.com/product/0636920040385.do">Programming Rust Book</a></li>
 	<li><a href="https://en.wikipedia.org/wiki/MESI_protocol">MESI protocol</a></li>
 	<li><a href="https://link.springer.com/article/10.1023/A:1026276129010">Constraint-based Verification of Parameterized Cache Coherence Protocols Formal Methods in System Design</a></li>
 	<li><a href="https://plv.mpi-sws.org/rustbelt/">Rust Validation</a>  -</li>
 	<li>3d game demo - (not sure where this is, post in comments if you find it)</li>
 	<li><a href="https://security.googleblog.com/2007/10/auditing-open-source-software.html"> integer overflow </a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>538</wp:post_id>
		<wp:post_date><![CDATA[2018-05-16 00:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-05-16 04:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[013-rust-and-bitter-c-developers-with-jim-blandy]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="author"><![CDATA[Author]]></category>
		<category domain="post_tag" nicename="concurrency"><![CDATA[Concurrency]]></category>
		<category domain="post_tag" nicename="memory-management"><![CDATA[Memory Management]]></category>
		<category domain="post_tag" nicename="mozilla"><![CDATA[Mozilla]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="rust"><![CDATA[Rust]]></category>
		<category domain="post_tag" nicename="security"><![CDATA[Security]]></category>
		<category domain="post_tag" nicename="systems-programming"><![CDATA[Systems Programming]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[12501]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[620]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/013_-_Rust.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[62:53]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[52.8 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:14:{i:0;s:53:"02:17 -- How Rust Is Targeting Bitter C++ Programmers";i:1;s:27:"08:27 -- What Is Data Race?";i:2;s:32:"15:34 -- What is MESI Protocol? ";i:3;s:34:"22:07 -- How Rust Handles Aliasing";i:4;s:37:"24:35 -- Shared and Mutable Reference";i:5;s:25:"31:34 -- RustBelt Project";i:6;s:42:"41:33 -- Implementing Under an Unsafe Code";i:7;s:25:"43:43 -- Rust Performance";i:8;s:43:"46:09 -- Utilizing Serializer Deserializer ";i:9;s:40:"48:27 -- Is Rust for Non-C++ Developers?";i:10;s:32:" 51:26 -- How Errors Are Missed ";i:11;s:47:"53:47 -- Value of Rust for Single-Threaded Code";i:12;s:51:"55:58 -- What Happens When There Are Security Holes";i:13;s:38:"58:58 -- The Root of the Security Hole";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Jim Blandy]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Author Of Programming Rust]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/jimblandy">@jimblandy</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-itunes]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_thumbnail]]></wp:meta_key>
		<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_theme]]></wp:meta_key>
		<wp:meta_value><![CDATA[standard]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_width]]></wp:meta_key>
		<wp:meta_value><![CDATA[450]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_placement]]></wp:meta_key>
		<wp:meta_value><![CDATA[top]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-advanced-destination-form-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[587]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>238</wp:comment_id>
			<wp:comment_author><![CDATA[Tamir Evan]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[tamirevan@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[141.226.122.108]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-11-04 12:59:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-11-04 17:59:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Re: the 3d game demo:
I think he is referring to the "Networked gaming in Rust" tutorial ( https://www.oreilly.com/library/view/oscon-2017-/9781491976227/ ), from OSCON 2017.
There is video, in three parts ( https://www.safaribooksonline.com/library/view/oscon-2017-/9781491976227/video306749.html , https://www.safaribooksonline.com/library/view/oscon-2017-/9781491976227/video309384.html , and https://www.safaribooksonline.com/library/view/oscon-2017-/9781491976227/video309383.html ), for Safari subscribers.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1541354352.131078;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1541356917.9327431;s:5:"event";s:15:"status-approved";s:4:"user";s:4:"adam";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>239</wp:comment_id>
			<wp:comment_author><![CDATA[Adam Gordon Bell]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[adam@corecursive.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[2001:1970:5823:3a00:c29:f978:ccab:4003]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-11-04 13:42:41]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-11-04 18:42:41]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Awesome, Thanks Tamir!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>238</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1541356961.528358;s:5:"event";s:9:"check-ham";s:4:"user";s:4:"adam";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>Erlang And Distributed Systems with Steven Proctor</title>
		<link>https://corecursive.com/012-erlang-and-distributed-systems-with-steven-proctor/</link>
		<pubDate>Wed, 02 May 2018 04:00:00 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">http://5d78de07ea6953e8b635af2732a59be6</guid>
		<description></description>
		<content:encoded><![CDATA[Today's interview is with Steven Proctor, the host of the functional geekery podcast.  We talk about distributed programming in general and specifically how erlang supports distributed computing.  We also talk about things he's learned about functional programming and applying FP principles to various non FP contexts.

<a href="https://corecursive.com/012_erlang-and-distributed-systems-with-steven-proctor" target="_blank" rel="noopener noreferrer">Podcast Transcript</a>

"So there's, some management around that as well that allows me to essentially do my database migration on the fly because my database is just the state that the process holds and not an outside database." - Steven Proctor

<span style="font-weight: 400;">"If you're in a team where a bunch of people may or may not be familiar with the functional programming ideas, you start introducing immutability everywhere. That might be a harder push. As opposed to just saying, "Okay, well let's think about how we're changing the data."  - Steven Proctor</span>

<span style="font-weight: 400;">"Essentially Erlang was a language that they evolved and what sounds like a very agile way of sitting with the people who are actually going to be writing the software and building a tool for them that solves their problems. And so early on it became out of the necessity of the problems they were solving." - Steven Proctor</span>

<strong>Links:</strong>
<ul>
 	<li><a href="https://www.functionalgeekery.com/" target="_blank" rel="noopener noreferrer">Functional Geekery Podcast</a></li>
 	<li><a href="https://twitter.com/stevenproctor" target="_blank" rel="noopener noreferrer">@stevenproctor</a></li>
 	<li><a href="https://twitter.com/fngeekery">@fngeekery</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>539</wp:post_id>
		<wp:post_date><![CDATA[2018-05-02 00:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-05-02 04:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[012-erlang-and-distributed-systems-with-steven-proctor]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="actor-model"><![CDATA[Actor Model]]></category>
		<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="concurrency"><![CDATA[Concurrency]]></category>
		<category domain="post_tag" nicename="distributed-systems"><![CDATA[Distributed Systems]]></category>
		<category domain="post_tag" nicename="erlang"><![CDATA[Erlang]]></category>
		<category domain="post_tag" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[4290]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1641]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/012_-_Erlang.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[66:26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[51.6 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:10:{i:0;s:31:"00:48 -- Functional Programming";i:1;s:44:"09:32 -- Principles that Influence Languages";i:2;s:28:"11:21 -- Data Transformation";i:3;s:29:"16:39 -- Erlang as a Solution";i:4;s:51:"23:48 -- Distinction Between Function and Processes";i:5;s:27:"26:31 -- Process Boundaries";i:6;s:27:"34:03 -- Role of Supervisor";i:7;s:40:"40:35 -- Restart from a Known-Good State";i:8;s:25:"49:01 -- Learning Process";i:9;s:46:"57:42 -- Building Your Own Mechanical Keyboard";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Steven Proctor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Podcast Host and Erlang Enthusiast]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://www.proctor-it.com/">Proctors Homepage</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-itunes]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_thumbnail]]></wp:meta_key>
		<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_theme]]></wp:meta_key>
		<wp:meta_value><![CDATA[standard]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_width]]></wp:meta_key>
		<wp:meta_value><![CDATA[450]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_placement]]></wp:meta_key>
		<wp:meta_value><![CDATA[top]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-advanced-destination-form-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[585]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Graphql And Sangria With Oleg Ilyenko</title>
		<link>https://corecursive.com/011-graphql-and-sangria-with-oleg-ilyenko/</link>
		<pubDate>Wed, 18 Apr 2018 16:00:00 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">http://9790267da2e1abb446fc2d5ca3a0b40b</guid>
		<description></description>
		<content:encoded><![CDATA[Oleg Illyenko is primary creator of Sangria, a graphql implementation used by twitter, The New Yorks Times and many other companies.  We discuss the problems that graphql solves, how sangria works and the problems of api design.

Show Notes:

<a href="https://github.com/sangria-graphql">Sangria</a>

<a href="https://graphql.org/learn/">Graphql</a>

Contact Oleg:
<ul>
 	<li><a href="https://twitter.com/easyangel" target="_blank" rel="noopener">twitter</a></li>
 	<li><a href="https://medium.com/@oleg.ilyenko" target="_blank" rel="noopener">medium</a></li>
</ul>
Talks on Sangria:
<ul>
 	<li><a href="https://www.youtube.com/watch?v=K779SIVNLNg" target="_blank" rel="noopener">youtube</a></li>
 	<li><a href="https://olegilyenko.github.io/presentation-graphql-type-system-scaladays/#/9"> slides</a></li>
</ul>
<ul>
 	<li>Sangria videos
<ul>
 	<li><a title="https://www.youtube.com/watch?v=3l--XM6j-1w" href="https://www.youtube.com/watch?v=3l--XM6j-1w">https://www.youtube.com/watch?v=3l--XM6j-1w</a></li>
 	<li><a title="https://www.youtube.com/watch?v=JC-UJwBKc2Y" href="https://www.youtube.com/watch?v=JC-UJwBKc2Y">https://www.youtube.com/watch?v=JC-UJwBKc2Y</a></li>
 	<li><a href="https://skillsmatter.com/skillscasts/9134-beyond-rest-graphql-and-sangria"> https://skillsmatter.com/skillscasts/9134-beyond-rest-graphql-and-sangria</a></li>
</ul>
</li>
</ul>
Graphql
<ul>
 	<li><a title="https://graphql.org/swapi-graphql/" href="https://graphql.org/swapi-graphql/">https://graphql.org/swapi-graphql/</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>540</wp:post_id>
		<wp:post_date><![CDATA[2018-04-18 12:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-04-18 16:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[011-graphql-and-sangria-with-oleg-ilyenko]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="api-design"><![CDATA[API Design]]></category>
		<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="graphql"><![CDATA[GraphQL]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="rest"><![CDATA[REST]]></category>
		<category domain="post_tag" nicename="sangria"><![CDATA[Sangria]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[4176]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[619]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://dts.podtrac.com/redirect.mp3/traffic.libsyn.com/secure/corecursive/011-graphql.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[55:35]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[46.7 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Oleg Ilyenko]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Developer And Sangria Creator]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/easyangel">@easyangel</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[583]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-itunes]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_thumbnail]]></wp:meta_key>
		<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_theme]]></wp:meta_key>
		<wp:meta_value><![CDATA[standard]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_width]]></wp:meta_key>
		<wp:meta_value><![CDATA[450]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_placement]]></wp:meta_key>
		<wp:meta_value><![CDATA[top]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-advanced-destination-form-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Purescript And Avocados with Justin Woo</title>
		<link>https://corecursive.com/010-purescript-and-avocados-with-justin-woo/</link>
		<pubDate>Wed, 04 Apr 2018 04:00:00 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">http://63046b0fb006a6e17ddc0ef1c0f91ba2</guid>
		<description></description>
		<content:encoded><![CDATA[Purescript is a functional programming language that compiles to javascript.  It is a strict haskell dialect that can run anywhere that javascript does.

Justin Woo is a self described Purescript evangelist and enthusiast. We talk about purescript vs elm and working with expressive type systems.  Justin also had some great metaphors about phantom types and masking tape as well as avacados and testing.

Contact Justin:
<ul>
 	<li><a href="https://twitter.com/jusrin00" target="_blank" rel="noopener noreferrer">twitter</a></li>
 	<li><a href="https://github.com/justinwoo" target="_blank" rel="noopener noreferrer">github</a></li>
 	<li><a href="https://justinwoo.github.io/" target="_blank" rel="noopener noreferrer">website</a></li>
</ul>
Show notes:
<ul>
 	<li><a href="http://www.purescript.org/" target="_blank" rel="noopener noreferrer">Purescript</a></li>
 	<li><a href="egghead.io">purescript training videos</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>541</wp:post_id>
		<wp:post_date><![CDATA[2018-04-04 00:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-04-04 04:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[010-purescript-and-avocados-with-justin-woo]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="haskell"><![CDATA[Haskell]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="post_tag" nicename="phantom-types"><![CDATA[Phantom Types]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="purescript"><![CDATA[Purescript]]></category>
		<category domain="post_tag" nicename="row-types"><![CDATA[Row Types]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[4341]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[580]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/010-purescript.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[51:06]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[42.9 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Justin Woo]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Pure Script Enthusiast]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/jusrin00">@jusrin00</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-itunes]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_thumbnail]]></wp:meta_key>
		<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_theme]]></wp:meta_key>
		<wp:meta_value><![CDATA[standard]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_width]]></wp:meta_key>
		<wp:meta_value><![CDATA[450]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_placement]]></wp:meta_key>
		<wp:meta_value><![CDATA[top]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-advanced-destination-form-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[580]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Throw Away the Irrelevant with John A De Goes</title>
		<link>https://corecursive.com/009-throw-away-the-irrelevant-with-john-a-de-goes/</link>
		<pubDate>Wed, 21 Mar 2018 04:00:00 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">http://d883fe4f0af3106e11d70e3dfeab3945</guid>
		<description></description>
		<content:encoded><![CDATA[John De Goes and I talk flame wars, monad transformer performance, IO monad flavours, and reasoning about polymorphic type signatures.  On the lighter side, we discuss how to write technical articles well and Zee vs Zed pronunciation.

Show Notes:
<ul>
 	<li>John's <a href="http://degoes.net/">Website</a> and <a href="https://twitter.com/jdegoes">Twitter</a></li>
 	<li><a href="http://degoes.net/articles/insufficiently-polymorphic" target="_blank" rel="noopener noreferrer">Descriptive Variable Names: A Code Smell</a></li>
 	<li><a href="http://degoes.net/articles/kill-data" target="_blank" rel="noopener noreferrer">Data Structures Are Antithetical to Functional Programming</a></li>
 	<li><a href="http://degoes.net/articles/modern-fp" target="_blank" rel="noopener noreferrer">A Modern Architecture for FP</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>542</wp:post_id>
		<wp:post_date><![CDATA[2018-03-21 00:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-03-21 04:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[009-throw-away-the-irrelevant-with-john-a-de-goes]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="cats"><![CDATA[Cats]]></category>
		<category domain="post_tag" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="post_tag" nicename="io"><![CDATA[IO]]></category>
		<category domain="post_tag" nicename="monad-transformers"><![CDATA[Monad Transformers]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="post_tag" nicename="scalaz"><![CDATA[Scalaz]]></category>
		<category domain="post_tag" nicename="type-classes"><![CDATA[Type Classes]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[5859]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/009-de-goes.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[68:24]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[57.4 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[John De Goes]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Entrepreneur, functional programmer, OSS contributor, speaker, author.]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/jdegoes">@jdegoes</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[596]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-itunes]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_thumbnail]]></wp:meta_key>
		<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_theme]]></wp:meta_key>
		<wp:meta_value><![CDATA[standard]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_width]]></wp:meta_key>
		<wp:meta_value><![CDATA[450]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_placement]]></wp:meta_key>
		<wp:meta_value><![CDATA[top]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-advanced-destination-form-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[577]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Generic Programming and Shapeless with Miles Sabin</title>
		<link>https://corecursive.com/008-generic-programming-and-shapeless-with-miles-sabin/</link>
		<pubDate>Wed, 07 Mar 2018 19:00:00 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">http://ee8f9d630e4c4cc805b6d49cd554aae1</guid>
		<description></description>
		<content:encoded><![CDATA[When Miles Sabin applied to speak at a conference on generic programming, he bluffed a little bit.  He would present on porting Simon Peytons Jone’s scrap your boilerplate functionality to Scala. Once his talk was accepted, he only had one thing left to do, implement it.

Generic programming is the type of polymorphism your language does not directly support.  To me this seems paradoxical, as once you implement a solution, the language, or at least a library within the language can now support it.  This recursive definition and a speaking deadline led Miles to create shapeless. Years later he is still pushing the bounds on what you can do in Scala, including recently getting support for literal types added to scalac 2.13.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>543</wp:post_id>
		<wp:post_date><![CDATA[2018-03-07 14:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-03-07 19:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[008-generic-programming-and-shapeless-with-miles-sabin]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="dependent-types"><![CDATA[Dependent Types]]></category>
		<category domain="post_tag" nicename="generic-programming"><![CDATA[Generic Programming]]></category>
		<category domain="post_tag" nicename="hlist"><![CDATA[HList]]></category>
		<category domain="post_tag" nicename="idris"><![CDATA[Idris]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="post_tag" nicename="scrap-your-boiler-plate"><![CDATA[Scrap Your Boiler Plate]]></category>
		<category domain="post_tag" nicename="shapeless"><![CDATA[Shapeless]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[4489]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[575]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/008-shapeless.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[60:38]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[43.6 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Miles Sabin]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Shapeless Creator and Scala Compiler Hacker]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/milessabin">@milessabin</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-itunes]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_thumbnail]]></wp:meta_key>
		<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_theme]]></wp:meta_key>
		<wp:meta_value><![CDATA[standard]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_width]]></wp:meta_key>
		<wp:meta_value><![CDATA[450]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_placement]]></wp:meta_key>
		<wp:meta_value><![CDATA[top]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-advanced-destination-form-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[576]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Total Programming Using Swift with Andre Videla</title>
		<link>https://corecursive.com/007-total-programming-using-swift-with-andre-videla/</link>
		<pubDate>Mon, 12 Feb 2018 05:00:00 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">http://703947d77d3227df570a661a68a2a88d</guid>
		<description></description>
		<content:encoded><![CDATA[<p>In simple terms, a total function is a function that produces a well defined output for all possible inputs.  A total program is a program composed of only total functions.  </p> <p>A non-total, or partial function, would be a function that can fail given certain inputs.  Such as taking the head of a list, which can fail if giving an empty list and is therefore non-total.</p> <p>Total programming can be done in any language, however many languages make this easier.  Some, going so far as to require proof of totality.</p> <p>In this interview Andre Videla discusses how the swift program language encourages programming in a total style.  He also discusses his love of Idris, proof assistants and how his research into haskell, idris and dependant types have made him a better swift programmer.</p> <p> </p> <p>Links:</p> <p><a href= "https://medium.com/@andre_videla/total-programming-in-swift-526508c12a74" target="_blank" rel="noopener noreferrer">Total Programming In Swift</a></p> <p> </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>544</wp:post_id>
		<wp:post_date><![CDATA[2018-02-12 00:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-02-12 05:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[007-total-programming-using-swift-with-andre-videla]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="idris"><![CDATA[Idris]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="swift"><![CDATA[Swift]]></category>
		<category domain="post_tag" nicename="totality"><![CDATA[Totality]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[4027]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[574]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/007-swift.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[53:56]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[45.3 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Andre Videla]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Swift Developer and Formal Verification Enthusiast ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/andre_videla">@andre_videla</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-itunes]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_thumbnail]]></wp:meta_key>
		<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_theme]]></wp:meta_key>
		<wp:meta_value><![CDATA[standard]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_width]]></wp:meta_key>
		<wp:meta_value><![CDATA[450]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_placement]]></wp:meta_key>
		<wp:meta_value><![CDATA[top]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-advanced-destination-form-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[574]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>935</wp:comment_id>
			<wp:comment_author><![CDATA[Episode 375: Gabriel Gonzalez on Configuration : Software Engineering Radio]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://www.se-radio.net/2019/08/episode-375-gabriel-gonzalez-on-configuration/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[162.158.142.63]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-08-07 13:40:10]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-08-07 17:40:10]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] https://corecursive.com/007-total-programming-using-swift-with-andre-videla/ &#8211; Total Programming Using Swift [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1565199610.698103;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1565314027.941596;s:5:"event";s:15:"status-approved";s:4:"user";s:4:"adam";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>Type Driven Development and Idris With Edwin Brady</title>
		<link>https://corecursive.com/006-type-driven-development-and-idris-with-edwin-brady/</link>
		<pubDate>Mon, 29 Jan 2018 05:00:00 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">http://6624999330ba52928013b4c92029582f</guid>
		<description></description>
		<content:encoded><![CDATA[Edwin Brady is the creator of the Idris programming language and Author of the book Type-Driven Development with Idris and a computer science lecturer.  The book, the language and Edwin himself all seem to be chock full of ideas for improving the way computer programming is done, by applying ideas from programming language theory.

In this interview, we discuss dependent types, type holes, interactive and type-driven development, theorem provers, Curry–Howard correspondence, dependant haskell, total functional programming, British vs American spelling and much more.

Links:
<ul>
 	<li><a href="https://www.manning.com/books/type-driven-development-with-idris">The Book</a></li>
 	<li><a href="https://www.youtube.com/watch?v=zSsCLnLS1hg&amp;list=PL0DsGHMPLUWUb4XCq9KGoQes-n4GuxtYH"> Idris Lectures at OPLSS</a></li>
 	<li><a href="https://www.idris-lang.org/">Idris Language Site</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>545</wp:post_id>
		<wp:post_date><![CDATA[2018-01-29 00:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-29 05:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[006-type-driven-development-and-idris-with-edwin-brady]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="author"><![CDATA[Author]]></category>
		<category domain="post_tag" nicename="dependent-types"><![CDATA[Dependent Types]]></category>
		<category domain="post_tag" nicename="idris"><![CDATA[Idris]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="proofs"><![CDATA[Proofs]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[8299]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[623]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/006_Idris.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[59:37]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[50.1 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:14:{i:0;s:22:"1:16 -- What is a type";i:1;s:26:"02:07 -- First Class Types";i:2;s:23:"03:52 -- What is Idris?";i:3;s:34:"05:28 -- What is a theorem prover?";i:4;s:24:"09:23 -- Pacman complete";i:5;s:27:"13:19 -- Totality in Idris ";i:6;s:36:"14:57 -- Language Strangeness Budget";i:7;s:32:"18:05 -- Dependently Typed Java?";i:8;s:13:"21:39 -- Rust";i:9;s:35:"22:32 -- Dependent Haskell vs Idris";i:10;s:28:"27:21 -- Interactive Editing";i:11;s:32:"34:40 -- Type Driven Development";i:12;s:27:"39:29 -- Expression Search ";i:13;s:22:"54:03 -- Quick Answers";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Edwin Brady]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Creator Of Idris Programming Lanaguage]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://www.manning.com/books/type-driven-development-with-idris">@edwinbrady</a><a href="https://twitter.com/edwinbrady">Book</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-itunes]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_thumbnail]]></wp:meta_key>
		<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_theme]]></wp:meta_key>
		<wp:meta_value><![CDATA[standard]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_width]]></wp:meta_key>
		<wp:meta_value><![CDATA[450]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_placement]]></wp:meta_key>
		<wp:meta_value><![CDATA[top]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-advanced-destination-form-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[573]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>1313</wp:comment_id>
			<wp:comment_author><![CDATA[Jason Pickens]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jasonpickensnz@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[2406:e002:5d03:1c01:19cc:dc20:42b5:719c]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-12-05 00:52:43]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-12-05 05:52:43]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Adam. Thanks a lot for doing these podcasts I really enjoy them. Great work getting amazing interviewees on the show. I hope you keep doing it. The software development community owes you big time!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1575525164.0074611;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>1416</wp:comment_id>
			<wp:comment_author><![CDATA[Adam Gordon Bell]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[adam@corecursive.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[184.144.70.246]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-01-15 20:13:34]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-01-16 01:13:34]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks Jason! It is a lot of fun]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>1313</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1579137214.7865691;s:5:"event";s:9:"check-ham";s:4:"user";s:4:"adam";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>2000</wp:comment_id>
			<wp:comment_author><![CDATA[waterfallmagazine.com]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[reinaldocason@zoho.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://waterfallmagazine.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[185.223.234.182]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-06-23 07:44:58]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-06-23 11:44:58]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[https://waterfallmagazine.com 
Write more, thats all I have to say. Literally, it seems as though you 
relied on the video to make your point. You clearly know what youre talking about, why throw away your intelligence on just posting videos to your 
blog when you could be giving us something informative to read?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1592912698.4572811;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>Algebraic Domain Modelling using Functions With Debashish Ghosh</title>
		<link>https://corecursive.com/005-algebraic-domain-modelling-using-functions-with-debashish-ghosh/</link>
		<pubDate>Mon, 22 Jan 2018 06:00:00 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">http://2c8abbeb476b833b982701846567d375</guid>
		<description></description>
		<content:encoded><![CDATA[In object oriented languages, modeling a complex problem domain is a well understood process.  Books like Domain Driven Design contain techniques for breaking down a problem domain and earlier books like the gang of four book catalogue design patterns for modeling these domains in an object oriented way.

In today’s interview Debashish Ghosh explains how to model a complex problem domain in a functional paradigm.  His solution focuses on modelling the behaviour of the software system rather than nouns it will contain.  He also focuses on an algebraic approach to api design and discusses how abstract algebra provides tools for building better software.

<a href="https://corecursive.com/005-algebraic-domain-modeling-using-functions-with-debashish-ghosh/" target="_blank" rel="noopener noreferrer">Podcast Transcript</a>

<span style="font-weight: 400;">“I first come up with what I call the algebra of the behaviors. The algebra of the behaviors refers to the basic contract, which the behavior is supposed to support, which the behavior is supposed to honor. So that's the algebra.” -Debashish Ghosh</span>

<strong>Links:</strong>

<a href="https://www.manning.com/books/functional-and-reactive-domain-modeling" target="_blank" rel="noopener noreferrer">Debashish's Book</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>546</wp:post_id>
		<wp:post_date><![CDATA[2018-01-22 01:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-22 06:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[005-algebraic-domain-modelling-using-functions-with-debashish-ghosh]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="author"><![CDATA[Author]]></category>
		<category domain="post_tag" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[5406]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1623]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/005_FP_Domain_Model.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[58:56]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[84.8 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:15:{i:0;s:33:"01:26 -- What is domain modeling?";i:1;s:55:"08:00 -- Taking the Functional Expression Oriented Path";i:2;s:28:"11:51 -- Defining an Algebra";i:3;s:26:"13:07 -- What is a Monoid?";i:4;s:43:"16:12 -- Patterns of Functional Programming";i:5;s:37:"18:04 -- Three Core Things of Algebra";i:6;s:36:"19:55 -- Laws are the Business Rules";i:7;s:48:"26:23 -- Developing the Advantage of Abstraction";i:8;s:19:"27:35 -- Free Monad";i:9;s:35:"34:09 -- Monad Dependency Injection";i:10;s:45:"37:07 -- Multiple Monads Through Transformers";i:11;s:47:"39:33 -- The Monadic Comprehension and Sequence";i:12;s:22:"45:27 -- Phantom Types";i:13;s:27:"50: 28 -- Smart Constructor";i:14;s:32:"57:47 -- Fast Data as a Platform";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Debashish Ghosh]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Author Of Functional & Reactive Domain Modeling]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/debasishg">@debasishg</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-itunes]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_thumbnail]]></wp:meta_key>
		<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_theme]]></wp:meta_key>
		<wp:meta_value><![CDATA[standard]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_width]]></wp:meta_key>
		<wp:meta_value><![CDATA[450]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_placement]]></wp:meta_key>
		<wp:meta_value><![CDATA[top]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-advanced-destination-form-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_935811e117230e0de925dc61cfe81a64]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[572]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Design Principles From Functional Programming with Runar Bjarnason</title>
		<link>https://corecursive.com/004-design-principles-from-functional-programming-with-runar-bjarnason/</link>
		<pubDate>Wed, 10 Jan 2018 10:00:00 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">http://a23739902badaa75060e8619cfce5343</guid>
		<description></description>
		<content:encoded><![CDATA[Runar Bjarnason has been exploring how writing in a functional style increases modularity and compositionality of software for many years. He is co-author of functional programming in scala, a book that teaches these principles in scala. It is a very challenging yet very rewarding book, sometimes referred to as simple ‘the red book’.

In this interview Runar explains how writing in a functional style involves limiting side effects, avoiding exceptions and using higher order abstractions.  Writing in this style places constraints on what a module in a software system may do, but by constraining modules in this way, the software modules themselves become endlessly composable.

Enjoy

Show Notes:

<a href="https://www.manning.com/books/functional-programming-in-scala"> Functional Programming In Scala</a>

<a href="https://www.youtube.com/watch?v=GqmsQeSzMdw">Constraints Liberate</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>547</wp:post_id>
		<wp:post_date><![CDATA[2018-01-10 05:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-10 10:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[004-design-principles-from-functional-programming-with-runar-bjarnason]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="author"><![CDATA[Author]]></category>
		<category domain="post_tag" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[5961]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[571]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/004_Functional_Programming.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[51:12]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[43 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:29:"38:17 -- Constraints Liberate";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Runar Bjarnason]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Fp In Scala Author]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/runarorama">@runarorama</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-itunes]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_thumbnail]]></wp:meta_key>
		<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_theme]]></wp:meta_key>
		<wp:meta_value><![CDATA[standard]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_width]]></wp:meta_key>
		<wp:meta_value><![CDATA[450]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_placement]]></wp:meta_key>
		<wp:meta_value><![CDATA[top]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-advanced-destination-form-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[571]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Scala at Duolingo with Andre Kenji Horie</title>
		<link>https://corecursive.com/003-scala-at-duolingo-with-andre-kenji-horie-1/</link>
		<pubDate>Sun, 07 Jan 2018 22:08:09 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">http://435f257ecbb98a964417ad7692be0dd9</guid>
		<description></description>
		<content:encoded><![CDATA[Doulingo is a language learning platform with over 200 million users.  On a daily basis millions of users receive customized language lessons targeted specifically to them.  These lessons are generated by a system called the session generator.

In this episode, Andre talks about the reasons for the rewrite, what drove them to move to scala and the experience of moving from one technology stack to another.

<a href="https://corecursive.com/003-scala-at-duolingo-with-andre-kenji-horie/" target="_blank" rel="noopener noreferrer">Podcast Transcript</a>

“So I was actually more fascinated that Scala is like a modern language. It has so many nice things that we don't have in Python and Java that kind of outweighs the pain points. “ - <span style="font-weight: 400;">Andre Kenji </span><span style="font-weight: 400;">Horie </span>

“I mean, it's that sort of thing that after working with a Python a lot of time you just become so used to that, that whenever you have something nice, you're like, “Oh, that's nice.” - <span style="font-weight: 400;">Andre Kenji </span><span style="font-weight: 400;">Horie </span>

<span style="font-weight: 400;">“There are caveats, it's slower to write a piece of code, but then the amount of effort you have to maintain that code in your test code is a lot lower in Scala, so for me, in the long run, Scala is just a faster language than Python.” - Andre Kenji </span><span style="font-weight: 400;">Horie </span>

<strong>Links:</strong>

<a href="http://making.duolingo.com/rewriting-duolingos-engine-in-scala"> Rewriting Doulingo's Engine in Scala</a>

<a href="https://www.duolingo.com/jobs">Jobs at DouLingo</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>548</wp:post_id>
		<wp:post_date><![CDATA[2018-01-07 17:08:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-07 22:08:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[003-scala-at-duolingo-with-andre-kenji-horie-1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="case-study"><![CDATA[Case Study]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="post_tag" nicename="software-rewrite"><![CDATA[Software Rewrite]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[3527]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[570]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/003_Scala_At_Doulingo.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[53:17]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[44.7 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:11:{i:0;s:44:"01:18 -- Duolingo as a Language Learning App";i:1;s:47:"04:45 -- System Redesign with Session Generator";i:2;s:40:"09:04 -- Move Fast, Ship Quickly Mindset";i:3;s:19:"13:02 -- Unit Tests";i:4;s:47:"17:06 -- The Method of Referential Transparency";i:5;s:40:"24:34 -- Transforming vs Mutating Inputs";i:6;s:36:"31:44 -- The Verbosity of a Language";i:7;s:39:"36:56 -- Pain Points of Moving to Scala";i:8;s:31:"44:25 -- Scala and Savings Cost";i:9;s:44:"48:10 -- The Business Benefit of the Rewrite";i:10;s:38:"51:12 -- Language Learning Perspective";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Andre Kenji Horie]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Senior Engineer at Doulingo]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/andrekhorie">@andrewkhorie</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-itunes]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_thumbnail]]></wp:meta_key>
		<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_theme]]></wp:meta_key>
		<wp:meta_value><![CDATA[standard]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_width]]></wp:meta_key>
		<wp:meta_value><![CDATA[450]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_placement]]></wp:meta_key>
		<wp:meta_value><![CDATA[top]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-advanced-destination-form-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[003-scala-at-duolingo-with-andre-kenji-horie]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[570]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Incident Response with Emil Stolarsky</title>
		<link>https://corecursive.com/002-incident-response-with-emil-stolarsky-p/</link>
		<pubDate>Fri, 05 Jan 2018 10:00:00 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">http://d86d555eab12b2a4968c9f099dd58bfe</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>Preparedness and Enabling Accurate and Quick Incident Responses</h4>
As a system becomes more complex, the chance of failure increases. At a large enough scale, failures are inevitable. Incident response is the practice of preparing for and effectively recovering from these failures.

In this interview Emil argues that we need to move beyond tribal knowledge and incorporate practices such as an incident command system and rigorous use of checklists. Emil suggests that we need to move beyond a mindset of “move fast and break things” and toward a place of more deliberate preparation.

<a href="https://corecursive.com/002-incident-response-with-emil-stolarsky/" target="_blank" rel="noopener noreferrer">Podcast Transcript</a>

<span style="font-weight: 400;">“But the reality it turns out is that humans, while we might be good at solving these complex problems, we'll often forget the basics, or we'll often forget something that's easily overlooked, but it's really important to the recovery.” - </span><span style="font-weight: 400;">Emil </span><span style="font-weight: 400;">Stolarsky</span>

<span style="font-weight: 400;">“The only way we can fight those biases and do an effective analysis of what went wrong is by having other people point them out.” - </span><span style="font-weight: 400;">Emil </span><span style="font-weight: 400;">Stolarsky</span>

<span style="font-weight: 400;">“Because postmortems retrospectives are super valuable. You don't want to repeat the same mistake.” - </span><span style="font-weight: 400;">Emil </span><span style="font-weight: 400;">Stolarsky</span>

<strong>Links:</strong>

<a href="https://www.youtube.com/watch?v=ODYO2MPymJ4" target="_blank" rel="noopener noreferrer">Strange Loop</a>

<a href="https://incidentlabs.io/book/" target="_blank" rel="noopener noreferrer">SRE Handbook</a>

<a href="https://www.oreilly.com/ideas/the-power-of-scriptable-load-balancers">The Power of Scriptable Load Balancers</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>549</wp:post_id>
		<wp:post_date><![CDATA[2018-01-05 05:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-05 10:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[002-incident-response-with-emil-stolarsky-p]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="devops"><![CDATA[DevOps]]></category>
		<category domain="post_tag" nicename="incident-response"><![CDATA[Incident Response]]></category>
		<category domain="post_tag" nicename="ops"><![CDATA[Ops]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="sre"><![CDATA[SRE]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[3405]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1543]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/002-Incident_Response.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[51:26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[43.2 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:11:{i:0;s:46:"01:14 -- Four Components of Emergency Response";i:1;s:43:"11:49 -- Preparedness in Emergency Response";i:2;s:31:"17:18 -- The Power of Checklist";i:3;s:47:"22:44 -- Why Lock Deploys when Incident Happens";i:4;s:33:"23:42 -- Crew Resource Management";i:5;s:47:"28:35 -- Forcing an Acknowledgement is Powerful";i:6;s:28:"32:35 -- Root Cause Analysis";i:7;s:40:"38:16 -- Methods in Eliminating Biases ";i:8;s:40:"40:29 -- Capitalizing on Lessons Learned";i:9;s:30:"45:04 -- SRE's Role in Shopify";i:10;s:41:"48:55 -- Move Fast and Break Things Model";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Emil Stolarsky]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Production engineer at Shopify]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/emilstolarsky">@emilstolarsky</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-itunes]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_thumbnail]]></wp:meta_key>
		<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_theme]]></wp:meta_key>
		<wp:meta_value><![CDATA[standard]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_width]]></wp:meta_key>
		<wp:meta_value><![CDATA[450]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_placement]]></wp:meta_key>
		<wp:meta_value><![CDATA[top]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-advanced-destination-form-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_55cf525b7e184e81cde5d20b1bd9e185]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[002-incident-response-with-emil-stolarsky]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[569]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Scala Native with Denys Shabalin</title>
		<link>https://corecursive.com/001-scala-native-with-denys-shabalin/</link>
		<pubDate>Mon, 01 Jan 2018 10:00:00 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">http://788ba55388b3d14b6da18200d2529dfc</guid>
		<description></description>
		<content:encoded><![CDATA[Scala is a functional and object oriented programming language built on the JVM. Scala Native takes this language, loved by many, and brings it to bare metal. Scala Native is an optimizing ahead-of-time compiler and lightweight managed runtime designed specifically for Scala.

Denys Shabalin is a Research Assistant at the EPFL and the primary creator of Scala Native. In this episode, I interview Denys about the motivations behind the Scala Native project, how it was implemented and future directions. He also briefly touches on how Scala Native made cold compilation times of Scala code twice as fast. If you are interested in functional programming, compiler design, or want to learn some interesting tidbits about garbage collector design and trade offs you will like this episode.

<a href="https://corecursive.com/scala-native-with-denys-shabalin-transcript/" target="_blank" rel="noopener noreferrer">Podcast Transcript</a>

"So the core Scala is really as close as we can make it, and be as same as in JVM" - Denys Shabalin

"But if you have native, we don’t really have to have this problem because the very first run is already optimized, so you can already run optimize code immediately." - Denys Shabalin

"Backend microservice kind of app. This is kind of the area of which we see Scala being used more in the future." - Denys Shabalin
<ul>
 	<li><a href="http://www.scala-native.org/">Scala Native</a></li>
 	<li><a href="https://www.youtube.com/watch?v=ArWWlwQl37A">Scala Goes Native Talk</a></li>
 	<li><a href="https://www.spantree.net/blog/2017/08/29/bootstrapping-web-scala-native.html"> Bootstrapping the Web with Scala Native</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>550</wp:post_id>
		<wp:post_date><![CDATA[2018-01-01 05:00:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-01 10:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[001-scala-native-with-denys-shabalin]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="garbage-collection"><![CDATA[Garbage Collection]]></category>
		<category domain="post_tag" nicename="memory-management"><![CDATA[Memory Management]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="post_tag" nicename="scala-native"><![CDATA[Scala Native]]></category>
		<category domain="post_tag" nicename="systems-programming"><![CDATA[Systems Programming]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[4066]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1525]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/001_scala_native.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[48:17]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[40 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:13:{i:0;s:17:"01:06 -- Overview";i:1;s:29:"02:13 -- What is Scala Native";i:2;s:28:"04:21 -- JVM vs Scala Native";i:3;s:23:"05:40 -- The JVM Warmup";i:4;s:39:"07:44 -- The Concept of the Golden Cage";i:5;s:68:"12:04 -- Compilation Steps from Scala Source to a Native Application";i:6;s:53:"16:18 -- Strategies for Performing Garbage Collection";i:7;s:32:"24:36 -- Scala Language Features";i:8;s:35:"29:03 -- The Scala Standard Library";i:9;s:45:"33:03 -- Satisfying all the Java Dependencies";i:10;s:43:"38:24 -- What Platforms Scala Native Run On";i:11;s:31:"41:50 -- Major Scala Influences";i:12;s:48:"45:03 -- Up and Coming Features for Scala Native";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Denys Shabalin]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Research Assistant at the EPFL]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/den_sh">@den_sh</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-itunes]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_thumbnail]]></wp:meta_key>
		<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_theme]]></wp:meta_key>
		<wp:meta_value><![CDATA[standard]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_width]]></wp:meta_key>
		<wp:meta_value><![CDATA[450]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_placement]]></wp:meta_key>
		<wp:meta_value><![CDATA[top]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-advanced-destination-form-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[567]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Moves and Borrowing In Rust With Jim Blandy</title>
		<link>https://corecursive.com/016-moves-and-borrowing-in-rust-with-jim-blandy/</link>
		<pubDate>Tue, 03 Jul 2018 05:01:46 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=628</guid>
		<description></description>
		<content:encoded><![CDATA[The surprising thing about rust is how memory management works.  Rust has the concepts of moves and borrowing.  If you have heard about Rust, you may have heard people talking about the borrow checker and trying to make it happy. In this interview, Jim Blandy walks us through what these concepts mean and how they work.  We also talk about how to avoid fighting with the borrow checker at all and why the conceptual model that Rust adopts, though it may seem unusual at first, is actually more representative of how computers work and therefore an easier programming model.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>628</wp:post_id>
		<wp:post_date><![CDATA[2018-07-03 01:01:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-03 05:01:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[016-moves-and-borrowing-in-rust-with-jim-blandy]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="borrow-checker"><![CDATA[Borrow Checker]]></category>
		<category domain="post_tag" nicename="jim-blandy"><![CDATA[jim blandy]]></category>
		<category domain="post_tag" nicename="linear-types"><![CDATA[Linear Types]]></category>
		<category domain="post_tag" nicename="memory-management"><![CDATA[Memory Management]]></category>
		<category domain="post_tag" nicename="nulls"><![CDATA[Nulls]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="rust"><![CDATA[Rust]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[620]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-itunes]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_thumbnail]]></wp:meta_key>
		<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_theme]]></wp:meta_key>
		<wp:meta_value><![CDATA[standard]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_width]]></wp:meta_key>
		<wp:meta_value><![CDATA[450]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_placement]]></wp:meta_key>
		<wp:meta_value><![CDATA[top]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-advanced-destination-form-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:16:{i:0;s:14:"00:16 -- Intro";i:1;s:42:"02:39 -- Rust's memory management strategy";i:2;s:21:" 13:10 -- Vector Move";i:3;s:25:"17:02 -- Movement Example";i:4;s:32:"25:16 -- Linear and Affine Types";i:5;s:27:"29:47 -- Assignment in Rust";i:6;s:30:"32:36 -- Uninitialized Values ";i:7;s:33:"34:10 -- Rust as a sound language";i:8;s:27:"35:30 -- Nulls are not good";i:9;s:19:"41:14 -- Copy Types";i:10;s:19:"46:20 -- References";i:11;s:37:"52:23 -- Implicit Lifetime Parameters";i:12;s:27:"55:40 -- Explicit Lifetimes";i:13;s:26:"56:39 -- Varying Lifetimes";i:14;s:43:"59:44 -- On not fighting the borrow checker";i:15;s:26:"62:12 -- On being explicit";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Jim Blandy]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Author of Programming Rust]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/jimblandy">@jimblandy</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[11806]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/corecursive/corecursive016.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[64:00]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[52.0 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-episode-number]]></wp:meta_key>
		<wp:meta_value><![CDATA[016]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[587]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>21</wp:comment_id>
			<wp:comment_author><![CDATA[Programming Rust, part deux &#8211; Oylenshpeegul]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://oylenshpeegul.wordpress.com/2018/07/05/programming-rust-part-deux/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[192.0.100.150]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-07-05 18:08:29]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-07-05 22:08:29]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] months ago, I mentioned the CoRecursive podcast with Jim Blandy. Well, I just finished listening to part two and it was terrific! Like Bell, I am still reading the book and it&#8217;s nice to hear from an [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
							</wp:comment>
					</item>
					<item>
		<title>Http4s With Ross Baker</title>
		<link>https://corecursive.com/017-http4s-with-ross-baker/</link>
		<pubDate>Fri, 27 Jul 2018 04:00:30 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=670</guid>
		<description></description>
		<content:encoded><![CDATA[The promise of functional programming is code that is easier to reason about, test and maintain. Referential transparency means there is no extra context to worry about, we can just focus on inputs and outputs. Examples of functional programming in the small are plentiful. Fibonacci is easy to write as a function but what about fp in the large?

Http4s is a web framework written in scala that takes a pure functional approach to building http services. Ross Baker is a contributor to http4s and he explains the benefits of this approach. We also touch on the benefits of working remotely, since he and I have both been doing it for some time.

Links:
<ul>
 	<li><a href="https://http4s.org/" target="_blank" rel="noopener noreferrer">Http4s</a></li>
 	<li><a href="https://www.youtube.com/watch?v=urdtmx4h5LE">Presentation on Http4s </a></li>
</ul>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>670</wp:post_id>
		<wp:post_date><![CDATA[2018-07-27 00:00:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-07-27 04:00:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[017-http4s-with-ross-baker]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="cats"><![CDATA[Cats]]></category>
		<category domain="post_tag" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="post_tag" nicename="http"><![CDATA[http]]></category>
		<category domain="post_tag" nicename="io"><![CDATA[IO]]></category>
		<category domain="post_tag" nicename="kleisli"><![CDATA[kleisli]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="remote-work"><![CDATA[remote work]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="post_tag" nicename="scalaz"><![CDATA[Scalaz]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-itunes]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_thumbnail]]></wp:meta_key>
		<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_theme]]></wp:meta_key>
		<wp:meta_value><![CDATA[standard]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_width]]></wp:meta_key>
		<wp:meta_value><![CDATA[450]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_placement]]></wp:meta_key>
		<wp:meta_value><![CDATA[top]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-advanced-destination-form-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:16:{i:0;s:23:"02:07 -- What is Http4s";i:1;s:22:"05:30 -- What is Blaze";i:2;s:31:"09:20 -- How does it embrace fp";i:3;s:42:"10:30 -- Has embracing FP been a challenge";i:4;s:46:"13:55 -- Frustrations of having many IO Monads";i:5;s:35:"14:56 -- HTTP requests as functions";i:6;s:48:"19:12 -- 404s, combining services and middleware";i:7;s:29:"23:53 -- Learning FP concepts";i:8;s:27:"27:01 -- Learning Lazyiness";i:9;s:27:"31:29 -- On Scala's Futures";i:10;s:24:"32:26 -- Why not moniods";i:11;s:27:"35:45 -- Streaming requests";i:12;s:31:"39:52 -- When not to use http4s";i:13;s:32:"43:02 -- What is next for Http4s";i:14;s:22:"47:35 -- Library Churn";i:15;s:20:"48:45 -- Remote Work";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[673]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Ross Baker]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/rossabaker">@rossabaker</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[7423]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/corecursive/017_-_Http4s.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[50:59]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[52 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[672]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Domain Driven Design and Micro Services With Vaughn Vernon</title>
		<link>https://corecursive.com/018-micro-services-and-domain-driven-design-with-vaughn-vernon/</link>
		<pubDate>Fri, 17 Aug 2018 12:00:25 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=680</guid>
		<description></description>
		<content:encoded><![CDATA[Today I talk to Vaughn Vernon about how Domain Driven Design can help with designing micro services.  The guidelines that Vaughn has developed in his work on DDD can provide guidance for where service and consistency boundaries should be drawn.  We also talk about the platform he is developing for applying these DDD concepts using the actor model, <a href="https://vlingo.io">Vlingo</a>.

Also my group at <a href="https://tenable.com/">Tenable</a> is hiring for our web app scanning product.  We are looking for a talented developer and I think it is really a great place to work.  Security, Scaling, and Performance are some of the challenges that make this an interesting position where a great developer with functional programming skills could really excel.  <a href="http://app.jobvite.com/m?3cBP1kws">Apply here</a> and or hit me up on twitter or email ( adam@corecursive.com ) for further details.

Show Notes:
<ul>
 	<li><a href="https://www.amazon.ca/Implementing-Domain-Driven-Design-Vaughn-Vernon/dp/0321834577">Implementing DDD Book</a></li>
 	<li><a href="https://vlingo.io/">Vlingo Platform</a></li>
 	<li><a href="https://github.com/vlingo">Vlingo Source</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>680</wp:post_id>
		<wp:post_date><![CDATA[2018-08-17 08:00:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-08-17 12:00:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[018-micro-services-and-domain-driven-design-with-vaughn-vernon]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="actor-model"><![CDATA[Actor Model]]></category>
		<category domain="post_tag" nicename="aggregate-root"><![CDATA[Aggregate Root]]></category>
		<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="author"><![CDATA[Author]]></category>
		<category domain="post_tag" nicename="bounded-context"><![CDATA[Bounded Context]]></category>
		<category domain="post_tag" nicename="domain-drive-design"><![CDATA[Domain Drive Design]]></category>
		<category domain="post_tag" nicename="micro-services"><![CDATA[Micro Services]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-itunes]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_thumbnail]]></wp:meta_key>
		<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_theme]]></wp:meta_key>
		<wp:meta_value><![CDATA[standard]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_width]]></wp:meta_key>
		<wp:meta_value><![CDATA[450]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_placement]]></wp:meta_key>
		<wp:meta_value><![CDATA[top]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-advanced-destination-form-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:12:{i:0;s:45:"2:16 -- How does DDD relate to Micro Services";i:1;s:60:"04:18 -- What is a Bounded Context as it relates to services";i:2;s:48:"08:45 -- Why split things at the Bounded Context";i:3;s:52:"12:39 -- How do services communicate with each other";i:4;s:29:"15:50 -- Scaling and Coupling";i:5;s:38:"19:55 -- Dbase / Fox pro / RBase Aside";i:6;s:21:"21:00 -- What is DDD?";i:7;s:50:"26:36 -- Aggregate Design And Eventual Consistency";i:8;s:34:"32:26 -- When to relax consistency";i:9;s:38:"34:00 -- Are micro services too small?";i:10;s:44:"38:27 -- We need new tools for microservices";i:11;s:25:"45:10 -- VLingo Platform ";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[5152]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/corecursive/018_-_DDDMS.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-episode-number]]></wp:meta_key>
		<wp:meta_value><![CDATA[018]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Vaughn Vernon]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Domain Model Whisperer.]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/VaughnVernon">@VaughnVernon</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[683]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[49:11]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[41.6 MB ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[682]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>19 episodes in what I&#039;ve learned</title>
		<link>https://corecursive.com/?p=719</link>
		<pubDate></pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=719</guid>
		<description></description>
		<content:encoded><![CDATA[First of all, I never really wanted to start a podcast.

I've been listening to podcasts for along time, but only a couple years ago did I discover software engineering daily.  When the show was on a topic I was interested in and the guest was well spoken it could be more interesting than heavy budget shows like TAL and RadioLab.  Check out X for instance.

The problem was there was things I was interested in that SEdaily didn't cover.  I suggested some topics via the slack channel and then eventually I reached out to Jeff a couple times to see if I could guest host. I think because he was in the midst of trying to start another company, he said sure.

Jeff taught me how to do the interviews, which was basically to have a structure in mind for the interview going in.  Basically Jeff does a lot of prep work for an interview and I try to follow his process.  I did three guest interviews for SEDaily, getting input along the way, before I got a little ahead of myself and had interviews setup without fully checking in with Jeff.  Interviews 3 thru 6 were actually pitched to the guests as SEDaily interviews, but because Jeff was running a Kubernetes month long theme and couldn't fit them in his schedule, I was forced to start my own podcast or cancel the interviews.  With that bit of presumption on my part, corecursive was borne.

Man, I'm glad I did.

&nbsp;

You can't stop me now.

------

As I transitioned from being an object oriented developer to using more functional programming concepts, I found there were so many new exciting concepts for me to learn.  I love to learn and

I started this podcast with the simple idea that there are a lot of smart people in
<ul>
 	<li>Types matter</li>
 	<li>Dependent types are the future, but not the present</li>
 	<li>Operations is getting harder</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>719</wp:post_id>
		<wp:post_date><![CDATA[2018-09-15 17:54:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="news"><![CDATA[News]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-itunes]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_thumbnail]]></wp:meta_key>
		<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_theme]]></wp:meta_key>
		<wp:meta_value><![CDATA[standard]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_width]]></wp:meta_key>
		<wp:meta_value><![CDATA[450]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_placement]]></wp:meta_key>
		<wp:meta_value><![CDATA[top]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-advanced-destination-form-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_860d27864bfc55294d32ff759dbcd4eb]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">If you missed out on my srecon talk (they sold out this year!) but want to hear more, check out this podcast.  Adam is an amazing interviewer and the conversation was super fun.  ? <a href="https://t.co/fGluhPCUx9">https://t.co/fGluhPCUx9</a></p>&mdash; Charity Majors (@mipsytipsy) <a href="https://twitter.com/mipsytipsy/status/1035525621689053190?ref_src=twsrc%5Etfw">August 31, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_860d27864bfc55294d32ff759dbcd4eb]]></wp:meta_key>
		<wp:meta_value><![CDATA[1537047798]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>The ontology of Monads</title>
		<link>https://corecursive.com/the-ontology-of-monads/</link>
		<pubDate>Sat, 17 Aug 2019 15:54:01 +0000</pubDate>
		<dc:creator><![CDATA[john]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1076</guid>
		<description></description>
		<content:encoded><![CDATA[We understand our overwhelmingly complex reality through abstraction and decomposition: we form neat, limited-scope mental models, and we arrange groups of mental models into more complex models. According to Bartosz Milewski, author of Category Theory for Programmers[link], Category Theory gives us an explicit way to reason about this process of decomposition and composition: "it's a very good description of how our minds work."

Programmers may find the ontological implications interesting. A Semigroup, for example becomes something like an ADD x86 instruction: it represents our minds' ability to take two distinct entities within a models and derive a third entity. Just like we can form a Semigroup with the set of integers and addition, we can form a Semigroup with the set of all sets of human and the operation "joined." My mental arithmetic when Jan and Bob Smith arriving at my dinner party has something in common with 3+4=7.

More interestingly, consider a category representing a mental model whose objects are also mental models. Imagination becomes an Endofunctor. I take my mental model of world leaders and their relationships, and imagine them as heads of different countries. Through the looking glass, the President of Vietnam becomes the President of South Korea, and the President of China becomes the President of the US. In a simplistic model in which personal relationships drive policy, I'm now exploring an alternate reality in which South Korean has a much cooler relationship with the US.

I tell stories with Monads, starting from our shared mental model of the world, proposing one imaginative change after another, each one evolving a vision of a hypothetical world.

If category theory makes our human instruction set explicit, does programming with it represent the ultimate level of abstraction (describing what we want done using the atoms of our own thought)? Is trying to represent our algorithims in terms of how humans operate ignoring their implementation on actual computers a misguided effort built on a leaky abstraction? Might there be formal systems for capturing expressing the structure of human thought that are more useful to programmers?

<iframe style="border: none" src="//html5-player.libsyn.com/embed/episode/id/10876695/height/90/theme/custom/thumbnail/yes/direction/backward/render-playlist/no/custom-color/87A93A/" height="90" width="100%" scrolling="no"  allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>

<strong>Bartosz thanks for joining me on the podcast. People who listen to this, they might hear different terms that come up over the course of episodes like functors and algebraic data types, applicatives, sum types, product types. Like where do these terms come from?</strong>

Oh, they come from category theory.

<strong>And what is category theory?</strong>

Yeah, category theory is a branch of mathematics. It's a very, very abstract branch of mathematics. And really surprisingly this extremely abstract branch of mathematics has applications in programming. Which is really a big surprise. I talked to some mathematicians and they were also surprised. When you are a mathematician and you want to study category theory, usually you first go through all other branches of mathematics. So you have to be like fluent in topology and Algebra and Analysis. You know, it's all these things because -- group theory -- because they use examples when they teach category theory they use examples that are familiar to mathematicians. So they use examples from every branch of mathematics because it's like a theory that abstracts over all other branches of mathematics.

<strong>So what does it have to do with programming?</strong>

Well, because programming really is mathematics. You know, whether we know this or accept this or not. It really is and it's all about structure. And mathematics is all about structure. I mean mathematics is just building structures from essentially from nothing. You know, you put some axioms and then you derive stuff from it and so on. But it all has tremendous structure, right? Everything is structured. There's this follows from that, you know this, you divide things, you categorize things, you say, you know, well we have things like groups. We have things like monoids. We have things like measures, topology, open sets and so on. So that you categorize things and you say like, you know, you have all kinds of sets but there are some special sets like open sets and so on. And how do you characterize these things? Well, you characterize them by saying what properties they have.

So how they interact with other things that you already know or other things of the same type. And this is very much like what we do in programming. We define things and then we describe them by how they interact with other things. Like in object oriented programming. Okay, I mean mostly category theory is used in functional programming, but object oriented programming also has very rigid structure, right? So you do things like data hiding for instance. What does it mean to hide your data? It means that you want to describe your object, not by how it's implemented, but how it interacts with other objects. Namely its methods, right? What are messages, like what kind of messages can you send to this object and how it will respond to these messages by sending other messages and so on. So this view of things, you know -- that you have objects that interact with each other by sending messages, for instance -- that's like the essence of category theory. A category is just a bunch of objects and arrows between them. That's all. And this is perfect model for programming.

<strong>So there's an abstract branch of math that deals with objects and arrows.Then somebody realized this looks a lot like what we're doing with software development. Is that kind of the view of it?</strong>

Historically speaking?

<strong>No.</strong>

No, no. You know, I mean people were always... Like computer scientists were always interested in like what is programming really? Right? So there are like these two schools of thought, the Turing School of Thought that says: "Well the computer is just a device that has like a sort of like a printing head and the reader and so on, and it just moves the tape and infinite tape and moves them." So this is a very mechanical kind of approach. And then there is this very abstract approaching mathematics. Or like what is computation? Because normally in math you define things like functions and you say, "well function is just a value that is related to the argument of the function." So there's argument and there is value. You know, its like function is defined and this is argument. This is value. Give me an argument, I'll give you a value. It doesn't ask you, you know "well, but how long will it take you to calculate this value?" Right? No, it's just there. Right?

But in computer science you have to think about, well if I want the value I'll have to derive it from the argument somehow and I have to go through some steps. Right? And so I have to decompose this bigger question into smaller question. And just answer every single smaller question and then combine them into one big result. Right? So being able to decompose bigger problems into smaller problems and then combine the solutions. That's essentially the description of, well I don't know. It depends on who you are. You will say, oh, that's a description of what I'm doing as a programmer. And a mathematician would say other, this is a description of what I'm doing as a mathematician and you know. I feel this is, we'll say that's what I'm doing as a physicist and so on. It's like everybody is doing this. This is like the essence of all human activity.

<strong>That's interesting. It makes sense to me that that's what I do as a programmer. Like, if I'm given some requirements, then you know, I feel how they might break into like modules and then build those modules and then combine them back. I would've never thought that that's what a mathematician does, but maybe I don't understand what mathematicians do.</strong>

Well, when you're a mathematician, you also like divide your work into, okay, "I have to prove this theorem first, and in order to prove this theorem I have to prove this lemma. I have to define like a new maybe space or object in my space and so on." So it's like, yeah, you are. And then if you have like a huge, huge problem, you want to split it into smaller problems. Like if you want to prove Fermat's Last Theorem, right? It's not just like you think for a moment and then you say, oh, I got it, right? No. You said, you know, I have to study first elliptic curves. And there was this theorem in elliptic curves that I have to prove. Oh, and somebody tried to prove it, but they failed because they couldn't prove a certain lemma. Maybe I can do this. And so on. So you always split things into smaller pieces, right? And then sometimes when you work in a team, right, you have to split, your work into individual tasks and so on. So like everything we humans do is always composable.

<strong>So what does category theory bring to the table?</strong>

Yeah, category theory essentially studies all the different ways in which things can be composed and decomposed. That's like the goal of category theory, you know, it's like it says like what is the structure of things? So what is a structure? Structure is like what parts something has and how these parts interact. I mean we don't even ask ourselves these questions like what is structure? But it's an obvious thing, right? But it is structure is that you can decompose something into smaller pieces and you can describe how they interact that structure. Right? Otherwise you have like one huge morass of stuff.

<strong>Why does categories theory seem to... Or why is it more used in the world of functional programming? Why not imperative programming or object oriented programming?</strong>

It's mostly because functional programming is much more restricted, less hacky. I mean, I came from imperative programming. I mean I programming C++ the last four years, so you know, I'm familiar with this stuff and I can do that. Right? But things in imperative programming are not very well defined. It's like they don't really have this nice mathematical structure. It's more of an expert system programming. Like there are rules, you know, you're not supposed to do that. It's mostly like you're not supposed to do things, right? I get a lot of teaching of imperative programming. Its don't do that, don't do that. And they slap you over the head, you know, this is like come dereference this pointer, okay? You're not supposed to do that, right? Now in functional programming, it's more like there is a mathematical structure behind it and let's just stick to it, right? And if you have this mathematical structure, then you don't have to slap people over the head and say don't do that because it's impossible to do certain things, right?

<strong>You mentioned before like Turing machines versus lambda calculus. I mean, computers really are imperative, aren't they? In there execution. So why do we need something that models things abstractly when they execute concretely, step after step?</strong>

Well, because there is this other thing on the other side of the computer and that's the human programmer. Okay? So programming is not just about the computer, it's about the interaction between the human and the computer. And the computer doesn't really care about, you know, how structured your code is. Why do we avoid goto's? You know, it's like computers love goto's. Give me goto's. Yeah, I can execute them. I mean it's like the processor has one of the basic instructions jump, right? Why not let me jump all the time. Right? So why do we avoid goto's? Not because computers don't like goto's, right? It's because we humans, if we have too many goto's, we just lose track of stuff and start making mistakes. Right? So I don't think this is like the requirement, you know, for the computer architecture or the programming language should reflect the architecture of the computer.

I think the computer language should reflect the architecture of the human mind and the human mind works differently, right? I mean we have to do this thing with what we call understand things, right? So the computer doesn't understand things, but we have to, right? We have to understand things and understanding again, it means that we have to like divide problems into smaller things. Give them names, right? And we give them names. The computer doesn't care what names you give like X1, X2, X3 there just fine, right? Why do we come up with these names for variables that, you know, it's like a factory of a lists or something like that. Right?

<strong>I read some story about how the library differs from like an Amazon warehouse, right? So in the library you have like a Dewey decimal system where people can locate where books are. In the Amazon warehouse, Amazon has a very simple way of organizing things. They just put things wherever and just remember where they put them. Cause it's a computer, they don't need it. So it seems like what you're saying is category theory is for people not for computers. Is that the idea?</strong>

Yes, absolutely. Yeah.

<strong>So in category theory there's like arrows and objects. What does that, what are arrows and objects?</strong>

Well that's the wrong kind of question. You're not supposed to look inside objects or arrows. They are just the basic thing. I mean they have certain properties, right? So you've described them not by what they are, but how they behave. So objects are really...you can think of objects as being labels for beginnings and ends of arrows. That's all. Because you have to say arrow goes from A to B. Right? So this is why you need A and B.

So an arrow can go there.

Yeah. So then the arrow can connect that. So you have objects as these end points for arrows. And you have arrows that can be composed? And this is what it's all about, about composition. So if you have an arrow from A to B and an arrow from B to C, then there's automatically an arrow from A to C. Which is a composition of these arrows. And that's the principle of category theory. That things are composable.

<strong>That's it. We're done.</strong>

Well, there's one more thing. You know there has to be an identity arrow for every object. Which means it's an arrow that when you compose with some other arrow, you get back that arrow again. So it's like multiplying by one or adding zero. Right? That's an identity arrow. So that's all the requirements. You know, you have to be able to compose arrows. There has to be a unit arrow for every object that the identity arrow and also the composition has to be associative so that you don't have to parentheses. Did they first compose these two and then compose it with the third one or did I do it in that different, right.

<strong>So what is an example of a category where that has some meaning?</strong>

The category that we are using as programmers, that's the category that underlies programming languages. Objects in that category are called types and arrows are called functions, pure functions. This is why it's so nice to talk about functional languages because in functional languages you have these pure functions, right? So you automatically are in category theory. And in fact this is like maybe the best way of defining what you're doing as abstractly as a programmer. If you ask somebody what is a type? What is a function? People think of types as sets of values, okay? That's one possible approach. But sets for my categories, it's like to the lowest approximation. You can say, well it's a category of sets and functions.

<strong>So I can think about like my method, like to string or show, it just takes say the set of things, the set of integers and maps it to a set of strings. So I kind of the--</strong>

Yes.

<strong>It is the arrow that does that map.</strong>

Yeah, exactly. And you can compose them, right? I mean you can first say two string and then you can say upper case, right? And you have a composition of these two things. You can say uppercase, two string or something like that. That's a new function that is a composition of these two. Of course there is an identity function that we don't even think much about but its a function that returns this argument without changing it.

<strong>Yeah. So the identity on my integers example just returned to the same integer.</strong>

Yeah.

<strong>And so is the value there that category theory gives us sort of a language to look at things from the outside? To just look at the types and the mappings?</strong>

Well this is just sort of the beginning because the category has more structure. You can add additional structure to the category or you can discover additional structure in this category. So for instance, in programming we are dealing with data structures, right? So what are data structures? Again, you know you have to start with some elementary types, right? And then from these types you form more complex types. Like, how do you define a structure struct, right? I mean you say, well I'll put an int there and I will put a string there and maybe a bullion, right? So you are combining things together, right? So you take several types, which are objects in your category and you put them into one bigger type that combines them. That's called a product category theory. Or you do things like creating a data structure in which I either have a string or an integer like a union type or something. That also can be describing in a category theory as as a sum type and so on. So you get product types, you get sum types and you can do Algebra on them and you get Algebraic data types.

<strong>Yeah. One critique that I sometimes hear about functional programming is that the terminology can be confusing, right? That it can be not friendly to newcomers that we call it Algebraic data types and some types of product types. And do you think that's like a valid criticism?</strong>

No, I don't think so.

<strong>No?</strong>

I mean a name is a name, you know? Why should we invent, I mean there are some cultures in the programming that invent languages and libraries where they come up with weird names that are supposed to be easier to understand than the ones they get from mathematics. But then it's sort of like blocks you from going back to mathematics and trying to learn what's the theory behind that? Right? So you go to a mathematical paper and they use completely different language and you don't know what is that? I don't know what the sum is, what the, what our product is. Right? So I don't know why use a different language there and here? Anyways if I call something, you know like in object oriented programming, if I call something an object that's so meaningful, right? Just try to define what you mean by an object in a programming language. Just because you took a word from English language that everybody thinks they understand, that doesn't mean that an object in C++ for instance, is immediately obvious. Oh, that's an object. Oh, I know what an object is because I learned it when I was an infant, right?

<strong>Yeah. And then wouldn't you have objects that are like nouns or you know, like the factory builder you were talking about? How is that an object?</strong>

Yeah, exactly. People try to give them names like mappable I think. So functor is mappable and a monad is bindable. Like, is that really easier to understand?

<strong>Mappable is not bad. I don't think bindable is good. Monad could be like combinable maybe?</strong>

Combinable, yeah.

<strong>There we go. See we've already improved things. So you mentioned C++. So how did you get here from doing C++ development to writing about category theory?</strong>

Well, I was always interested in... How do you write good programs, right? How do you make your programs reliable and that made me interested in the theory behind programming. I was always interested in exploring the boundaries. Like what is the hardest thing in C++ that you can think of? Well, I guess template method programming. Right? Template method programming. So I got into template method programming and it was fascinating because it was so different from regular programming. Because it's done at compiled time there is no mutation, right? So how do you program without mutation? Okay. So I started reading these books about template method programming in C++, and it was really hard to understand. Then I found that they actually take all these ideas from functional programming. You know, some of these people are truly know Haskell and they just translate it into C++ and say, Hey, I came up with this great thing. So I discovered this and I started my own franchise. I started blogging about, oh, this is how you can do using template method programming, this fancy thing here and fancy thing there. You know, it's like, oh, okay, cool. People were amazed that you can do these things in C++. Right? But it was really cheating. You know, I was taking something from Haskell that in Haskell it's just like a one liner and I'm in translating it. So eventually I decided to cut the middle man and just go directly to Haskell and see how it works.

<strong>It's a cheat code.</strong>

Yeah.

<strong>It's a way to understanding functional programming was like a shortcut for you to be able to understand template method programming. Being able to think in Haskell but write in C++ was your advantage.</strong>

Yeah. And then I even started talking to C++ programmers saying that even if you program in C++, it's a good idea to learn some Haskell and maybe use it as pseudo-code. You know, I just think a lot of people from the C++ they don't like functional programming because of performance. Because it's true, performance it depends on what kind of programming you're doing. But if you're doing string processing, maybe Haskell would not be the fastest language to do this. And if you start dealing with performance issues, then your Haskell code, I mean you can optimize stuff and then your Haskell code becomes uglier, not so clean. That clean code doesn't really perform very well. So thats the problem. But you know, it's like if you solve your problem first in Haskell and then you translate it into C++ you will probably get better quality code at the end and better performing.

<strong>And so how did you get from Haskell to category theory?</strong>

Well, because of the language, you know, because they use these terms, the functor, monad and so on. So I was curious where do these terms come from and what's the meaning of that. So I started looking into mathematical foundation on that, trying to understand. And then again, you know, it's like, I know I don't do much programming, mostly just testing some ideas, mostly testing the types, do they work together and so on. Because even the Haskell is too constraining but there are certain ideas in math that are difficult to translate to Haskell. So again, I'm finding the boundaries of what can be expressed in Haskell and then going beyond them as category theory. There is a whole area in between which is dependent types. So dependent types are very interesting. And I'm trying to learn Idris, which is a dependent type language and figure things out.

<strong>Nice. Yeah. I've had a couple episodes about dependent types. Edwin Brady was on the podcast.</strong>

Okay. Yeah.

<strong>Yeah. So I think what you're saying is you went from writing C++, but thinking about it in Haskell to writing Haskell, but thinking about it in category theory.</strong>

Yes.

<strong>So is there a notation or something for category theory? What do your thoughts look like? Is it in a mathematical notation?</strong>

A lot of my thoughts when I do them on paper, on the whiteboard, they are diagrams. Yeah. So you know, arrows between dots. That's how you work in category theory.

<strong>So it's purely visual. Now your thinking is actually all diagram based.</strong>

Yeah. And it's very good for me because this is that different people have different types of thinking. Some people are better at kind of Algebraic thinking where they think in terms of symbols and formulas. Yeah, I don't do that. I have a problem with that. I am very visual and I like pictures. I draw lots of pictures and that helps me.

<strong>Yeah, that's interesting. I don't know, am I a visual thinker? I think I'm somewhat of like a oral, like I think, I think in like a soundtrack, you know what I mean? So what's the most successful? What's been a success that's come out of applying category theory to software?</strong>

Yeah, I think the whole language. Haskell is very solid because it's based on mathematical foundations and category theory particular. So I think, well, okay. Monads probably monads are like the most successful thing in functional programming because when people started working in Haskell, it was a purely functional language. It still is a purely functional language. But with the purely functional language you have this problem of how do I print something? It's a side effect. Okay, how do I get input from a file from the user, right? That's not a function. You know, it's like get character, get string, you know it's not a function because every time you call it, it returns a different value possibly. Right?

<strong>Yeah.</strong>

So how do you describe this in terms of categories? And so instead of like doing the easy way out, like most other languages, including functional language, Haskell is probably the only, well there are some others, but the strict functional pure language, right? Like even ML is cheating. So they started thinking, you know, how can we do this without cheating? Right? So this is a really hard problem. And because scientists like hard problems, unlike engineers who will try to find shortcuts and do it quickly because there is a--

Deadline.

Deadline pending and their salary depends on it. And scientists like is interested in will there be a publication out of it? Right? So if it's a hard problem then the publication will be good. Right? So they figured out this and they found out that other way to do this is to use monads and then once monads came into functional programming, they are now spreading to other languages.

<strong>Yeah, definitely. I had Phil Wadler as a guest on the podcast. I think he did the implementation of bringing monads to Haskell.</strong>

Yes, yes he did. It's like it was Eugenio Moggi who first introduced monads into computer science. But it was very theoretical and then Phil Wadler read his paper, talked to him and came up with something that was actually very practical and worked.

<strong>An interesting thing about Phil was that he was saying that he thinks these mathematical concepts like blamed the calculus specifically, that these are like kind of innate to the universe. Maybe he wouldn't quite say it that way, but he thinks that they are.</strong>

Yeah, he would, he would. Yes. I had discussions with him about this, you know, I totally disagree. He said later in this a lot of mathematicians are Platonists. They believe that there are just things inherent... like mathematics is built into the universe. I totally disagree.

<strong>So what's your perspective on it? Why do you disagree?</strong>

I think mathematics is something that is inherent to human beings. This is the only way we can deal with our environment is because we have small brains. It's like compared to the size of the universe, this is just like a tiny, tiny thing. And it evolved from apes that were trying to solve problems, like how to run away from a predator or how to kill an animal and eat it, start a fire and so on. So the way we deal with complexity is by dividing into smaller tasks, solving them and then recombining the solutions. And that's what we do with everything. We just don't know how to deal with things that are not decomposable. I mean one part of life is that every living being has to have some kind of model of the environment.

So it has to create a simplified model of the environment. I mean we humans have this sort of we can even think about the model as opposed to reality, right? We have a model of the environment in our brains and we know it's simplified, right? But the fact that you can take the environment, the universe, and simplify it, meaning throwing away some things and decomposing in the smaller things that's just an amazing thing. And people think, well, isn't that amazing that the universe is decomposable? And I think no it's not amazing that, I mean, it is amazing that this part of the universe that we live in the particular scales, like the meter scale is decomposable, right? But like you can go like a 10 levels down to like micro scales and suddenly things are completely different. Right? You know, this is why we don't have life at the Planck scale because it's not decomposable, you know, at our level of universe, things are nicely decomposable and this is what makes life possible. And as humans

<strong>Yeah, I would think that it's like has to do with where we evolved, right? Like we have trouble understanding things at the quantum level because that's just foreign to us, right? The same way we have a hard time understanding how approaching the speed of light works. It's just cause humans never existed in a world where they went that fast. So it doesn't fit in the model of our brain.</strong>

But humans never existed at atomic scales because its impossible for life to exist at the atomic scale. Why is it impossible? Why can't there be a life on the surface of the nucleus of Hydrogen, right. Why?

<strong>Well, what would it be made out of?</strong>

Exactly. Right, right.

<strong>Oh, I see.</strong>

Yeah, cause you're saying made of means decomposable, right?

<strong>Ah, yeah.</strong>

There's nothing to compose or decompose.

<strong>I see. Yeah. That makes sense. You had some talk that you sent the link to me where you posit that the world is a not round or that the world is flat. I think.</strong>

Oh, well it was tongue in cheek. Yeah. Yeah.

<strong>Could you explain that point? Like how is the world flat?</strong>

Because people often confuse, well Platonists will confuse the thing that we understand about the world with what the world is really, right? The ontology of the world.

<strong>Because the world isn't really a sphere I guess, right?</strong>

Yeah, yeah. The Earth is not a sphere. It's like if you start arguing that the world is a sphere, you're talking about some kind of ideal of a world, right? A model, right? So you can model the Earth to some approximation as a sphere and that's good. You know, but the Earth is not a sphere. You have to understand the Earth is not a sphere. There is a tiny difference, you know, several kilometers, you know, in some places. Right. So it's--

<strong>It has to do with your decomposition thought. I think, right? Cause you're saying like for me to understand what the world looks like, I need to come up with some model and it has to fit inside my head, right?</strong>

Yeah, exactly.

<strong>So it has to be, it has to get rid of some of the details.</strong>

This is what we call abstraction. Abstraction is getting rid of some details and getting a nice model. So yeah, so I mean you can describe the Earth as a sphere to some approximation. Then you can describe the Earth as flat. Mathematically it's okay. You know, it's like there is a system of coordinates in which the Earth is flat and it would be much, much harder to work with that system of coordinates because you would constantly have to do adjustments. You know, like, yeah, you move towards the South Pole for instance. What we consider the South Pole? You know, and like your coordinates would just blow to infinity.

<strong>So this abstraction I think so at the level of my code, right? Like I just have imperative code that runs on the computer. Like it does jumps and whatever. And then like I have my actual like maybe I have my functional programming code, it's like a level operate it hides some details and then I'm trying to connect this all back. So then I think what you're saying is there's like category theory is like something that gets rid of some of these details even more so it's like if you want to look at the flat, if you, you can assume the world is flat when you're measuring a hundred meter race, like that's fine. Right? But then when you want to zoom out and go to the South Pole, you maybe you want to assume it's a sphere and then like at each level of detail, if you want to do a foundation for your house, like at the lowest level, you can't assume the world is flat. You have to actually know where the bumps and cracks are.</strong>

Yeah.

<strong>So category theory is a way to hide some of the details so that we can fit it in our head. So it's not something. I'm trying to understand your perspective it's like it's not something innate to the mathematical underpinnings of the world. It's a way that humans use to fit big, hairy concepts into their heads.</strong>

Yeah, exactly. Category theory is a very good description of how our minds work. It has nothing to do, well maybe that's just a harsh statement, but you should not confuse mathematical model with reality. And I hear this very often when you know, especially talking to mathematicians, they say, okay, we have them in this category. We have like this category described the world and inside this category we have a model of the world, right? But the world is also a category. It's like no, the world is not a category. The world is already in a category, its already a model in our brain, right? So there is this problem occurs in mathematics and in physics. You know, its like in physics you have quantum physics, you know, and then you have an external observer always. You know, its like --

<strong>That never sat right with me.</strong>

Yeah. And you know, I mean, as a physicist you kind of get used to it, but never really, you know, it's like, you know that there's something wrong with quantum mechanics at some level There's always this classical observer thats observing quantum effects. Like, so it means that quantum theory is incomplete and every single theory that we have is incomplete.

<strong>Cause there just models.</strong>

And even true in mathematics, you know, there's an incompleteness theorem, right? Godel's incompleteness. So it's like everything we do is incomplete.

<strong>So why should people learn category theory?</strong>

Why should people do anything?

<strong>Is it fun? Is it practical? Is it both?</strong>

For a programmer for instance? Like it doesn't make sense to learn category theory. Will it make you a better programmer? I think it will. It will sort of make you a higher level programmer. You know, it's like being able to lift yourself above your program. It's like otherwise you, you know, you're just like a little ant working in an anthill, right? And the only things you see are the things that are close around you, right? It's like your never able to like lift yourself above the anthill and see how it's related to the rest of the world and so on. And category theory provides these ways, these extractions that otherwise you wouldn't even think of. You know, it connects things. It says, well, a list is in a way... A list data structure is somehow similar to an optional in some ways. How is it similar? Well, because its a monad, right? Unless you have this word monad, you know, and the description of what a monad is, you will never see the similarity between a list and optional or a function.

<strong>Well you could just say it's a list of a maximum one arguments, like a list of Max size one.</strong>

Okay. Yeah. Good.

<strong>But maybe that would get you towards the concept of a monad. I don't know.</strong>

Yeah, yeah, yeah. It probably would. Yeah.

<strong>If it became widely understood as a language where we talk about software development using these terminology, like how would that influence software development? It would make us feel smarter because we'd have all these abstract Algebra terms to throw around.</strong>

I think it's already changing the way we program. I mean the development of programming and programming languages is sort of from goes from bottom up. So we start working to solve particular problems, right? And then we discover that there are similarities between these problems and that we could simplify our lives instead of redeveloping the same thing over and over and over. Maybe we can abstract over it, right? And a lot of programming languages evolve. Every programming language really evolves this way that it just adds abstractions on top. And I saw this in C++, you know, I was always really happy when new features came to C++ because like oh I can do more stuff. Right? But they were always like slapped on top of the existing stuff you know, and it was, there was like a, this really ugly syntax of templates, right? You know, it's like there were even problems, like if you have a template inside the template, then the two greater than signs would collide then the compiler would think this is like your all or this is a right shift. You know? It's like that's crazy, right? It just says, you know, this language was not developed to think at this high level of obstruction. Right? And it was just added to it. So there are new languages which lets you program more abstractly, which means that you can reuse your code, that you can write code that will solve different kinds of problems using the same methods. I mean, you know, there is, there's like this whole industry of patterns, right? There is the gang of four pattern book and so on. That was a great thing when it came out, but it showed this tremendous weakness of programming languages that you have to describe these patterns in a book, right?

<strong>Yeah.</strong>

And then ask the programmer, Oh, here you have a particular, you know, write your code according to this book instead of use this library. Right? Because we've solved this problem before. Right? So the gang of four solved a certain bunch of problems. Right? But they could not express it in a language.

<strong>What was a stumbling block that you hit or that people hit when trying to learn about category theory?</strong>

The biggest stumbling block is that mathematicians, they just don't explain things the way that's easy to understand. Let me describe it this way. I don't know. It's like when you read a mathematical paper or a book, you know it's written in a certain style.

<strong>Is it that it's written for mathematicians to understand but not for programmers or is it mostly...</strong>

I think it's a culture. It's a culture thing. You know, it's like there is even, I mean, being a physicist, you know, I see the difference in culture between physics and mathematics. Like in physics, you know, we had this great guy, Feynman who was like, he would always try to explain things in the simplest terms. And he loved giving talks to outsiders trying to explain, you know, the quantum field theory. You know, stuff like this. And mathematicians don't do that. They write these abstract papers and if you don't get it, you know, it's sort of like you're stupid because you don't get it. You know, you shouldn't be reading this. I was fine when I had the opposite. It's like if I can't explain it, it means I don't understand it. You know, if I can't explain it in simple terms, I don't understand.

<strong>And is this why you started your series explaining category theory for programmers?</strong>

Yes, yes. This and because I thought there was this problem that mathematicians will use examples from other branches of mathematics. And so what if you don't know these other branches of mathematics. Does it mean that the category theory is useless to you? No, it's not. It's just that, you know, you have to like rewrite category theory using different examples. And there's plenty of examples in programming that I could use to explain concepts in category theory. And it turns out that these concepts are not that hard if you have the right examples.

Yeah, that totally makes sense. It's interesting. Like I guess one thing I never thought of before I started talking to you was, so there's this field called category theory. My understanding is that somebody noticed a whole bunch of similarities between a whole bunch of branches of math. Right?. And that's where it came from. But what you're saying is I think that those similarities aren't to do with math. They're to do with the people who created math.

Yeah. Yes, exactly. And you see these things not only in mathematics but also in physics, in programming. It's like in every area of human activity you see the same patterns, the same structures. I sometimes am amazed, you know it's like reading a paper in some area of mathematics and they are using the same ideas that I found in some other area of mathematics. Then thinking about are these the only patterns that we humans are able to discern and we are just describing the same patterns over and over and over again in different contexts.

<strong>Does that mean that there's things we'll never figure out because they're not part of the patterns we can find?</strong>

We have figured some things out and there are so many other things that we haven't figured out. We always think that like we already understand 99% of stuff and there's this 1% missing. And I think this is completely wrong. We understand the 0.001% if that even makes sense, right? And there's so much stuff missing if we just ignore the stuff that we don't understand.

<strong>Do you know what we're ignoring?</strong>

Well, yeah, there are certain things that we know that are sort of beyond the scope of what we can do right now. And we think, well eventually we'll figure these things out. But in physics, obviously there was this humongous problem of we have general relativity in gravity on the one side and quantum mechanics on the other side. And we just don't know how to connect that. And we think, well maybe string theory, maybe this, maybe that, you know, it's like, and the deeper we go into it, the more we understand that we don't understand stuff and maybe these things just don't decompose. You know, that's the obvious solution. Okay? And if they don't decompose, then we can't really describe them. We can't have a model, right? It's like does everything have to have a model? Can it be simplified? Why should it be?

<strong>You can always come up with approximates for things. Can't you?</strong>

Why?

<strong>Like how the globe is it?</strong>

Because this is what's been happening in the history of humankind. Whether you can also understand this as like we are discovering things that are possible for us to understand and we just ignore everything else.

<strong>Yeah. I don't know a lot about physics, but, and this'll probably get cut from the actual episode, but like a dark matter that doesn't seem to make sense. They're like, okay, well the universe has to have so much mass to it and there's not enough. So let's just postulate something that weighs the rest of it. That seems like cheating, right?</strong>

Yeah. I mean, and a lot of people think it is cheating. Yeah.

<strong>Crazy stuff.</strong>

There's dark matter. There's dark energy. Yeah.

<strong>Maybe that's the difference between physicists and mathematicians. I don't know.</strong>

Well, physicists are very pragmatic, you know, if it works, it works. Okay. If I can calculate something and then test it, then it's great. In this way, physicists are more like programmers. If it works let's ship it.

<strong>So what's next for you after category theory?</strong>

I'm interested in homotopy type theory, but this is really hard.

<strong>Has to do with the quality. I know that much. So thank you so much for joining me. It was a lot of fun.</strong>

Okay, thank you. Thank you for having me.
<pre></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1076</wp:post_id>
		<wp:post_date><![CDATA[2019-08-17 11:54:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-17 15:54:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[the-ontology-of-monads]]></wp:post_name>
		<wp:status><![CDATA[private]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Test in Production with Charity Majors</title>
		<link>https://corecursive.com/019-test-in-production-with-charity-majors/</link>
		<pubDate>Fri, 31 Aug 2018 12:30:52 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=694</guid>
		<description></description>
		<content:encoded><![CDATA["Metrics and Dashboards can die in a fire and every software engineer should be on-call" - Charity Majors

<span class="name" data-wfid="6ed795f00071">Today's Interview is with Charity Majors. We talk about how to make it easier to debug production issues in today's world of complicated distributed systems.  </span><span class="name" data-wfid="7b7958a591b1">A warning, There is some explicit language in this interview.</span>

I originally saw a talk by Charity where she said something like fuck your metrics and dashboards, you should test in production more. It was a pretty hyperbolic statement, but backed up with a lot of great insights. I think you'll find this interview similarly insightful.

Charity and her company are probably best known for popularizing the concept that observability in the key to being able to debug issues in production.

Also if you are a talented developer with functional programming skills, I've got a job offer for you. My employer <a href="https://www.tenable.com/">Tenable</a> is hiring.  Tenable is a pretty great place to work. <a href="https://t.co/y4cPVlVqbo">Here is a job link</a>.

Show notes:
<ul>
 	<li><a href="https://www.facebook.com/notes/facebook-engineering/under-the-hood-data-diving-with-scuba/10150599692628920/">Facebook Scuba</a></li>
 	<li><a href="https://www.youtube.com/watch?v=1wjovFSCGhE">Observability Talk</a></li>
 	<li><a href="https://charity.wtf/2017/05/11/the-engineer-manager-pendulum/">the-engineer-manager-pendulum</a></li>
 	<li><a href="https://www.honeycomb.io/">HoneyComb.io</a></li>
</ul>
&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>694</wp:post_id>
		<wp:post_date><![CDATA[2018-08-31 08:30:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-08-31 12:30:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[019-test-in-production-with-charity-majors]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="career"><![CDATA[Career]]></category>
		<category domain="post_tag" nicename="dashboards"><![CDATA[Dashboards]]></category>
		<category domain="post_tag" nicename="devops"><![CDATA[DevOps]]></category>
		<category domain="post_tag" nicename="incident-response"><![CDATA[Incident Response]]></category>
		<category domain="post_tag" nicename="logs"><![CDATA[Logs]]></category>
		<category domain="post_tag" nicename="metrics"><![CDATA[Metrics]]></category>
		<category domain="post_tag" nicename="observability"><![CDATA[Observability]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="sre"><![CDATA[SRE]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-itunes]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_thumbnail]]></wp:meta_key>
		<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_theme]]></wp:meta_key>
		<wp:meta_value><![CDATA[standard]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_width]]></wp:meta_key>
		<wp:meta_value><![CDATA[450]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_placement]]></wp:meta_key>
		<wp:meta_value><![CDATA[top]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-advanced-destination-form-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:21:{i:0;s:61:"01:42 -- Is debugging production issues becoming more complex";i:1;s:22:"5:56 -- Facebook Scuba";i:2;s:25:"8:08 -- High Cardinality ";i:3;s:31:"8:25 -- Why do you hate metrics";i:4;s:38:"10:27 -- Metrics are devoid of context";i:5;s:24:"12:49 -- Structured Logs";i:6;s:23:"13:42 -- BI for systems";i:7;s:65:"14:53 -- Intuition in debugging and systems bigger than our heads";i:8;s:41:"17:18 -- Dashboards are looking backwards";i:9;s:30:"18:36 -- Testing in Production";i:10;s:51:"22:43 -- Recovering vs preventing production issues";i:11;s:72:"24:56 -- Building your own data store and problems with time series data";i:12;s:51:"28:47 -- The industry needs to build better tooling";i:13;s:46:"32:08 -- What developers should learn from ops";i:14;s:37:"35:22 -- Call when things are on fire";i:15;s:52:"36:56 -- Moving from contributor to manager and back";i:16;s:35:"39:55 -- Dashboards and Over-paging";i:17;s:50:"41:35 -- Alerts can't cover the most likely issues";i:18;s:37:"43:31 -- Customer Support and Empathy";i:19;s:29:"45:12 -- Ops teams comradery ";i:20;s:50:"47:10 -- Every software engineer should be on call";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[5814]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/corecursive/019_-_Observabilty.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[47:59]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[38.46 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[697]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Charity Majors]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://charity.wtf/">Website</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Operations, DB and debugging expert]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[696]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>598</wp:comment_id>
			<wp:comment_author><![CDATA[Post-Trajectory Reading List | LaunchDarkly Blog]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://launchdarkly.com/blog/post-trajectory-reading-list/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[96.127.147.50]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-04-19 13:00:01]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-04-19 17:00:01]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Test in Production with Charity Majors [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1555693201.2360101;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>About</title>
		<link>https://corecursive.com/about/</link>
		<pubDate>Sat, 15 Sep 2018 19:28:00 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=726</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>Summary:</h3>
<ul>
 	<li style="list-style-type: none;">
<ul>
 	<li>
<h4>4,000 to 20,000 listens per Episode</h4>
</li>
 	<li>
<h4>Many great guests such as <a href="https://corecursive.com/021-gods-programming-language-with-philip-wadler/">Philip Wadler</a>, <a href="https://corecursive.com/024-software-as-a-reflection-of-values-with-bryan-cantrill/">Bryan Cantrill</a>, <a href="https://corecursive.com/006-type-driven-development-and-idris-with-edwin-brady/">Edwin Brady</a>, and <a href="https://corecursive.com/019-test-in-production-with-charity-majors/">Charity Majors</a></h4>
</li>
 	<li>
<h4>High ranking and great reviews in the podcasting platforms</h4>
</li>
 	<li>
<h4>A passionate community of listeners</h4>
</li>
</ul>
</li>
</ul>

<hr />

<div class="row">
<div class="col-lg-6">
<h4>A Message from the host:</h4>
<img class="alignnone size-medium wp-image-707" src="https://corecursive.com/wp-content/uploads/2018/09/profile_2-e1537043637969.jpg" alt="" width="200" height="200" />
<b><i>In software development, there are so many smart and interesting people creating new things. I interview them and you can learn about a topic as I do. Whether the specific topic is graphQL or dependent types and whether the topic is familiar to you, or something you have never encountered, I think you will learn a couple of things and enjoy the process.
I hope you subscribe and enjoy,
<b><i></i></b></i></b>

Your Host,
Adam

</div>
<div class="col-lg-6">
<h3>CoRecursive features interviews on technical topics of interest to software developers.</h3>
If you are a professional software developer or someone who likes to code or has an interest in programming languages, you are our target listener.

If you are a software engineer who wants to listen to casual yet in-depth technical interviews with expert software developers, this podcast is for you.

<hr />

&nbsp;

</div>
</div>

<hr />

<h3>Reviews</h3>
https://twitter.com/chriskrycho/status/1012327341945573376

https://twitter.com/rick_west8/status/1041284093105852417

https://twitter.com/oylenshpeegul/status/1010557747820224512

https://twitter.com/borkdude/status/1027154748934418432

https://twitter.com/mipsytipsy/status/1035525621689053190

https://twitter.com/oylenshpeegul/status/1014997510207746049

https://twitter.com/jdegoes/status/979482177904762883

https://twitter.com/jdegoes/status/976632517091508224

<hr />

<h3>Contact Us</h3>
Email: adam@corecursive.com
Phone: (705) 933-2074
<h3>Credits</h3>
Intro theme is from <a href="https://podcastthemes.com/">podcastthemes.com</a>

Outro is from <a href="https://danosongs.com/track/1526270/ready-and-waiting">danosongs</a>

Any other sounds / clips used from <a href="https://freesound.org/">https://freesound.org/</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>726</wp:post_id>
		<wp:post_date><![CDATA[2018-09-15 15:28:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-15 19:28:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[about]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="info"><![CDATA[Info]]></category>
		<category domain="post_format" nicename="post-format-quote"><![CDATA[Quote]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-itunes]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_thumbnail]]></wp:meta_key>
		<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_theme]]></wp:meta_key>
		<wp:meta_value><![CDATA[standard]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_width]]></wp:meta_key>
		<wp:meta_value><![CDATA[450]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_placement]]></wp:meta_key>
		<wp:meta_value><![CDATA[top]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-advanced-destination-form-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[6073]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_581de567e33ec71288269ece1e594463]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">In this exclusive interview, I trash descriptive variable names and data structures, predict where Scalaz and Cats are going, and provide tips for writing better.<br><br>Don&#39;t miss this episode of `CoRecursive Podcast with Adam Bell`. ? <a href="https://t.co/U3VKCJJQ2N">https://t.co/U3VKCJJQ2N</a></p>&mdash; John Ⓐ De Goes (@jdegoes) <a href="https://twitter.com/jdegoes/status/976632517091508224?ref_src=twsrc%5Etfw">March 22, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_581de567e33ec71288269ece1e594463]]></wp:meta_key>
		<wp:meta_value><![CDATA[1537048507]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_48a508c383dd9cf2e0101fb0fce4b647]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">Don&#39;t miss my podcast with Adam Bell, in which I reveal—among other scandalous revelations—why you should never under any circumstances use monad transformers in Scala. (Go on, listen, you know want to know!) <a href="https://t.co/3aZjrzRCxb">https://t.co/3aZjrzRCxb</a></p>&mdash; John Ⓐ De Goes (@jdegoes) <a href="https://twitter.com/jdegoes/status/979482177904762883?ref_src=twsrc%5Etfw">March 29, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_48a508c383dd9cf2e0101fb0fce4b647]]></wp:meta_key>
		<wp:meta_value><![CDATA[1537048550]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_8ee5ee03e6d798c6ef03b564bfe48ec5]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">I’ve really, *really* been enjoying <a href="https://twitter.com/adamgbell?ref_src=twsrc%5Etfw">@adamgbell</a>’s <a href="https://twitter.com/corecursive?ref_src=twsrc%5Etfw">@corecursive</a> podcast – solid and informative interviews on interesting topics in programming with an emphasis on functional programming and type theory.</p>&mdash; Chris Krycho (@chriskrycho) <a href="https://twitter.com/chriskrycho/status/1012327341945573376?ref_src=twsrc%5Etfw">June 28, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_8ee5ee03e6d798c6ef03b564bfe48ec5]]></wp:meta_key>
		<wp:meta_value><![CDATA[1537048588]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_729a3bb6b7c6863d57d43d9cf90ddf8c]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">I really enjoyed listening to Adam Bell and Stephanie Weirich chat about dependent types. Then I watched the video of the Strange Loop talk they mentioned too. Great stuff! <a href="https://t.co/b34tgZynha">https://t.co/b34tgZynha</a></p>&mdash; Tim Heaney (@oylenshpeegul) <a href="https://twitter.com/oylenshpeegul/status/1010557747820224512?ref_src=twsrc%5Etfw">June 23, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_729a3bb6b7c6863d57d43d9cf90ddf8c]]></wp:meta_key>
		<wp:meta_value><![CDATA[1537048597]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_a1b5044e12d4c6918e97994c7e33075a]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">Listening to <a href="https://twitter.com/corecursive?ref_src=twsrc%5Etfw">@corecursive</a> with <a href="https://twitter.com/fancytypes?ref_src=twsrc%5Etfw">@fancytypes</a> on dependent types in Haskell. She&#39;s a good explainer of these concepts and the host is asking good questions.. Enjoyable show! Going to watch her talk on <a href="https://twitter.com/strangeloop_stl?ref_src=twsrc%5Etfw">@strangeloop_stl</a>: <a href="https://t.co/G1eg4nIycV">https://t.co/G1eg4nIycV</a></p>&mdash; (λ. borkdude) (@borkdude) <a href="https://twitter.com/borkdude/status/1027154748934418432?ref_src=twsrc%5Etfw">August 8, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_a1b5044e12d4c6918e97994c7e33075a]]></wp:meta_key>
		<wp:meta_value><![CDATA[1537048641]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_34227cbbfd9d98d2b03d743444f30f59]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">If you missed out on my srecon talk (they sold out this year!) but want to hear more, check out this podcast.  Adam is an amazing interviewer and the conversation was super fun.  ? <a href="https://t.co/fGluhPCUx9">https://t.co/fGluhPCUx9</a></p>&mdash; Charity Majors (@mipsytipsy) <a href="https://twitter.com/mipsytipsy/status/1035525621689053190?ref_src=twsrc%5Etfw">August 31, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_34227cbbfd9d98d2b03d743444f30f59]]></wp:meta_key>
		<wp:meta_value><![CDATA[1537048660]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_fd46849b82d769d8ce1428e46bbaa129]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">If you enjoyed <a href="https://twitter.com/adamgbell?ref_src=twsrc%5Etfw">@adamgbell</a>&#39;s interview with <a href="https://twitter.com/jimblandy?ref_src=twsrc%5Etfw">@jimblandy</a>  on <a href="https://twitter.com/corecursive?ref_src=twsrc%5Etfw">@corecursive</a> a while back, don&#39;t miss part two!<a href="https://t.co/MAo24HWEqc">https://t.co/MAo24HWEqc</a></p>&mdash; Tim Heaney (@oylenshpeegul) <a href="https://twitter.com/oylenshpeegul/status/1014997510207746049?ref_src=twsrc%5Etfw">July 5, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_fd46849b82d769d8ce1428e46bbaa129]]></wp:meta_key>
		<wp:meta_value><![CDATA[1537048672]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_38cc5e69d7e36d0608c78400b8936a02]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">I’ve really, *really* been enjoying <a href="https://twitter.com/adamgbell?ref_src=twsrc%5Etfw">@adamgbell</a>’s <a href="https://twitter.com/corecursive?ref_src=twsrc%5Etfw">@corecursive</a> podcast – solid and informative interviews on interesting topics in programming with an emphasis on functional programming and type theory.</p>&mdash; Chris Krycho (@chriskrycho) <a href="https://twitter.com/chriskrycho/status/1012327341945573376?ref_src=twsrc%5Etfw">June 28, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_38cc5e69d7e36d0608c78400b8936a02]]></wp:meta_key>
		<wp:meta_value><![CDATA[1552238191]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_9fed6fb4af4f3b1b8cfdbeb77efc79c9]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">I really enjoyed listening to Adam Bell and Stephanie Weirich chat about dependent types. Then I watched the video of the Strange Loop talk they mentioned too. Great stuff! <a href="https://t.co/b34tgZynha">https://t.co/b34tgZynha</a></p>&mdash; Tim Heaney (@oylenshpeegul) <a href="https://twitter.com/oylenshpeegul/status/1010557747820224512?ref_src=twsrc%5Etfw">June 23, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_9fed6fb4af4f3b1b8cfdbeb77efc79c9]]></wp:meta_key>
		<wp:meta_value><![CDATA[1567457350]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_1efa06fa61112fb096429aa21b1197c3]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">Listening to <a href="https://twitter.com/corecursive?ref_src=twsrc%5Etfw">@corecursive</a> with <a href="https://twitter.com/fancytypes?ref_src=twsrc%5Etfw">@fancytypes</a> on dependent types in Haskell. She&#39;s a good explainer of these concepts and the host is asking good questions.. Enjoyable show! Going to watch her talk on <a href="https://twitter.com/strangeloop_stl?ref_src=twsrc%5Etfw">@strangeloop_stl</a>: <a href="https://t.co/G1eg4nIycV">https://t.co/G1eg4nIycV</a></p>&mdash; (λ. borkdude) (@borkdude) <a href="https://twitter.com/borkdude/status/1027154748934418432?ref_src=twsrc%5Etfw">August 8, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_1efa06fa61112fb096429aa21b1197c3]]></wp:meta_key>
		<wp:meta_value><![CDATA[1567457350]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_860d27864bfc55294d32ff759dbcd4eb]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">If you missed out on my srecon talk (they sold out this year!) but want to hear more, check out this podcast.  Adam is an amazing interviewer and the conversation was super fun.  💕 <a href="https://t.co/fGluhPCUx9">https://t.co/fGluhPCUx9</a></p>&mdash; Charity Majors (@mipsytipsy) <a href="https://twitter.com/mipsytipsy/status/1035525621689053190?ref_src=twsrc%5Etfw">August 31, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_860d27864bfc55294d32ff759dbcd4eb]]></wp:meta_key>
		<wp:meta_value><![CDATA[1567457350]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_705bd68ba1370bfe0ecb7fec24865c2f]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">If you enjoyed <a href="https://twitter.com/adamgbell?ref_src=twsrc%5Etfw">@adamgbell</a>&#39;s interview with <a href="https://twitter.com/jimblandy?ref_src=twsrc%5Etfw">@jimblandy</a>  on <a href="https://twitter.com/corecursive?ref_src=twsrc%5Etfw">@corecursive</a> a while back, don&#39;t miss part two!<a href="https://t.co/MAo24HWEqc">https://t.co/MAo24HWEqc</a></p>&mdash; Tim Heaney (@oylenshpeegul) <a href="https://twitter.com/oylenshpeegul/status/1014997510207746049?ref_src=twsrc%5Etfw">July 5, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_705bd68ba1370bfe0ecb7fec24865c2f]]></wp:meta_key>
		<wp:meta_value><![CDATA[1567457351]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_063e7a8ae02deb4a127ef158ba2be8f0]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">Don&#39;t miss my podcast with Adam Bell, in which I reveal—among other scandalous revelations—why you should never under any circumstances use monad transformers in Scala. (Go on, listen, you know want to know!) <a href="https://t.co/3aZjrzRCxb">https://t.co/3aZjrzRCxb</a></p>&mdash; John A De Goes (@jdegoes) <a href="https://twitter.com/jdegoes/status/979482177904762883?ref_src=twsrc%5Etfw">March 29, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_063e7a8ae02deb4a127ef158ba2be8f0]]></wp:meta_key>
		<wp:meta_value><![CDATA[1567457351]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_56e5323237f8e52c03a4171243d8d73e]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">In this exclusive interview, I trash descriptive variable names and data structures, predict where Scalaz and Cats are going, and provide tips for writing better.<br><br>Don&#39;t miss this episode of `CoRecursive Podcast with Adam Bell`. 😉 <a href="https://t.co/U3VKCJJQ2N">https://t.co/U3VKCJJQ2N</a></p>&mdash; John A De Goes (@jdegoes) <a href="https://twitter.com/jdegoes/status/976632517091508224?ref_src=twsrc%5Etfw">March 22, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_56e5323237f8e52c03a4171243d8d73e]]></wp:meta_key>
		<wp:meta_value><![CDATA[1567457351]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_fe1a0de8602384b2c44d7d6f44a072fd]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">If you missed out on my srecon talk (they sold out this year!) but want to hear more, check out this podcast.  Adam is an amazing interviewer and the conversation was super fun.  ? <a href="https://t.co/fGluhPCUx9">https://t.co/fGluhPCUx9</a></p>&mdash; Charity Majors (@mipsytipsy) <a href="https://twitter.com/mipsytipsy/status/1035525621689053190?ref_src=twsrc%5Etfw">August 31, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_fe1a0de8602384b2c44d7d6f44a072fd]]></wp:meta_key>
		<wp:meta_value><![CDATA[1537048697]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_a951ea157182882d5bf86a86bcdceaa3]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">I’ve really, *really* been enjoying <a href="https://twitter.com/adamgbell?ref_src=twsrc%5Etfw">@adamgbell</a>’s <a href="https://twitter.com/corecursive?ref_src=twsrc%5Etfw">@corecursive</a> podcast – solid and informative interviews on interesting topics in programming with an emphasis on functional programming and type theory.</p>&mdash; Chris Krycho (@chriskrycho) <a href="https://twitter.com/chriskrycho/status/1012327341945573376?ref_src=twsrc%5Etfw">June 28, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_a951ea157182882d5bf86a86bcdceaa3]]></wp:meta_key>
		<wp:meta_value><![CDATA[1537048698]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_c4249a92d9e93402677dda51bba96450]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">Listening to <a href="https://twitter.com/corecursive?ref_src=twsrc%5Etfw">@corecursive</a> with <a href="https://twitter.com/fancytypes?ref_src=twsrc%5Etfw">@fancytypes</a> on dependent types in Haskell. She&#39;s a good explainer of these concepts and the host is asking good questions.. Enjoyable show! Going to watch her talk on <a href="https://twitter.com/strangeloop_stl?ref_src=twsrc%5Etfw">@strangeloop_stl</a>: <a href="https://t.co/G1eg4nIycV">https://t.co/G1eg4nIycV</a></p>&mdash; (λ. borkdude) (@borkdude) <a href="https://twitter.com/borkdude/status/1027154748934418432?ref_src=twsrc%5Etfw">August 8, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_c4249a92d9e93402677dda51bba96450]]></wp:meta_key>
		<wp:meta_value><![CDATA[1537048698]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_ea10c84052359af4efd14d93a5c9c471]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">In this exclusive interview, I trash descriptive variable names and data structures, predict where Scalaz and Cats are going, and provide tips for writing better.<br><br>Don&#39;t miss this episode of `CoRecursive Podcast with Adam Bell`. ? <a href="https://t.co/U3VKCJJQ2N">https://t.co/U3VKCJJQ2N</a></p>&mdash; John Ⓐ De Goes (@jdegoes) <a href="https://twitter.com/jdegoes/status/976632517091508224?ref_src=twsrc%5Etfw">March 22, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_ea10c84052359af4efd14d93a5c9c471]]></wp:meta_key>
		<wp:meta_value><![CDATA[1537048698]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_1804053e43e9b462c195d32490bee528]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">If you enjoyed <a href="https://twitter.com/adamgbell?ref_src=twsrc%5Etfw">@adamgbell</a>&#39;s interview with <a href="https://twitter.com/jimblandy?ref_src=twsrc%5Etfw">@jimblandy</a>  on <a href="https://twitter.com/corecursive?ref_src=twsrc%5Etfw">@corecursive</a> a while back, don&#39;t miss part two!<a href="https://t.co/MAo24HWEqc">https://t.co/MAo24HWEqc</a></p>&mdash; Tim Heaney (@oylenshpeegul) <a href="https://twitter.com/oylenshpeegul/status/1014997510207746049?ref_src=twsrc%5Etfw">July 5, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_1804053e43e9b462c195d32490bee528]]></wp:meta_key>
		<wp:meta_value><![CDATA[1537048698]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_431de07a23457b22be75c9ff76442130]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">Don&#39;t miss my podcast with Adam Bell, in which I reveal—among other scandalous revelations—why you should never under any circumstances use monad transformers in Scala. (Go on, listen, you know want to know!) <a href="https://t.co/3aZjrzRCxb">https://t.co/3aZjrzRCxb</a></p>&mdash; John Ⓐ De Goes (@jdegoes) <a href="https://twitter.com/jdegoes/status/979482177904762883?ref_src=twsrc%5Etfw">March 29, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_431de07a23457b22be75c9ff76442130]]></wp:meta_key>
		<wp:meta_value><![CDATA[1537048698]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_eea3b9cfb6ad5a2a9de86016059bf6f3]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">I really enjoyed listening to Adam Bell and Stephanie Weirich chat about dependent types. Then I watched the video of the Strange Loop talk they mentioned too. Great stuff! <a href="https://t.co/b34tgZynha">https://t.co/b34tgZynha</a></p>&mdash; Tim Heaney (@oylenshpeegul) <a href="https://twitter.com/oylenshpeegul/status/1010557747820224512?ref_src=twsrc%5Etfw">June 23, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_eea3b9cfb6ad5a2a9de86016059bf6f3]]></wp:meta_key>
		<wp:meta_value><![CDATA[1537048699]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_617e82853cecfebf719de7d39a070452]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">If you love podcasts and are interested in functional programming you should definitely check out the <a href="https://twitter.com/corecursive?ref_src=twsrc%5Etfw">@corecursive</a> podcast! Great interviews and technical topics, with brilliant host <a href="https://twitter.com/adamgbell?ref_src=twsrc%5Etfw">@adamgbell</a> <a href="https://twitter.com/hashtag/podcast?src=hash&amp;ref_src=twsrc%5Etfw">#podcast</a> <a href="https://twitter.com/hashtag/code?src=hash&amp;ref_src=twsrc%5Etfw">#code</a> <a href="https://twitter.com/hashtag/functionalprogramming?src=hash&amp;ref_src=twsrc%5Etfw">#functionalprogramming</a></p>&mdash; Rick (@rick_west8) <a href="https://twitter.com/rick_west8/status/1041284093105852417?ref_src=twsrc%5Etfw">September 16, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_617e82853cecfebf719de7d39a070452]]></wp:meta_key>
		<wp:meta_value><![CDATA[1537106282]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_68edc5bf72b2e9fb92a9e85f891cbaeb]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">If you love podcasts and are interested in functional programming you should definitely check out the <a href="https://twitter.com/corecursive?ref_src=twsrc%5Etfw">@corecursive</a> podcast! Great interviews and technical topics, with brilliant host <a href="https://twitter.com/adamgbell?ref_src=twsrc%5Etfw">@adamgbell</a> <a href="https://twitter.com/hashtag/podcast?src=hash&amp;ref_src=twsrc%5Etfw">#podcast</a> <a href="https://twitter.com/hashtag/code?src=hash&amp;ref_src=twsrc%5Etfw">#code</a> <a href="https://twitter.com/hashtag/functionalprogramming?src=hash&amp;ref_src=twsrc%5Etfw">#functionalprogramming</a></p>&mdash; Rick (@rick_west8) <a href="https://twitter.com/rick_west8/status/1041284093105852417?ref_src=twsrc%5Etfw">September 16, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_68edc5bf72b2e9fb92a9e85f891cbaeb]]></wp:meta_key>
		<wp:meta_value><![CDATA[1567457350]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_7759377cd919b8ec43acd0096dbbad55]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="twitter-tweet" data-width="550" data-dnt="true"><p lang="en" dir="ltr">If you love podcasts and are interested in functional programming you should definitely check out the <a href="https://twitter.com/corecursive?ref_src=twsrc%5Etfw">@corecursive</a> podcast! Great interviews and technical topics, with brilliant host <a href="https://twitter.com/adamgbell?ref_src=twsrc%5Etfw">@adamgbell</a> <a href="https://twitter.com/hashtag/podcast?src=hash&amp;ref_src=twsrc%5Etfw">#podcast</a> <a href="https://twitter.com/hashtag/code?src=hash&amp;ref_src=twsrc%5Etfw">#code</a> <a href="https://twitter.com/hashtag/functionalprogramming?src=hash&amp;ref_src=twsrc%5Etfw">#functionalprogramming</a></p>&mdash; Rick (@rick_west8) <a href="https://twitter.com/rick_west8/status/1041284093105852417?ref_src=twsrc%5Etfw">September 16, 2018</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_7759377cd919b8ec43acd0096dbbad55]]></wp:meta_key>
		<wp:meta_value><![CDATA[1537106338]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Host - Adam Gordon Bell</title>
		<link>https://corecursive.com/host/</link>
		<pubDate>Sat, 15 Sep 2018 20:16:44 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=747</guid>
		<description></description>
		<content:encoded><![CDATA[<div class="row">
<div class="col-lg-6 post-text">

<img class="alignnone size-medium wp-image-949" src="https://corecursive.com/wp-content/uploads/2018/09/IMG_1205-e1551831906127-225x300.jpg" alt="" width="225" height="300" />

</div>
<div class="col-lg-6">

Adam Gordon Bell has spent 14+ years in the trenches as a software developer. He is fascinated by functional programming and using type systems to build better software.

He has is an advocate for distributed development teams and has worked remotely since 2011.

He has a <a href="http://adamgordonbell.com/" target="_blank" rel="noopener noreferrer">personal website here</a> and can be found on twitter <strong><a href="https://twitter.com/adamgordonbell" target="_blank" rel="noopener noreferrer">@adamgordonbell</a>.</strong>

He works for <a href="https://www.tenable.com/" target="_blank" rel="noopener noreferrer">Tenable</a> currently and has worked at a variety of <a href="https://www.linkedin.com/in/adamgordonbell/" target="_blank" rel="noopener noreferrer"><strong>software producing companies</strong></a>.

At Tenable he writes scala programs to tear docker containers apart and look for security vulnerabilities.  Working on security software is fun.

He lives in Peterborough, Ontario, Canada with his wife and three cats.

</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>747</wp:post_id>
		<wp:post_date><![CDATA[2018-09-15 16:16:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-09-15 20:16:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[host]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="info"><![CDATA[Info]]></category>
		<category domain="post_format" nicename="post-format-quote"><![CDATA[Quote]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[4798]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-itunes]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_thumbnail]]></wp:meta_key>
		<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_theme]]></wp:meta_key>
		<wp:meta_value><![CDATA[standard]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_width]]></wp:meta_key>
		<wp:meta_value><![CDATA[450]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_placement]]></wp:meta_key>
		<wp:meta_value><![CDATA[top]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-advanced-destination-form-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Concurrency and FP with Riccardo Terrell</title>
		<link>https://corecursive.com/020-concurrency-and-fp-with-riccardo-terrell/</link>
		<pubDate>Wed, 03 Oct 2018 11:30:46 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=777</guid>
		<description></description>
		<content:encoded><![CDATA[When Riccardo Terrell hit the concurrency limitations in a jvm application, he thought back to the haskell he learned in a university course and decided to rewrite the entire thing in haskell.  The immutability of the haskell solution made the concurrency bottleneck non-existent.  It is no surprise that years later, his book on concurrency in .net leans heavily on functional programming constructs and the functional features of F# and C#.

Today we talk about concurrency and functional programming, about F#  how it compares to haskell and scala.  We also chat about CPU architectures, best practises for writing distributed systems and much more.

Thanks to Manning we also have some free copies of the book to give away.  Leave a comment on the webpage for the episode or on twitter if you are interested and I will randomly pick from the interested parties.

<a href="https://corecursive.com/020-concurrency-and-fp-with-riccardo-terrell/">Webpage for episode</a>
<p data-text-truncate-lines="5">Links:</p>

<ul>
 	<li style="list-style-type: none;">
<ul>
 	<li data-text-truncate-lines="5"><a href="https://www.manning.com/books/concurrency-in-dot-net">Concurrency in .NET Book</a></li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>777</wp:post_id>
		<wp:post_date><![CDATA[2018-10-03 07:30:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-10-03 11:30:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[020-concurrency-and-fp-with-riccardo-terrell]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="concurrency"><![CDATA[Concurrency]]></category>
		<category domain="post_tag" nicename="f"><![CDATA[F#]]></category>
		<category domain="post_tag" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="post_tag" nicename="immutability"><![CDATA[Immutability]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-itunes]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_thumbnail]]></wp:meta_key>
		<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_theme]]></wp:meta_key>
		<wp:meta_value><![CDATA[standard]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_width]]></wp:meta_key>
		<wp:meta_value><![CDATA[450]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_placement]]></wp:meta_key>
		<wp:meta_value><![CDATA[top]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-advanced-destination-form-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:13:{i:0;s:25:"01:41 -- Why concurrency?";i:1;s:34:" 03:48 -- Why is concurrency hard?";i:2;s:43:"06:47 -- Functional Approach to Concurrency";i:3;s:27:"07:51 -- An example problem";i:4;s:16:"12:00 -- Why F#?";i:5;s:31:"18:28 -- Hunt the thread unsafe";i:6;s:26:"26:21 -- Data Parallelism ";i:7;s:30:" 33:24 -- Async IO Parallelism";i:8;s:47:"38:10 -- Continuation Passing Style and monads ";i:9;s:40:"43:16 -- Functional Reactive Programming";i:10;s:43:"47:44 -- Distributed Systems best practises";i:11;s:26:" 57:06 -- Thoughts on Book";i:12;s:32:"59:09 -- Ending and twitter draw";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[779]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[7493]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Riccardo Terrell]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Functional Concurrency in .NET Author]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://www.manning.com/books/concurrency-in-dot-net">Book</a><a href="https://twitter.com/trikace">twitter</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/corecursive/020_-_Concurrency.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[62:03]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[48.7 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-episode-number]]></wp:meta_key>
		<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[780]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>163</wp:comment_id>
			<wp:comment_author><![CDATA[Jeison Cardoso]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[cardoso.jeison@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[187.49.237.18]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-10-04 09:50:30]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-10-04 13:50:30]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Good episode.
Any problem with the @adamgbell profile?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1538661030.3298011;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1538668963.0132921;s:5:"event";s:15:"status-approved";s:4:"user";s:4:"adam";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>164</wp:comment_id>
			<wp:comment_author><![CDATA[Adam Bell]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[adam@corecursive.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[2001:1970:5823:3a00:c079:7d12:3bdb:7001]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-10-04 12:03:34]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-10-04 16:03:34]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ah, it was a bad link.  Its @adamgordonbell, fixed. Glad you liked the episode.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>163</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1538669014.163754;s:5:"event";s:9:"check-ham";s:4:"user";s:4:"adam";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>188</wp:comment_id>
			<wp:comment_author><![CDATA[Noah A Rahman]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[selimthegrim@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[38.142.112.10]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-10-12 11:47:48]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-10-12 15:47:48]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Good episode! Would be interested in a free copy if any are left.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1539359268.5247581;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1539442458.932878;s:5:"event";s:15:"status-approved";s:4:"user";s:4:"adam";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>192</wp:comment_id>
			<wp:comment_author><![CDATA[Adam Bell]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[adam@corecursive.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[2001:1970:5823:3a00:8158:75a9:fa5d:840b]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-10-13 10:57:24]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-10-13 14:57:24]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Noah, 
Unfortunately you have missed the book draw, but use code corecpod18 to get 40% books at manning.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>188</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1539442644.4833479;s:5:"event";s:9:"check-ham";s:4:"user";s:4:"adam";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>God&#039;s Programming Language With Philip Wadler</title>
		<link>https://corecursive.com/021-gods-programming-language-with-philip-wadler/</link>
		<pubDate>Mon, 22 Oct 2018 12:00:36 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=781</guid>
		<description></description>
		<content:encoded><![CDATA[<h4><strong>Does god code in Haskell?</strong></h4>
Professor and accomplished programming language researcher Philip Wadler believes that typed lambda calculus was discovered not invented -- part of the underpinnings of the universe itself. As a result, functional programming languages are more fundamental and deeply justified than their alternatives.

We talk about this principle, which has guided his career. Phil takes us through the history of computer science from Turing to Alonzo Church. Eventually we get to what the movie Independence Day got wrong and what language a theoretical creator deity would program in.
<h4><strong>Show notes:</strong></h4>
<ul>
 	<li><a href="https://www.youtube.com/watch?v=IOiZatlZtGU">talk</a></li>
 	<li><a href="http://homepages.inf.ed.ac.uk/wadler/papers/propositions-as-types/propositions-as-types.pdf">paper</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>781</wp:post_id>
		<wp:post_date><![CDATA[2018-10-22 08:00:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-10-22 12:00:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[021-gods-programming-language-with-philip-wadler]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="affine-logic"><![CDATA[Affine Logic]]></category>
		<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="category" nicename="best-of"><![CDATA[Best Of]]></category>
		<category domain="post_tag" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="post_tag" nicename="generics"><![CDATA[Generics]]></category>
		<category domain="post_tag" nicename="haskell"><![CDATA[Haskell]]></category>
		<category domain="post_tag" nicename="logic"><![CDATA[Logic]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="session-types"><![CDATA[Session Types]]></category>
		<category domain="post_tag" nicename="type-classes"><![CDATA[Type Classes]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[782]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-itunes]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_thumbnail]]></wp:meta_key>
		<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_theme]]></wp:meta_key>
		<wp:meta_value><![CDATA[standard]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_width]]></wp:meta_key>
		<wp:meta_value><![CDATA[450]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_placement]]></wp:meta_key>
		<wp:meta_value><![CDATA[top]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-advanced-destination-form-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:17:{i:0;s:43:"01:49 -- Programming Languages are absolute";i:1;s:44:"03:18 -- Computer Science is a horrible name";i:2;s:29:"04:37 -- What is computation?";i:3;s:24:"06:01 -- Lambda Calculus";i:4;s:39:"07:00 -- Women were the first computers";i:5;s:55:"12:24 -- Gödel, undecidability and the halting problem";i:6;s:39:"18:42 -- Types existed before computers";i:7;s:26:"26:49 -- Adjacent Possible";i:8;s:31:"28:51 -- Invention vs Discovery";i:9;s:61:"36:05 -- Logicians and the fundamental nature of the universe";i:10;s:35:"37:29 -- God's Programming Language";i:11;s:32:"40:08 -- Aliens computer viruses";i:12;s:41:"45:07 -- Omniversal Programming Languages";i:13;s:29:"47:48 -- Generics are innate ";i:14;s:24:"50:53 -- Logicians first";i:15;s:35:"56:00 -- Bringing Monads to haskell";i:16;s:36:"58:44 -- The secret to good research";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Philip Wadler]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Professor of Theoretical Computer Science]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="http://homepages.inf.ed.ac.uk/wadler/">University of Edinburgh Webpage</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[25030]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive//021_-_Gods_Programming_Language.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[60:13]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[51.4 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-episode-number]]></wp:meta_key>
		<wp:meta_value><![CDATA[21]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[783]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>215</wp:comment_id>
			<wp:comment_author><![CDATA[Habib Alamin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ha.alamin@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[95.144.160.232]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-10-23 13:33:51]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-10-23 17:33:51]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'd really like a source on the claim that men basically kicked women out of computing when they figured out it was interesting work, because it sounds like an absurd claim — and I'm really not paraphrasing that much; listen from 7 minutes in if you don't believe me — and it's pushing an agenda.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1540316031.4212351;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1540317645.4646211;s:5:"event";s:15:"status-approved";s:4:"user";s:4:"adam";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>218</wp:comment_id>
			<wp:comment_author><![CDATA[Adam Gordon Bell]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[adam@corecursive.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[2001:1970:5823:3a00:694e:53c9:fdd7:76cd]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-10-23 14:05:19]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-10-23 18:05:19]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It sounded to me like Phil source was someone whom actually experienced this, a friends mother. It doesn't seem like an absurd claim to me.
]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>215</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1540317919.9217341;s:5:"event";s:9:"check-ham";s:4:"user";s:4:"adam";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>220</wp:comment_id>
			<wp:comment_author><![CDATA[Habib Alamin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ha.alamin@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[2001:1970:5823:3a00:694e:53c9:fdd7:76cd]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-10-23 14:53:37]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-10-23 18:53:37]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[
I’m talking about a source that can be corroborated, perhaps replicated (maybe a study), or somehow fact-checked in one way or another.

The personal experience of someone I don’t know and their perspective on that personal experience is not a credible source. There are a lot of things that someone could mean when they say they were being pushed out before we even get into its validity — anything from “women began to be blacklisted from every place that did computing” to, “so many men started coming in that the ratio of women started decreasing precipitously”.

It sounded to me like Phil’s source was more than just his friend’s mother, anyway; Phil referred to “other historical documents describing that” which he found after his friend’s mother said this to him. I would like to know which historical documents he’s talking about.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>218</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1540320817.9456379;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>225</wp:comment_id>
			<wp:comment_author><![CDATA[Chris]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[csasarak@mailbox.org]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[50.204.61.114]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-10-24 10:59:57]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-10-24 14:59:57]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[A quick Google has only killed a couple people. This paper from the ACM, see the section titled "The First Machines": https://courses.cs.washington.edu/courses/csep590/06au/readings/p175-gurer.pdf

This article from NPR touches on the overall trend as well: https://www.npr.org/sections/alltechconsidered/2014/10/06/345799830/the-forgotten-female-programmers-who-created-modern-tech

This article in wikipedia is also well-cited so any of those sources might also help. https://en.wikipedia.org/wiki/Women_in_computing#1940s]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>220</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1540393197.3970239;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1540394423.747077;s:5:"event";s:15:"status-approved";s:4:"user";s:4:"adam";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>226</wp:comment_id>
			<wp:comment_author><![CDATA[Tangled Z]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[zans.lancs@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[81.147.77.66]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-10-24 13:45:46]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-10-24 17:45:46]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Mar Hicks has recently released a book on this: Programmed Inequality: How Britain Discarded Women Technologists and Lost Its Edge in Computing .]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>215</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1540403146.5131741;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>227</wp:comment_id>
			<wp:comment_author><![CDATA[Habib Alamin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ha.alamin@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[95.144.160.232]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-10-25 04:25:45]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-10-25 08:25:45]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I was asking specifically about Philip Wadler's sources, not Google search results.

That said, thank you for these links. I will go through them when I get a chance.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>225</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1540455945.6441319;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>228</wp:comment_id>
			<wp:comment_author><![CDATA[Habib Alamin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ha.alamin@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[95.144.160.232]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-10-25 04:28:44]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-10-25 08:28:44]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks. What did you think of it (assuming you read it)?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>226</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1540456124.897541;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>231</wp:comment_id>
			<wp:comment_author><![CDATA[Habib Alamin]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ha.alamin@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[95.144.160.232]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-10-27 14:20:03]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-10-27 18:20:03]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[None of these sources talk about men “pushing” women out, much less as they “figured out” that it was interesting work. It looks less like men pushed women out when they figured out computing was interesting work and more like higher numbers of men started joining the field as it actually started changing.

In other words, more men started joining as it actually _became_ more interesting (less repetitive mathematical calculation work, more career instead of job) and as it started being more lucrative, too. The end of male conscription also surely had an impact.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>225</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1540664403.425108;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>240</wp:comment_id>
			<wp:comment_author><![CDATA[haisheng]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[freizl@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[2601:648:8800:fb0:6d29:3127:c6ac:b62]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-11-05 00:54:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-11-05 05:54:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[what was the paper Philip said "very readable and entertaining" by Russell?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1541397278.5129421;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>241</wp:comment_id>
			<wp:comment_author><![CDATA[Tom]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[Tom@email.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[2001:1970:5823:3a00:701c:962c:1fb9:1283]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-11-05 07:17:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-11-05 12:17:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I think this is Russell's paper that was referenced in the podcast; it introduces the theory of types and Philip Wadler mentioned it is an example of a very readable paper: [Mathematical Logic as Based on the Theory of Types](https://fi.ort.edu.uy/innovaportal/file/20124/1/37-russell1905.pdf)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>240</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1541420237.2483771;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1541420328.9131589;s:5:"event";s:15:"status-approved";s:4:"user";s:4:"adam";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>Big Ball Of Mud - Architecture and Services with Wade Waldron</title>
		<link>https://corecursive.com/22-big-ball-of-mud-architecture-and-services-with-wade-waldron/</link>
		<pubDate>Wed, 14 Nov 2018 14:00:42 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=851</guid>
		<description></description>
		<content:encoded><![CDATA[In 1997, researchers analyzed the actual architectures of software in the field.  The horrifying results:  a large portion were best described by colorful phrases like "big ball of mud" and "sweep it under the rug."  

Wade Waldron talks about designing reactive applications and systems and how to avoid these anti-patterns.  We also cover when a monolith is the right choice, hexagonal architecture,  what to do if you're stuck with a big ball of mud and more.

Links:
<ul>
 	<li><a href="http://www.laputan.org/mud/">Big Ball Of Mud Paper</a></li>
 	<li><a href="https://hackernoon.com/demystifying-the-hexagon-5e58cb57bbda">Hexagonal Architecture</a></li>
 	<li><a href="https://www.lightbend.com/learn/lightbend-reactive-architecture.">Lightbend Reactive Architecture Course</a></li>
</ul>
This podcast originally published here :

<a href="https://corecursive.com/22-big-ball-of-mud-architecture-and-services-with-wade-waldron/">https://corecursive.com/22-big-ball-of-mud-architecture-and-services-with-wade-waldron/</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>851</wp:post_id>
		<wp:post_date><![CDATA[2018-11-14 09:00:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-11-14 14:00:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[22-big-ball-of-mud-architecture-and-services-with-wade-waldron]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="architecture"><![CDATA[Architecture]]></category>
		<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="distributed-systems"><![CDATA[Distributed Systems]]></category>
		<category domain="post_tag" nicename="micro-services"><![CDATA[Micro Services]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-itunes]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_thumbnail]]></wp:meta_key>
		<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_theme]]></wp:meta_key>
		<wp:meta_value><![CDATA[standard]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_width]]></wp:meta_key>
		<wp:meta_value><![CDATA[450]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_placement]]></wp:meta_key>
		<wp:meta_value><![CDATA[top]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-advanced-destination-form-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/Many_Small_Balls_Of_Mud.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[60:26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:17:{i:0;s:35:"02:35 -- What is a Big Ball Of Mud?";i:1;s:35:"04:21 -- Improving your ball of mud";i:2;s:24:"09:00 -- Why use events?";i:3;s:27:"11:19 -- Isolating services";i:4;s:29:"15:35 -- Isolation Of Failure";i:5;s:32:"19:03 -- Making failure explicit";i:6;s:26:"21:03 -- Circuit Breakers ";i:7;s:28:"24:45 -- Autonomous Services";i:8;s:35:"29:52 -- How big are micro-services";i:9;s:28:"32:30 -- Scale vs Complexity";i:10;s:38:"34:25 -- Service Oriented Architecture";i:11;s:38:"36:59 -- SOA prevents big balls of mud";i:12;s:25:"40:38 -- Breaking Changes";i:13;s:42:"43:25 -- Startups and unknown requirements";i:14;s:32:"47:45 -- Hexagonal Architecture ";i:15;s:31:"54:38 -- Science Fiction Author";i:16;s:38:"56:36 -- Reactive Architecture Courses";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[7986]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Wade Waldron]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://www.lightbend.com/learn/lightbend-reactive-architecture">Wade's Free  Reactive Architecture Course</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Software Consultant]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[856]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_7ead07ea9a48981f2db821c07fb9fa4c]]></wp:meta_key>
		<wp:meta_value><![CDATA[<blockquote class="wp-embedded-content" data-secret="JNIRYTp8gx"><a href="https://corecursive.com/22-big-ball-of-mud-architecture-and-services-with-wade-waldron/">Big Ball Of Mud &#8211; Architecture and Services with Wade Waldron</a></blockquote><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" style="position: absolute; clip: rect(1px, 1px, 1px, 1px);" src="https://corecursive.com/22-big-ball-of-mud-architecture-and-services-with-wade-waldron/embed/#?secret=JNIRYTp8gx" data-secret="JNIRYTp8gx" width="600" height="338" title="&#8220;Big Ball Of Mud &#8211; Architecture and Services with Wade Waldron&#8221; &#8212; CoRecursive Podcast" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_7ead07ea9a48981f2db821c07fb9fa4c]]></wp:meta_key>
		<wp:meta_value><![CDATA[1542223602]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[853]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>1849</wp:comment_id>
			<wp:comment_author><![CDATA[moto x3m]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[tammarajoyner@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://motox3m.games/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[46.161.62.118]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-05-14 06:04:37]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-05-14 10:04:37]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello Dear, are you truly visiting this site on a regular basis, if 
so after that you will without doubt obtain pleasant knowledge.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1589450678.0100629;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>The Little Typer With Dan Friedman and David Christiansen</title>
		<link>https://corecursive.com/023-little-typer-and-pie-language/</link>
		<pubDate>Sat, 01 Dec 2018 20:25:59 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=872</guid>
		<description></description>
		<content:encoded><![CDATA[<em>When it comes to type systems "I am, so far, only in the dependent types camp" - Daniel P. Friedman</em>

You can write more correct software and even rigorous mathematical proofs.  Prepare for some mind stretching.

Previous guests like Edwin Brady and Stephanie Weirich have discussed some of the exciting things a dependent type system can do Miles Sabin said dependent types are surely the future. This interview is to get us ready for the future.

Daniel P. Friedman is famous for his "Little" series of books. Little Schemer, Little prover, Little MLer and so on. These books are held in high regard.

Here is a quote from Doug Crockford: <em> "Little Schemer teaches one thing, a thing that is very difficult to teach, a thing that every profession programmer should know, and it does it really well. These are lessons that stick with you."</em>
The latest one is the little typer and its about types. Specifically dependent types.

Dan's coauthor is David Thrane Christiansen, Idris contributor, and host of a podcast about type theory that is way over my head.

Together they are going to teach us how the programming skills we already have can be used to develop rigorous mathematical proofs.

Stay tuned to the end for my guide to working thru the book.

Originally published at CoRecursive <a href="https://corecursive.com/023-little-typer-and-pie-language/">here</a>

<a href="https://join.slack.com/t/corecursive/shared_invite/enQtNDg2ODIwNzg5MjgwLWIwN2JiZTRjYTYxMTljNzNjYjcxMzg3YmUyZTI2OTE5NmIyYTBkZTk4MjY1MWMxODE3MTIxZmNhYWY3ZDcxN2M">Join Our Slack Community</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>872</wp:post_id>
		<wp:post_date><![CDATA[2018-12-01 15:25:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-01 20:25:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[023-little-typer-and-pie-language]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="author"><![CDATA[Author]]></category>
		<category domain="post_tag" nicename="curry-howard-correspondence"><![CDATA[Curry–Howard correspondence]]></category>
		<category domain="post_tag" nicename="dependent-types"><![CDATA[Dependent Types]]></category>
		<category domain="post_tag" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="post_tag" nicename="haskell"><![CDATA[Haskell]]></category>
		<category domain="post_tag" nicename="idris"><![CDATA[Idris]]></category>
		<category domain="post_tag" nicename="pie-language"><![CDATA[Pie Language]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="proofs"><![CDATA[Proofs]]></category>
		<category domain="post_tag" nicename="scheme"><![CDATA[Scheme]]></category>
		<category domain="post_tag" nicename="totality"><![CDATA[Totality]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-itunes]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_thumbnail]]></wp:meta_key>
		<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_theme]]></wp:meta_key>
		<wp:meta_value><![CDATA[standard]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_width]]></wp:meta_key>
		<wp:meta_value><![CDATA[450]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_placement]]></wp:meta_key>
		<wp:meta_value><![CDATA[top]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-advanced-destination-form-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:8:{i:0;s:34:"02:38 -- What are Dependent Types?";i:1;s:43:"05:40 -- Dependent types or no types at all";i:2;s:36:"13:20 -- on 'The Little' Book format";i:3;s:21:"17:14 -- Curry-Howard";i:4;s:23:"22:00 -- Normalization ";i:5;s:26:"34:35 -- On Writing Proofs";i:6;s:22:"44:41 -- On Recursion ";i:7;s:31:"64:45 -- Using The Pie Language";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Daniel P. Friedman and David Thrane Christiansen]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Authors]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://www.amazon.com/Little-Typer-MIT-Press/dp/0262536439/ref=sr_1_1?ie=UTF8&qid=1543692985&sr=8-1&keywords=the+little+typer">Book Page</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[16453]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[875]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
		<wp:meta_value><![CDATA[Little Typer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[You can write more correct software and even rigorous mathematical proofs.  An interview with authors of "The Little Typer"]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
		<wp:meta_value><![CDATA[63]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/corecursive/Little_Typer_And_Pie_Language.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[67:20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[42.02 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[874]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>286</wp:comment_id>
			<wp:comment_author><![CDATA[Adam Gordon Bell]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[adam@corecursive.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[2001:1970:5823:3a00:90e8:98c2:ff82:91c6]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-12-01 15:37:27]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-12-01 20:37:27]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Here is the mentioned links:
<ul>
<li><a href="https://github.com/jadley08/Racket/tree/master/DependentTypes" rel="nofollow">Jacob Adley in github</a> </li>
<li><a href="http://davidchristiansen.dk/tutorials/nbe/" target="_blank" rel="noopener nofollow">write a type checker for pie</a></li>
<li><a href="https://www.youtube.com/watch?v=1BWYy2-WM-o" target="_blank" rel="noopener nofollow">Pie Presentation at Flatmap Oslo</a></li>
<li><a href="https://docs.racket-lang.org/pie/index.html#%28part._.Using_.Pie_in_.Dr.Racket%29" target="_blank" rel="noopener nofollow">Pie Lang Docs </a></li>

<li><a href="https://www.thestrangeloop.com/2018/a-little-taste-of-dependent-types.html" target="_blank" rel="noopener nofollow">Pie Lang at Strange Loop</a></li>
<ul>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1543696647.1147261;s:5:"event";s:9:"check-ham";s:4:"user";s:4:"adam";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>297</wp:comment_id>
			<wp:comment_author><![CDATA[F#周报2018年第49期 &#8211; 技术成就梦想]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://sparkgis.com/2018/12/08/f%e5%91%a8%e6%8a%a52018%e5%b9%b4%e7%ac%ac49%e6%9c%9f/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[2a02:4780:3:1:0:0:0:e]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-12-08 09:03:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-12-08 14:03:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] The Little Typer [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1544277796.4012539;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>Software as a Reflection of Values With Bryan Cantrill</title>
		<link>https://corecursive.com/024-software-as-a-reflection-of-values-with-bryan-cantrill/</link>
		<pubDate>Tue, 18 Dec 2018 13:30:59 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=891</guid>
		<description></description>
		<content:encoded><![CDATA[Which operating system is the best? Which programming language is the best? What text editor?

Bryan Cantrill, CTO of Joyent says that is the wrong question. Languages, operating systems and communities have to make trade offs and they do that based on their values. So the right language is the one who's values align with you and your projects goals.

This simple idea carries a lot of weight and I think has the potential to lift up technical discussions to a higher level of discourse. You will find it to be a helpful frame next time you need to make a technical decision. Bryan is also pretty excited about how the values of the rust community align with his values for system software.

Also we cover Oberon, Clean and Simula, none of which I've never heard of and how IBM System/370 's Global Trace Facility doesn't hold a candle to DTrace.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>891</wp:post_id>
		<wp:post_date><![CDATA[2018-12-18 08:30:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-12-18 13:30:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[024-software-as-a-reflection-of-values-with-bryan-cantrill]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="approachability"><![CDATA[Approachability]]></category>
		<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="category" nicename="best-of"><![CDATA[Best Of]]></category>
		<category domain="post_tag" nicename="community"><![CDATA[Community]]></category>
		<category domain="post_tag" nicename="freebsd"><![CDATA[FreeBSD]]></category>
		<category domain="post_tag" nicename="nodejs"><![CDATA[NodeJs]]></category>
		<category domain="post_tag" nicename="performance"><![CDATA[Performance]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="rigor"><![CDATA[Rigor]]></category>
		<category domain="post_tag" nicename="rust"><![CDATA[Rust]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-itunes]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_thumbnail]]></wp:meta_key>
		<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_theme]]></wp:meta_key>
		<wp:meta_value><![CDATA[standard]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_width]]></wp:meta_key>
		<wp:meta_value><![CDATA[450]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_placement]]></wp:meta_key>
		<wp:meta_value><![CDATA[top]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-advanced-destination-form-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:11:{i:0;s:42:"01:46 -- Programming Languages have values";i:1;s:37:"05:23 -- What are Javascript's Values";i:2;s:29:"08:53 -- What are Go's Values";i:3;s:29:"20:50 -- On Operating Systems";i:4;s:25:"28:07 -- On Heterogeneity";i:5;s:43:"29:48 -- Making the case for Scala's values";i:6;s:22:"31:45 -- Rust's Values";i:7;s:28:"36:54 -- On Approachability ";i:8;s:24:"54:29 -- On Null vs ADTs";i:9;s:38:"56:21 -- Oberon, Simula and OS-370 GTF";i:10;s:63:"61:01 -- Random questions: Uber, Amazon, Oracle, GPL, Microsoft";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[893]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[15407]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Bryan Cantrill]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[CTO of Joyent]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="http://dtrace.org/blogs/bmc">Blog</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/corecursive/024_-_Software_Values.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Which operating system is the best? Which programming language is the best? What text editor?Bryan Cantrill, CTO of Joyent says that is the wrong question. Languages, operating systems and communities have to make trade offs and they do that based on their values. So the right language is the one who's values align with you and your projects goals.]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[79:05]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[895]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>301</wp:comment_id>
			<wp:comment_author><![CDATA[Adam Gordon Bell]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[adam@corecursive.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[2001:1970:5823:3a00:d4cf:8299:ec2a:5f4f]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-12-18 09:38:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-12-18 14:38:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Show Links
<ul>

<li><a href="https://www.slideshare.net/bcantrill/platform-values-rust-and-the-implications-for-system-software" rel="nofollow">Software Values Slides</a></li>
<li><a href="https://www.amazon.ca/dp/0321968972/?coliid=I18SXDJ4KZD0LT&amp;colid=35837B79AK90A&amp;psc=0&amp;ref_=lv_ov_lig_dp_it" rel="nofollow">The Design and Implementation of the FreeBSD Operating System</a></li>
<li><a href="https://news.ycombinator.com/item?id=8869401" rel="nofollow">Microsoft should buy github</a></li>
<li><a href="http://dtrace.org/blogs/bmc/2018/02/03/talks/" rel="nofollow">All Bryan’s Talks</a></li>
</ul>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1545143932.2938919;s:5:"event";s:9:"check-ham";s:4:"user";s:4:"adam";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>302</wp:comment_id>
			<wp:comment_author><![CDATA[Adam Gordon Bell]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[adam@corecursive.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[2001:1970:5823:3a00:616c:7445:e6dd:948e]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2018-12-18 21:32:23]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2018-12-19 02:32:23]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[When Bryan mentioned the Microsoft/Netflix case, he of course meant the Microsoft/Netscape case.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1545186743.2675641;s:5:"event";s:9:"check-ham";s:4:"user";s:4:"adam";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>316</wp:comment_id>
			<wp:comment_author><![CDATA[Future of ZFS | BSD Now 279 | Jupiter Broadcasting]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://www.jupiterbroadcasting.com/128671/future-of-zfs-bsd-now-279/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[216.66.24.34]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-01-03 20:25:37]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-01-04 01:25:37]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Software as a Reflection of Values With Bryan Cantrill [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1546565137.2072539;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>322</wp:comment_id>
			<wp:comment_author><![CDATA[Garrett van Wageningen]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ghvanw283@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[2600:387:a:5:0:0:0:ae]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-01-08 11:06:24]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-01-08 16:06:24]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Loved this episode! So glad it ran long!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1546963584.631027;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>1385</wp:comment_id>
			<wp:comment_author><![CDATA[Roger Barraud]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[roger.barraud.lists@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://roggablog.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[103.53.23.14]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-01-09 03:05:15]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-01-09 08:05:15]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Time for an update?

I need my Rantrill Fix regularly!!1!

:-)

Thanks y'all!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1578557115.210279;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>Burn out and Recreational Coding with Jamis Buck</title>
		<link>https://corecursive.com/025-burn-out-and-recreational-programming/</link>
		<pubDate>Fri, 25 Jan 2019 14:00:02 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=912</guid>
		<description></description>
		<content:encoded><![CDATA[A decade ago Jamis Buck was not loving his job. He was an important open source contributor. He worked for the hottest trendiest software company at the time, 37 signals, creator of ruby on rails.

He was on top of the world but also he was burnt out.

Today Jamis talks about how he overcame burn out.

We discuss how his struggle lead him to write a book about generating mazes and another about building a ray tracer. His books are great fun, and all about recreational programming.  You will learn to build things with a focus not on the latest trends in software development and not even a specific programming language.

<strong>The focus, instead, is on fun.</strong>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>912</wp:post_id>
		<wp:post_date><![CDATA[2019-01-25 09:00:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-25 14:00:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[025-burn-out-and-recreational-programming]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="3d-rendering"><![CDATA[3D rendering]]></category>
		<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="author"><![CDATA[Author]]></category>
		<category domain="post_tag" nicename="burn-out"><![CDATA[Burn out]]></category>
		<category domain="post_tag" nicename="dijkstras-algorithm"><![CDATA[Dijkstra's algorithm]]></category>
		<category domain="post_tag" nicename="maze-generation"><![CDATA[Maze Generation]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="ray-tracer"><![CDATA[Ray Tracer]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-itunes]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_thumbnail]]></wp:meta_key>
		<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_theme]]></wp:meta_key>
		<wp:meta_value><![CDATA[standard]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_width]]></wp:meta_key>
		<wp:meta_value><![CDATA[450]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_placement]]></wp:meta_key>
		<wp:meta_value><![CDATA[top]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-advanced-destination-form-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:12:{i:0;s:36:"1:50 -- Why recreational programming";i:1;s:41:"3:50 -- How do you know you are burnt out";i:2;s:38:"13:50 -- Specialization and burn out  ";i:3;s:32:"15:11 -- What is maze generation";i:4;s:49:"29:20 -- Dijkstra's algorithm and visual learning";i:5;s:38:"32:22 -- 3d Rendering and Ray tracers ";i:6;s:31:"37:39  -- What is a ray tracer?";i:7;s:34:"41:01 -- Tricked in linear algebra";i:8;s:50:"42:05 -- Why is Recreational Programming Valuable?";i:9;s:20:"49:50 -- Going Deep ";i:10;s:32:"52:35 -- Comonadic Mazes anyone?";i:11;s:21:"55:02 -- How to learn";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[7194]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[917]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[62:01]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[42 Mb]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Jamis Buck]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Author and Recreational Programmer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="http://www.raytracerchallenge.com/">The Ray Tracer Challenge</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/corecursive/025-recreational_programming.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
		<wp:meta_value><![CDATA[recreational coding]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[A decade ago Jamis Buck was not loving his job. He was an important open source contributor. He worked for the hottest trendiest software company at the time, 37 signals, creator of ruby on rails. He was on top of the world but also he was burnt out.]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
		<wp:meta_value><![CDATA[40]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_7449bbc9a01ae01301447663d3ee525f]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_7e88e4f47f000efdfebb62cfd56a21b2]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_f81b8a7cdffd4bd38bee75cbdd565bbf]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_8fc1c3a244163750cafe229f513f7e12]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[916]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>330</wp:comment_id>
			<wp:comment_author><![CDATA[Adam Gordon Bell]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[adam@corecursive.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[2001:1970:5823:3a00:494a:3d7a:2870:6323]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-01-25 12:19:50]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-01-25 17:19:50]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Links:
<ul>
 	<li><a href="http://weblog.jamisbuck.org/" rel="nofollow">Jamis' Blog</a></li>
 	<li><a href="http://www.mazesforprogrammers.com" rel="nofollow">Mazes For Programmers</a></li>
 	<li><a href="http://www.raytracerchallenge.com/" rel="nofollow">Ray Tracer Challenge</a></li>
 	<li><a href="https://medium.com/@jamis" rel="nofollow">Jamis's Medium Posts</a></li>
</ul>]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1548436790.6241059;s:5:"event";s:9:"check-ham";s:4:"user";s:4:"adam";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>Modern Systems Programming And Scala Native With Richard Whaling</title>
		<link>https://corecursive.com/modern-systems-programming-and-scala-native-with-richard-whaling/</link>
		<pubDate>Fri, 22 Feb 2019 11:00:02 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=934</guid>
		<description></description>
		<content:encoded><![CDATA[Richard Whaling has an interesting perspective on software development. If you write software for the JVM or if you are interested in low level system programming, or even doing data heavy or network heavy IO programming then you will find this interview interesting.

We discuss how to build faster software in a modern fashion by using glibc and techniques from system programming. This means using raw pointers and manual memory management but from a modern language.

Richard also shares some perspectives on better utilizing the underlying operating system and how we can build better software by depending on services rather than libraries.

Links:
<ul>
 	<li><a href="https://beej.us/guide/bgc/">Beej's Guide to C</a></li>
 	<li><a href="http://beej.us/guide/bgipc/">Beej's Guide to Unix Interprocess Communication</a></li>
 	<li><a href="http://beej.us/guide/bgnet/">Beej's Guide to Network Programming</a></li>
 	<li><a href="https://www.destroyallsoftware.com/screencasts/catalog">Gary Bernhardt's Destroy All Software Screencasts (Web Server from Scratch, Malloc from scratch, shell from scratch)</a></li>
 	<li>Stevens &amp; Rago Systems Programming books:
<ul>
 	<li><a href="https://www.amazon.com/Advanced-Programming-UNIX-Environment-3rd/dp/0321637739">Advanced Programming UNIX Environment</a></li>
 	<li><a href="https://www.amazon.com/Unix-Network-Programming-Sockets-Networking/dp/0131411551">Unix Network Programming - Sockets</a></li>
 	<li><a href="https://www.amazon.com/UNIX-Network-Programming-Interprocess-Communications/dp/0130810819">UNIX Network programming - Interprocess Communication</a></li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>934</wp:post_id>
		<wp:post_date><![CDATA[2019-02-22 06:00:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-02-22 11:00:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[modern-systems-programming-and-scala-native-with-richard-whaling]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="big-data"><![CDATA[Big Data]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="memory-management"><![CDATA[Memory Management]]></category>
		<category domain="post_tag" nicename="network"><![CDATA[Network]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="pointers"><![CDATA[Pointers]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="post_tag" nicename="scala-native"><![CDATA[Scala Native]]></category>
		<category domain="post_tag" nicename="systems-programming"><![CDATA[Systems Programming]]></category>
		<category domain="post_tag" nicename="unix"><![CDATA[Unix]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-itunes]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_thumbnail]]></wp:meta_key>
		<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_theme]]></wp:meta_key>
		<wp:meta_value><![CDATA[standard]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_width]]></wp:meta_key>
		<wp:meta_value><![CDATA[450]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_placement]]></wp:meta_key>
		<wp:meta_value><![CDATA[top]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-advanced-destination-form-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:17:{i:0;s:30:"02:33 -- What is scala native?";i:1;s:35:"03:23 -- What should be interested?";i:2;s:18:"07:10 -- Libraries";i:3;s:18:"10:54 -- C interop";i:4;s:42:"15:29 -- Super linear performance increase";i:5;s:27:"18:21 -- Google N Gram data";i:6;s:17:"22:46 -- On Spark";i:7;s:31:"26:49 -- Mixing GC and off heap";i:8;s:31:"29:31 -- The C standard library";i:9;s:42:"32:17 -- Building a webserver from scratch";i:10;s:49:"35:13 -- Gratuitous DIY and the dependency crisis";i:11;s:29:"40:17 -- on Containers vs JVM";i:12;s:35:"41:24 -- Using the operating system";i:13;s:35:"44:28 -- Learning to lean on the OS";i:14;s:29:"47:16 -- Glibc is a challenge";i:15;s:22:"49:03 -- Posix Sockets";i:16;s:14:"52:37 -- Outro";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[936]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Richard Whaling]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Author and Fan of systems programming ;) ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/richardwhaling">@richardwhaling</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[7398]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/corecursive/026_-_Scala_Native.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[937]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>1042</wp:comment_id>
			<wp:comment_author><![CDATA[По следам русского Scala-движа. Часть 2 &#8211; CHEPA website]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://chepa.net/all/2019/09/16/%d0%bf%d0%be-%d1%81%d0%bb%d0%b5%d0%b4%d0%b0%d0%bc-%d1%80%d1%83%d1%81%d1%81%d0%ba%d0%be%d0%b3%d0%be-scala-%d0%b4%d0%b2%d0%b8%d0%b6%d0%b0-%d1%87%d0%b0%d1%81%d1%82%d1%8c-2</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[159.69.249.80]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-09-16 04:23:31]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-09-16 08:23:31]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] пишет книгу о&nbsp;Scala Native&nbsp;— материала уже много. Он&nbsp;ходит на&nbsp;подкасты и&nbsp;рассказывает как использует это в&nbsp;продакшн. [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1568622211.457938;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>Abstraction and Learning with Runar Bjarnason</title>
		<link>https://corecursive.com/027-abstraction-with-runar-bjarnason/</link>
		<pubDate>Fri, 15 Mar 2019 10:00:45 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=942</guid>
		<description></description>
		<content:encoded><![CDATA[What is abstraction?  Can we have a precise definition of abstraction that, once understood, makes writing software simpler?

Runar has thought a lot about abstraction and how we can choose the proper level for the software we write.

In this interview, he explains these concepts using examples from the real world. Examples include SQL, effectful computing and several others areas.

We also talk about how to learn and acquire the skills necessary to understand complex concepts.  Concepts like highly polymorphic code and category theory.

Runar also explains his latest project unison computing and how it uses the correct level of abstraction to rethink several foundation ideas in software development.

&nbsp;

Links:
<ul>
 	<li><a href="https://www.youtube.com/watch?v=GqmsQeSzMdw">Constraints Liberate</a></li>
 	<li><a href="http://blog.higher-order.com/blog/2014/12/21/maximally-powerful/">Maximally Powerful, Minimally Useful</a></li>
 	<li><a href="http://unisonweb.org/posts/">Unison Computing</a></li>
</ul>
<a href="https://corecursive.com/027-abstraction-and-stuff-with-runar-bjarnason/">Webpage for show</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>942</wp:post_id>
		<wp:post_date><![CDATA[2019-03-15 06:00:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-15 10:00:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[027-abstraction-with-runar-bjarnason]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[944]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-itunes]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_thumbnail]]></wp:meta_key>
		<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_theme]]></wp:meta_key>
		<wp:meta_value><![CDATA[standard]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_width]]></wp:meta_key>
		<wp:meta_value><![CDATA[450]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_placement]]></wp:meta_key>
		<wp:meta_value><![CDATA[top]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-advanced-destination-form-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:23:{i:0;s:28:"01:30 -- What is Abstraction";i:1;s:18:"05:00 -- Variables";i:2;s:27:"07:39 -- On Printing things";i:3;s:36:"11:29 -- Representing SQL as Strings";i:4;s:37:"14:20 -- Precision of natural numbers";i:5;s:22:"15:00 -- Polymorphism ";i:6;s:20:"16:37 -- Adjunctions";i:7;s:18:"18:09 -- Variance ";i:8;s:34:"19:12 -- Abstraction and Functions";i:9;s:35:"20:56 -- general recursion vs folds";i:10;s:21:"21:58 -- IO vs Actors";i:11;s:37:"24:20 -- Adam struggles with IO[Unit]";i:12;s:19:"26:35 -- 90's Runar";i:13;s:34:"27:53 -- Learning through examples";i:14;s:42:"29:41 -- Examples and applicative functors";i:15;s:34:"31:52 -- Learning through osmosis ";i:16;s:30:"33:51 -- Learning via teaching";i:17;s:25:"34:53 -- Unison Computing";i:18;s:44:"36:12 -- Representing programs symbolically ";i:19;s:38:"38:56 -- Content addressable functions";i:20;s:31:"40:35 -- Distributed small talk";i:21;s:41:"43:45 -- Implementing the unison compiler";i:22;s:30:"45:53 -- Rethinking computing ";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Rúnar Bjarnason]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Author, Functional Programmer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/runarorama">@runarorama</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[10104]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/preview/corecursive/027_runar.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[49:28]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[43.4 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[571]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Data and Scale with Pat  Helland</title>
		<link>https://corecursive.com/028-data-pat-heland/</link>
		<pubDate>Sun, 31 Mar 2019 19:00:43 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=960</guid>
		<description></description>
		<content:encoded><![CDATA[Pat Helland has a wealth of knowledge on building distributed data stores. He has been working on distributed data stores since 1978, when he worked on the tandem fault-tolerant database. Since then he has been involved in many distributed database projects.

Here is the key thing, he is also a master at explaining the key ideas of distributed systems using simple language and practical everyday examples. Can you get married on the phone? How are messaging systems and idempotence like regional offices communicating via fax machine? These are the type of metaphor that Pat uses.
Today, Pat sits down with me and teaches me about dealing with data in a distributed, fault tolerant, infinitely scaling world.
<h3>Links:</h3>
<ul>
 	<li><a href="https://queue.acm.org/detail.cfm?id=2884038">Immutability Changes Everything</a></li>
 	<li><a href="https://cacm.acm.org/magazines/2018/10/231368-mind-your-state-for-your-state-of-mind/abstract">Mind Your State for Your State of Mind</a></li>
 	<li><a href="https://cacm.acm.org/magazines/2018/8/229763-consistently-eventual/abstract">Consistently Eventual</a></li>
 	<li><a href="https://queue.acm.org/detail.cfm?ref=rss&amp;id=2953944">Standing on Distributed Shoulders of Giants</a></li>
 	<li><a href="https://queue.acm.org/detail.cfm?id=2983199">The Singular Success of SQL</a></li>
 	<li><a href="https://queue.acm.org/detail.cfm?id=3025012">Life Beyond Distributed Transactions</a></li>
 	<li><a href="https://muckrack.com/pat-helland/articles">Pat's articles ON ACM Queue</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>960</wp:post_id>
		<wp:post_date><![CDATA[2019-03-31 15:00:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-03-31 19:00:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[028-data-pat-heland]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="big-data"><![CDATA[Big Data]]></category>
		<category domain="post_tag" nicename="databases"><![CDATA[Databases]]></category>
		<category domain="post_tag" nicename="distributed-systems"><![CDATA[Distributed Systems]]></category>
		<category domain="post_tag" nicename="io"><![CDATA[IO]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="relational-databases"><![CDATA[Relational Databases]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[5597]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-itunes]]></wp:meta_key>
		<wp:meta_value><![CDATA[no]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_thumbnail]]></wp:meta_key>
		<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_use_theme]]></wp:meta_key>
		<wp:meta_value><![CDATA[standard]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_width]]></wp:meta_key>
		<wp:meta_value><![CDATA[450]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-player_placement]]></wp:meta_key>
		<wp:meta_value><![CDATA[top]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[libsyn-post-episode-advanced-destination-form-data]]></wp:meta_key>
		<wp:meta_value><![CDATA[[]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:20:{i:0;s:33:"01:10  -- 40 years of data stores";i:1;s:41:"03:05 -- When did data become so complex?";i:2;s:57:"04:10 -- Between being and end transaction, a singularity";i:3;s:42:"06:08 -- at what size does RDMS break down";i:4;s:25:"08:46 -- Sharding example";i:5;s:29:"10:03 -- No more transactions";i:6;s:31:"12:16 -- Faxes solve everything";i:7;s:46:"15:19 -- Manual locking in distributed systems";i:8;s:49:"18:32 -- Adam trying to force a database metaphor";i:9;s:20:"20:23 -- Idempotence";i:10;s:29:"24:34 -- Tracking Idempotence";i:11;s:33:"27:11 -- Distributed Transactions";i:12;s:42:"28:39 -- Two phase commit on the telephone";i:13;s:49:"32:54 -- Consistency of reads and Linearizability";i:14;s:27:"37:15 -- Right or Right Now";i:15;s:24:"38:48 -- Immutable magic";i:16;s:34:"43:38 -- Log structured merge tree";i:17;s:25:"48:14 -- Immutable topics";i:18;s:44:"51:00 -- Writing down ideas and Idemptotence";i:19;s:30:"53:35 -- What datastore to use";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[56:15]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[56]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Pat Helland]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Data Whisperer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[971]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/corecursive/028_-_Pat_Helland.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/pathelland">@pathelland</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[964]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>2104</wp:comment_id>
			<wp:comment_author><![CDATA[waterfallmagazine.com]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[margueriteomar@wildmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://waterfallmagazine.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[196.247.31.235]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-07-07 06:51:34]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-07-07 10:51:34]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[https://waterfallmagazine.com 
If some one wishes expert view about blogging and site-building afterward 
i propose him/her to pay a quick visit this website, Keep up the 
good work.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1594119094.46931;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>Learning to Think with Andy Hunt</title>
		<link>https://corecursive.com/029-learn-to-think-andy-hunt/</link>
		<pubDate>Mon, 15 Apr 2019 09:00:55 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=975</guid>
		<description></description>
		<content:encoded><![CDATA[Andy Hunt is a celebrity in the world of software development. Or at least he is one to me. The Pragmatic Programmer is a classic book on software development book. He is an author of the agile manifesto and started the book company that has published many great books, including several by recent guests.

Today I talk to Andy about how software engineers can get better at thinking and learning. How can we develop this meta-skill and how can being aware of common mistakes our brain make us more productive?

Show notes:
<ul>
 	<li><a href="https://pragprog.com/book/tpp/the-pragmatic-programmer">The Pragmatic Programmer</a></li>
 	<li><a href="https://pragprog.com/book/ahptl/pragmatic-thinking-and-learning">Pragmatic Thinking and Learning </a></li>
 	<li><a href="https://conglommora.com/">Conglommora</a></li>
</ul>
<a href="https://corecursive.com/029-learn-to-think-andy-hunt/">Webpage for Episode</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>975</wp:post_id>
		<wp:post_date><![CDATA[2019-04-15 05:00:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-15 09:00:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[029-learn-to-think-andy-hunt]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[976]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:16:{i:0;s:40:"04:20 -- Pragmatic thinking and learning";i:1;s:26:"06:24 -- Learning to Learn";i:2;s:21:"11:05 -- Taking notes";i:3;s:22:"15:45 -- Personal Wiki";i:4;s:19:"17:22 -- Cheatsheet";i:5;s:19:"19:54 -- Flashcards";i:6;s:24:"20:40 -- Agile manifesto";i:7;s:21:"22:41 -- No Estimates";i:8;s:23:"28:05 -- No maintenance";i:9;s:36:"33:49 -- Get away from your computer";i:10;s:22:"36:20 -- Bimodal Brain";i:11;s:22:"40:02 -- Taking a walk";i:12;s:19:"41:47 -- Meditation";i:13;s:22:"43:34 -- High pressure";i:14;s:31:"48:39 -- 20 years of pragmatism";i:15;s:32:"51:45 -- Writing Science Fiction";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/corecursive/029_-_Andy_Hunt.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[53:00]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[45.07 Mb]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-episode-number]]></wp:meta_key>
		<wp:meta_value><![CDATA[29]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Andy Hunt]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Pragmatic Programmer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/PragmaticAndy">@PragmaticAndy</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[5382]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[977]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Rethinking databases and Noria with Jon Gjengset</title>
		<link>https://corecursive.com/030-rethinking-databases-with-jon-gjengset/</link>
		<pubDate>Tue, 30 Apr 2019 10:06:22 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=985</guid>
		<description></description>
		<content:encoded><![CDATA[Can we make databases faster and remove the need for caching reads in an external cache? Can we make a distributed SQL based relational database that outperforms memcached? Jon Gjengset and the PDOS team at MIT CSAIL have done just that with Noria.

Today I talk to Jon about Noria, about building a database in Rust and his efforts to teach people intermediate Rust via live coding sessions.

Jon was great to talk to. He really was able to explain to me how Noria is able to do what it does and where it is in terms of maturity. The key, besides rust and evmap, is that Noria uses materialized views to do query optimization ahead of time, on write. The devil is in the details though, of course. And the details, in this case, are turning declarative SQL into a dataflow program that handles cache updates on new writes.

<strong>Show notes:</strong>
<ul>
 	<li><a href="https://github.com/mit-pdos/noria">Noria Project</a></li>
 	<li><a href="https://pdos.csail.mit.edu/">pdos group at MIT</a></li>
</ul>
<ul>
 	<li><a href="https://jon.thesquareplanet.com/papers/login-spring19-noria.pdf">Noria Paper</a></li>
 	<li><a href="https://jon.thesquareplanet.com/papers/login-spring19-noria.pdf">Noria Article</a></li>
 	<li><a href="https://www.youtube.com/watch?v=s19G6n0UjsM&amp;t=381s">Rust at Speed</a></li>
 	<li><a href="https://www.youtube.com/c/JonGjengset">Jon's Rust Streaming</a></li>
</ul>
&nbsp;

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>985</wp:post_id>
		<wp:post_date><![CDATA[2019-04-30 06:06:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-04-30 10:06:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[030-rethinking-databases-with-jon-gjengset]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="category" nicename="best-of"><![CDATA[Best Of]]></category>
		<category domain="post_tag" nicename="data"><![CDATA[Data]]></category>
		<category domain="post_tag" nicename="databases"><![CDATA[Databases]]></category>
		<category domain="post_tag" nicename="distributed-programming"><![CDATA[Distributed Programming]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="rust"><![CDATA[Rust]]></category>
		<category domain="post_tag" nicename="sql"><![CDATA[SQL]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:25:{i:0;s:23:"01:42 -- What is Noria?";i:1;s:36:"02:31 -- What is a data flow engine?";i:2;s:28:"05:26 -- Cloning Hacker News";i:3;s:16:"06:25 -- Caching";i:4;s:29:"11:22 -- Refreshing the cache";i:5;s:33:"13:05 -- Dealing with large views";i:6;s:46:"14:07 -- Windows, Indexed Views and SQL SERVER";i:7;s:44:"16:57 -- The Delorean and Back to the Future";i:8;s:39:"19:47 -- Consistency - Read your writes";i:9;s:32:"22:22 -- Views of Views of Views";i:10;s:28:"22:49 -- Propogating Updates";i:11;s:36:"26:10 -- Reading Snapshots - EV Maps";i:12;s:22:"28:49 -- 10x speed up!";i:13;s:26:"30:13 -- Beating MemCached";i:14;s:23:"31:27 -- CQRS and Kafka";i:15;s:34:"34:29 -- Scaling to multiple nodes";i:16;s:33:"36:26 -- How big is this database";i:17;s:37:"37:04 -- Is Noria ready for primetime";i:18;s:24:"40:18 -- Working in Rust";i:19;s:32:"42:04 -- Unsafe & Borrow Checker";i:20;s:39:"44:58 -- Rust and Distributed Databases";i:21;s:28:"47:55 -- Live Streaming Rust";i:22;s:29:"49:09 -- Fears of Live Coding";i:23;s:33:"53:11 -- On Becoming a Live coder";i:24;s:36:"02:31 -- What is a data flow engine?";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[991]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/corecursive/030_-_Jon_Gjenset.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[58:51]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[56.4]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Jon Gjengset]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[PhD student at MIT in distributed systems]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/jonhoo">@jonhoo</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[9350]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[988]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>630</wp:comment_id>
			<wp:comment_author><![CDATA[Tomer Ben David]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[tomerbd1@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[176.231.15.114]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-04-30 15:34:48]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-04-30 19:34:48]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi I converted from sedaily to this podcast because I can learn more here. Continue in deep dives this is how you attract flies like me.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1556652888.873817;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>631</wp:comment_id>
			<wp:comment_author><![CDATA[Adam Gordon Bell]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[adam@corecursive.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[2001:1970:5823:3a00:9db7:3c16:c6ed:4fe4]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-04-30 17:40:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-04-30 21:40:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks Tomer!  If you have any suggestions for topics to cover or guests let me know!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>630</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1556660447.204427;s:5:"event";s:9:"check-ham";s:4:"user";s:4:"adam";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>Refinement Types with Niki Vazou</title>
		<link>https://corecursive.com/031-refinement-types-with-niki-vazou/</link>
		<pubDate>Wed, 15 May 2019 10:00:39 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=998</guid>
		<description></description>
		<content:encoded><![CDATA[Formal verification and type systems - how do they relate? Niki Vazou is on a mission to bring better formal verification to the masses.

I have done a couple of episodes about dependent types and my feeling is that dependent types are super powerful and have some conceptual simplicity ( Types are a first class concept ) but are somewhat tricky to wield in practice.

Refinement types are something simpler. A refinement is a predicate that narrows the meaning of a type. What if instead of divide taking two ints, one was Int i where i != 0. This is a refinement type, a type that has been refined, the set of possible values narrowed, using simple predicates.

Niki is the creator of Liquid Haskell, a system that extends Haskell to support refinements. It actually goes farther than that. She has also worked on refinement types in Ruby and explained refinement types to scala community at various conferences, but her heart lies with the Haskell community. We talk about refinement types, theorem proving, formal verification, SMT solvers, and working with GHC.

This interview is also a great place to hear me asking stupid questions of a very smart person. Niki and her work are way outside my comfort bounds but hopefully my struggles to understand the topic will help make the power of refinement types approachable to a wider audience. Ruby developers, js developers, and everyone, refinement types are for you as well.

<strong>Links:</strong>
<ul>
 	<li><span class="name" data-wfid="bb1b3c337dc3"><a class="contentLink" href="https://www.youtube.com/watch?v=SmRo7q_6oG8&amp;t=285s" target="_blank" rel="noopener noreferrer">Liquid Haskell Talk</a></span></li>
 	<li><span class="name" data-wfid="07860a284c28"><a class="contentLink" href="http://ucsd-progsys.github.io/lh-workshop/" target="_blank" rel="noopener noreferrer">Programming with Refinement Types</a></span></li>
 	<li><span class="name" data-wfid="9226c8c8605f"><a class="contentLink" href="http://ucsd-progsys.github.io/liquidhaskell-tutorial/" target="_blank" rel="noopener noreferrer">Liquid Haskell Tutorial</a></span>
<ul>
 	<li style="list-style-type: none;"></li>
</ul>
</li>
 	<li><span class="name" data-wfid="bf5afee4bc2c"><a class="contentLink" href="http://goto.ucsd.edu/~nvazou/thesis/main.pdf" target="_blank" rel="noopener noreferrer">Niki's Ph.D. Thesis</a></span></li>
 	<li><span class="name" data-wfid="a463bf32c155"><a class="contentLink" href="http://goto.ucsd.edu/~nvazou/real_world_liquid.pdf" target="_blank" rel="noopener noreferrer">Real World Liquid Types</a> </span></li>
 	<li><span class="name" data-wfid="6536a74456d4"><a class="contentLink" href="https://nikivazou.github.io/static/VMCAI18/paper.pdf" target="_blank" rel="noopener noreferrer">Refinement Types for Ruby</a></span></li>
 	<li><span class="name" data-wfid="7bd9946243e2"> <a class="contentLink" href="https://www.youtube.com/watch?v=fRBIR2RJIIo" target="_blank" rel="noopener noreferrer">Liquid Haskell Proofs</a></span></li>
 	<li><a href="https://github.com/fthomas/refined">Refinement Types for Scala </a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>998</wp:post_id>
		<wp:post_date><![CDATA[2019-05-15 06:00:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-15 10:00:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[031-refinement-types-with-niki-vazou]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="dependent-types"><![CDATA[Dependent Types]]></category>
		<category domain="post_tag" nicename="haskell"><![CDATA[Haskell]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="proofs"><![CDATA[Proofs]]></category>
		<category domain="post_tag" nicename="smt-solver"><![CDATA[smt solver]]></category>
		<category domain="post_tag" nicename="totality"><![CDATA[Totality]]></category>
		<category domain="post_tag" nicename="types"><![CDATA[types]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:15:{i:0;s:41:"01:30 -- Making theorem proving practical";i:1;s:37:"02:33 -- What is Formal Verification?";i:2;s:34:"05:38 -- What are Refinement Types";i:3;s:45:"07:42 -- Refinements vs Standard FP solutions";i:4;s:35:"08:44 -- Performance considerations";i:5;s:19:"11:05 -- SMT Solver";i:6;s:23:"17:05 -- Runtime Checks";i:7;s:39:"19:28 -- Refinements vs Dependent Types";i:8;s:28:"23:28 -- Refinements in Ruby";i:9;s:28:"25:48 -- Refinement in Scala";i:10;s:16:"32:31 -- Proofs ";i:11;s:31:"36:54 -- Learning Formal Proofs";i:12;s:27:"39:40 -- Totality Checking ";i:13;s:23:"41:58 -- Infinite Loops";i:14;s:21:"44:34 -- ASTs and GHC";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[4362]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1007]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Niki Vazou]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Professor and developer of LiquidHaskell]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/nikivazou>@nikivazou</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[50:51]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[50.1 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/corecursive/031_-_Niki_Vazou.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[1003]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>How (and why) to build a programming language with Bob Nystrom</title>
		<link>https://corecursive.com/032-bob-nystrom-on-building-an-interpreter/</link>
		<pubDate>Fri, 31 May 2019 10:48:56 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1012</guid>
		<description></description>
		<content:encoded><![CDATA[Bob Nystrom is the author of Crafting Interpreters. I speak with Nystrom about building a programming language and an interpreter implementation for it. We talk about parsing, the difference between compiler and interpreters and a lot more.

If you are wondering why many languages have hand-rolled parser implementations yet much content on building languages implementations focuses on parser and tokenizer generators then Bob's insights will be eye-opening. Also, if you've ever used regexes to pull strings apart into structured data, and I sure have, then Bob's perspective on the simplicity of hand-rolled parsers will certainly open up some new possibilities for you.

<strong>Show links:</strong>
<a href="http://craftinginterpreters.com/">Crafting Interpreters</a>
<a href="https://www.amazon.com/Compilers-Principles-Techniques-Tools-2nd/dp/0321486811"> The Dragon Book</a>
<a href="http://journal.stuffwithstuff.com/">Bob's Blog</a>
<a href="http://gameprogrammingpatterns.com/">Game Programming Patterns</a>

<a href="https://norvig.com/sudoku.html">Norvig Solves Suduko</a>

<a href="https://en.wikipedia.org/wiki/A_Deepness_in_the_Sky">A Deepness in the Sky</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1012</wp:post_id>
		<wp:post_date><![CDATA[2019-05-31 06:48:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-05-31 10:48:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[032-bob-nystrom-on-building-an-interpreter]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="compilers"><![CDATA[compilers]]></category>
		<category domain="post_tag" nicename="dart"><![CDATA[dart]]></category>
		<category domain="post_tag" nicename="icon"><![CDATA[icon]]></category>
		<category domain="post_tag" nicename="interpreters"><![CDATA[interpreters]]></category>
		<category domain="post_tag" nicename="parsing"><![CDATA[parsing]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="programming-language"><![CDATA[programming language]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[41999]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/corecursive/032_-_Bob_NyStrom.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[56:13]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[55.8 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-episode-number]]></wp:meta_key>
		<wp:meta_value><![CDATA[032]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:23:{i:0;s:32:"01:25 -- What is an interpreter?";i:1;s:28:"02:03 -- What is a compiler?";i:2;s:34:"03:57 -- Why write an interpreter?";i:3;s:32:"06:15 -- On not using libraries ";i:4;s:21:"07:35 -- Lox Language";i:5;s:37:"09:35 -- Learning Compilers in School";i:6;s:25:"10:32 -- Lexical Analysis";i:7;s:16:"11:42 -- Parsing";i:8;s:19:"15:19 -- Evaluation";i:9;s:31:"16:56 -- Getting in the details";i:10;s:40:"19:27 -- Historical language perspective";i:11;s:44:"21:35 -- Programming Language Anthropologist";i:12;s:26:"21:59 -- Parser Generators";i:13;s:18:"25:55 -- Academia ";i:14;s:38:"27:40 -- Errors are the user interface";i:15;s:40:"28:23 -- Recursive Descent Pratt Parsing";i:16;s:31:"33:57 -- How did this all start";i:17;s:20:"35:51 -- Magpie Lang";i:18;s:44:"36:52 -- Icon - Programming Language History";i:19;s:62:"43:53 -- Missing Programming Language Features - Multi-methods";i:20;s:52:"48:39 -- The Expression Problem and game programming";i:21;s:24:"49:47 -- More Languages?";i:22;s:34:"52:45 -- Dart Programming Language";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Bob Nystrom]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Programming Language Anthropologist]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/@munificentbob">@munificentbob</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1016]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_43acb6da22f47f49e15bce1dadb7a4f5]]></wp:meta_key>
		<wp:meta_value><![CDATA[<iframe title="Compilers: Principles, Techniques, and Tools" type="text/html" width="916" height="550" frameborder="0" allowfullscreen style="max-width:100%" src="https://read.amazon.com/kp/card?preview=inline&linkCode=kpd&ref_=k4w_oembed_kuMcwohe32eze2&asin=B009TGD06W&tag=kpembed-20"></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_43acb6da22f47f49e15bce1dadb7a4f5]]></wp:meta_key>
		<wp:meta_value><![CDATA[1559181722]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[bob-nystrom-on-building-an-interpreter]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[1014]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>694</wp:comment_id>
			<wp:comment_author><![CDATA[Robert Jacobson]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[rljacobson@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://www.robertjacobson.dev</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[24.38.161.42]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-06-01 19:24:28]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-06-01 23:24:28]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nobody has written a really good *second* book on compiler implementation. That's the one I'm waiting for.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1559431468.085736;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>713</wp:comment_id>
			<wp:comment_author><![CDATA[Working in a Distributed Team with Guest Adam Gordon Bell &#8211; Confessions of Angry Programmers]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://coappodcast.wordpress.com/2019/06/09/episode13/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[192.0.91.16]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-06-09 04:18:04]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-06-09 08:18:04]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Gordon&#8217;s episode about building a language: https://corecursive.com/032-bob-nystrom-on-building-an-interpreter/ [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1560068284.396029;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>729</wp:comment_id>
			<wp:comment_author><![CDATA[John]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[johndtill@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[2600:1004:b117:ad99:2b26:8f5c:d00d:54be]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-06-17 11:56:41]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-06-17 15:56:41]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm loving Bob's book Crafting Interpreters as the chapters are posted online. Let us know when the pre-orders are available, Bob. I want one for my workstation and one for my coffee table!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1560787001.819639;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>Rethinking Technological Positivism with Cory Doctorow</title>
		<link>https://corecursive.com/33-cory-doctorow-digital-rights/</link>
		<pubDate>Sat, 15 Jun 2019 12:00:23 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1021</guid>
		<description></description>
		<content:encoded><![CDATA[Self-driving cars or armed autonomous military robots may make use of the same technologies. In a certain sense, we as software developers are helping to build and shape the future. What does the future look like and are we helping build the right one? Is technology a force for liberty or oppression.

Cory Doctorow is one of my favorite authors and also a public intellectual with a keen insight into the dangers we face a society. In this interview, I ask him how to avoid ending up in a techno-totalitarian society. We also talk about Turing, DRM, data mining and monopolies.
<ul>
 	<li><a href="https://www.youtube.com/watch?v=HUEvRyemKSg">The coming war on general computation</a></li>
 	<li><a href="https://craphound.com">Cory's Personal Site</a></li>
 	<li><a href="https://craphound.com/shop/">Radicalized (and other books)</a></li>
 	<li><a href="https://www.eff.org/">EFF</a></li>
</ul>
<em><a href="http://JonathanWorth.com">photo by Jonathan Worth, Creative Commons Attribution 3.0</a> </em>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1021</wp:post_id>
		<wp:post_date><![CDATA[2019-06-15 08:00:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-06-15 12:00:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[33-cory-doctorow-digital-rights]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="category" nicename="best-of"><![CDATA[Best Of]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/corecursive/033_-_Cory_Doctorow.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:10:{i:0;s:32:"01:57 -- Technology Good or Bad?";i:1;s:39:"06:57 -- Overcoming Bias and Anti Trust";i:2;s:34:"14:19 -- Elon Musk punching things";i:3;s:31:"19:00 -- Hyperbolic Discounting";i:4;s:35:"22:45 -- Wyoming's Authorized Bread";i:5;s:31:"33:59 -- Why Software has power";i:6;s:21:"42:07 -- Sorry Turing";i:7;s:20:"47:14 -- What to do?";i:8;s:24:"56:37 -- Cory's New Book";i:9;s:54:"57:53 -- Someone comes to town and someone leaves town";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[61:19]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[60.7 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Cory Doctorow]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Activist]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/@doctorow">@doctorow</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[11205]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1028]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[1025]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>728</wp:comment_id>
			<wp:comment_author><![CDATA[Tim Heaney]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[oylenshpeegul@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://oylenshpeegul.wordpress.com/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[100.18.4.175]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-06-16 15:17:48]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-06-16 19:17:48]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great stuff, thanks!

I had to look up Lawrence Lessig

    http://www.lessig.org/about/

and his "four forces"

    https://en.wikipedia.org/wiki/Pathetic_dot_theory]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1560712668.760936;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1560714516.53388;s:5:"event";s:15:"status-approved";s:4:"user";s:4:"adam";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>731</wp:comment_id>
			<wp:comment_author><![CDATA[Adam Gordon Bell]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[adam@corecursive.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[2001:1970:5823:3a00:492d:ef71:5fd2:6423]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-06-17 20:26:26]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-06-18 00:26:26]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks Tim!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>728</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1560817586.162946;s:5:"event";s:9:"check-ham";s:4:"user";s:4:"adam";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>749</wp:comment_id>
			<wp:comment_author><![CDATA[AI Can Thrive in Open Societies / The Past, Present, and Future of AI Art / Save Our Food, Free the Seed / Rethinking Technological Positivism — No.85 | Sentiers Media]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://sentiers.media/ai-can-thrive-in-open-societies-the-past-present-and-future-of-ai-art-save-our-food-free-the-seed-rethinking-technological-positivism-no-85/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[2607:f298:6:a067::6ab:83cf]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-06-24 10:38:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-06-24 14:38:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Rethinking Technological Positivism with Cory Doctorow [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1561387091.9331779;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>842</wp:comment_id>
			<wp:comment_author><![CDATA[Preserving the Wilderness &bull; Post Status]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://poststatus.com/preserving-the-wilderness/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[162.158.79.124]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-07-12 09:53:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-07-12 13:53:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] discussion of monopolies and why software has power on the CoRecursive podcast with Adam Gordon Bell. [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1562939586.8347099;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>851</wp:comment_id>
			<wp:comment_author><![CDATA[Preserving the Wilderness]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://www.ircwebservices.com/preserving-the-wilderness/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[162.158.78.33]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-07-14 20:04:23]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-07-15 00:04:23]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] discussion of monopolies and why software has power on the CoRecursive podcast with Adam Gordon [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1563149063.5328801;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>867</wp:comment_id>
			<wp:comment_author><![CDATA[Eli]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[eli@typedspace.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://www.typedspace.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[162.158.63.189]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-07-17 21:25:17]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-07-18 01:25:17]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you for discussing such timely and  pertinent issues. As a practitioner I often fall asleep at the wheel.
I find Bruce Schneir's public interest technology resources site  helpful to further discussion and focus action around these kind of discussions: https://public-interest-tech.com/]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1563413117.930408;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1563639889.0392129;s:5:"event";s:15:"status-approved";s:4:"user";s:4:"adam";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>869</wp:comment_id>
			<wp:comment_author><![CDATA[Kris Bunda]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[kris@krisbunda.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://krisbunda.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[172.68.90.15]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-07-19 13:06:19]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-07-19 17:06:19]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I know this wasn't as focused on software language or syntax or architecture as usual, but this was probably my favorite ep! 

That sounds bad, but I like the others also, so keep it up.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1563555979.7886679;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>922</wp:comment_id>
			<wp:comment_author><![CDATA[Post Status: Preserving The Wilderness - RSSFeeds]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://rssfeeds.cloudsite.builders/2019/08/03/post-status-preserving-the-wilderness/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[162.158.187.30]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-08-03 02:18:09]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-08-03 06:18:09]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] discussion of monopolies and why software has power on the CoRecursive podcast with Adam Gordon [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1564813089.2145181;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>1135</wp:comment_id>
			<wp:comment_author><![CDATA[Il ruolo delle comunità Open Source nell&#039;ecosistema Internet | fabbrica42]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://fabbrica42.it/news/il-ruolo-delle-comunita-open-source-nellecosistema-internet/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[77.104.141.130]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-10-07 03:34:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-10-07 07:34:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] discussione, Rethinking Technological Positivism with Cory Doctorow, sul podcast CoRecursive con Adam Gordon Bell, sui monopoli e sul perché il software continua ad [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1570433692.9953671;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>Using TypeScript Like A Pro with Chris Krycho</title>
		<link>https://corecursive.com/034-chris-krycho-typescript/</link>
		<pubDate>Mon, 15 Jul 2019 11:00:30 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1035</guid>
		<description></description>
		<content:encoded><![CDATA[How do we make javascript easier to work with? Chris Krycho has been using typescript to add types to javascript since 2016.

Chris is a software developer at LinkedIn who, at his previous gig, worked on converting one of the largest Ember apps in the world to TypeScript. I was shocked by the size. Chris also loves Rust and types and is a former C and FORTRAN programmers. He hosted a podcast called the New Rustacean, which he has retired from.

Today we talk about TypeScript and when you should use it. We also talk about Language Server Protocols, Rust, working with large codebases, Structural types, row polymorphism and talking code over audio.

<a href="http://chriskrycho.com">Chris's Blog</a>
<a href="hhttp://www.typescriptlang.org/">TypeScript</a>
<a href="https://newrustacean.com">New Rustacean</a>
<a href="https://github.com/chriskrycho/emberconf-2019-slides/blob/master/talk.md">Chris's Typescript</a>
<a href="https://ranjitjhala.github.io/static/refinement_types_for_typescript.pdf">Refinement types in TypeScript</a>
<a href="https://winningslowly.org/">Winning Slowly Podcast</a>

<a href="https://corecursive.com/034-chris-krycho-typescript/">https://corecursive.com/034-chris-krycho-typescript/</a>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1035</wp:post_id>
		<wp:post_date><![CDATA[2019-07-15 07:00:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-07-15 11:00:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[034-chris-krycho-typescript]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="babel"><![CDATA[Babel]]></category>
		<category domain="category" nicename="best-of"><![CDATA[Best Of]]></category>
		<category domain="post_tag" nicename="elm"><![CDATA[Elm]]></category>
		<category domain="post_tag" nicename="ember"><![CDATA[Ember]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="post_tag" nicename="language-server-protocol"><![CDATA[Language Server Protocol]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="rust"><![CDATA[Rust]]></category>
		<category domain="post_tag" nicename="types"><![CDATA[types]]></category>
		<category domain="post_tag" nicename="typescript"><![CDATA[Typescript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_7469dd70ce301c2115c3c7155544375d]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/corecursive/034_-_TypeScript.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[70:54]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[61.5 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-episode-number]]></wp:meta_key>
		<wp:meta_value><![CDATA[34]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:15:{i:0;s:27:"01:59 -- What is TypeScript";i:1;s:33:"06:35 -- Pragmatism of TypeScript";i:2;s:34:"08:32 -- Meeting JS where it is at";i:3;s:25:"09:46 -- Using TypeScript";i:4;s:33:"18:11 -- Language Server Protocol";i:5;s:23:"23:36 -- Any vs Unknown";i:6;s:41:"27:34 -- Gradual Typing vs Type Inference";i:7;s:22:"32:49 -- Runtime Types";i:8;s:41:"35:37 -- Refinement Types / Linting / ETC";i:9;s:36:"37:45 -- Structural Types and Shapes";i:10;s:36:"44:51 -- JS debugging horror stories";i:11;s:27:"47:37 -- TypeScript Vs Rust";i:12;s:35:"51:56 -- When not to use TypeScript";i:13;s:28:"56:15 -- Coding on the Radio";i:14;s:28:"60:52 -- Getting things done";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Chris Krycho]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Chris of All Trades]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/chriskrycho">@chriskrycho</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1038]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[34037]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[1037]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>926</wp:comment_id>
			<wp:comment_author><![CDATA[Typescript Transcript - CoRecursive Podcast]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://corecursive.com/typescript-transcript/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[172.68.58.58]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-08-05 12:25:46]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-08-05 16:25:46]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Using TypeScript Like A Pro with Chris Krycho [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1565022346.5144269;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>927</wp:comment_id>
			<wp:comment_author><![CDATA[Adam Gordon Bell]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[adam@corecursive.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[172.68.58.118]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-08-05 12:42:28]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-08-05 16:42:28]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Transcript https://corecursive.com/typescript-transcript/]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1565023348.604162;s:5:"event";s:9:"check-ham";s:4:"user";s:4:"adam";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>Advanced Software Design with Jimmy Koppel</title>
		<link>https://corecursive.com/036-jimmy-koppel-advanced-software-design/</link>
		<pubDate>Thu, 01 Aug 2019 11:00:16 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1045</guid>
		<description></description>
		<content:encoded><![CDATA[How do we create great software? What are the important skills need to properly review a PR? How do you identify assumptions of a code base and the stable contracts of a software module?

Jimmy Koppel is working on his Ph.D. in the field of program synthesis at MIT.  He was previously paid 100 thousand dollars to drop out of university by Peter Thiel, yet still graduated with two degrees.

The most interesting, however, about Jimmy is he is working hard to teach the world how to design better software.
Due to his time working on program synthesis, he developed some unique insights into what makes software good, and what makes it bad, and he spends time teaching people his insights.

<a href="http://www.pathsensitive.com/2018/01/the-three-levels-of-software-why-code.html"> Three Levels of Software</a>

<a href="https://www.cmu.edu/news/stories/archives/2012/july/july2_koppelthielfellowship.html"> Peter Thiel 20 under 20</a>

<a href="http://www.pathsensitive.com/2018/01/the-benjamin-franklin-method-of-reading.html"> Benjamin Franklin Method</a>

<a href="http://www.pathsensitive.com/2018/12/my-strange-loop-talk-you-are-program.html"> You are a Program Synthesizer</a>

<a href="http://jameskoppelcoaching.com/adam/">Jimmy's Coaching Program</a>

<a href="http://www.semdesigns.com/">Semantic Design</a>

<a href="http://www.cubix-framework.com">Cubix Multi-Language Transformation Tool</a>

<a href="https://www.amazon.ca/Peak-Secrets-New-Science-Expertise/dp/1531864880">Peak - </a><a class="a-link-normal" href="https://www.amazon.ca/s/ref=dp_byline_sr_book_1?ie=UTF8&amp;field-author=Anders+Ericsson&amp;search-alias=books-ca">Anders Ericsson</a>

Episode Page: <a href="https://corecursive.com/036-jimmy-koppel-advanced-software-design/">https://corecursive.com/036-jimmy-koppel-advanced-software-design/</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1045</wp:post_id>
		<wp:post_date><![CDATA[2019-08-01 07:00:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-01 11:00:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[036-jimmy-koppel-advanced-software-design]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="code-reviews"><![CDATA[Code Reviews]]></category>
		<category domain="post_tag" nicename="coq"><![CDATA[Coq]]></category>
		<category domain="post_tag" nicename="learning"><![CDATA[Learning]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="program-synthesis"><![CDATA[Program Synthesis]]></category>
		<category domain="post_tag" nicename="proofs"><![CDATA[Proofs]]></category>
		<category domain="post_tag" nicename="pull-requests"><![CDATA[Pull Requests]]></category>
		<category domain="post_tag" nicename="refactoring"><![CDATA[Refactoring]]></category>
		<category domain="post_tag" nicename="software-design"><![CDATA[Software Design]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:20:{i:0;s:39:"1:18 -- Why is Designing Software Hard?";i:1;s:27:"2:23 -- Software Intentions";i:2;s:55:"4:20 -- Building non-fragile software using assumptions";i:3;s:26:"07:59 -- Program Synthesis";i:4;s:54:"10:39 -- Program Search Space and Abstraction Barriers";i:5;s:27:"12:05 -- The Logical Level ";i:6;s:37:"17:12 -- All Possible Changes to code";i:7;s:43:"19:03 -- Code reviews and Stable interfaces";i:8;s:27:"20:36 -- Better Refactoring";i:9;s:36:"22:11 -- Don't Don't Repeat Yourself";i:10;s:21:"23:28 -- Names matter";i:11;s:34:"25:45 -- Getting stuck in a design";i:12;s:39:"27:26 -- Code quality is not about code";i:13;s:46:"28:53 -- Understand the code that is not there";i:14;s:20:"30:56 -- Proof level";i:15;s:30:"32:27 -- Software Maintenance ";i:16;s:35:"35:40 -- Cross Language Refactoring";i:17;s:20:"39:13 -- 20 under 20";i:18;s:48:"42:10 -- Benjamin Franklin Method of programming";i:19;s:52:"44:56 -- TOPGUN Programming And Deliberate Practice ";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[4661]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1048]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/corecursive/036_-_Advanced_Software_Design.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[53:20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[5.1 Mb]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-episode-number]]></wp:meta_key>
		<wp:meta_value><![CDATA[036]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[James Koppel]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Advanced Program Sythesizer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/jimmykoppel">@jimmykoppel</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[1049]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>940</wp:comment_id>
			<wp:comment_author><![CDATA[Logan]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[loganlowder@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[162.158.187.42]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-08-08 09:56:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-08-08 13:56:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey Adam,
Can I get an invite to the slack server?

Thanks,
Logan]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1565272612.8474531;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>943</wp:comment_id>
			<wp:comment_author><![CDATA[Adam Gordon Bell]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[adam@corecursive.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[174.89.71.244]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-08-08 21:27:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-08-09 01:27:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey Logan.  It is in the head of the website, the link.  But also here :
rebrand.ly/corec_slack











]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>940</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1565314020.215131;s:5:"event";s:9:"check-ham";s:4:"user";s:4:"adam";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>968</wp:comment_id>
			<wp:comment_author><![CDATA[Logan]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[loganlowder@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[162.158.187.24]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-08-15 10:29:34]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-08-15 14:29:34]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[🤦
Thanks!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1565879374.386761;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>Typescript Like a Pro With Chris Krycho - Transcript</title>
		<link>https://corecursive.com/typescript-transcript/</link>
		<pubDate>Mon, 05 Aug 2019 16:25:35 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1057</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Here is a machine transcription of <a href="https://corecursive.com/034-chris-krycho-typescript/">https://corecursive.com/034-chris-krycho-typescript/</a></strong>

<em>If you are a transcript reader, let me know what you think (via comment or adam@corecursive.com).  Are machine transcripts useful, how did you find the quality? I just quickly put this up as it is trending on Reddit, and I think better page layout would help with readability as well.</em>

Chris: Typescript is the closest thing to dependently typed and refinement type systems that actually is in production at scale anywhere. It's not doing those things, but it's probably the biggest step in their direction that you're seeing in sort of industry use on a wide scale.

Adam: Hello, this is Adam Gordon Bell. Join me as I learned about building software. This is called recursive.

Adam: That was Chris [inaudible]. Chris is a proponent of typescript who's been using it since 2016 today. He teaches me about what types of group is and why we should use it. Chris is a software developer at Linkedin who worked on converting one of the largest ember apps in the world to typescript. I was actually shocked by the size of it. Chris also loves rust and types and as a former C and fortran programmer. He also did a podcast called the new rust station, which he's since retired, but it was really well done. I hope you enjoyed the interview and as always thanks to everyone who has tweeted or blogged or otherwise mentioned enjoying the podcast.

Adam: Chris, thanks for coming on the podcast. I mainly know you as like a a disembodied voice that explains to me new features about rust. But today I'd like to talk to you about typescript.

Chris: I am glad to be here and looking forward to it. I will admit to have had even had the weird experience of walking into a meetup room and saying to someone, Oh yeah, hi, I'm Chris. And having heads turn because they've heard my voice from neuro station. And let me tell you, that never stops being weird when people just hear your voice and turn around because they recognize it. So disembodied voice on the Internet is apparently my thing at this point.

Adam: Yeah. Podcasts are there. Strange like kind of intimate medium, right? Because I feel like from listening to your podcast that I know you, but you know, you don't actually know me so,

Chris: right. But I listened to your podcast so I have the same feeling. Yeah, it's random. Weird.

Adam: So what's typescript?

Chris: Typescript is a typed superset. Technically speaking, that's not true and I'll talk about that a little bit more in a minute, but it's effectively just a type superset of the Java script programming language. And what that means is you are able to add type annotations to Java script and then you have a compiler which can do two modes, one of which is just check that code and one of which is actually generate Java script from that code. And those two modes exists because most people have babble in their javascript pipelines these days. Anyway, it is a compiler that takes one version of Java script and compiles it down to earlier versions of Java script or that can include various feature proposals and the like. So a lot of places today we'll use typescript just for the type checking and then use Babel to compile it so that everything's a single pipeline.

Chris: But the big idea for typescript is to say that huge amounts of the web at point and huge amounts of all of our infrastructure is increasingly written in Java script and in Large Java script applications. And many developers find that with sufficiently large, sufficiently complicated applications, libraries and so on. Having a type system is a helpful tool, so the original pitch possibly still the pitch on the typescript website is javascript that scales and the idea is you can gradually layer in a layer of types on top of an existing Java script application or library or you can use them from the start of building a new one and start getting some of the benefits that types give you in particular refactor ability because you can know rather than you get just guests heuristically where a given item is actually being used throughout your code base and a certain degree of reliability.

Chris: For example, things like no checking. You can tell typescript to, hey, check me and make sure that if this thing can be no, I check it ahead of time. And that combination of giving you some much more sophisticated checks on what you're doing and then giving you tools for refactoring means that at least in principle, typescript code can be much more scalable. Java script. In my experience now there are a lot of my fellow Java script nerds out there who are saying, ah, boom you and your types. But for me the experience when I actually started pulling typescript into apps and add ons, libraries that I was using was there were a bunch of places where I thought, Oh yes, I have exhaustively checked all the ways that this could possibly ever be no. And the compiler said you're wrong. So the value proposition there is let's take this very dynamically types language and give you the tools to describe the types of you're working with and in very rich sophisticated ways that do actually capture the incredible dynamicism that javascript has.

Chris: And that's probably what makes typescript particularly interesting from the perspective of type theory or something like that is javascript is a wildly, incredibly dynamic language, which you can do ridiculous, crazy things with at runtime and typescript can actually represent it's type system, a very large and in ever increasing percentage of that. I hope that's a good rough start to it. At least answering your question. Yeah, totally. So if I understand typescript, I like the short version. It's types for javascript. So where did this come from? Microsoft started the project in the early 2010s 2012 2013 I think. And the lead contributor for it is unders. I'm going to pronounce his last name wrong. I'm so sorry. Helzberg l elds. Virg it's, it's a name I've never actually heard, just seen on the Internet. But this is the guy who was behind most of c sharp and before that was involved. And I think Turbo Pascal or Delphi or both think hose. Yeah, very, very important contributor to programming languages and I like to joke that for good and for ill occasionally, mostly for good but occasionally for ill typescript. Seems like unders is playground for interesting type theory ideas at scale. So came out of Microsoft, continues to be driven by Microsoft and is heavily integrated into visual studio and visual studio code. As a result, a lot of Microsoft's own open source tooling is built with typescript at this point.

Adam: I don't know his name either. Anders, let's say. I like his taste. I remember, you know I did Java development for quite a while, maybe not quite awhile, but then I switched to c sharp and I was like, oh, it's like Java. But it's like, you know, it's kind of polished off. Yeah, they got some nice things that I feel like he's very pragmatic maybe and how he approaches the language like, oh we should have a way to do x.

Chris: I think that's a very good description. And that pragmatism is both. One of the things that has made typescript very successful I think. And also one of the things that can drive me nuts on a day to day basis because, well I like to call myself an idealist, but we all know that everybody bought the idealists likes to call the idealists impractical and so on. So I tend to prefer type systems that are a little more rigorous and a little stricter and more sound in particular. The idea of soundness being that if you have a, a program that type checks is not going to fail in ways that contradict those type checks. So examples that many listeners will be familiar with are languages like Haskell or rust or elm. I believe Scala, though, I would not quote myself on that. F Sharp, et Cetera. And typescript is not that.

Chris: And typescript has become much more that, but philosophically typescript is a deeply pragmatic language. And so the tooling and the type system around it are very much built on enabling and empowering working javascript developers, which is a goal I can really appreciate socially as someone who's worked in it day to day for a number of years now. But there are definitely places where I want to be able to say, no, check me. I don't trust myself. I'm an idealist. But what are the idealism here means is that I'm a total cynic about my own ability to actually get this right. So please check me exhaustively and vigorously here at typescript.

Adam: So is it not, this is a super set of Javascript, so they're trying to meet the javascript world where they're at. Is that exactly, yeah,

Chris: and that notion of it being just a type superset with only one exception. Everything in typescript is just a type annotation which you can strip out and the only exception to that is the enumerated type it supplies, which is just like your basic, he knew him from Java or c or whatever else except that it can also have string values. But when you look at that, it just compiles straight into a simple javascript object with some key value look up. So even that one technically breaks the, everything is just the type annotation that you can strip out. It doesn't really break it and so they really are just trying to say we're not going to pull an elm or a reason ml with buckle script or something like that where we're creating a whole new language for which javascript is the compile target. Instead they're saying we're going to add types as a layer of very rich static analysis and tooling integration via the language server on top of Javascript, but it's still just Java script with those type annotations in place.

Adam: So like practically. Okay. Like I have some simple website and it has a bunch of client side javascript code and then I want to take that and turn it into typescript. Like what do I do?

Chris: You add typescript to your package dot Jason and you type, you know you've run yarn or NPM install and you type TSC which is typescript compiler in it and it generates a typescript config file for you in the root of your project. You, depending on how you're building it, if you're using webpack or something, there are starter packs for that. Ember js has a tool that I helped maintain in the Cli that just generates your configuration for you actually, so you could in ember you would just say ember install, ember Cli, typescript. I think there's a similar, just booted up experience for view and for create react app where you can just say view Cli, start with typescript or whatever, but in general you just add this ts, config dot Jason File and tell it if you have any weird layout things you have to tell it about those.

Chris: But in general, if you're using a fairly standard layout for your file system, at that point you're done. You can just start type checking if you want to integrate it into your build pipeline. Say you're compiling from Java script, Super Fancy version. Next down to s five turn it on IEL 11 which hi, sadly still the story for many of us, Microsoft, please kill I 11 you'll use either typescripts own tooling to do that. The Ts config data generates will by default target ESBL five and therefore be suitable for running. I think it targets cs five it'll actually go all the way back to s three which runs on [inaudible]. I think most people don't need that happily. You can either do it with typescript itself or you can just wire it into your babble pipeline and then you just start taking a file and saying, okay, instead of ending this file extension with dot Js, I'm going to end it with dot ts. Just change the file extension and by default that's enough to start getting it type checked. It also actually has a comment style that you can throw at the top of the Java script file where you type a comment and then say am preset ts check and it'll check the javascript file for you as well in sort of it's elusive

Adam: mode. So I'm not super, I don't know a lot of front end stuff, so I'm gonna try to break this down because like, okay, so babble is some sort of translation layer from magic new javascript to whatever I e support.

Chris: So let me take a step back. I live in this world everyday and I forget that it is not the world everyone lives in every day because we are targeting browsers in general. We have to deal with the lowest common denominator of whatever browser we're targeting. And so while the javascript SPEC continues to move forward in, the language continues to move forward, unlike in a server environment where we can control exactly what version of a given language run time we're running and can upgrade at our own pace. In the context of Javascript, we may have to be targeting 11 and Internet explorer 11 targets the ECMAScript five version of Java script and it doesn't have any features later than that, so although that came out the better part of a decade ago and javascript has changed enormously since then. Whether that's the inclusion of things like classes as Syntec sugar for the function prototype way that you might have done things in the past or the inclusion of constant light bindings which have local better scopes.

Chris: Unlike the old veer in javascript which gets hoisted and has weird scoping behavior that confuses people and breaks people all the time. Many new features like this generators, async, await syntax, et Cetera, can all be carefully compiled back to s five if like me, you work at Linkedin and we still support I e 11 and so we need our rich client side javascript to be able to run on 11 even though current versions of chrome and Firefox and safari and even edge before it shifted to being chromium could all run stuff that's been part of the javascript Spec even as late as the last year or so. And so babble gives us this layer of being able to say, I'm going to write modern Java script with all of these language niceties and then compile it back to an earlier version of Java script. So you'll often hear this referred to as transpiling because you're doing it not from targeting one language to another in the traditional sense or a lowering sense, but from one language to another. Equally high level language, which in this case just happens to be the same high level language of eight years ago or whatever it was when [inaudible] came out. So Babel will do that. Typescript can do the same thing and target an earlier version of javascript or it can just target the latest version of javascript if you're one of the lucky people who can get away with shipping javascript that only targets current versions of chrome and Firefox and safari.

Adam: So where does run Babel

Chris: will run as part of a build pipeline on your, whether that's locally or an sci set up or whatever else. So most modern javascript rich applications in order to be able to take advantage of all this functionality that we've built up have a bills pipeline and that's kind of weird in a lot of ways for people who are used to the old include a jquery script tag and be off to the races version of doing front end web development. And for that reason I'll frankly acknowledge that it can be a lot harder to get started in some cases and it can feel a lot more intimidating because it's a case of, wait, I have to run this builds tool so that I can do some interactivity in my html page. I don't, and the answer is no, you don't actually have to do that. You can still just drop a script tag on your page and be off to the races. But again, for those of us building these rich applications, in most cases we have command line tools integrated into that anyway because we want things like linting to be able to say, hey, here's some static analysis output and to be able to run our test runner actively while we're going and developing the app or to be able to do boiler plate generation of, Hey, just give me a new react component or a new view component in my conventional locations for this app or things like that. And so yeah,

Adam: assume like at Linkedin they're not letting you FTP some Java script class. And so

Chris: we have a CIA server where we're running all of that and running the build and running a large exhaustive test suite and then generating those target bills back in ies five and a lot of modern build tools can split it out and say, hey, we're going to generate in our builds for IEE and then we're going to generate much smaller, more modern, faster builds that don't do all that translation for quote unquote evergreen browsers like chrome and Firefox and safari so that you can again get the benefits of an updated runtime that has support for these new features natively. Because when you are back compiling, especially something complicated like generators or a sink in a weight or things like that, you end up having to generate a lot of extra code to support that and every app ends up having to make this trade off of saying, do we use generators here?

Chris: So for example, the app I work on at Linkedin, when I'm working on this big app, we don't use generators because we have to ship this large runtime that basically acts like generators are part of the language by shipping it as a library, but that's a lot of code and every bite you download and have to parse and then have to execute in the browser is a penalty to the actual runtime performance of your application. So we don't use generators in this app even though they're really nice and make certain patterns really nice because we don't want to support that back to I e 11

Adam: makes sense. So a lot of people were already using a more modern version of Java script and then transpiling it. Exactly. Typescript steps in and says like, well what if you add some type annotations? Then when you try to add seven too undefined, then we'll let you know.

Chris: Right? Or you try to

Adam: call a function. It's I'm defined and every javascript developers least favorite, but most common error. Undefined is not a function. No. Typescript says, Hey, we can just layer on top of this existing stack of tools that most of you are using and add this nice layer of static analysis and tooling support and when I say the tooling support, the language server that they built around this is phenomenal. So whether you're using it in vim or whether you're using it in visual studio code, you get this really great experience for inline documentation and code completion and refactoring tooling all built on that language server and it's the single language server which Microsoft actually introduced as part of building visual studio code and typescript support and integration back in probably 2013 or 2014 where they have this idea of instead of every editor having to rebuild its own tooling, you can define a common layer and then a common protocol for talking to that so that every editor can have a language server protocol implementation and just know how to talk to anything that speaks to that protocol for any given language.

Adam: And then you can have individual servers per language and then you can fit those two together so that if sublime text has a language server implementation and rust now has a language server implemented well those two can just talk to each other basically for free without either of them having to do all the work of reimplementing refactorings for rust and then vim gets that and visual studio code gets that and so on. So that came out of the work Microsoft did for the typescript language server five years ago. And typescript remains kind of the canonical and best example of it. I didn't know that. Yeah, I think the language server protocol, it's like a game changer. Yeah. So in my day to day, I'm using skeleton. Traditionally we always, you know, everybody used intelligent cause it was kind of the only really good implementation and now there's a language server protocol implementation for Skalla called metals and just people are slowly drifting off into using whatever editor they really want to use. Right. I mean if I were intelligent I might be concerned. But I think that, yeah, it's definitely an enabling force for languages, right? Like there's less overhead,

Chris: right? Because that cost of finding a tool that knows enough about and can introspect your code richly enough to do those kinds of refactorings and completions and all of that. And JetBrains is tools, intelligence and all of those have always done very well and been very good at that. In my use of rust for example, I ended up going back and forth because of the intelligent rust plugin and the vs code plugin. Each of them does certain things better than the other one or feels better than the other one. I liked this code better. It's a little lighter weight feeling, but the intelligent plugin is really good and it's a little faster and more stable than the rest language server. But that democratizing factor, I think you're exactly right, ends up allowing new languages to be adopted much more quickly. So another example of that reason, ml is a syntax layer over o camel that is primarily used for compiling to javascript via a oh camel to javascript compiler. But they built a language server and I think it's actually just a standard o camel language server that then can talk to vs code or talk to them or whatever else and it's the same thing. All of a sudden all of that capability just exists for anybody that has a linguist server plugin and that's a huge thing for somebody who wants to try using reason ml because the gap between that and whatever tools they're already using is going to be so much lower than it would have previously.

Adam: Yeah, so what do I get if I'd moved to typescript, the language server protocol, what does it enable?

Chris: So it enables refactoring, so it'll say, hey, I want to rename this type, this class or this variable throughout my code base and you perform a rename and it does it. It introspects your whole code base fines everywhere that's used and does it with a rename or you say, I want to find everywhere this is used throughout my code base and whereas in a traditional Java script code base your left with doing that as your kind of best guesses in your sort of heuristic driven approach which can be very good or are you left with fine doll and graph and hoping that you didn't rename the wrong one or hoping that you caught them all and hoping that your test suite is exhaustive enough. If you have an application or a library that is actually exhaustedly covered with types. The downside to what I mentioned earlier that it's gradual and you can layer it in as you go is you only have to layer it in as much as you want to, which means you can end up with a type system or a type coverage level that doesn't actually let you get some of these benefits.

Chris: But if you do have it fully and exhaustively checked and you don't use, I should come back to this in a minute. You don't use typescripts escape hatch called any. If you're not using those things, then typescript can actually exhaustively tell you, hey, here's everywhere. This is being used and you need to change it and so you can do the thing that you do in more thoroughly type checks, languages traditionally of making a change and then just following the compiler errors or doing a refactoring that can actually exhaustively know where all of the refactor points are rather than that's your as tickle model or that drop and hope. The model and just your test suite. Yeah. I mentioned typescripts. Any, I should elaborate on that. One of the places where typescript leaves some unsound snus on the table is it has a type called any which if you have a type that is any, it can be assigned to anything and anything can be assigned to it and this is an escape patch.

Chris: Sometimes you're just in a spot where you're saying, I have no idea what this is, or I don't have time to write the types for that corner of the ecosystem, which leads me to another small tangent, which is to say typescript also gives you the ability to write tight definitions for third party code. So you can create a description of what the types are for some library that you're interacting with. So I'll come back to that in a minute as well. But this, any type, anywhere that you're using it, it's basically like, yeah, this is just Java script, man, do what you want. I'm not going to try to check anything anymore. And that's very powerful. But unfortunately it also just means that anywhere you use it, you're not getting any benefits and any type checking that happens to intersect with it type. It's kind of like, Nah man, you said any.

Chris: So anything goes here and you lose that. So in typescript three they introduced a different type called unknown, which is actually much more useful for the way I write. Javascript. And unknown is a type that says if you want to do anything with this, you have to check what the type is and that leads to the fact that typescripts type system is actually very sophisticated and does flow analysis. So if you say, I have an input to my function and I can define that input as being an anonymous union type where I can say this is a string or a number, it's valid for you to pass me either of those as the argument to this function. Then within it you can, right. If type of this argument equals number within that if block it now knows that it's a number and it's legitimate to add it to other numbers and to divide by it and to do other things you would do with numbers and then you can put nails flock and it'll know that well you checked in the if block, if it was a number, so this else block, it must be a string.

Chris: And here you can call methods that exist on strings to it like to lower case or to upper case or whatever else. And it won't let you do that in the number block. Well if you take that and include the idea of this unknown type were unknown, unlike any won't let you assign it to anything that is well tight. So if you say let x be a number and then you have y which is unknown and you tried to assign y to x, typescript will say no, that's out of bounds. You haven't actually checked that this thing, y is a number, you can't assign that to x. So similarly you can use this kind of narrowing notion, which is what typescript calls it because you have some set of possibilities and you're narrowing the set of possibilities. In the example, I give a moment to go from string into number two, just number or just string.

Chris: Similarly unknown says the set of possibilities is unbounded. I have no idea what this could be, which sounds like any, but the difference is here, typescript checks you. It says no, you have to check. So if I have a function which takes in some argument, which is unknown, and I say if the type of this argument is a number, while typescript now narrows it and it says in that block, Hey, this is a number, you can do number things with it, but you have to do that. And so unknown lets you deal with things like, hey, I got this blob of data from across the Internet. I have no idea what it is. I mean in principle it might be what my API promise. But in principle it might just be a bunch of binary garbage or it might be a Jason object that looks nothing like what my API promised or whatever else.

Chris: And so unknown gives you this tool for describing that in a more robust way. Again, this is part of that trajectory I described. If typescript saying, how can we capture this thing that's really useful, which we used to do in this more loosey Goosey way and give you a way to express it with much more strict and sound guarantees. So today if I'm converting a code base, there's an ESBL lynch rule, which is a javascript linter that integrates with typescript where you can just say never allow any. And if I were converting a typescript or code based to typescript today, I would turn that on and say it's legitimate for you to use unknown cause then you'll have to check it. Y'All have to do whatever runtime checking. And sometimes you do have data that you don't trust or types that you don't trust coming in from the outside. But then you're going to be safe when you're using it.

Adam: So one thing that you mentioned that I'm not clear on is like gradual types versus type inference. So if I go back to your example, we take a Java script file, we rename it a t s but so at that point it has no type annotations. Correct. What are the types then? Are they any,

Chris: some of them will be, and some of them it will infer. So if you write let x equals 42 it's going to infer that x is a number. And if you say return x there from a function, it will infer that the return type of the function is also a number. Now if you have some conditional block and you return 42 from one of them and the string hello world from the other, it will happily just infer that the return type from this could be a string or a number. Cool. And occasionally that's what you want. But a lot of times it's not so often good practices to then start adding annotations and say, no, really this function should only return a number. Please give me a typer if I return a string. The things that will default to always making any our arguments to functions because it does not do the kind of flow analysis and type checking analysis that some languages in the standard ml tree of languages will do.

Chris: Where it'll say, hey, I can see from how this is used that this argument must be a number. It won't do that. So it will infer return types and assignments but it won't return function arguments. It also won't in for items declared in the body of a class. So if you say class person and then declare a property in it name, but you don't give the name of type, which is a valid thing to write in Java script, just name with semi-colon after it to say, hey, there's an end property on this object. Typescript will treat that as any as well. And so at that point then you can start layering in and adding in types. We're needful to say, hey no, this function doesn't actually accept anything. And there is a flag in the compiler called no implicit any, which is part of that strictness checking, which will say, hey, if you convert it a file from dot js to dot ts, I'm going to you an error.

Chris: All the places where I could infer any, and I'm going to say no, you actually have to fill those in with a type. So mostly function arguments or class properties like that. So that's the gradual typing site. You can add in types progressively. But then the other side of it is you might want to represent types that exist outside your library for an untapped Java script code you're using. So for example, low dash is a very common utility library that many, many javascript developers reach for it. It's not written in typescript and it doesn't ship any types of its own as a result. But there's a repository called definitely typed, which Microsoft maintains where there are third party community definitions where you can just write out a function signature that says underscore dot map, which is the low dash. And underscore there is a function and it has this type of signature and it doesn't have any body, so I'm just giving it a declaration.

Chris: But I can say underscore dop map takes in an array and a function to operate over that array and the function has to have the same type signature to work legitimately with this and understands generic types and things like that. So you can write very sophisticated expressions that way. And now when I interact with low dash, I can also install the types from this library. I can install them as at type slash load ashes, my package name for them and I'll just be able to say, Hey, I actually get, when I import in use under score dot map, I get type annotations for it. So if I misuse it, I'll get that feedback from the compiler and I'll get autocomplete from the language server and all of those things. So you have this simultaneous ability to do type inference, which means there's a lot of stuff you don't have to write.

Chris: A lot of good typescript code, especially in apps tends to look a lot like the javascript code with little sprinklings of annotations. Like I said, kind of an API boundaries is probably the best way to describe it at functions or class signatures and otherwise very similar to what you would already be writing in the body of a function. You're rarely going to write any type signatures because it does have good enough inference for that. I mentioned earlier, I work with ember js and typescript a lot and we maintain these open source community definitions for ember because ember itself is largely written in typescript at this point, but I mentioned earlier semantic versioning and typescript not doing it. Ember js is probably the most semantic versioning thing in the entire world. It's very strict about backwards compatibility, so we've yet to define a good story there between the two because we really don't want it to be, yeah, ember ships, its types now and oh you just upgraded from ember three 12 to three 13 and your build broke because the typescript version that we shipped broke or our type definitions broke. That wouldn't affect anything at runtime cause it all gets stripped out. But it's still a really bad experience for consumers of member and since typescript, three. Dot. Five might break versus three dot. Four in some small ways. We really appreciate that they're doing that work because otherwise our lives would be much less pleasant in that space.

Adam: They're trying, they are trying. You mentioned earlier something that surprised me. So my understanding is right, like typescript exists at compile time at execution time. It's Javascript, right? But you mentioned looking at a type, so if the type is x then do y. So how does that work? Because I assume that runtime, you just have Java script types. Correct.

Chris: So what it does is it actually looks at the flow of your code, not just the annotations and uses those kinds of checks. It's smart enough to understand that at time a, the type is string or number, but at point B in your code you've done this runtime checking you had on someone who talked about refinement types in the past. And I think you've talked with someone who had dependent types and both of those can do some of these kinds of things. Expressing this idea of runtime behavior that has to be validated by the actual checks you do in order to type check to some extent and typescript isn't doing either of those exactly, but through this run time analysis and also through some other sophisticated things you can express with the type system where you can return different types conditional based on the inputs to the function.

Chris: Typescript is the closest thing to dependently typed and refinement type systems that actually is in production at scale anywhere. It's not doing those things but it's probably the biggest step in their direction that you're seeing in sort of industry use on a wide scale. And so it's using that notion of I'm going to, and again this is not the same thing as refinement types in liquid Haskell, so please don't email me dear listeners. I know, I know it's not that, but there's an analogy here where it's taking the type and refining it, using that runtime flow analysis and it can do the same thing with switches. You know switch statement where you have a set of cases within it and stuff like that, so you can actually emulate exhaustive pattern matching against a tagged union. You have to do the work of building up the tagged union yourselves cause javascript doesn't have those, and then you have to add in some machinery to say a certain that this thing will be never in the default slot, never as a type that if typescript sees that your runtime code ever actually hits it, it says, Hey, this is a type error.

Chris: Again, through that kind of dynamic analysis of that flowed down through your code. So very sophisticated, very capable. So much so that in fact, even when I'm working in stricter languages like Elmore rust, sometimes I miss some of those incredibly rich, very dynamic capabilities that come out of typescript as a result.

Adam: Yeah, it seems very flexible and I can see the connection to the refinement types because you're saying, you know, oh, type scripts is type annotations, you know, and refinement types of

Chris: a, at least liquid Haskell lives in these like kind of comments, right? Where you'd say like, Hey, this event has to be greater than zero. You know if typescript where like if you did like slash slash colon int, right. If you put all the types in right as comments, it would be kind of similar. Right? It's a similar space. Yeah. It's this extra layer on top of what the regular story for the language is there and it's almost like, I mean it seems to overlap with linting a bit too. Like is typescript a language? Is it a really fancy linter? Right. That is an active debate in some of the communities I participate in and actually as one of the maintainers of this ember typescript integration, I make very clear to people that hear what my preferences are, but at the end of the day, if you just want to use it as a really fancy linter rather than doing what I described, borrowing the term from Edwin Brady who is the author of address and so on, this idea of type driven development where as much as possible I'm using the pipes to guide how I build and I ended up using a combination of types and tests which can be very, very powerful as a software kind of one two punch in engineering to get rigor on both the run time and the design space, both of them eliminating different classes of errors.

Chris: We'll look at the end of the day, if you just want to write some pretty loose like loose Java style javascript, we're going to enable you to do that, but over here is the happy path. Do it this way, man. It's kind of my verbal strategy in those conversations as it were. Yeah. And you can, maybe you can gradually approach it, right? Put it in your build pipeline as like a linter and then you slowly, yeah, and I think that's one of the reasons the typescript has been successful because people can use it that way and then say, oh, I also learned this thing from reading a little bit about rusty the other day. I wonder if I could do something like that over here. Oh I can. Cool. And that ability to gradually level up in your understanding of how to use types is very powerful. I think it doesn't feel like jumping into the deep end for a new javascript developer the way that jumping into something like Elmore rust cam.

Chris: So you have done some sort of training on time scripts and I was looking through kind of your notes and I found this quote, maybe you could explain, it says types or just shapes. Exclamation maybe I need to say with emphasis types or shapes or just shapes. Yeah, so this is one of the other really interesting defining features of typescript. Most type systems that most people are used to including most notably in today's space, Java, c sharp and c plus plus and for the most part swift with an important qualification around protocols. Certainly also rust, Haskell. Almost all of these have what we would call a nominal typing system and the idea there is that types are identified by their names. So if I have class person which has a, which is a string on it and then I have class human, which is a class which has a name, which is a string on it, those two are not substitutable for each other in any of the languages I just mentioned in typescript they are because typescript looks at those and says, oh that's a shape and that shape is an object with the property name that is a string on it.

Chris: And the vast majority of the time in dealing with Java script, that is exactly what you want because javascript is just dealing with objects as these blobs of data. And you might use the name as a signal to other developers, but for the most part, and this is a place where writing and typescript actually feels much closer to writing in a dynamic programming language, a dynamically typed programming language than most others. It sounds like duck type, it sounds just like duck typing. Yeah, it's like duck typing that gets checked for you. You say, Hey, this function needs a thing, which is an object which has a name on it and it's a string. And typescript says, cool, well I have all of these objects in my system which have that. And some of them also have an age on it and some of them also have this walk method on them, but all of them are totally compatible with that because they match that shape and because they match that shape, they're good to go.

Chris: And so a lot of especially functional programming idioms, which often you really just want to say, hey, I only care about this one aspect of this, and if you give me something with that aspect, I can do something with it. And then hand you backs. That thing transformed in some way. Typescript lets you do just that. It lets you say, hey you hit me in an object with a name on it and I'll hand you back the length of that name and I don't care how rich or sophisticated the rest of that object is. I don't have to know anything about the details or the internals of that object as long as you have to be an object. That among other things included a name that was a string. We're good to go and that idea we call structural typing. All you care about is the structure of the thing you're dealing with.

Chris: A couple of other languages do have this. Swift's protocols are structural in nature, which is very different for me. I've been digging into swift over the last month or so, a bunch having spent the last almost four years playing almost entirely with Rustin. My spare time and swifts protocols and rusts traits look very similar that this way to describe a behavior that something can conform to like an interface in Java or c sharp but which you can apply to something after the time of definition. So in Java or c sharp you have to say class foo implements interface bar in both Rustin swift you can say this type implements this trade or protocol whether rust or specific or rust or swift. Well apart from the definition which was very powerful in rust you have to include the body of whatever it is you're implementing. You have to define that there so if just perfectly happy to say, Oh you already the relevant properties and methods. Cool, you're good so you can have body less implementations. Also elm has this notion of structural record types where again, I don't care if your type is a super set of this as long as you hit me that you're good to go and I believe oak camel's notion of rope polymorphism fits into the same thing but don't quote me on that because I haven't done much o camp.

Adam: It's funny because like I had an episode about pure script, which I believe it also has roe polymorphism as one of its unique features and I think it has something to do with Java script where like if you're compiling something down to Java script, you're like kind of really want this. Yeah,

Chris: that's a good insight and I hadn't thought of it before, but I think that's exactly right. I will also say that by and large, a lot of the flame wars between dynamic and static typing seem to me to be fairly well dissolved by this. Not all of them. You have some zealots on both sides who are like, well, we live in a universe where things are not actually perfectly computable and so types are a lie and they're always a lie. And you have people on the other side who say stupid things like if you're not using types, you're being unethical and irresponsible. And I think both of those are really stupid things to say and they're just frankly, they're intellectually folly because it is true that you can't cover everything perfectly with types on that side, but you also can't do that with tests. And most of the people who say that really like tests on the other hand, quite legitimate to say, look, for my use case here, I want maximum flexibility and I'm willing to take the trade off that comes with that of losing some of the things I might get out of types.

Chris: So a couple of friends of mine will make exactly that argument and we have friendly back and forth about whether untapped or structurally typed is good or these nominally types of languages over here are good and most of them would frankly admit that if you're writing low level system software, you know that's a tls implementation or something. Actually having rust in it's types is probably really high value. Whereas in other systems, certain kinds of web systems where you're just doing really loose flowing data transfer, something like closure or elixir or Erling which doesn't have, those might actually be more productive for you in certain ways. And so I think smart people recognize that there are trade offs with these typescript and other things which embrace structural typing as at least one tool in the toolbox seem to me to somewhat bend that curve and make it easier for you to say, I'm mostly going to write this like it's structurally typed.

Chris: Just sprinkle in some annotations on top and really be good to go. And in the case of something like elm, you're getting that with a Henley Milner style type analysis. So you're also getting this exhaustive whole program type checking with perfect inference. And of course you're going to add some annotations in general because they're handy for other humans. But in my experience, structural typing really is this incredibly sweet spot where it kind of feels like duck typed dynamically programming, but you're getting all this help of the combiners saying, hey, this could be novel and you might want to check that here before you just call the function so that you don't end up with bug snag or Reagan or whatever saying, Hey, undefined is not a function you just had for years. Those who couldn't please orders because your function wasn't defined here. No, not that I have deep and painful experience with this or anything.

Adam: That's funny. Yeah. I remember I had an episode with Jim Blandy talking about Ross and I remember his like big complaint was like there's like a million line Java script code base out there and if you make a typo then you just have to wait for somebody to hit that line. Yeah,

Chris: yeah. It really stinks and sometimes the way that you get to those combinations is just incredibly arcane. There was a bug I dealt with in my previous role where we knew that bug existed for two years and we could not reproduce it. We could never figure out the set of steps that users were going through to hit that flow. And so we would see it show up with a stack trace in Reagan and we would look at it and we would say, we would trace through every part of our code flow and we would just say, we can't see how this is possible. And one day our product manager was clicking around to the app and said, Oh hey, this thing just happened. We were like, you found it. But it was a case of something into being possibly undefined. And even when we had written the typescript, typescript has a couple of these little escape hatches and one of them is you can write an exclamation point to say this thing will always be defined.

Chris: And we actually had a nice little comment on this block of code that says, here's why this will always be defined spoilers. The comment was wrong. The compiler was correct. Now the problem wasn't that spot. The comment was actually correct in the small, but in the large the system was wrong and it took two years. And finally our product manager just happened to be poking around one day and found the right combo that triggered it. We fixed it and it went away and it was a good feeling. But that example was one, one I listened to that episode that I resonated with very, very deeply how it was going. Yes, Jim. That's exactly it.

Adam: Yeah, that is a crazy story. I, yeah, whenever you can get something out of comments and have it checked somehow. I remember like years ago working on this old code base and finding this method that I need to interact with that giant comment that said like, you know, this thing takes the following like seven arguments and this one should be this and this one should be that. And then looking at the method and it only took three arguments. They weren't the same.

Chris: Oh No. And I think that's one of the places where typescript finds a niche is a lot of places, especially if you're writing large scale applications, they're writing these big javascript dot comments that are annotating the parameters for the types already. And so you actually end up with briefer smaller amounts of code by adding the type annotations in place of these js dot comments and then the compiler can check it for you. Your also has a super power where it'll check your js dot comments, which is really cool. It'll say, oh hey, this is a valid block of js doc and you've described this parameters a string, so now will actually check that. If you use that pragma that I described earlier where you can say ts check, which is really nice. Yeah, that's crazy.

New Speaker: So rust versus typescript, which is better.

New Speaker: Oh Man. Do you remember how a minute ago I was saying that people say dumb things on these type four arguments?

Chris: For that reason, I just refuse to answer the question as stated because I think any answer I could give, what ended up being a dumb answer, I like rust better on a day to day using it level. For the last couple of months I've been working on a project called Volta, which we built out here at Linkedin, but it's an open source project. It's a node version manager tool chain which gives you nice reproducible environments so that you can make sure that all the developers in your team are using the same version of node and the same version of yarn or NPM in the same stack for any cli tools they're using or things like that. And we wrote it in rust in part because the original author behind it, Dave Herman helped drive rust at Mozilla and he's fantastic. If you ever get a chance to talk to him, you should. I look up to Dave a ton, but we've been using crossed and so I went from my previous role where I was writing typescript all day, every day to my current role where I'm doing a bit of typescript but mostly writing rust every day and that soundness and exhaust stiffness of it is just wonderful and a lot of the built in language constructs that you end up having to build yourself in typescript.

Chris: Things like rich enumerated types that Russ has where you can say not just this is a or B or c, but a or B or c can themselves be rich data. Not just an integer. So a can be a with a string wrapped inside it and B can basically be a struct definition which has all these fields on it and so on. You can build up those kinds of abstractions and check against them in typescript, but you have to do all the work yourself and the language just guides you through that with rust automatically and right out of the gate. And it is deeply joyful to me. But I also have to admit that because of weird things about my background, Russ just scratches an itch. That's just right because the first two thirds ish of my career up to this point, I was writing c and c plus plus and times for Tran.

Chris: And so I've spent so much time in that kind of low level world that rust does this magic trick where I'm still writing that kind of extremely high performance memory controlled low level stuff. And I'm also getting all these niceties of a high level language. And so I like that enormously. And the net of it is that Russ just feels better to me, but I can't say that either of them is a better language I think is more accurate to say that both of them are very carefully, thoughtfully designed languages that are targeting very different worlds and very different spaces and doing so very effectively. Rust has this goal of zero cost abstractions and being able to be as fast and sometimes amazingly faster than c or c plus plus and safe at the same time. And it's doing that incredibly well and there is a cost to it.

Chris: I think the cost is a lot lower than some people sell it as being, but there is a cost to it. You have to think about things that you just don't have to think about when you're writing c sharp or javascript or python or anything like this. And by the same token, it's not trying to be what typescript is trying to be. Typescript is, as you summarized it earlier, trying very hard to meet Java script developers where they are and to enable them to, whether it's by way of a fancy linter or because they actually just really are in love with elm or pure script or something, but for good reasons or bad can't write it in their job and all the times it's good reasons. I mean I love Ellen but it was a running joke at my previous gig that I loved element. I would never pitch it because it just didn't make sense for us in that context. And typescript made fabulous sense. So whatever end of that spectrum you're on, typescript is meeting you there and enabling you to do those things and it just really doesn't have to try to worry about memory management because it's not shooting for that space.

Adam: It's funny. It makes sense that you mentioned that you had kind of a sci background because in my mind I was thinking it is strange for somebody to be interested in, in both like amber and Russ like that seems like a very, those circles don't intersect. Yeah. So like wrapping up on typescript, when should people not use typescript?

Chris: That's a great question and I think there are a couple places where I would say don't. One is if you just try it and try it, you know, legitimately not just this is new to me and I hate it, but legitimately go for it for a while and it just doesn't pattern match right in your brain, for lack of a better word. I have, I mentioned earlier a number of friends for whom even with structural typing systems as often as they try to use them, they just bounce off. And these are people who know Haskell, they're people who are really good, really top of their game engineers and it just doesn't work at the end of the day. Like I said, I think the using types is an ethical constraint thing is just dumb. And the best programming languages research we have says you do find certain classes of bugs with types, that's great.

Chris: It's helpful. But those kinds of things are limited enough that we just don't really have any grounds for those kinds of sweeping claims. And so if you and or your team bounce off of it, I think that's okay. I think in certain cases people's brains just work differently and I think that really is okay. My brain works in types. I've been trying to shove things like pattern matching and those kinds of rich data types into see since before I knew they existed in other languages, I was trying to make this kind of thing work with enms and unions and whatnot. Clearly my just runs that way. I want to write these kinds of constraints and other people don't and that legitimately is okay. If you have a team that is just hostile to it, don't try to force it. It's not worth whatever gains you might get out of it.

Chris: I would also say that in certain sufficiently large code bases, if you don't have a lot of will, it might not be worth it because you really do have to have the will to see the conversion through and it's going to be long. It's going to be an enormous amount of human hours and effort. Now I say this as someone who's been working on planning out how to do this on an app that has over a million lines of Java script in it, so a glutton for punishment. I don't know, something that way, but there are situations where it may just not be worth the investment to you and your organization. And I think that's also legitimate because these are engineering tradeoffs. They're not things where we can just snap our fingers and have the code base magically all type. If that were the case, I would say that almost everybody, unless you just can't do types, and even then have you tried a system that has structural types, you might try it, it might be different, but with that exception, if we could all just snap our fingers and have fully typed typescript things.

Chris: So I'd say just do it, but most of us can't. And there's an engineering tradeoff there and it may not be worth it. It may not be worth whatever velocity it costs you in the meantime. I think it'll probably pay for itself in the longterm, but I also think that gets at the other place. If you're really just whipping up something that you intend to throw away and you really intend to throw it away, just doing javascript, if you're comfortable with that and you don't care. For me, I'm actually faster building those kinds of things with types. And I've also experienced that painful thing where you say, I'm just going to build this little thing to wrap around and execute this as sort of my own mini test configuration that nobody else will ever use, surely. So it doesn't matter if it's really well factored, it just has to be a little script that I can get the job done with.

Chris: And then soon everybody in the organization is using that script. Things have a tendency to grow life of their own. So you should probably be more skeptical of the idea that you're really going to have a one off throw away script. But those kinds of things, like I said for me, I mean I write some of those in rust at this point, call me crazy. But I just, I like the feedback cycle. I get there and I enjoy using it and it works well for me. So obviously I don't mind using types even for throw away one off script, but that would be a place where people might not find a value tradeoff high enough.

Adam: I just read an article, they had mentioned something about proof of concepts and I agree with the sentiment where it's like everything that's running in production with somebody like throw away proof of concept. They were like, there's like the great vision that you want to build and you'd never get to. And the proof of concept that still lives on, right. Those are the two. Yup. And some of them are

Chris: nightmares, but they're still going and it turns out that code that's actually doing something is really valuable. So

Adam: delivering value. Right.

New Speaker: So when I started this podcast, one of my ideas was sort of to get down kind of in the weeds of coding, like an audio format. It turns out that that's like super hard. So I don't know if I've given up on that, but uh, like your podcast, you actually have like code samples and and walked through them. Where did you come up with this style and structure?

Chris: I wish I had a good answer for that. Mostly I think it was that I was too ignorant of how incredibly hard it would be and I thought I was surely one can do this, right? Maybe the reason no one has ever done this, that's come across my radar or is I've just missed it. As far as I can tell, no people just recognize that this is really hard and you shouldn't do it. I ended up starting neuro station when I did in part to help myself keep learning and then I found that teaching as that podcast was designed to do without actually talking code sometimes is really difficult. Sometimes you can get away with talking conceptually, but when you're trying to teach something like a programming language, you really do just have to talk code sometimes because it's a programming language. So what I ended up doing over the life of the show was figuring out how to boil down the examples to really, really minimal things that you could actually maybe say out loud and maybe listeners could parse out loud and then if they didn't, you know, only have to re listen to it once to catch the parts that they missed.

Chris: There was also an art I discovered over time of figuring out how you pronounce those strings of characters, you know, a function, taking the name food, taking the arguments bar and Baz of type string and number and returning a new struct with these fields or something like that. Over time, learning how to actually say it because I was talking rust and saying fn foo open parentheses, which I did do in a couple episodes and it turns out you just can't parse that because you're trying to translate from audio into a visual representation of that. Whereas if you just think about what the actual semantics are that that syntax maps to, you can communicate that. You can say, here's a function named Fu, which shakes bar being a string and Baz being a number and returns a new structure which has some embedded field in it.

Chris: I can say that and you can understand it because at some level when we read syntax, that's what our brains are actually doing. We're not thinking fun. When we CFN for function, we're thinking I'm seeing a function definition and we get very accustomed to parsing those details and translating them into the semantics. They mean at least at a high enough level when we're reading through code. So the trick for me was finding a way to figure out how can I do that parsing kind of ahead of time, do the pre parsing to turn it instead of into, you know, some byte code or something, some AST to turn it into something more like a syntax tree for English, which is what we call a sentence in English. But to of do that mapping into what are the actual semantics that we're thinking about and whether I would recommend it to anybody else. Well, I don't know. It was, it was really hard. A lot of times I would end up leaving myself notes in the script of how to pronounce a given definition or how to read a particular thing because otherwise I would get to it while recording and just say, oh no, oh no. And I would try it three times and have a whole bunch of editing to do to try to clean it up into something that was actually useful.

Adam: Yeah, I think it's super tricky, but I think it's great that you've made enough about it. Maybe we'll get better, like maybe my rust is super rusty, if that makes any sense. Like I know almost no rust besides talking to people, but I have explained to people my challenges with the language by saying like if you have a variable x equals one and then like y equals x and then you print x, right?

Chris: Yep. Yes. That one sure confuses people at first.

Adam: So the punchline there is that will not compile and that may be confusing for you if you haven't worked with recipe for it yet

Chris: though I think the specific example you just gave may compile because integers implement copy, so by default the compiler will just copy that for you rather than cloning it. But if you did it with an own string, it would behave exactly the way you just described. So if you said, let x equals string from hello world, let y equals x print x, boom, this doesn't compile. You moved to y and you're going to say what? What do you mean? What's this? I've never seen anything like this.

Adam: Yeah. See, this is why I don't do ad hoc a reading a code in the interview, so

New Speaker: I pulled this bio up. A view says a Chris's, a husband and a dad, a theologian, a composer, a poet, an essayist, a software developer, a runner, triathlete. Podcasts are an all around nerd. Like what's your secret? It sounds like you've maybe consume a lot of Info adamine

Chris: happily. No, I have a couple things going for me that way. One is that most nights I only need seven to seven and a half hours of sleep. And I'm not one of those people that ys to myself about how much sleep I need. So I went through a pretty bad season of burnout last year for a lot of complicated reasons, including things like moving across the country after getting a master's degree and my dad having cancer brain cancer, which he came through well, he's doing really well. But that plus job stuff, it just, I got burnout and those days I was sleeping nine, nine and a half hours a night. So I listened to my body very well. That is actually also part of it. I listened to my body well, but I only need seven to seven and a half hours of sleep tonight. And that extra time matters.

Chris: I work from home and don't have a commute. And for a lot of people, that's anywhere between one and three hours a day that if you're riding a train, maybe you can get some of that back. But if you're driving a car to get through la somewhere, I mean, good luck. You're, maybe you're listening to an audio book at best. So one thing I just always have to say to people when they ask this is I have a lot of extra time that adds up over the course of a year. You know, figure somebody takes four to six weeks off or whatever, you're still talking (800) 900-1000 hours of time. So that makes an enormous difference and it's actually one reason why I'm really, really bullish, I think is the right one on remote work and people being able to work from home and not just in our industry, but wherever we can enable those kinds of things.

Chris: I also get to spend way more time with my wife and my daughters and that's massively important. I mean, I got to see them at lunch. I went upstairs and made lunch for all of us and those kinds of things. So for those reasons I have come to really value it. The other thing is I do keep a pretty rigorous schedule. I tend to get up and make breakfast and read my Bible and then do some writing time. And then I do my work day and my work day seven 30 to five 30 and no, I don't work 10 hour days, but I block out that somewhere in there, depending on the weather or whatever, time of day is best. I live in Colorado, so whatever time of day is best varies enormously. I'll be getting out for a run or something like that. And I just know that there's going to be a couple hours in the middle of the day where I stop and run and I go, come back, take a shower, eat food, et cetera. And then I hang out with my family in the evening. And then there's time after my kids go to bed where some nights I'm just hanging out with my wife. But some nights I'm writing podcast episodes or editing podcast episodes or whatever the case may be, working on reading some nerdy theology book, so on and so forth. So it's mostly just having a good sense of the rhythms of my day and sticking to those. And then like I said, all that extra time that I get out of not having a commute, I'm needing less sleep.

Adam: Yeah, I think it's harder than you're making it sound. So I work from home too. The listeners can't see, but there's a chair behind me there and I think that I have dedicated some of the time you use for podcasting for sitting in that chair and playing angry birds on my phone. So

Chris: I also got rid of Twitter recently and I've been really aggressive about removing things like social media and that actually helps a ton too. But I mean I waste time sometimes. I also, this is huge, so I take a weekly day of rest and counterintuitively to a lot of people. I think that's actually extremely helpful in this. So for over a decade now, Sundays a that's the day I pay cause that's what I'm going to church. It's time I spend with family, et cetera. I don't work on these things. Sometimes I'll muck around with this Sunday I spend a little time mucking around with my website, which I'm in the middle of redesigning. But I did that because it felt restful and you read part of that bio, it included theologian. I'm a Christian and I actually, I look at this idea of Sabbath from the Old Testament, the Hebrew Bible, and it just seems deeply wise to me.

Chris: People sometimes get hung up on it as this kind of binding rule. I actually would just look at it very much as a gift. Humans need rest and especially in our industry, it can be this weird badge of honor to just say, no, I go all the time and I do stuff every day and I work 14 hour days and that's nonsense. For one thing, you're not working good 14 hour days, seven days a week. I just like to be effective with the time and the abilities I have such as they are and with my absurd drive to always be writing a blog post. So I try to use that. Well, I figured if I have it I might as well bless others and encourage and help others with it. But I also have to remind the people around me that just because I'm like this doesn't mean it's more valuable or more worthwhile.

Chris: It stresses the heck out of a lot of people I know and love to think about trying to do all the things I do and I say, no, it's okay. I just really like doing things and I'm good at doing things. You don't have to be as interested in doing things as I am. It's okay to spend more of your time proportional to me reading novels, like I spend a couple of nights a week usually doing things that include things like reading novels or playing mass effect with my wife and then recording a podcast about it cause we're nerds and that's what we do. Check out mass affection.com if you want to hear that. It's nerdy and hilarious because it's basically us ranting about a video game and flirting. But I do these things because I loved them and I enjoy them and they seem to be an effective use of the way I'm wired and built.

Chris: But I don't feel the need to define myself in terms of them or find my worth and doing them. So much of our sense of fatigue comes out of this notion of deep obligation that comes out of that sense of measuring ourselves and our worth out of our productivity rather than these being things that we can do freely and enjoy and by view because we're made to be creative in the image of a god who is creative and made pretty spectacularly crazy, weird worlds out there. As I look out my window right here, it's, it's a wacky place. Have you noticed? It's wild and so my worth doesn't hang on that. So it really is. Okay,

Adam: well that's a very healthy attitude and I have to think that some of your success relates to that. Like the fact that you explored rust not as an obligation, but as a joyful endeavor or whatever you want to call it. Yeah, I think that's right. Well, I think we went through all my questions. Chris, where should people find you online if they want to learn more about you?

Chris: As I mentioned, no longer on Twitter, the only thing you'll find on my Twitter account is a link to all these other places. My website is the main place, Chris criteo.com I blog a lot there. As I mentioned, you'll find updates there multiple times a month, sometimes multiple times a week, rarely, multiple times a day. I try not to do that because it usually usually means I'm not doing something else. I should, but occasionally let myself get away with it. I also have a couple of newsletters, one at button-down dot email slash Chris Criteo where I'm doing some longterm thinking out loud about questions around culture and late modern individualists, liberalism and kind of these big structures societaly and a lot of cases just trying to funnel people toward people much smarter than me and much better read than me who are saying interesting things about them that I think are worth engaging with sometimes I disagree with, but that I think are worth engaging in thinking well on.

Chris: I also have a newsletter for a side project I'm working on at button-down e. Dot. Email slash rewrite where I'm trying to build the world's best research writing application, which is probably the most absurdly ambitious thing I've ever done in my life and I have no idea whether it'll succeed, but hey, it'll be fun. While I try and perhaps most interestingly and related to some of these notes we've just kind of touched on, I have another podcast called winning slowly, which you can find it winning slowly.org where a friend of mine who's a professor at Arizona State University and I try to talk through what it looks like from a usually implicitly Christian frame of like, how do we do ethics and technology and art and religion. He says that's a way of bounding the subjects. I like to describe it as being our excuse to talk about literally the entirety of human existence because technology, religion, ethics and art kind of covers pretty much all of it. But this idea of trying to come at how does it shape us to use a smart phone every day? What are the implications for how we think about community of doing social media? What are ways that we can use or choose not to use social media well, and trying to think on those bigger, more structural levels, trying to rigorously engage those questions. And I think that's pretty much it. So, yeah.

Adam: Well that is quite a few things, but I think that they're all very interesting. So thank you so much Chris. This has been a lot of fun. It's been my pleasure. We ran very long, so hopefully it is not too much for you and your listeners. Thank you so much for your time.

Speaker 5: [inaudible]

Adam: that was the interview. I hope you enjoyed it as much as I did. The last episode with Cory Doctorow sparked some interesting discussion on our slack channel and on Twitter and the Bob Nystrom interview about interpreters received a lot of attention as well. I'd like to thank everyone who mentioned the podcast on Twitter or elsewhere showing super long, so I don't have time to list everybody's names, but let's do a couple Eagle Tabachnick, Jeff Martins, Sean O'Shea, Colin Fay, Matthew Staff, Dunkin, Ajay, Tom Mariotto, oh, Fad d and everyone else. Thank you. So let me know what you think of this episode. I love to hear from people who have discovered the podcasts and are listening through the back catalog, especially, you know, if you'd like to hear your name or Twitter handle or iTunes name mispronounced on the podcast. Until next time, thank you very much.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1057</wp:post_id>
		<wp:post_date><![CDATA[2019-08-05 12:25:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-05 16:25:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[typescript-transcript]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="transcript"><![CDATA[Transcript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2647]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Category Theory with Bartosz Milewski</title>
		<link>https://corecursive.com/035-bartosz-milewski-category-theory/</link>
		<pubDate>Thu, 15 Aug 2019 11:00:12 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1069</guid>
		<description></description>
		<content:encoded><![CDATA[Today Adam talks to Bartosz Milewski. He is the author of a famous blog series, lecture series and now book on Category Theory for programmers.

The world of functional programming is rife with terminology imported from abstract algebra and Category Theory. In fact, it may be one of the most valid criticisms of functional programming is the use of Category-Theoretic terminology that can be unwelcoming to newcomers.

Category theory can also be a tool to teach us to see software development in a different light and it can teach us to build better software. Bartosz is also just an interesting person, if you haven't heard of him yet, you are in for a treat.

<a href="https://corecursive.com/category-theory-is-how-our-minds-work-with-bartosz-milewski/">Transcript</a>

<a href="https://bartoszmilewski.com/">Bartosz's Website</a>
<a href="https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/">Blog Series</a>
<a href="https://github.com/hmemcpy/milewski-ctfp-pdf">Book</a>
<a href="https://www.youtube.com/watch?v=JH_Ou17_zyU">Lecture Series</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1069</wp:post_id>
		<wp:post_date><![CDATA[2019-08-15 07:00:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-08-15 11:00:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[035-bartosz-milewski-category-theory]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="category" nicename="best-of"><![CDATA[Best Of]]></category>
		<category domain="post_tag" nicename="c"><![CDATA[C++]]></category>
		<category domain="post_tag" nicename="category-theory"><![CDATA[Category Theory]]></category>
		<category domain="post_tag" nicename="haskell"><![CDATA[Haskell]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1070]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/corecursive/035_-_CT.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[53:39]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[53.4 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:13:{i:0;s:32:"1:27 -- What is Category Theory?";i:1;s:41:"02:38 -- Category Theory and Programming?";i:2;s:29:"05:40 -- What is Computation?";i:3;s:36:"10:13 -- Why functional programming?";i:4;s:38:"14:08 -- Category Theory is for people";i:5;s:41:"20:12 -- Is the terminology off-putting? ";i:6;s:55:"22:33 -- C++ and Template meta programming and haskell ";i:7;s:16:"29:09 -- Monads ";i:8;s:47:"32:05 -- Category Theory is an invention of man";i:9;s:26:"36:22 -- The world is flat";i:10;s:49:"41:13 -- Why should people learn category theory?";i:11;s:21:"46:35 -- Math culture";i:12;s:27:"49:33 -- What we don't know";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Bartosz Milewski]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Popularizer of Category Theory]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/bartoszmilewski">@bartoszmilewski</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[5905]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wp_criticalcss_cache]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[1071]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Learning about Compilers and Bytecode from Thorsten Ball</title>
		<link>https://corecursive.com/037-thorsten-ball-compilers/</link>
		<pubDate>Sun, 01 Sep 2019 21:11:26 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1111</guid>
		<description></description>
		<content:encoded><![CDATA[What do compilers do? What is the runtime of a language? What does it mean to compile something down to bytecode and what executes the bytecode.  Throsten Ball answers these questions in this interview with Adam.

"A virtual machine is a computer built-in software, a CPU built-in software"
"Compilers can be slow. You know, I grew up running Linux and I had Gentoo running, so I basically let my computer run for the whole night to compile my window manager. So I do know how slow compilers can be and the reason they're slow is because you're paying the upfront costs that an interpreter pays at runtime. You're paying a little bit more because you're doing additional optimizations. You're shifting the cost to a point in time where you're happy to pay it."

<a href="https://compilerbook.com/">Writing A Compiler In GO</a>

<a href="https://github.com/gcc-mirror/gcc">GCC Codebase Mirror</a>

<a href="https://github.com/llvm/llvm-project">LLVM Codebase</a>

<a href="https://bellard.org/tcc/">TCC Compiler</a>

<a href="https://github.com/rswier/c4">C in 4 functions</a>

<a href="https://github.com/rui314/8cc">8CC - small self-hosting compiler</a>

<a href="https://corecursive.com/037-thorsten-ball-compilers/">https://corecursive.com/037-thorsten-ball-compilers/</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1111</wp:post_id>
		<wp:post_date><![CDATA[2019-09-01 17:11:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-01 21:11:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[037-thorsten-ball-compilers]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="category" nicename="best-of"><![CDATA[Best Of]]></category>
		<category domain="post_tag" nicename="bytecode"><![CDATA[Bytecode]]></category>
		<category domain="post_tag" nicename="compiler"><![CDATA[Compiler]]></category>
		<category domain="post_tag" nicename="cpu"><![CDATA[CPU]]></category>
		<category domain="post_tag" nicename="go"><![CDATA[Go]]></category>
		<category domain="post_tag" nicename="interpreters"><![CDATA[interpreters]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
		<category domain="post_tag" nicename="runtime"><![CDATA[Runtime]]></category>
		<category domain="post_tag" nicename="vm"><![CDATA[VM]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1119]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/corecursive/037_-_Compiler.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[58:35]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[58.1 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:16:{i:0;s:30:"02:33 -- Why Build A Compiler?";i:1;s:30:"07:35 -- The Magic of Runtimes";i:2;s:30:"12:07 -- Writing Readable Code";i:3;s:27:"16:05 -- Compiler Frontends";i:4;s:30:"18:53 -- How interpreters work";i:5;s:34:"20:21 -- Why do we need compilers?";i:6;s:25:"25:07 -- The Ruby Runtime";i:7;s:24:"27:07 -- JIT Compilation";i:8;s:53:"33:59 -- Compiler Backend and Translation to Bytecode";i:9;s:17:"36:03 -- Bytecode";i:10;s:67:"39:09 -- Adding in Bytecode and Stack Machines vs Register Machines";i:11;s:34:"43:58 -- Why is it called Bytecode";i:12;s:38:"45:54 -- VMs are bytecode interpreters";i:13;s:31:"46:39 -- Lowering your Language";i:14;s:49:"50:02 -- Bryan Cantrill can't build nice websites";i:15;s:32:"52:12 -- Big and Small Compilers";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Thorsten Ball]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Compiling books on Compilers]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/thorstenball">@thorstenball</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[3472]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[1113]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>1930</wp:comment_id>
			<wp:comment_author><![CDATA[Ash]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ashlink1111@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[173.48.82.155]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-06-13 18:31:24]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-06-13 22:31:24]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That was an incredible podcast, thank you. It's amazing to know that bytecode is like machine code for VMs, etc., etc. for every lesson y'all covered. Thorsten Ball is a philosopher-engineer and such an incredible teacher of first principles. Thank you so much for the great episode.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1592087484.1837511;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>1931</wp:comment_id>
			<wp:comment_author><![CDATA[Ash]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ashlink1111@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://hashbangash.github.io/dev/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[173.48.82.155]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-06-13 18:33:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-06-13 22:33:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This book exists primarily as a high-level companion to The Reference. Where The Reference exists to detail the syntax and semantics of every part of the language, The Rustonomicon exists to describe how to use those pieces together, and the issues that you will have in doing so.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1592087596.7696481;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>Category Theory is in our minds?  Bartosz Milewski weighs in.</title>
		<link>https://corecursive.com/category-theory-is-how-our-minds-work-with-bartosz-milewski/</link>
		<pubDate>Tue, 10 Sep 2019 00:13:14 +0000</pubDate>
		<dc:creator><![CDATA[john]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1129</guid>
		<description></description>
		<content:encoded><![CDATA[Bartosz Milewski, author of "Category Theory For Programmers," covered many topics in a lively interview with Adam, including the fundamental nature of Category Theory.

In contrast to previous guest <a href="https://corecursive.com/021-gods-programming-language-with-philip-wadler/">Philip Wadler</a>, who argued that we discover (not invent) things like the Lambda Calculus, Bartosz believes that Category Theory stems from the structure of human thought, not anything inherent to computing or the objective world.
<blockquote>"Category Theory is a very good description of how our minds work ... [but] you should not confuse the mathematical model with reality. It is a way of modeling concepts so they can fit in our head."</blockquote>
Specifically:
<blockquote>"Category theory essentially studies all the different ways in which things can be composed and decomposed ... [It asks] 'what is the structure of things?'</blockquote>
In other words, Monads exist in our minds necessarily and our algorithms incidentally.

Bartosz also suggests that Category Theory makes us better programmer by making us more than "ant[s] working in an anthill." That is, we can dissect problems using formalisms that explicitly correspond to the atoms of our thought. (For example: using Semigroups to represent the general notion of collapsing two entities into one.)
<br/>
<iframe style="border: none;" src="//html5-player.libsyn.com/embed/episode/id/10876695/height/90/theme/custom/thumbnail/yes/direction/backward/render-playlist/no/custom-color/87A93A/" width="100%" height="90" scrolling="no" allowfullscreen="allowfullscreen"></iframe>
<br/>
<pre><em>This is a transcript of the Podcast <a href="https://corecursive.com/035-bartosz-milewski-category-theory/">found here</a> and may have transcription errors.</em></pre>
<strong>Bartosz thanks for joining me on the podcast. People who listen to this, they might hear different terms that come up over the course of episodes like functors and algebraic data types, applicatives, sum types, product types. Like where do these terms come from?</strong>

Oh, they come from category theory.

<strong>And what is category theory?</strong>

Yeah, category theory is a branch of mathematics. It's a very, very abstract branch of mathematics. And really surprisingly this extremely abstract branch of mathematics has applications in programming. Which is really a big surprise. I talked to some mathematicians and they were also surprised. When you are a mathematician and you want to study category theory, usually you first go through all other branches of mathematics. So you have to be like fluent in topology and Algebra and Analysis. You know, it's all these things because -- group theory -- because they use examples when they teach category theory they use examples that are familiar to mathematicians. So they use examples from every branch of mathematics because it's like a theory that abstracts over all other branches of mathematics.

<strong>So what does it have to do with programming?</strong>

Well, because programming really is mathematics. You know, whether we know this or accept this or not. It really is and it's all about structure. And mathematics is all about structure. I mean mathematics is just building structures from essentially from nothing. You know, you put some axioms and then you derive stuff from it and so on. But it all has tremendous structure, right? Everything is structured. There's this follows from that, you know this, you divide things, you categorize things, you say, you know, well we have things like groups. We have things like monoids. We have things like measures, topology, open sets and so on. So that you categorize things and you say like, you know, you have all kinds of sets but there are some special sets like open sets and so on. And how do you characterize these things? Well, you characterize them by saying what properties they have.

So how they interact with other things that you already know or other things of the same type. And this is very much like what we do in programming. We define things and then we describe them by how they interact with other things. Like in object-oriented programming. Okay, I mean mostly category theory is used in functional programming, but object-oriented programming also has very rigid structure, right? So you do things like data hiding for instance. What does it mean to hide your data? It means that you want to describe your object, not by how it's implemented, but how it interacts with other objects. Namely its methods, right? What are messages, like what kind of messages can you send to this object and how it will respond to these messages by sending other messages and so on. So this view of things, you know -- that you have objects that interact with each other by sending messages, for instance -- that's like the essence of category theory. A category is just a bunch of objects and arrows between them. That's all. And this is perfect model for programming.

<strong>So there's an abstract branch of math that deals with objects and arrows.Then somebody realized this looks a lot like what we're doing with software development. Is that kind of the view of it?</strong>

Historically speaking?

<strong>No.</strong>

No, no. You know, I mean people were always... Like computer scientists were always interested in like what is programming really? Right? So there are like these two schools of thought, the Turing School of Thought that says: "Well the computer is just a device that has like a sort of like a printing head and the reader and so on, and it just moves the tape and infinite tape and moves them." So this is a very mechanical kind of approach. And then there is this very abstract approaching mathematics. Or like what is computation? Because normally in math you define things like functions and you say, "well function is just a value that is related to the argument of the function." So there's argument and there is value. You know, its like function is defined and this is argument. This is value. Give me an argument, I'll give you a value. It doesn't ask you, you know "well, but how long will it take you to calculate this value?" Right? No, it's just there. Right?

But in computer science you have to think about, well if I want the value I'll have to derive it from the argument somehow and I have to go through some steps. Right? And so I have to decompose this bigger question into smaller question. And just answer every single smaller question and then combine them into one big result. Right? So being able to decompose bigger problems into smaller problems and then combine the solutions. That's essentially the description of, well I don't know. It depends on who you are. You will say, oh, that's a description of what I'm doing as a programmer. And a mathematician would say other, this is a description of what I'm doing as a mathematician and you know. I feel this is, we'll say that's what I'm doing as a physicist and so on. It's like everybody is doing this. This is like the essence of all human activity.

<strong>That's interesting. It makes sense to me that that's what I do as a programmer. Like, if I'm given some requirements, then you know, I feel how they might break into like modules and then build those modules and then combine them back. I would've never thought that that's what a mathematician does, but maybe I don't understand what mathematicians do.</strong>

Well, when you're a mathematician, you also like divide your work into, okay, "I have to prove this theorem first, and in order to prove this theorem I have to prove this lemma. I have to define like a new maybe space or object in my space and so on." So it's like, yeah, you are. And then if you have like a huge, huge problem, you want to split it into smaller problems. Like if you want to prove Fermat's Last Theorem, right? It's not just like you think for a moment and then you say, oh, I got it, right? No. You said, you know, I have to study first elliptic curves. And there was this theorem in elliptic curves that I have to prove. Oh, and somebody tried to prove it, but they failed because they couldn't prove a certain lemma. Maybe I can do this. And so on. So you always split things into smaller pieces, right? And then sometimes when you work in a team, right, you have to split, your work into individual tasks and so on. So like everything we humans do is always composable.

<strong>So what does category theory bring to the table?</strong>

Yeah, category theory essentially studies all the different ways in which things can be composed and decomposed. That's like the goal of category theory, you know, it's like it says like what is the structure of things? So what is a structure? Structure is like what parts something has and how these parts interact. I mean we don't even ask ourselves these questions like what is structure? But it's an obvious thing, right? But it is structure is that you can decompose something into smaller pieces and you can describe how they interact that structure. Right? Otherwise you have like one huge morass of stuff.

<strong>Why does categories theory seem to... Or why is it more used in the world of functional programming? Why not imperative programming or object oriented programming?</strong>

It's mostly because functional programming is much more restricted, less hacky. I mean, I came from imperative programming. I mean I programming C++ the last four years, so you know, I'm familiar with this stuff and I can do that. Right? But things in imperative programming are not very well defined. It's like they don't really have this nice mathematical structure. It's more of an expert system programming. Like there are rules, you know, you're not supposed to do that. It's mostly like you're not supposed to do things, right? I get a lot of teaching of imperative programming. Its don't do that, don't do that. And they slap you over the head, you know, this is like come dereference this pointer, okay? You're not supposed to do that, right? Now in functional programming, it's more like there is a mathematical structure behind it and let's just stick to it, right? And if you have this mathematical structure, then you don't have to slap people over the head and say don't do that because it's impossible to do certain things, right?

<strong>You mentioned before like Turing machines versus lambda calculus. I mean, computers really are imperative, aren't they? In there execution. So why do we need something that models things abstractly when they execute concretely, step after step?</strong>

Well, because there is this other thing on the other side of the computer and that's the human programmer. Okay? So programming is not just about the computer, it's about the interaction between the human and the computer. And the computer doesn't really care about, you know, how structured your code is. Why do we avoid goto's? You know, it's like computers love goto's. Give me goto's. Yeah, I can execute them. I mean it's like the processor has one of the basic instructions jump, right? Why not let me jump all the time. Right? So why do we avoid goto's? Not because computers don't like goto's, right? It's because we humans, if we have too many goto's, we just lose track of stuff and start making mistakes. Right? So I don't think this is like the requirement, you know, for the computer architecture or the programming language should reflect the architecture of the computer.

I think the computer language should reflect the architecture of the human mind and the human mind works differently, right? I mean we have to do this thing with what we call understand things, right? So the computer doesn't understand things, but we have to, right? We have to understand things and understanding again, it means that we have to like divide problems into smaller things. Give them names, right? And we give them names. The computer doesn't care what names you give like X1, X2, X3 there just fine, right? Why do we come up with these names for variables that, you know, it's like a factory of a lists or something like that. Right?

<strong>I read some story about how the library differs from like an Amazon warehouse, right? So in the library you have like a Dewey decimal system where people can locate where books are. In the Amazon warehouse, Amazon has a very simple way of organizing things. They just put things wherever and just remember where they put them. Cause it's a computer, they don't need it. So it seems like what you're saying is category theory is for people not for computers. Is that the idea?</strong>

Yes, absolutely. Yeah.

<strong>So in category theory there's like arrows and objects. What does that, what are arrows and objects?</strong>

Well that's the wrong kind of question. You're not supposed to look inside objects or arrows. They are just the basic thing. I mean they have certain properties, right? So you've described them not by what they are, but how they behave. So objects are really...you can think of objects as being labels for beginnings and ends of arrows. That's all. Because you have to say arrow goes from A to B. Right? So this is why you need A and B.

So an arrow can go there.

Yeah. So then the arrow can connect that. So you have objects as these end points for arrows. And you have arrows that can be composed? And this is what it's all about, about composition. So if you have an arrow from A to B and an arrow from B to C, then there's automatically an arrow from A to C. Which is a composition of these arrows. And that's the principle of category theory. That things are composable.

<strong>That's it. We're done.</strong>

Well, there's one more thing. You know there has to be an identity arrow for every object. Which means it's an arrow that when you compose with some other arrow, you get back that arrow again. So it's like multiplying by one or adding zero. Right? That's an identity arrow. So that's all the requirements. You know, you have to be able to compose arrows. There has to be a unit arrow for every object that the identity arrow and also the composition has to be associative so that you don't have to parentheses. Did they first compose these two and then compose it with the third one or did I do it in that different, right.

<strong>So what is an example of a category where that has some meaning?</strong>

The category that we are using as programmers, that's the category that underlies programming languages. Objects in that category are called types and arrows are called functions, pure functions. This is why it's so nice to talk about functional languages because in functional languages you have these pure functions, right? So you automatically are in category theory. And in fact this is like maybe the best way of defining what you're doing as abstractly as a programmer. If you ask somebody what is a type? What is a function? People think of types as sets of values, okay? That's one possible approach. But sets for my categories, it's like to the lowest approximation. You can say, well it's a category of sets and functions.

<strong>So I can think about like my method, like to string or show, it just takes say the set of things, the set of integers and maps it to a set of strings. So I kind of the--</strong>

Yes.

<strong>It is the arrow that does that map.</strong>

Yeah, exactly. And you can compose them, right? I mean you can first say two string and then you can say upper case, right? And you have a composition of these two things. You can say uppercase, two string or something like that. That's a new function that is a composition of these two. Of course there is an identity function that we don't even think much about but its a function that returns this argument without changing it.

<strong>Yeah. So the identity on my integers example just returned to the same integer.</strong>

Yeah.

<strong>And so is the value there that category theory gives us sort of a language to look at things from the outside? To just look at the types and the mappings?</strong>

Well this is just sort of the beginning because the category has more structure. You can add additional structure to the category or you can discover additional structure in this category. So for instance, in programming we are dealing with data structures, right? So what are data structures? Again, you know you have to start with some elementary types, right? And then from these types you form more complex types. Like, how do you define a structure struct, right? I mean you say, well I'll put an int there and I will put a string there and maybe a bullion, right? So you are combining things together, right? So you take several types, which are objects in your category and you put them into one bigger type that combines them. That's called a product category theory. Or you do things like creating a data structure in which I either have a string or an integer like a union type or something. That also can be describing in a category theory as as a sum type and so on. So you get product types, you get sum types and you can do Algebra on them and you get Algebraic data types.

<strong>Yeah. One critique that I sometimes hear about functional programming is that the terminology can be confusing, right? That it can be not friendly to newcomers that we call it Algebraic data types and some types of product types. And do you think that's like a valid criticism?</strong>

No, I don't think so.

<strong>No?</strong>

I mean a name is a name, you know? Why should we invent, I mean there are some cultures in the programming that invent languages and libraries where they come up with weird names that are supposed to be easier to understand than the ones they get from mathematics. But then it's sort of like blocks you from going back to mathematics and trying to learn what's the theory behind that? Right? So you go to a mathematical paper and they use completely different language and you don't know what is that? I don't know what the sum is, what the, what our product is. Right? So I don't know why use a different language there and here? Anyways if I call something, you know like in object oriented programming, if I call something an object that's so meaningful, right? Just try to define what you mean by an object in a programming language. Just because you took a word from English language that everybody thinks they understand, that doesn't mean that an object in C++ for instance, is immediately obvious. Oh, that's an object. Oh, I know what an object is because I learned it when I was an infant, right?

<strong>Yeah. And then wouldn't you have objects that are like nouns or you know, like the factory builder you were talking about? How is that an object?</strong>

Yeah, exactly. People try to give them names like mappable I think. So functor is mappable and a monad is bindable. Like, is that really easier to understand?

<strong>Mappable is not bad. I don't think bindable is good. Monoid could be like combinable maybe?</strong>

Combinable, yeah.

<strong>There we go. See we've already improved things. So you mentioned C++. So how did you get here from doing C++ development to writing about category theory?</strong>

Well, I was always interested in... How do you write good programs, right? How do you make your programs reliable and that made me interested in the theory behind programming. I was always interested in exploring the boundaries. Like what is the hardest thing in C++ that you can think of? Well, I guess template method programming. Right? Template method programming. So I got into template method programming and it was fascinating because it was so different from regular programming. Because it's done at compiled time there is no mutation, right? So how do you program without mutation? Okay. So I started reading these books about template method programming in C++, and it was really hard to understand. Then I found that they actually take all these ideas from functional programming. You know, some of these people are truly know Haskell and they just translate it into C++ and say, Hey, I came up with this great thing. So I discovered this and I started my own franchise. I started blogging about, oh, this is how you can do using template method programming, this fancy thing here and fancy thing there. You know, it's like, oh, okay, cool. People were amazed that you can do these things in C++. Right? But it was really cheating. You know, I was taking something from Haskell that in Haskell it's just like a one liner and I'm in translating it. So eventually I decided to cut the middle man and just go directly to Haskell and see how it works.

<strong>It's a cheat code.</strong>

Yeah.

<strong>It's a way to understanding functional programming was like a shortcut for you to be able to understand template method programming. Being able to think in Haskell but write in C++ was your advantage.</strong>

Yeah. And then I even started talking to C++ programmers saying that even if you program in C++, it's a good idea to learn some Haskell and maybe use it as pseudo-code. You know, I just think a lot of people from the C++ they don't like functional programming because of performance. Because it's true, performance it depends on what kind of programming you're doing. But if you're doing string processing, maybe Haskell would not be the fastest language to do this. And if you start dealing with performance issues, then your Haskell code, I mean you can optimize stuff and then your Haskell code becomes uglier, not so clean. That clean code doesn't really perform very well. So thats the problem. But you know, it's like if you solve your problem first in Haskell and then you translate it into C++ you will probably get better quality code at the end and better performing.

<strong>And so how did you get from Haskell to category theory?</strong>

Well, because of the language, you know, because they use these terms, the functor, monad and so on. So I was curious where do these terms come from and what's the meaning of that. So I started looking into mathematical foundation on that, trying to understand. And then again, you know, it's like, I know I don't do much programming, mostly just testing some ideas, mostly testing the types, do they work together and so on. Because even the Haskell is too constraining but there are certain ideas in math that are difficult to translate to Haskell. So again, I'm finding the boundaries of what can be expressed in Haskell and then going beyond them as category theory. There is a whole area in between which is dependent types. So dependent types are very interesting. And I'm trying to learn Idris, which is a dependent type language and figure things out.

<strong>Nice. Yeah. I've had a couple episodes about dependent types. Edwin Brady was on the podcast.</strong>

Okay. Yeah.

<strong>Yeah. So I think what you're saying is you went from writing C++, but thinking about it in Haskell to writing Haskell, but thinking about it in category theory.</strong>

Yes.

<strong>So is there a notation or something for category theory? What do your thoughts look like? Is it in a mathematical notation?</strong>

A lot of my thoughts when I do them on paper, on the whiteboard, they are diagrams. Yeah. So you know, arrows between dots. That's how you work in category theory.

<strong>So it's purely visual. Now your thinking is actually all diagram based.</strong>

Yeah. And it's very good for me because this is that different people have different types of thinking. Some people are better at kind of Algebraic thinking where they think in terms of symbols and formulas. Yeah, I don't do that. I have a problem with that. I am very visual and I like pictures. I draw lots of pictures and that helps me.

<strong>Yeah, that's interesting. I don't know, am I a visual thinker? I think I'm somewhat of like a oral, like I think, I think in like a soundtrack, you know what I mean? So what's the most successful? What's been a success that's come out of applying category theory to software?</strong>

Yeah, I think the whole language. Haskell is very solid because it's based on mathematical foundations and category theory particular. So I think, well, okay. Monads probably monads are like the most successful thing in functional programming because when people started working in Haskell, it was a purely functional language. It still is a purely functional language. But with the purely functional language you have this problem of how do I print something? It's a side effect. Okay, how do I get input from a file from the user, right? That's not a function. You know, it's like get character, get string, you know it's not a function because every time you call it, it returns a different value possibly. Right?

<strong>Yeah.</strong>

So how do you describe this in terms of categories? And so instead of like doing the easy way out, like most other languages, including functional language, Haskell is probably the only, well there are some others, but the strict functional pure language, right? Like even ML is cheating. So they started thinking, you know, how can we do this without cheating? Right? So this is a really hard problem. And because scientists like hard problems, unlike engineers who will try to find shortcuts and do it quickly because there is a--

Deadline.

Deadline pending and their salary depends on it. And scientists like is interested in will there be a publication out of it? Right? So if it's a hard problem then the publication will be good. Right? So they figured out this and they found out that other way to do this is to use monads and then once monads came into functional programming, they are now spreading to other languages.

<strong>Yeah, definitely. I had Phil Wadler as a guest on the podcast. I think he did the implementation of bringing monads to Haskell.</strong>

Yes, yes he did. It's like it was Eugenio Moggi who first introduced monads into computer science. But it was very theoretical and then Phil Wadler read his paper, talked to him and came up with something that was actually very practical and worked.

<strong>An interesting thing about Phil was that he was saying that he thinks these mathematical concepts like blamed the calculus specifically, that these are like kind of innate to the universe. Maybe he wouldn't quite say it that way, but he thinks that they are.</strong>

Yeah, he would, he would. Yes. I had discussions with him about this, you know, I totally disagree. He said later in this a lot of mathematicians are Platonists. They believe that there are just things inherent... like mathematics is built into the universe. I totally disagree.

<strong>So what's your perspective on it? Why do you disagree?</strong>

I think mathematics is something that is inherent to human beings. This is the only way we can deal with our environment is because we have small brains. It's like compared to the size of the universe, this is just like a tiny, tiny thing. And it evolved from apes that were trying to solve problems, like how to run away from a predator or how to kill an animal and eat it, start a fire and so on. So the way we deal with complexity is by dividing into smaller tasks, solving them and then recombining the solutions. And that's what we do with everything. We just don't know how to deal with things that are not decomposable. I mean one part of life is that every living being has to have some kind of model of the environment.

So it has to create a simplified model of the environment. I mean we humans have this sort of we can even think about the model as opposed to reality, right? We have a model of the environment in our brains and we know it's simplified, right? But the fact that you can take the environment, the universe, and simplify it, meaning throwing away some things and decomposing in the smaller things that's just an amazing thing. And people think, well, isn't that amazing that the universe is decomposable? And I think no it's not amazing that, I mean, it is amazing that this part of the universe that we live in the particular scales, like the meter scale is decomposable, right? But like you can go like a 10 levels down to like micro scales and suddenly things are completely different. Right? You know, this is why we don't have life at the Planck scale because it's not decomposable, you know, at our level of universe, things are nicely decomposable and this is what makes life possible. And as humans

<strong>Yeah, I would think that it's like has to do with where we evolved, right? Like we have trouble understanding things at the quantum level because that's just foreign to us, right? The same way we have a hard time understanding how approaching the speed of light works. It's just cause humans never existed in a world where they went that fast. So it doesn't fit in the model of our brain.</strong>

But humans never existed at atomic scales because its impossible for life to exist at the atomic scale. Why is it impossible? Why can't there be a life on the surface of the nucleus of Hydrogen, right. Why?

<strong>Well, what would it be made out of?</strong>

Exactly. Right, right.

<strong>Oh, I see.</strong>

Yeah, cause you're saying made of means decomposable, right?

<strong>Ah, yeah.</strong>

There's nothing to compose or decompose.

<strong>I see. Yeah. That makes sense. You had some talk that you sent the link to me where you posit that the world is a not round or that the world is flat. I think.</strong>

Oh, well it was tongue in cheek. Yeah. Yeah.

<strong>Could you explain that point? Like how is the world flat?</strong>

Because people often confuse, well Platonists will confuse the thing that we understand about the world with what the world is really, right? The ontology of the world.

<strong>Because the world isn't really a sphere I guess, right?</strong>

Yeah, yeah. The Earth is not a sphere. It's like if you start arguing that the world is a sphere, you're talking about some kind of ideal of a world, right? A model, right? So you can model the Earth to some approximation as a sphere and that's good. You know, but the Earth is not a sphere. You have to understand the Earth is not a sphere. There is a tiny difference, you know, several kilometers, you know, in some places. Right. So it's--

<strong>It has to do with your decomposition thought. I think, right? Cause you're saying like for me to understand what the world looks like, I need to come up with some model and it has to fit inside my head, right?</strong>

Yeah, exactly.

<strong>So it has to be, it has to get rid of some of the details.</strong>

This is what we call abstraction. Abstraction is getting rid of some details and getting a nice model. So yeah, so I mean you can describe the Earth as a sphere to some approximation. Then you can describe the Earth as flat. Mathematically it's okay. You know, it's like there is a system of coordinates in which the Earth is flat and it would be much, much harder to work with that system of coordinates because you would constantly have to do adjustments. You know, like, yeah, you move towards the South Pole for instance. What we consider the South Pole? You know, and like your coordinates would just blow to infinity.

<strong>So this abstraction I think so at the level of my code, right? Like I just have imperative code that runs on the computer. Like it does jumps and whatever. And then like I have my actual like maybe I have my functional programming code, it's like a level operate it hides some details and then I'm trying to connect this all back. So then I think what you're saying is there's like category theory is like something that gets rid of some of these details even more so it's like if you want to look at the flat, if you, you can assume the world is flat when you're measuring a hundred meter race, like that's fine. Right? But then when you want to zoom out and go to the South Pole, you maybe you want to assume it's a sphere and then like at each level of detail, if you want to do a foundation for your house, like at the lowest level, you can't assume the world is flat. You have to actually know where the bumps and cracks are.</strong>

Yeah.

<strong>So category theory is a way to hide some of the details so that we can fit it in our head. So it's not something. I'm trying to understand your perspective it's like it's not something innate to the mathematical underpinnings of the world. It's a way that humans use to fit big, hairy concepts into their heads.</strong>

Yeah, exactly. Category theory is a very good description of how our minds work. It has nothing to do, well maybe that's just a harsh statement, but you should not confuse mathematical model with reality. And I hear this very often when you know, especially talking to mathematicians, they say, okay, we have them in this category. We have like this category described the world and inside this category we have a model of the world, right? But the world is also a category. It's like no, the world is not a category. The world is already in a category, its already a model in our brain, right? So there is this problem occurs in mathematics and in physics. You know, its like in physics you have quantum physics, you know, and then you have an external observer always. You know, its like --

<strong>That never sat right with me.</strong>

Yeah. And you know, I mean, as a physicist you kind of get used to it, but never really, you know, it's like, you know that there's something wrong with quantum mechanics at some level There's always this classical observer thats observing quantum effects. Like, so it means that quantum theory is incomplete and every single theory that we have is incomplete.

<strong>Cause there just models.</strong>

And even true in mathematics, you know, there's an incompleteness theorem, right? Godel's incompleteness. So it's like everything we do is incomplete.

<strong>So why should people learn category theory?</strong>

Why should people do anything?

<strong>Is it fun? Is it practical? Is it both?</strong>

For a programmer for instance? Like it doesn't make sense to learn category theory. Will it make you a better programmer? I think it will. It will sort of make you a higher level programmer. You know, it's like being able to lift yourself above your program. It's like otherwise you, you know, you're just like a little ant working in an anthill, right? And the only things you see are the things that are close around you, right? It's like your never able to like lift yourself above the anthill and see how it's related to the rest of the world and so on. And category theory provides these ways, these extractions that otherwise you wouldn't even think of. You know, it connects things. It says, well, a list is in a way... A list data structure is somehow similar to an optional in some ways. How is it similar? Well, because its a monad, right? Unless you have this word monad, you know, and the description of what a monad is, you will never see the similarity between a list and optional or a function.

<strong>Well you could just say it's a list of a maximum one arguments, like a list of Max size one.</strong>

Okay. Yeah. Good.

<strong>But maybe that would get you towards the concept of a monad. I don't know.</strong>

Yeah, yeah, yeah. It probably would. Yeah.

<strong>If it became widely understood as a language where we talk about software development using these terminology, like how would that influence software development? It would make us feel smarter because we'd have all these abstract Algebra terms to throw around.</strong>

I think it's already changing the way we program. I mean the development of programming and programming languages is sort of from goes from bottom up. So we start working to solve particular problems, right? And then we discover that there are similarities between these problems and that we could simplify our lives instead of redeveloping the same thing over and over and over. Maybe we can abstract over it, right? And a lot of programming languages evolve. Every programming language really evolves this way that it just adds abstractions on top. And I saw this in C++, you know, I was always really happy when new features came to C++ because like oh I can do more stuff. Right? But they were always like slapped on top of the existing stuff you know, and it was, there was like a, this really ugly syntax of templates, right? You know, it's like there were even problems, like if you have a template inside the template, then the two greater than signs would collide then the compiler would think this is like your all or this is a right shift. You know? It's like that's crazy, right? It just says, you know, this language was not developed to think at this high level of obstruction. Right? And it was just added to it. So there are new languages which lets you program more abstractly, which means that you can reuse your code, that you can write code that will solve different kinds of problems using the same methods. I mean, you know, there is, there's like this whole industry of patterns, right? There is the gang of four pattern book and so on. That was a great thing when it came out, but it showed this tremendous weakness of programming languages that you have to describe these patterns in a book, right?

<strong>Yeah.</strong>

And then ask the programmer, Oh, here you have a particular, you know, write your code according to this book instead of use this library. Right? Because we've solved this problem before. Right? So the gang of four solved a certain bunch of problems. Right? But they could not express it in a language.

<strong>What was a stumbling block that you hit or that people hit when trying to learn about category theory?</strong>

The biggest stumbling block is that mathematicians, they just don't explain things the way that's easy to understand. Let me describe it this way. I don't know. It's like when you read a mathematical paper or a book, you know it's written in a certain style.

<strong>Is it that it's written for mathematicians to understand but not for programmers or is it mostly...</strong>

I think it's a culture. It's a culture thing. You know, it's like there is even, I mean, being a physicist, you know, I see the difference in culture between physics and mathematics. Like in physics, you know, we had this great guy, Feynman who was like, he would always try to explain things in the simplest terms. And he loved giving talks to outsiders trying to explain, you know, the quantum field theory. You know, stuff like this. And mathematicians don't do that. They write these abstract papers and if you don't get it, you know, it's sort of like you're stupid because you don't get it. You know, you shouldn't be reading this. I was fine when I had the opposite. It's like if I can't explain it, it means I don't understand it. You know, if I can't explain it in simple terms, I don't understand.

<strong>And is this why you started your series explaining category theory for programmers?</strong>

Yes, yes. This and because I thought there was this problem that mathematicians will use examples from other branches of mathematics. And so what if you don't know these other branches of mathematics. Does it mean that the category theory is useless to you? No, it's not. It's just that, you know, you have to like rewrite category theory using different examples. And there's plenty of examples in programming that I could use to explain concepts in category theory. And it turns out that these concepts are not that hard if you have the right examples.

Yeah, that totally makes sense. It's interesting. Like I guess one thing I never thought of before I started talking to you was, so there's this field called category theory. My understanding is that somebody noticed a whole bunch of similarities between a whole bunch of branches of math. Right?. And that's where it came from. But what you're saying is I think that those similarities aren't to do with math. They're to do with the people who created math.

Yeah. Yes, exactly. And you see these things not only in mathematics but also in physics, in programming. It's like in every area of human activity you see the same patterns, the same structures. I sometimes am amazed, you know it's like reading a paper in some area of mathematics and they are using the same ideas that I found in some other area of mathematics. Then thinking about are these the only patterns that we humans are able to discern and we are just describing the same patterns over and over and over again in different contexts.

<strong>Does that mean that there's things we'll never figure out because they're not part of the patterns we can find?</strong>

We have figured some things out and there are so many other things that we haven't figured out. We always think that like we already understand 99% of stuff and there's this 1% missing. And I think this is completely wrong. We understand the 0.001% if that even makes sense, right? And there's so much stuff missing if we just ignore the stuff that we don't understand.

<strong>Do you know what we're ignoring?</strong>

Well, yeah, there are certain things that we know that are sort of beyond the scope of what we can do right now. And we think, well eventually we'll figure these things out. But in physics, obviously there was this humongous problem of we have general relativity in gravity on the one side and quantum mechanics on the other side. And we just don't know how to connect that. And we think, well maybe string theory, maybe this, maybe that, you know, it's like, and the deeper we go into it, the more we understand that we don't understand stuff and maybe these things just don't decompose. You know, that's the obvious solution. Okay? And if they don't decompose, then we can't really describe them. We can't have a model, right? It's like does everything have to have a model? Can it be simplified? Why should it be?

<strong>You can always come up with approximates for things. Can't you?</strong>

Why?

<strong>Like how the globe is it?</strong>

Because this is what's been happening in the history of humankind. Whether you can also understand this as like we are discovering things that are possible for us to understand and we just ignore everything else.

<strong>Yeah. I don't know a lot about physics, but, and this'll probably get cut from the actual episode, but like a dark matter that doesn't seem to make sense. They're like, okay, well the universe has to have so much mass to it and there's not enough. So let's just postulate something that weighs the rest of it. That seems like cheating, right?</strong>

Yeah. I mean, and a lot of people think it is cheating. Yeah.

<strong>Crazy stuff.</strong>

There's dark matter. There's dark energy. Yeah.

<strong>Maybe that's the difference between physicists and mathematicians. I don't know.</strong>

Well, physicists are very pragmatic, you know, if it works, it works. Okay. If I can calculate something and then test it, then it's great. In this way, physicists are more like programmers. If it works let's ship it.

<strong>So what's next for you after category theory?</strong>

I'm interested in homotopy type theory, but this is really hard.

<strong>Has to do with the quality. I know that much. So thank you so much for joining me. It was a lot of fun.</strong>

Okay, thank you. Thank you for having me.
<pre></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1129</wp:post_id>
		<wp:post_date><![CDATA[2019-09-09 20:13:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-10 00:13:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[category-theory-is-how-our-minds-work-with-bartosz-milewski]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="transcript"><![CDATA[Transcript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[157]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[4079]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1133]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Open Source Health and Diversity with Heather C Miller</title>
		<link>https://corecursive.com/038-heather-miller-open-source/</link>
		<pubDate>Sun, 15 Sep 2019 20:35:28 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1166</guid>
		<description></description>
		<content:encoded><![CDATA[Heather Miller is an Assistant Professor at CMU. She is concerned that key open source projects are at risk of failure and no one is paying attention. Adam talks to her about open source, how it grows, the diversity problems it has and much more.

Heather also shares some interesting stories about the early days of Scala and her ideas for increasing diversity in tech.

<a href="https://www.youtube.com/watch?v=b_743P8XuvA">Heather's JuliaCon keynote</a>

<a href="https://www.fordfoundation.org/about/library/reports-and-studies/roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure/"> Digital Infrastructure</a>

<a href="https://scala.epfl.ch/">Scala Center</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1166</wp:post_id>
		<wp:post_date><![CDATA[2019-09-15 16:35:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-09-15 20:35:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[038-heather-miller-open-source]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="category" nicename="best-of"><![CDATA[Best Of]]></category>
		<category domain="post_tag" nicename="diversity"><![CDATA[Diversity]]></category>
		<category domain="post_tag" nicename="open-source"><![CDATA[Open Source]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/corecursive/038_-_Open_Source.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[41:33]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[41.8 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:15:{i:0;s:32:"01:25 -- Digital Infrastructure ";i:1;s:28:"03:44 -- Equifax and OpenSSL";i:2;s:43:"05:13 -- Unsexy opensource projects and SBT";i:3;s:21:"07:00 -- Scala Center";i:4;s:30:"08:31 -- Life for contributors";i:5;s:30:"09:23 -- Meet people in person";i:6;s:32:"11:09 -- Diversity in Opensource";i:7;s:50:"14:29 -- Getting people from different backgrounds";i:8;s:36:"17:11 -- Scala Bridge and Minorities";i:9;s:33:"22:22 -- Paid time on open source";i:10;s:29:"24:53 -- Help OS without code";i:11;s:45:"27:18 -- How did Scala succeed as open source";i:12;s:47:"29:24 -- Martin Odersky and building compilers ";i:13;s:29:"33:26 -- Rust and Open Source";i:14;s:20:"35:32 -- Work at CMU";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Heather C Miller]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Assistant Processor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/heathercmiller">@heathercmiller</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[3470]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1172]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[1168]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Language Oriented Design and SICP with Hal Abelson</title>
		<link>https://corecursive.com/039-hal-abelson-sicp/</link>
		<pubDate>Tue, 01 Oct 2019 09:00:34 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1175</guid>
		<description></description>
		<content:encoded><![CDATA[Adam talks to Hal Abelson about the textbook he coauthored in 1985, The Structure and Interpretation of Computer Programs and why it is still popular and influential today.

"If you pick up almost any computing book it starts out 'here are these datatypes, these operations that you do' and somewhere around 20 or 30% through the book, they show you how to define a function or a procedure. Whereas we really take the opposite approach. We say the key thing is abstraction. So we kind of start there."

"The axe [the book] is grinding is that people write programs to do one particular thing. And then the price of that is that a whole lot of software engineering ends up being trying to get out of the hole you dug yourself into because you made a program that was too specific."
<ul>
 	<li><a href="https://www.youtube.com/watch?v=2Op3QLzMgSY">SICP Lectures</a></li>
 	<li><a href="https://mitpress.mit.edu/sites/default/files/sicp/index.html">The Structure and Interpretation of Computer Programs</a></li>
 	<li><a href="http://www.gigamonkeys.com/code-quarterly/2011/hal-abelson/">Hal Interview</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1175</wp:post_id>
		<wp:post_date><![CDATA[2019-10-01 05:00:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-10-01 09:00:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[039-hal-abelson-sicp]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="author"><![CDATA[Author]]></category>
		<category domain="category" nicename="best-of"><![CDATA[Best Of]]></category>
		<category domain="post_tag" nicename="lisp"><![CDATA[lisp]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="scheme"><![CDATA[Scheme]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/corecursive/039_-_SICP.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[56:27]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[56.1 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:15:{i:0;s:27:"01:38 -- What is SICP about";i:1;s:43:"04:58 -- Philosophical Approach to Software";i:2;s:15:"06:56 -- Scheme";i:3;s:33:"08:56 -- Language Oriented Design";i:4;s:19:"16:44 -- MIT AI Lab";i:5;s:15:"17:35 -- Prolog";i:6;s:27:"19:22 -- Forget about Types";i:7;s:38:"21:27 -- Scheme Culture and Javascript";i:8;s:23:"29:00 -- Too much Match";i:9;s:27:"32:43 -- Building with APIs";i:10;s:28:"34:03 -- Consumption Culture";i:11;s:33:"37:09 -- Diversity in Engineering";i:12;s:51:"42:15 -- Open Culture and Naivety of Early Internet";i:13;s:33:"46:06 -- FSF and Creative Commons";i:14;s:38:"51:31 -- What would you change in book";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1177]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Hal Abelson]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[MIT Professor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[5613]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[1178]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>1196</wp:comment_id>
			<wp:comment_author><![CDATA[Matt]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[matt_bruensetiner@yahoo.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[99.45.117.101]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-10-22 01:05:48]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-10-22 05:05:48]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I just want to point out that Brian Harvey wrote a book that covers a big part of the material in SICP, but targeted at high school students:  Computer Science Logo Style]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1571720749.0162079;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>1213</wp:comment_id>
			<wp:comment_author><![CDATA[An Interview With Hal Abelson | Irreal]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>https://irreal.org/blog/?p=8409</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[162.215.249.103]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-10-29 11:42:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-10-29 15:42:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] at Corecursive, Adam Gordon Bell has a really interesting podcast interview with Hal Abelson. In addition to being an MIT Professor and one of the authors of SICP, Abelson also cofounded the [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1572363736.745383;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>1227</wp:comment_id>
			<wp:comment_author><![CDATA[Language Oriented Design and SICP with Hal Abelson &#8211; CodingNova]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[]]></wp:comment_author_email>
			<wp:comment_author_url>http://codingnova.com/index.php/2019/11/05/language-oriented-design-and-sicp-with-hal-abelson/</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[192.254.250.182]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-11-04 22:06:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-11-05 03:06:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] View Reddit by ml01 &#8211; View Source [&#8230;]]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[pingback]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1572923172.4222541;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>1326</wp:comment_id>
			<wp:comment_author><![CDATA[Andrew]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[sunlao93@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[156.93.192.9]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-12-11 11:31:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-12-11 16:31:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[crushing so hard on this podcast with Hal!

I am passing this one along to get people to read the book]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1576081860.906764;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>1381</wp:comment_id>
			<wp:comment_author><![CDATA[Roger Barraud]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[roger.barraud.lists@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://roggablog.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[103.53.23.14]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-01-09 02:11:11]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-01-09 07:11:11]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[How to fix it?

See Larry Lessig's talks on YT... and the Freedom Box stuff in particular.

Also, why didn't you ask him about Aaron, JSTOR and his response/handling of it at MIT?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1578553871.8634641;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>Tech Evangelism with Gabriel Gonzalez</title>
		<link>https://corecursive.com/040-tech-evangelism-with-gabriel-gonzalez/</link>
		<pubDate>Fri, 01 Nov 2019 09:00:39 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1187</guid>
		<description></description>
		<content:encoded><![CDATA[What makes some pieces of technology take off? Why is java popular and not small talk or Haskell?

Gabe is a popular blogger, a former Haskell cheerleader, and creator of the Dhall configuration language. Today we talk about marketing and tech evangelism.

"One common mistake I see a lot of new open source developers make is they tried to build what I call the hype train. Where they have started a new project that has a lot of potential and they advertise on hacker news hoping that, okay, we're gonna generate a lot of hype, maybe get a lot of influx of new contributors, new contributes, new features, generate more hype and so forth."

"They hope that there'll be that virtuous cycle that will get them to the mainstream in practice, that never happens. Usually, the thing about contributors is that their needs are always going to be fragmented, right? If you have eight new contributors, they're going to be taking you in eight different directions. You should focus on one direction and sometimes that means not only doing a lot of work yourself, but it's explicitly saying no to something and saying this is not where I want to take the product right now."

Links:
<a href="https://www.amazon.com/Crossing-Chasm-Marketing-High-Tech-Mainstream/dp/0060517123">Crossing the Chasm</a>
<a href="https://dhall-lang.org/">Dhall</a>
<a href="https://www.se-radio.net/2019/08/episode-375-gabriel-gonzalez-on-configuration/">Adam's SE Radio Interview with Gabe</a>
<a href="http://www.haskellforall.com/">Haskell For All - Gabe's Blog</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1187</wp:post_id>
		<wp:post_date><![CDATA[2019-11-01 05:00:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-01 09:00:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[040-tech-evangelism-with-gabriel-gonzalez]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="category" nicename="best-of"><![CDATA[Best Of]]></category>
		<category domain="post_tag" nicename="dhall"><![CDATA[Dhall]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="tech-evangelist"><![CDATA[Tech Evangelist]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[67:13]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[66.4 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-episode-number]]></wp:meta_key>
		<wp:meta_value><![CDATA[40]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:17:{i:0;s:27:"1:28 -- Haskell Evangelism ";i:1;s:29:"4:40 -- Evangelism at Twitter";i:2;s:27:"07:23 -- Crossing the Chasm";i:3;s:37:"08:54 -- Programming Language Fallacy";i:4;s:31:"10:51 -- Mainstream Programmers";i:5;s:29:"13:44 -- Early Flaky Adopters";i:6;s:27:"16:45 -- Rust as an Example";i:7;s:28:"21:23 -- Early Adopters Suck";i:8;s:26:"27:18 -- Angular messes up";i:9;s:30:"28:42 -- Typescript Evangelism";i:10;s:23:"32:05 -- Nix Evangelism";i:11;s:25:"38:42 -- Dhall Evangelism";i:12;s:26:"46:08 -- Onboarding is Key";i:13;s:30:"47:37 -- Ignore the hype train";i:14;s:17:"52:46 -- Graphql ";i:15;s:25:"55:38 -- Scala Evangelism";i:16;s:24:"59:48 -- Kotlin vs Scala";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Gabriel Gonzalez]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Dhall Advocate]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/gabrielg439">@Gabriel439</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2804]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1199]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/corecursive/040_-_Tech_Evangalism.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[1191]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>1217</wp:comment_id>
			<wp:comment_author><![CDATA[Valery Vorotyntsev]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[valery.vv@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[93.74.5.220]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-11-02 09:46:45]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-11-02 13:46:45]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Very interesting episode! Thanks! ❤️

(This page has a typo: s/Dhal /Dhall / )]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1572702405.865808;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>1232</wp:comment_id>
			<wp:comment_author><![CDATA[Adam Gordon Bell]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[adam@corecursive.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[174.88.125.173]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-11-06 08:12:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-11-06 13:12:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks, fixed!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>1217</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1573045940.1495609;s:5:"event";s:9:"check-ham";s:4:"user";s:4:"adam";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>1251</wp:comment_id>
			<wp:comment_author><![CDATA[Tristan]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[tdecacqu@redhat.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[69.159.116.27]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-11-10 17:16:26]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-11-10 22:16:26]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[What's the book recommendation name at 01:02 ?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1573424186.214571;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>1252</wp:comment_id>
			<wp:comment_author><![CDATA[Adam Gordon Bell]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[adam@corecursive.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[65.95.217.242]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2019-11-10 18:02:09]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2019-11-10 23:02:09]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Crossing the Chasm - the link is in the description of episode]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>1251</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1573426951.304718;s:5:"event";s:9:"check-ham";s:4:"user";s:4:"adam";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>Beautiful and Useless Coding with Allison Parrish</title>
		<link>https://corecursive.com/beautiful-and-useless-coding-with-allison-parrish/</link>
		<pubDate>Sat, 16 Nov 2019 10:00:47 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1200</guid>
		<description></description>
		<content:encoded><![CDATA[Generative Art involves using the tools of computation to creative ends. Adam talks to Allison Parrish about how she uses word vectors to create unique poetry. Word vectors represent a fundamentally new tool for working with text.

Adam and Allison also talk about creative computer programming and building twitter bots and what makes something art.

"Computer programming is beautiful and useless. That's the reason that you should want to do it is not because it's going to get you a dropped off because it has a particular utility, but simply for the same reasons that you would pick up oil paints or do origami or something. It's something that has like an inherent beauty to it that is worthy of studying."

"For my purpose as an artist and as like someone who teaches programming to artists and designers, I want to emphasize that it's not only a vocational thing, it's not only a way for building things like to do apps for that matter. It's not only a way to, you know, write useful applications that help to organize communities or help to do scientific work and other like good applications of programming and software engineering. But there is this like very essential, very core part of computer programming that is just joyful. Um, that's about understanding your own mind in different ways and understanding the world in different lands."
<ul>
 	<li><a href="https://www.youtube.com/watch?v=L3D0JEA1Jdc">Experimental Creative Writing with the Vectorized Word</a></li>
 	<li><a href="http://www.numeral.com/panels/everyicon.html">Every Icon</a></li>
 	<li><a href="https://en.wikipedia.org/wiki/Word2vec">Word2Vect</a></li>
 	<li><a href="https://www.decontextualize.com/">Allison Parrish's Website</a></li>
 	<li><a href="https://tracery.io/">Tracery</a></li>
 	<li><a href="http://counterpathpress.org/articulations-allison-parrish">Articulations</a></li>
 	<li><a href="https://twitter.com/everyword">Every Word</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1200</wp:post_id>
		<wp:post_date><![CDATA[2019-11-16 05:00:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-16 10:00:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[beautiful-and-useless-coding-with-allison-parrish]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:16:{i:0;s:38:"01:37 -- Punching Language in the Face";i:1;s:28:"04:21 -- Backstory of a Poet";i:2;s:31:"05:45 -- Poetic Language Models";i:3;s:37:"07:23 -- What is Art? What is Poetry?";i:4;s:21:"09:53 -- Word Vectors";i:5;s:30:"13:53 -- What color is a work?";i:6;s:37:"15:20 -- Phonetic similarity of text ";i:7;s:29:"20:23 -- the road less kikied";i:8;s:38:"27:01 -- creative computer programming";i:9;s:22:"31:09 -- joyful coding";i:10;s:37:"33:01 -- Chat bots using word vectors";i:11;s:61:"34:22 -- Finding Meaning in Text using co-occurrence matrixes";i:12;s:29:"39:05 -- Twitter poetry bots ";i:13;s:27:"44:26 -- Building text bots";i:14;s:23:"47:03 -- Generative art";i:15;s:30:"48:34 -- Articulations reading";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1203]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/corecursive/041_-_Generative_Poetry.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[52:19]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[52.4 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Allison Parrish]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Language Puncher and Poet]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/aparrish">@aparrish</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2056]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[1202]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Software in Context with Zach Tellman</title>
		<link>https://corecursive.com/042-zach-tellman-software-in-context/</link>
		<pubDate>Mon, 02 Dec 2019 06:00:28 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1217</guid>
		<description></description>
		<content:encoded><![CDATA[Adam talks to Author and Clojure advocate Zach Tellman about how great software is built.

"If we say something is over-engineered, what we mean is it's too complex or it's too robust or it handles a bunch of situations or scenarios that are not relevant to how we're using it. It's okay for us to create narrow things. It's okay for us to create PowerShells instead of bash sort of environments because that narrowness gives us the ability to go and do things we might not otherwise be able to do."

"Twitter is built on top of Ruby because that was a reasonable thing. And then it stopped being the reasonable thing. And again, you have this kind of, I dunno, I call it hacker news induction, which is like, well I built this thing and then I built this other thing, which is almost exactly the same thing. And it worked or it didn't work. And therefore I think that this must generalize across all possible applications of this thing, right? So I tried to rails and it was great or it was awful and therefore it is great or awful, you know, in all situations. "

<a href="https://ideolalia.com/">Zach's Personal Site</a>

<a href="https://elementsofclojure.com/">Elements Of Clojure Book</a>

<a href="https://www.youtube.com/watch?v=x9pxbnFC4aQ">Zach's Talk "On Abstraction"</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1217</wp:post_id>
		<wp:post_date><![CDATA[2019-12-02 01:00:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-02 06:00:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[042-zach-tellman-software-in-context]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="author"><![CDATA[Author]]></category>
		<category domain="post_tag" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="software-design"><![CDATA[Software Design]]></category>
		<category domain="post_tag" nicename="software-rewrite"><![CDATA[Software Rewrite]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1216]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/corecursive/042_-_Context.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[53:26]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[53.3 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:10:{i:0;s:27:"1:15 -- elements of clojure";i:1;s:35:"04:53 -- indirection vs abstraction";i:2;s:33:"10:56 -- unix pipes vs powershell";i:3;s:28:"18:35 -- software in context";i:4;s:22:"20:21 -- sql injection";i:5;s:32:"22:26 -- assumptions of software";i:6;s:32:"28:11 -- people fighting online ";i:7;s:27:"34:01 -- software as cities";i:8;s:28:"37:31 -- Clojure's looseness";i:9;s:29:"45:26 -- What type nerds miss";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Zach Tellman]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Author and Deep Thinker ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/ztellman">@ztellman</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2435]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[1210]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>The Business Of Developer Tools With Lee Edwards</title>
		<link>https://corecursive.com/043-lee-edwards-developer-tools/</link>
		<pubDate>Tue, 17 Dec 2019 05:00:30 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1223</guid>
		<description></description>
		<content:encoded><![CDATA[How do you build a business around tools for software engineers? Adam talks to Lee Edwards, a VC who spends a lot of time thinking about this question.

"When I think about is this a good business, I think about is there value Accruing. The question is just how much.

The question about is it a venture-backed business? The very, very oversimplified answer is do you believe you can get $100 million in revenue within 10 years? And those numbers are kind of fudgy. But if you can do that, you can IPO a company and it's kind of amazing that PagerDuty and Twillio each do one thing well and they're multibillion-dollar companies. "

"Another interesting thing that venture capitalists talk about behind closed doors and probably never tweet about or say publicly because it makes them look bad. But you do often wonder if the founder of a dev tool company, a lot of times they're really altruistic and you know, I feel this way too, right? But venture capitalists are like, wait, don't give your stuff away for free. And it can sometimes be kind of like a conflict. I think when you're looking for an open-source founder, you need to look for someone as a VC that actually does want to make everyone money."

&nbsp;

Show Notes:
<ul>
 	<li><a href="https://www.root.vc/">Root VC</a></li>
 	<li><a href="https://www.amazon.ca/Business-Value-Developer-Relations-Communities-ebook/dp/B07FKFQ1NK/ref=sr_1_2?keywords=developer+relations&amp;qid=1576549122&amp;sr=8-2">The Business Value of Developer Relations - Mary Thengvall</a></li>
 	<li><a href="https://codeclimate.com/">Code Climate</a></li>
 	<li><a href="https://www.particle.io/">Particle.io</a></li>
 	<li><a href="https://www.flexport.com/">FlexPort</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1223</wp:post_id>
		<wp:post_date><![CDATA[2019-12-17 00:00:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-12-17 05:00:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[043-lee-edwards-developer-tools]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="business"><![CDATA[Business]]></category>
		<category domain="post_tag" nicename="developer-tools"><![CDATA[Developer Tools]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="rust"><![CDATA[Rust]]></category>
		<category domain="post_tag" nicename="venture-capital"><![CDATA[Venture Capital]]></category>
		<category domain="post_tag" nicename="web-assembly"><![CDATA[Web Assembly]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1810]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1224]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:14:{i:0;s:36:"01:46 -- Making something a business";i:1;s:28:"03:35 -- Developer Relations";i:2;s:36:"06:39 -- Machine Translation of Code";i:3;s:31:"08:40 -- Style Transfer to Code";i:4;s:28:"10:55 -- Making ideas bigger";i:5;s:29:"12:30 -- Open source business";i:6;s:28:"16:57 -- Behind closed doors";i:7;s:34:"19:25 -- Star Trek vs Black Mirror";i:8;s:35:"20:41 -- Investing in Hard Software";i:9;s:26:"23:04 -- Investing in Rust";i:10;s:33:"24:27 -- The productivity of Ruby";i:11;s:21:"25:27 -- Web Assembly";i:12;s:34:"28:33 -- The Self Driving Car Wars";i:13;s:26:"33:04 -- Replace Hollywood";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Lee Edwards]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Software Engineer & VC]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/terronk">@terronk</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[http://chtbl.com/track/7D91G/traffic.libsyn.com/corecursive/043-Developer_Tools.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[37:38]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[33.6 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-episode-number]]></wp:meta_key>
		<wp:meta_value><![CDATA[043]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[1225]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>React and Scala JS with Shadaj Laddad</title>
		<link>https://corecursive.com/044-shadaj-laddad-react-and-scala-js/</link>
		<pubDate>Thu, 16 Jan 2020 08:00:39 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1232</guid>
		<description></description>
		<content:encoded><![CDATA[Today Adam talks to Shadaj Laddad. What is React? Why do we need front end frameworks at all. Shadaj explains modern front end web development. He also explains why he likes to use react from scala.js and built a framework to make that easy for all.

"React is a lot of things. I guess the core principle is it lets you model your entire application as a function from properties of what you want your page to look like to an HTML tree. Everything is defined as this function. ""

"In the traditional web, everything was built upon mutations, right? You'd collect some data and then you'd do some DOM manipulations to say, Hey, modified the contents of this html node."

"React kind of abstracts away from that and says, Hey, this is the result I want. Just tell me what you would like the webpage should look like. And I'll do the internal work to actually make that happen. "
<ul>
 	<li><a href="https://www.shadaj.me/">Person site of Shadaj</a></li>
 	<li><a href="https://github.com/shadaj/slinky">Slinky JS</a></li>
 	<li><a href="https://www.shadaj.me/talks/">Talks by Shadaj</a></li>
 	<li><a href="https://www.youtube.com/channel/UCzsv1Xi4X7D-oif5E4RT0JQ">Youtube channel</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1232</wp:post_id>
		<wp:post_date><![CDATA[2020-01-16 03:00:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-16 08:00:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[044-shadaj-laddad-react-and-scala-js]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="graphql"><![CDATA[GraphQL]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="react"><![CDATA[React]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="post_tag" nicename="scala-js"><![CDATA[Scala.js]]></category>
		<category domain="post_tag" nicename="software-design"><![CDATA[Software Design]]></category>
		<category domain="post_tag" nicename="typescript"><![CDATA[Typescript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:15:{i:0;s:34:"01:33 -- Why JS frameworks at all?";i:1;s:22:"04:47 -- What is React";i:2;s:25:"09:35 -- What is Scala js";i:3;s:21:"10:05 -- Why Scala js";i:4;s:27:"11:41 -- Why not Typescript";i:5;s:25:"14:33 -- React from Scala";i:6;s:19:"17:36 -- Prop Types";i:7;s:29:"19:41 -- XML Literals and JSX";i:8;s:39:"21:35 -- Javascript first not templates";i:9;s:33:"23:47 -- GraphQL and Static Types";i:10;s:50:"26:12 -- Building Slinky and Open source guidlines";i:11;s:39:"30:26 -- React Dev Ergonomics are great";i:12;s:25:"34:00 -- Programming at 6";i:13;s:34:"35:05 -- PL innovation aspirations";i:14;s:24:"36:42 -- Kotlin vs Scala";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1230]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[http://chtbl.com/track/7D91G/traffic.libsyn.com/corecursive/044_-_React_and_Slinky.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[38:56]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[39.3 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Shadaj Laddad]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Slinky Framework Creator]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/shadajl">@shadajl</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1992]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[1231]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>David Heinemeier Hansson, Software Contrarian</title>
		<link>https://corecursive.com/045-david-heinemeier-hansson-software-contrarian/</link>
		<pubDate>Sat, 01 Feb 2020 10:00:39 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1242</guid>
		<description></description>
		<content:encoded><![CDATA[David Heinemeier Hansson talks to Adam about being avoiding a software monoculture. He explains why we should find a programming language that speaks to us, why ergonomics matter and why single page apps and microservices are not for him.

<strong><a href="https://corecursive.com/david-heinemeier-hansson-software-contrarian-transcript">Episode Transcript</a></strong>

"That is the pleasure and privilege of working with the web. No one knows what you built it. It, you could build an in BASIC, you can build it a OCaml, you can build in the Haskell, you can build it in whatever Ruby. No one is going to be none the wiser you get to choose."

"You want to write for the web. I mean, literally every programming language that's ever been invented and known to humankind is serving a webpage somewhere."

"There's just something heartwarming in that, that this idea of the monoculture that like this is all just a battle to the death and there's going to be one framework and there's going to be one programming language that lifts is left standing. Programmers are really drawn into that right into that horse race.

So much of their technology choices seem to be predicated on like, is this popular? Is this going to be popular next year? Do you know what I mean?"

"The crimes against programming humanities that have been done in the service of single page applications are far worse than the ones that have been done in the service of microservices.

But then of course, as it is, lots of people combine the two. So it's a fleet of microservices serving a single page application, and that's just where it bam, my head explodes with like, yeah, I would rather retire and fucking, I don't know, make weaved baskets than deal with that shit."

"I'm not saying that email is sort of in its base form is wonderful, but you know what is wonderful asynchronous. Write-ups of cohesive, full thoughts, people using actual goddamn paragraphs to describe ideas and proposals, and they put those paragraphs together into form entire, cohesive thoughts. And then letting someone take that in, read those several paragraphs, sit back for more than five minutes. Ponder that. And then respond."
<strong>Links:</strong>
<ul>
 	<li style="list-style-type: none;">
<ul>
 	<li><a href="https://m.signalvnoise.com/the-majestic-monolith/">The Majestic Monolith</a></li>
 	<li><a href="https://dhh.dk/2014/tdd-is-dead-long-live-testing.html">TDD is Dead</a></li>
 	<li><a href="https://m.signalvnoise.com/all-my-railsconf-keynotes/">RailsConf Keynotes</a></li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1242</wp:post_id>
		<wp:post_date><![CDATA[2020-02-01 05:00:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-02-01 10:00:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[045-david-heinemeier-hansson-software-contrarian]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="micro-services"><![CDATA[Micro Services]]></category>
		<category domain="post_tag" nicename="ocaml"><![CDATA[OCaml]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="react"><![CDATA[React]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[2961]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1263]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[62:08]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[x]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:14:{i:0;s:31:"01:22 -- Why did rails succeed?";i:1;s:18:"08:03 -- Why Ruby?";i:2;s:28:"10:44 -- Using Obscure tech ";i:3;s:30:"15:02 -- Fight the monoculture";i:4;s:22:"22:48 -- Ocaml vs Ruby";i:5;s:26:"26:01 -- Coding As Writing";i:6;s:34:"27:22 -- On Enterprise Java People";i:7;s:23:"31:13 -- Speed matters?";i:8;s:28:"33:58 -- Stop copying google";i:9;s:23:"36:13 -- Microservices ";i:10;s:23:"39:50 -- React and SPAs";i:11;s:32:"44:32 -- Test Driven Development";i:12;s:28:"49:07 -- Forget the standups";i:13;s:23:"53:56 -- Slack is toxic";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[David Heinemeier Hansson]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Software Contrarian]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/dhh">@dhh</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[http://chtbl.com/track/7D91G/traffic.libsyn.com/corecursive/045-DHH.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[1239]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>1501</wp:comment_id>
			<wp:comment_author><![CDATA[Luis José]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[luisjoseve@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[190.201.31.5]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-02-02 19:12:37]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-02-03 00:12:37]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Awesome! DHH is always killing it, too much wisdom, thanks for the interview and thanks DHH for sharing his thoughts and experiences.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1580688757.0995851;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>1527</wp:comment_id>
			<wp:comment_author><![CDATA[VINICIUS GATI]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[viniciusgati@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[191.255.210.82]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-02-06 15:53:20]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-02-06 20:53:20]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Nice to know that someone thinks like me, farming is better than microservices and single page applications.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1581022401.103039;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>1529</wp:comment_id>
			<wp:comment_author><![CDATA[Toni Dezman]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[toni.dezman@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[2a00:ee2:904:4100:c810:2bbf:d89f:c0e1]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-02-07 07:30:56]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-02-07 12:30:56]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You are amazing! Thanks for pushing David to gives us his views about SPA and Micro Services.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1581078657.034116;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>1533</wp:comment_id>
			<wp:comment_author><![CDATA[Brad H]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[hollowaybrad@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[199.116.184.9]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-02-07 11:42:30]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-02-07 16:42:30]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[He's spot on about so many things. Unfortunately all of us do not have the luxury to only work with the tools and technologies we love. To feed our families we have to deal with a lot of the absurdity that is modern programming. I appreciate that he is still trying to bring sanity to the world though. Preach on brother!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1581093750.7914169;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>1646</wp:comment_id>
			<wp:comment_author><![CDATA[Vadim]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[install.vv@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[31.173.24.35]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-03-11 23:44:35]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-03-12 03:44:35]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank’s for the podcast!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1583984675.4745369;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>David Heinemeier Hansson, Software Contrarian - Transcript</title>
		<link>https://corecursive.com/david-heinemeier-hansson-software-contrarian-transcript/</link>
		<pubDate>Sat, 01 Feb 2020 10:00:31 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1254</guid>
		<description></description>
		<content:encoded><![CDATA[David Heinemeier Hansson talks to Adam about being avoiding a software monoculture. He explains why we should find a programming language that speaks to us, why ergonomics matter and why single page apps and microservices are not for him.

<iframe style="border: none;" src="//html5-player.libsyn.com/embed/episode/id/12943403/height/90/theme/custom/thumbnail/yes/direction/backward/render-playlist/no/custom-color/87A93A/" width="100%" height="90" scrolling="no" allowfullscreen="allowfullscreen"></iframe>

"That is the pleasure and privilege of working with the web. No one knows what you built it. It, you could build an in basic, you can build it a Ocaml, you can build in the Haskell, you can build it in whatever Ruby. No one is going to be none the wiser you get to choose. You want to write for the web. I mean, literally every programming language that's ever been invented and known to humankind is serving a webpage somewhere."

"The crimes against programming humanities that have been done in the service of single page applications are far worse than the ones that have been done in the service of microservices.

But then of course, as it is, lots of people combine the two. So it's a fleet of microservices serving a single page application, and that's just where it bam, my head explodes with like, yeah, I would rather retire and fucking, I don't know, make weaved baskets than deal with that shit."
<h3>Transcript</h3>
<strong>This is a machine translated transcript. Podcast page for <a href="https://corecursive.com/045-david-heinemeier-hansson-software-contrarian/">this episode is here</a></strong>
<p class="p2"><b></b><strong>Adam:</strong> David, thanks for joining me. So I think that like Ruby on rails, it kind of, it changes the world in some ways, at least by a very small world of, of software development. <span class="Apple-converted-space">  </span>I recall like years ago going through some tutorial, that I think was like build a blog and Ruby on rails, and I was a, a C sharp developer at the time. it<span class="Apple-converted-space">  </span>was kind of mind blowing, like just how quickly you could build things.<span class="Apple-converted-space">  </span>Why did rails succeed?</p>
<p class="p2"><span class="s2"><b>DHH: </b></span>that's a good question. I think a lot of it was just the right time. there were just a bunch of things that had gone before the stuff that I'd made that essentially provided the foundation, but that I felt was just trapped.</p>
<p class="p2">So I drew my main experience and influence for rails from two camps. One was Java and the other was PHP. And I thought that Java was simply chock full of clever people who have clever ideas working in an absolutely terrible. Development environment.</p>
<p class="p2">So if you could take those clever ideas and as I like to call it, liberate them from the environment, you'd be left with some really clever ideas and they would be much more appealing.</p>
<p class="p2">They would be much. Broader distributed, they were just very inaccessible for people who weren't already deeply enmeshed in that world. So that was where I drew the other inspiration, which was from PHP, where you literally could do a one line thing that said,</p>
<p class="p2">print hello world. And it would show a web page. It would show hello world on a webpage. You just drop that file into the correct folder and you're on the web. I mean, just such an incredible, I think to this day, still unsurpassed ease of hello world.<span class="Apple-converted-space">  </span>So I thought, Hey, if we could take the great ideas around frameworks and how to structure larger software applications, and we could infuse them with that ease from PHP, there'd be a really interesting combo here.</p>
<p class="p2">And that was really what I did. Right. And then the conduit for that was, Ruby. That was the sort of third missing element. The third secret spice to the, to the dish here was that Ruby is simply an incredible programming language that enables you to have the best of both worlds. That immediacy.</p>
<p class="p2">Then ease of, of introduction, that ease of use, like the, <span class="s3">uh, </span>the print hello world is almost as easy, not quite because sort of it's not targeted just at the web. yet it's a language that's also capable of carrying the ideas from something like Java.</p>
<p class="p2">So that's really<span class="Apple-converted-space">  </span>all I did, I took those three elements, put them in a pot and started real good.<span class="Apple-converted-space"> </span>I was building base camp at the time, and I needed practical things. Right. And I think that that approach to it, that I'm the builder was also the tool maker.</p>
<p class="p2">Gave it a unique feel that wasn't true in all other environments, especially in the Java world. There were, at the time, a lot of this architecture thinking that people would be architects and all they'd be doing, they'd be doing frameworks and they'd be doing deep thoughts about how you should build applications.</p>
<p class="p2">They wouldn't actually necessarily be building those applications. Right. And the outcome was often sort of, uh, what Spolsky used to call 'em architect Austrian odds. That they would get so high up in the stratosphere that you essentially lose all oxygen and lose your mind. <span class="s3">Um, </span>so my way of tethering myself to earth was to actually build with what I was constructing.</p>
<p class="p2">So Ruby on rails turned out to be this really practical thing that was using influences from these three different environments. And then I had the blessing and the gift of being a newbie. I was new to Ruby when I started on rails. Rails was basically my first real sort of project. so I didn't know what you couldn't do.</p>
<p class="p2">And that went both for building something in Ruby. For making open source software. It went for a lot of things that I simply just didn't know what it entailed or what the challenges were or what I was supposed to do and not to do. So I just felt like, well, this is the thing you can do. Of course, you can release a framework that does everything in his full stack and like 2000 lines of codes and, and, and you should show it off to the world.</p>
<p class="p2">So I was influenced certainly by the open source community at large, but I was also repelled by it in some instances. . It was very intellectual when you were pitching your software, but like, well, here are the tradeoffs here is sort of the, <span class="s3">um, </span>objective measures for, for why we've done it that way, where I try to convey an emotion.</p>
<p class="p2">What does it feel like to program in this environment? What does it look like? What does it taste like? What does it smell like? Invoke all the senses, not just like you're a prefrontal cortex, right? Like, go wider, dig deeper into, <span class="s3">um, uh, </span>all the elements of being a human. Because I think if anything, Ruby's greatest insight was the programmers aren't just programmers.</p>
<p class="p2">They're also human.</p>
<p class="p2">And I tried to follow in Ruby's footsteps of appealing to the whole person, <span class="s3">um, </span>to sort of a deeper humanity in, in, in programmers and for reasons greater just then let's make software, right? Like, let's make software that we really enjoy making. Where the art of creating the software is a pleasurable experience in and of itself that can supersede and be more important than all these other attributes we keep talking about.</p>
<p class="p2">Whether that's execution, speed, or memory usage or all these sort of objective terms that feel like very concrete and very real. <span class="s3">Uh, </span>Ruby was incredibly daring, I think by going out and say no. The most important thing, the most important design criteria for our. Programming language is going to be programmer happiness.</p>
<p class="p2">I mean, what a hippie concept. I showed up here and it felt like. Ruby hurt me. Ruby saw me. Ruby was sort of speaking to a deeper aspect of my being almost sort of, <span class="s3">uh, </span>communicating with my soul. <span class="s3">Um, </span>now it's really getting hippy.<span class="Apple-converted-space">  </span>And then Ruby sort of took my hand and showed me just how deep the rabbit hole could go. And by the end of it, I came out on the other side.</p>
<p class="p2">Loving programming, loving, <span class="s3">uh, </span>the creation, loving the dance with the syntax and the subtleties of the language and going like, this is what I want to do with the rest of my life.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>out of your three components, Ruby definitely seems like the most unusual. I had never heard of it before rails and I don't know if I would have heard of it, if not for rails, like how did you come across it?</p>
<p class="p2"><span class="s2"><b>DHH: </b></span>yes. So when I first got introduced to Ruby and was absolutely this esoteric. Very lightly used programming language, at least in the West.</p>
<p class="p2">And I think it was 2003 I picked up, <span class="s3">um, </span>a couple of these programming magazines. I think it was one from Tripoli and maybe one from ACM or something else like that. And in one of them had an article by Martin Fowler where he was explaining some<span class="Apple-converted-space">  </span>pattern,<span class="Apple-converted-space">  </span>and he picked Ruby to explain this programming.</p>
<p class="p2">And he said something in the intro, akin to, Hey, I don't usually get to programming Ruby, sort of professionally. Yeah. But I'm just explaining a concept here. Ruby is very close to pseudo code, so even if you don't know Ruby, you'll be able to follow along. And I, and then he showed his his idea and I thought like, wow, this is wow.</p>
<p class="p2">What a beautiful language. What an interesting, this looked very different from what I've done before. And then, <span class="s3">um. </span>I think it was Dave Thomas who had another article in the other magazine where he was also talking about some programming concept or another, but he also picked to use Ruby and.</p>
<p class="p2"><span class="Apple-converted-space">  </span>I just got inspired by the fact that here are two of the great heroes of the programming world. When they are free to pick, they pick Ruby.</p>
<p class="p2">So I thought to myself, when I had an opportunity to pick whatever program willing to try, I wanted to use it. I should probably listen to these two. These guys, they sound pretty smart,</p>
<p class="p2">So<span class="Apple-converted-space">  </span>I think that the initial. Interest, or that initial exposure just sparked something in me. And I, I quickly tried to learn everything I could about Ruby. And shortly thereafter, I think maybe 2004, I went to the third, it was called the third international Ruby conference, I think, which was essentially an American Ruby conference.</p>
<p class="p2">And I think there were about like 42 people there. And I was giving a talk on a rail to that point. I had worked on it for, for a bit and I was giving a preview of it. And, <span class="s3">um. </span>At one point I asked, so how many people in this room get to work with Ruby professionally? And I raised my hand because I was actually getting paid to work on Ruby.</p>
<p class="p2">And I think there was one on the person who raises her hands. So this was like 2004. The main Ruby conference in the West has like 42 people there. And like two people get to raise their hands. <span class="s3">Um, </span>how many you work with it commercially? <span class="s3">Um. </span></p>
<p class="p2">And I think just a few years later, we'd be like 2,500 people at the rails conference, <span class="s3">um, </span>in whatever city that was. So it was kind of a wild ride. <span class="s3">Um, </span>and that was fun.</p>
<p class="p2">And like I look back at now, I've worked with, <span class="s3">uh, </span>with, <span class="s3">uh, </span>with Ruby for, what is it like 17 years now. <span class="s3">Um, </span>and I'm, I'm as excited as I was when I discovered Ruby 17 years ago. It is just truly a uniquely beautiful, engaging, rewarding programming language. And I feel just utterly blessed to be able to still work with it.</p>
<p class="p2">It's just a,<span class="Apple-converted-space"> </span>it's just a treat.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>so you went to this conference and these people were interested in the language but weren't using it professionally, <span class="s3">um, </span>but were excited about it.<span class="Apple-converted-space">  </span>do you think that that like the, that there's a broader lesson there? Like if I pick a language today. <span class="s3">Um, </span>the people are very excited about, <span class="s3">um, </span>but aren't using in their work that that's like a sign that there's something there?</p>
<p class="p2"><span class="s2"><b>DHH: </b></span>Yeah. I think it's, it's always a great, <span class="s3">uh, </span>signal when you have people who are so enthralled by. A technique or a tool or language or whatever, that they were willing to sort of just do it for the fun of it. That was really what the other 40 people in that room did. They did it for the fun of it. For the intellectual stimulation, for the excitement of getting to work and programming with Ruby like that's a very strong signal that there's something there. Now that doesn't mean that that's going to be the next big thing.</p>
<p class="p2">There are countless tons of both frameworks and programming language and whatever that over time I've had a very passionate, small core group of people like you can speak to Haskell programmers or Ocaml programmers or whatever, who were like, this is the best, greatest thing ever, and it is for them. It doesn't mean that it's going to be a mass movement in the way the Ruby on rails is because truly, very few things become a mass movement, right? It doesn't necessarily matter. I mean, I'd be doing Ruby and rail still if we were, I mean, maybe not 42, but 200 people. Well, maybe not 200 but 2000 or 10,000 people, right?</p>
<p class="p2">Not, it doesn't have to be a million person movement for it to be a place where you can live and breathe and work. <span class="s3">Um, </span>I mean, I created. Base camp when Ruby had nothing, right? In terms of the tooling that I wanted and I needed to create web applications. I just created all that stuff for myself. By hand. I mean, it's totally doable, right?</p>
<p class="p2"><span class="s4">That is the pleasure and privilege of working with the web. No one knows what you built it. It, you could build an in basic, you can build it a no camel, you can build in the Haskell, you can build it in whatever Ruby. No one is going to be none the wiser you get to choose,</span> which is really unique.</p>
<p class="p2">Advantage of the web as a distribution platform that is very seldomly cherished enough in my opinion. You look at all of these other platforms, you look at a, you want to write a, um,<span class="s3"> um, uh, Android</span> Android application and it's going to be Java. Well, maybe you can read it in Kotlin, but like, it's going to compile down to Java bytecode, right?</p>
<p class="p2">You want to write a thing for a iOS? Well, I'm you, you're going to ride in Swift, right? Like it's just such a mono language approach it, there are a few people who do something on the edges, but not sort of in the broad sense, right? <span class="s4">You want to write for the web. I mean, literally every programming language that's ever been invented and known to humankind is serving a webpage somewhere.</span></p>
<p class="p2">I'm sure there's all sorts of, <span class="s3">uh, uh, </span>applications out there that those programming languages don't have<span class="Apple-converted-space">  </span>good access to other programming platforms, but they have access to the web.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah. Yeah. That's an interesting kind of meta point. Like if I, if I find the language that's my Ruby, I might not be able to build rails and have it such be such a big success, but I can, I could still make a framework. I can still build my stuff in it. I could still live in that world.</p>
<p class="p2"><span class="s2"><b>DHH: </b></span>And you really don't need that many people for that to happen. I mean, I think when we look at the modern web. Tool chain. It's very easy to get overwhelmed and think, Oh my God, I got, we could never build that. Like you could just look at rails, look at the number of lines of code that's in rails, and like you stare at that today and you think, Oh, let me rebuild that no camel, and you're going to go like, yeah, that's just not going to happen.</p>
<p class="p2">There's like tens, I don't know, maybe there's hundreds of programming years into that, but remember Rails didn't start like that. Rails was serving real business traffic, unlike 2000 lines of code. That's what base camp launched on. Ruby on rails, I think was 2000. Maybe it was only a thousand lines of code.</p>
<p class="p2">Actually, I should know this, but it was a very small package created by one person in their spare time.<span class="Apple-converted-space">  </span><span class="s3">Um, </span>and that was enough to get on the web. Right? You don't need to recreate the entire tool chain. In fact, in many ways, it's better to start from scratch. Because this is your opportunity to jettison all the preconceived wisdom of what you're supposed to have, what you need to have.</p>
<p class="p2">No, you don't. You can you can you print a HTML tech? Can you send back a 200 okay.<span class="Apple-converted-space">  </span>There you go. Off to the races.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah, yeah. And you said business value, which is interesting as well, right? Because if I, I guess if I build my, my thing, you know, Ocaml, <span class="s3">um, </span>if it has business value and people end up using it, <span class="s3">um, </span>there's going to be some longevity there,</p>
<p class="p2"><span class="s2"><b>DHH: </b></span>yes. And I think that that's sort of the magic of programming, right? Like we get to build these things out of sort of basically the spirit of our imagination. And, <span class="s3">um, </span>and again, with the web, it's just, you can do it in anything and like, no one is going to. Judge you in terms of at least uses using it as long as it's a good application, right?</p>
<p class="p2">Like it, it, it really can be done in anything. And then you get to have that longevity, at least if you're the ones working on it, right? I mean, Ruby had this, <span class="s3">uh, </span>argument used against it in the early days, which there's some validity to, but for example, let's say you build a launch application and let's say a ocaml right.</p>
<p class="p2">Perhaps your sort of talent pool for just hiring someone who could plop into that project and be productive right away is, is a little smaller than<span class="Apple-converted-space">  </span>has been.</p>
<p class="p2">Um, but it's certainly doable. And I think. You should do it. Right. I love this idea that like the web is being served by hundreds of different programming languages that I could be using this web app I really like, and it's actually a written in Ocaml or</p>
<p class="p3"><b>Adam: </b><span class="s5">Hmm.</span></p>
<p class="p2"><span class="s2"><b>DHH: </b></span>or algo 64 or whatever esoteric language.</p>
<p class="p2"><span class="s4">It could be like, that's, </span><span class="s6">um, </span><span class="s4">there's just something heartwarming in that, that this idea of the monoculture that like<span class="Apple-converted-space">  </span>this is all just a battle to the death and there's going to be one framework and there's going to be one programming language that lifts. Is left standing. Programmers are really drawn into that right into that horse race.</span></p>
<p class="p2"><span class="s4">So much of their technology choices seem to be predicated on like, is this popular? Is this going to be popular next year? Do you know what I mean? Fuck that. </span></p>
<p class="p2">Not all, not in all places, but plenty of them who have the freedom to just pick something because like they want to do it. And, and I say to them, please, do I want to see what that ocaml next framework is going to be?</p>
<p class="p2">Right. I think actually one example of that, um,<span class="Apple-converted-space">  </span>that I love sort of following from afar is elixir</p>
<p class="p2">that here you have this sort of obscure, for a lot of programmers, at least programming language in Erlang.<span class="Apple-converted-space">  </span>But, and then along comes Jose and says like, Oh, this is actually great technology. There's some core <span class="s3">idea here,</span> ideas here that are really important.</p>
<p class="p2">Let me try to sort of shape those a little bit and make them more appealing to a wider audience. And here we go. Now there's a great programming platform and language , I look at that and just go like,<span class="Apple-converted-space">  </span>man, that's amazing. I love that.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah. I agree<span class="Apple-converted-space">  </span>there is though there is a certain weight like to popularity, right? Like there is a certain like fullness of of libraries or or whatever. That is an advantage when you're,</p>
<p class="p2"><span class="s2"><b>DHH: </b></span>It is.<span class="Apple-converted-space">  </span>It is. But I find that that advantage is often overstated. And the reason I say that is because that was literally the number one argument that kept hearing when I created rails back in the day. Oh, Whoa. I mean, there's only like, there's so few programmers and yeah, everything starts from a seed.</p>
<p class="p2">If you expect that every new thing is going to be this thousand year old. Redwood, nothing new is ever going to happen. You have to have the seas, you have to have the people who are willing to nurture those seeds and accept the fact that, yeah, they're not standing with a Redwood right now. You can't drive through it. It's a, it's a small little thing and you have to protect it and you have to nurture it, and that's also really satisfying.<span class="Apple-converted-space">  </span>There are people who really get a kick out of that. Me included that. Seeing my life's work in terms of Ruby on rails grow from this tiny little seed that I planted in the ground, the fertile ground of Ruby, but ground nonetheless, and seed nonetheless grow into, if not a Redwood, at least a very strong solid tree.</p>
<p class="p2">It's just magic. And there are people who are attracted to that and they're not all at the same people. Some people just want, yeah, I just want to use the thing that's popular because like I w I w I maybe don't care as much or I'm not an infant as much, or my boss is yelling at me, or like, whatever it is.</p>
<p class="p2">Right? There's all these practical, reasonable reasons for why someone would just go like, just give me the most popular thing. Right. Like that. That's got to be the best thing and that's fine. It's great. It's, it's okay. Like Ruby and rails is in some ways a beneficiary of that same thinking that once we tipped over and became this mass phenomenon,<span class="Apple-converted-space">  </span>there were a lot of people who suddenly had permission to use it.</p>
<p class="p2">And that was a long time and a driving force for me working on rails was to make rails Poplar enough that it gave people who didn't have otherwise a choice to permission to use Ruby. That felt like just like a gift to the world. <span class="s3">Um, </span>and a gift that I essentially owed the world, given the fact that I had found Ruby as a gift to me in my programming journey.</p>
<p class="p2">So to return that favor to a broader audience was incredibly rewarding. And I think still one of the crowning achievements of all the work I've done in rails, it's not just the rails, it's the fact that so many people got to work with Ruby and. Perhaps they otherwise wouldn't have had. Like maybe they would have, maybe someone else would've come along six months later and they created bales or whatever, something else.</p>
<p class="p2"><span class="s3">Um, </span>and then would've gone on to be just as popular. But there's certainly plenty of examples where that didn't happen. Right? Like programming languages that that had something to it where people saw a sparkle in it. It didn't go on to be a mass non non for a variety of reasons of either timing or fit or whatever else.</p>
<p class="p2">Have you. So the fact that Ruby. Did and ended up being this, <span class="s3">um, </span>mass language like this mainstream language actually, in many ways, right? Like, it's being used. You set, <span class="s3">uh, </span>sort of all these internet companies that everyone's heard of, right? Like, let's run skid hub and runs Shopify. No runs square. It was the foundation of Twitter.</p>
<p class="p2">It was like all of these things, like people go like, Oh yeah, I know that. Right? And all these companies are now, many of them, big billion dollar companies that hired tons of programmers all the time, and those programmers get to use Ruby. And then there's this entire ecosystem What a wonderful thing. Okay?</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>It's true, but I, I'm going to give you the negative spin on it, which is when you created rails, there were people who were forced to do Java who didn't want to. There's people who, who are doing rails now who don't want to.</p>
<p class="p2"><span class="s2"><b>DHH: </b></span>Yes. And I think that is a real thing, but I also think there's, that's a sort of subjective truth that I absolutely recognize. And then at the same time, if you were to do it on the grand scale of like the number of people or the percentage of people forced to use Ruby who actively hate it, I. I'm certain just in my soul that like that is a far smaller number than the number or the percentage of people who are forced to use Java who hate it.</p>
<p class="p2">Right? Again, certainly there are people who will be exposed to Ruben, go like, what the hell? Right? Like I F one of the things, for example, is that Ruby is loosely and dynamically typed, and some people simply have their brain wired in such a way that that is an offense to their sensibilities.</p>
<p class="p2">Right. And I respect that because I feel the same way about sort of,<span class="Apple-converted-space">  </span>statically type languages. I, I, I just don't like it.</p>
<p class="p2">And I find that a lot of those people have been sort of forced into a bad situation from the start. Like they joined some company that had a truly terrifying code base because some people just wrote some bad code, right? And they associate that with Ruby on rails, and they go like, this is where I, I hate Ruby on rails because I have to work in this shitty code base every day and it's killing me.</p>
<p class="p2">Okay.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>I think that's right. yeah, oftentimes it's actually just dealing with a horrible code base where everything might fall over and yeah, there's just no fun there.</p>
<p class="p2"><span class="s3">Um, </span>I definitely, <span class="s3">uh, </span>I definitely find, <span class="s3">uh, </span>types really useful, but, <span class="s3">uh, </span>I do like, I do like Ruby as well, you know, when I first encountered it, <span class="s3">um, </span>it has some, some things that, <span class="s3">uh. </span>The aesthetics of it are, are unusual, right? Or maybe less unusual now, but certainly at the time it seemed like a lot of things seemed like sort of the inverse as I would expect.</p>
<p class="p4"><span class="s7">You know, like you have a, instead of like, you know, looping over an array, you do like array.select or, um, you know, what was your, how is that kind of, um, I'm trying to think of how to word this question. What did you think of it when you encountered it?</span><span class="s5"> Did it, did it look strange to you or was that</span></p>
<p class="p2"><span class="s2"><b>DHH: </b></span>for whatever reason, Rubin was the program programming language had been searching for my whole life. And when I saw it and I saw the,</p>
<p class="p2">just the layout of the statements and how it all fit together, it was just one of those Eureka moments where, <span class="s3">uh, </span>how my brain thought about programming was expressed in this programming language.</p>
<p class="p2">And I know that that's sort of.</p>
<p class="p2">That a people have that about all sorts of programming language. They go like, yes,<span class="Apple-converted-space">  </span>I can. We use this example over and over again, and the funny reason, or the funny thing is like, I actually don't even know what Ocaml looks like. Like I don't even have a mental picture of it.</p>
<p class="p2">Right? But there are, I'm sure there's some people who come to a camel and just think like, yes. This is me, right? Like this fits my brain. And then there are other people who sort of acquire a taste for something, <span class="s3">um, </span>that they didn't like Ruby in the beginning, and then they work with it for awhile and then they do, or they didn't like John in the beginning, and then they worked with it for a while and then they do, for me, it was just this<span class="Apple-converted-space">  </span>romantic moment of love at almost first sight.</p>
<p class="p2">And then just is, <span class="s3">um, </span>just faction right from the get go. It was just like, this is how I think. Like it is, is like if you were to do sort of the source map off my brain, it would map to Ruby</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Nice. That's interesting. <span class="s3">Uh. </span>Yeah.<span class="Apple-converted-space">  </span>It's funny. I was just, you just made me look, look up some OCamll examples. I think that, I think that you might like it because it is strongly typed, but it's a, it's like inferred types, so there's not actually any types and it kind of a please stand by.</p>
<p class="p2"><span class="s2"><b>DHH: </b></span>I see your screen. <span class="s3">Um,</span></p>
<p class="p2"><span class="s1"><b>Adam: </b></span>lots of lets.</p>
<p class="p2"><span class="s2"><b>DHH: </b></span>yeah, that's, it's, it's funny because I don't know, for whatever reason, I had<span class="Apple-converted-space">  </span>a sort of a lisp look in my head when I said, okay, ammo. <span class="s3">Um, </span>this obviously does not look anything like list.</p>
<p class="p2">It doesn't.<span class="Apple-converted-space">  </span>Like it doesn't speak to my sort of heart right away, but at this point, I'm perhaps also beyond the point of no return with my love affair with Ruby. I will absolutely accept that. That's a possibility. <span class="s3">Um, </span>yeah, this is actually not bad like that. That looks, <span class="s3">uh, </span>that looks pretty cool. But yeah.</p>
<p class="p2">Then I look at this, although this is sort of a, this is one of the reasons why for a long time I thought I wasn't going to be a programmer. Like the code we're looking at now is sort of very mathematical. Right? Like it's, it's about math problems and I was never interested in math problems.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>listeners, I've pulled up the end Queen's problem, which I think is, yeah, a very mathy type problem.</p>
<p class="p2"><span class="s2"><b>DHH: </b></span>Yeah. And this is exactly why I literally thought I wasn't going to be a programmer because I just didn't have any interest in math problems. I don't have any interest in algorithms beyond their utility. <span class="s3">Um. </span>What I do have an deep, deep affection for is sort of domain modeling. I'm sort of in the, <span class="s3">uh, </span>Eric Evans sense of the word domain, <span class="s3">uh, </span>driven design.</p>
<p class="p2"><span class="s3">Uh, </span>I love noodling with a business domain. I love finding just the right words. I love sort of breaking that, the main model apart and, and all that stuff, which is all sort of.<span class="Apple-converted-space">  </span>logicals sort of semantical approaches to it. It is not algorithmic. It is not scientific. It is not. <span class="s3">Um, </span>math.</p>
<p class="p3"><b>Adam: </b><span class="s5">Yeah.</span></p>
<p class="p2"><span class="s2"><b>DHH: </b></span>and I think that this was one for the longest time why I thought like programming is not for me, because I knew quite a few programmers and they all did the math type programming.</p>
<p class="p2">Like they were demo coders or game programmers or whatever and everything was vector this and vector that. And I would look at the code and I'd just go like, yup. No interest. Absolutely zero interest in that. And then I started working with the web and I started to working with business applications and sort of it in the literal sense of information technology and so on.</p>
<p class="p2">And I thought, Oh, Oh Oh. Can programming be this too? This is what I like, like programming, <span class="s3">uh, </span>of this sort. That's what speaks to me. That's what I'm interested in. <span class="s3">Um, </span>and then I kind of just went like, let me double down on that. And then Ruby just felt like that was a perfect fit for that. Right? We looked at that piece of piece of math, the code, and like<span class="Apple-converted-space">  </span>camera looked more clean somehow, right?</p>
<p class="p2">Like it didn't feel like Ruby is the natural language for doing math. Like programming.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span><span class="s3">That makes sense.</span> Yeah. So I had somebody on as a guest, and he was talking about how, like some people really think about coding as math, but he thinks of it as, as like literature. <span class="s3">Uh, </span>what do you, what's your take on that?</p>
<p class="p2"><span class="s2"><b>DHH: </b></span>Yeah. I'm, I'm in that camp. I had a. Keynote at a rails comp. I think about five years ago where I framed all of the sort of approach, how we think about programming rather than thinking of about like construction projects or thinking about math properties. I think about it as writing problems like it's, it's about being a good writer.</p>
<p class="p2">How can you be clear? How can you be succinct? How can you structure your paragraphs into cohesive arguments that makes sense to a human reader? That's the part I enjoy. The writing part and the rewriting part, like sort of the draft and the edits and I'm<span class="Apple-converted-space">  </span>boiling things down into sort of logically clearer components, fitting those things together. <span class="s3">And then, um.</span></p>
<p class="p2">It's just like there's some division of labor here is that I have no interest in the zeros of the one or the assembler language above it, or the C code above that. Right. I, I joined the stage by the time we get to the high level programming language of Ruby and then someone else with interests different than mine can, can do sort of the work beneath it.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span><span class="s3">makes me think of like, </span>I think at the same time I became familiar with rails. <span class="s3">Um, </span>there was a lot of excitement about it, but also, I mean, people who really didn't like it, and. I mean, maybe that's kind of where the division was. There was people who, you know, maybe, I don't know what they were doing, building databases or distributed systems where they thought they were.</p>
<p class="p2"><span class="s3">Um, </span>and they were like, this isn't real coding, or I'm not sure. Did you, this is my impression was there was, did that kind of pushback happen? <span class="s3">Um, </span>or imagining it.</p>
<p class="p2"><span class="s2"><b>DHH: </b></span>Oh, hugely, hugely. No, absolutely happening today. I've still literally listened to people say, well, what did they call it? Ruby is a scripting language, and they say it into sort of the rice of tone, right? Like it's not a real programming language. And like people like, well, you can make prototypes. This is what I hear all the time.</p>
<p class="p2">You can make your prototype in Ruby on rails, but once you make a real application, you're going to have to rewrite and something else, and you just go like. <span class="s4">Dude, where have you been for 20 years? Like, look at the internet. You stooge like a lot of it is running off Ruby on rails.</span> What you think, <span class="s3">uh, </span>you think Shopify is not a real application and get hub is not a real application.</p>
<p class="p2"><span class="s3">Um, </span>it's just the, the blinders of sort of ideology. And, and I can see where they're coming from, right? Because I'm actually, I'm a fan of ideology in many ways. I'm a fan about having values and practices and beliefs that underpin your paths for life. But you gotta recognize the fact that when you adopt an ideology, <span class="s3">uh, </span>the trap is that it puts blinders on your head, right?</p>
<p class="p2">And you start thinking that the values that you hold dear are these universal truths. That are true for everyone rather than just your personal truths. I'm very comfortable accepting just the personal truths of Ruby for me. I don't need everyone in the world to believe those same truth. They're true for me.</p>
<p class="p2">Ruby is the perfect programming language for the kind of work that I do using the brain that I have. Right? Like that's about as, as personal of a statement as as as they come. But there are a lot of people who sort of adopt an ideology and then they just. They can't square other people having a different one.</p>
<p class="p2">Right. And then the cognitive dissonance of sort of other people being successful with a different ideology or a different toolkit like just blows their minds. Like they literally can't hold that truth in their head without going crazy. So they just sort of dismiss it.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span> I guess their complaints have to do with tradeoffs the rails and Ruby have. Right?</p>
<p class="p2"><span class="s2"><b>DHH: </b></span>I think the vast majority of this is not based in sort of some logical empirical, objective evaluation of different languages. I think it's absolutely a contrast of ideology, and if you're a kind of person who goes like, you cannot, right. Sort of high quality software without static typing like your head will simply not accept the fact that people are writing high quality software using a dynamic view type language like Ruby, right?</p>
<p class="p2">And then you need to cotort your arguments to support that conclusion, right? Like, then you come up with all this other stuff. There's a bunch of good books about how, <span class="s3">um, </span>sort of, the logical mind is actually not the one in charge, right? Like, it's, it's our, it's our sort of primal. Mind the one that operates on emotions and so forth that's in charge.</p>
<p class="p2">And that mind will come to a conclusion and then it will enlist your logical mind to come up with the justifications that support that conclusion. And I'm as susceptible to that as anyone. But I tried to sort of, <span class="s3">um, </span>limit dose justifications just to underpin my own personal truths. And I mean. It doesn't always succeed.</p>
<p class="p2">but yeah.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>you think the enterprise Java guy looks at Ruby and rails and he's just like primarily angry about it and then backwards he works and says like, well, it's not as fast as what I've written</p>
<p class="p2"><span class="s2"><b>DHH: </b></span>Right? Or is it that speed matters for that application I'm working on? I mean, that is the biggest joke of all when back in the day when sort of the enterprise was the bar, right? Like, is it, is this language enterprise ready? We don't talk about these terms anymore because they've been ridiculed to death because the enterprise usually means like nothing of significance, right?</p>
<p class="p2">Like these days it's. It's a web scale, right? Like there's no enterprise application that runs in what a fortune 500 company that there's more traffic than say, Facebook pushes through PHP, or that Shopify pushes through Ruby or that any of these mega companies, <span class="s3">uh, </span>on the web deal with like the enterprise is just small potatoes and what it didn't use to be right.</p>
<p class="p2">Like, it used to be that there was some sort of unique scaling challenges that the enterprise was fail facing. But, <span class="s3">um, </span>that's not been true for.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span><span class="s3">So then you </span> I guess you're saying performance is not a trade off that's being made like because it doesn't</p>
<p class="p2"><span class="s2"><b>DHH: </b></span>I mean, not, not categoric you're right. Like there, there are these cases like, <span class="s3">um, </span>there are cases where you truly hit a hotspot or a bottleneck and you want to replace that with something. It's just that for the vast, vast, vast majority of applications that point is so far out into the future or so imagined as it might as well be a fairy tale.</p>
<p class="p2">It isn't a fairy tale, right? Like there, there literally are people who deal with Webscale. <span class="s3">Um, </span>and, and when you're dealing with, <span class="s3">um, </span>I dunno, a million requests per second, like, yeah, you need to do different things. You can't use off the stock software. But that was always true. Even in the Java days, right?</p>
<p class="p2">Like, you can't use standardized tools to deal with extraordinary, <span class="s3">um, </span>circumstances. You need extraordinary tools. Like, this is why if you look at everyone from Facebook to Google to whatever, they've built their entire tool chain internally, right? Like pro Google build it, got them programming language, right?</p>
<p class="p2">Like Facebook build a new interpreter for PHP, and like all of these web scale companies eventually end up in a place where they built their own tooling because they need to. They're at the, literally at the Vanguard of sort of pushing things to the maximum. I mean, they're building their own damn hardware for Christ's sake, right?</p>
<p class="p2">Like facebook even is doing hardware design because like that just makes sense when you have, I don't know, 200 data centers that have millions of computers and shit in them, right? These are not the problems that we, you and I face and that like 99.9999999% of everyone else making software today face.</p>
<p class="p2">I'm interested in making software for the 99% and do you know what the 1% they can go off and make their own software. They always have</p>
<p class="p2"><span class="s1"><b>Adam: </b></span><span class="s3">Uh, </span>one thing, one thing that I think is unique to the software industry, right, is, is like that, that 1%, I mean, they're really held in, in some reverence, like, so we're all watching what they do and trying to learn</p>
<p class="p2"><span class="s2"><b>DHH: </b></span>to our detriment.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah. Like I guess if I watch somebody build a skyscraper and then I. I tried to build my house using like I-Beams or something.</p>
<p class="p2"><span class="s2"><b>DHH: </b></span>Perfect example. Yes, there is a reverence, I think, thankfully. <span class="s3">Um, </span>it is fading. <span class="s3">Uh, </span>I think both in society at large and also in programming circles where everything that comes out of, say, Facebook or Google is not. Automatically just thought to be the greatest thing ever, or in service of the Nopal list aims a goal ever.</p>
<p class="p2">I think finally. <span class="s3">Um, </span>but also just on the practical sense, trying to learn from the people who have the 1% problems and apply those to your 99% concerns is often exactly the opposite of what you should be doing. The constraints and challenges that Google face at Webscale are just utterly irrelevant. To what the 99% are dealing with.</p>
<p class="p2">Not only are there irrelevant, like the, the solutions are literally the opposite, right? Like you simply, you almost couldn't go worse if you tried by looking at, Oh, so, so how has the Google search engine implemented? Right? Like, what kind of setup does it have? What kind of distribution does it have? And then you apply, try to apply those lessons to like how to run your little web app, like base camp and, and, and I mean, you die.</p>
<p class="p2">Before you even made it to hello world, because just to sort of construction of that whole rigamarole would kill you as a business. Right. <span class="s3">Um, </span>so I, that reverends is. Is better thought of as like sort of a distant appreciation, not actually as a fucking guidebook, right? Like it's, it's, it's actually the opposite.</p>
<p class="p2"><span class="s3">Um, </span>and then worry about the 1% problems when you're in the 1%. Right? And then it has all these sort of embarrassed millionaires that are wondering about like, how to outfit their yacht while they have like 30 bucks in their checking account. That I just think like, do you know what? Maybe you have more pressing concerns than what a marble to use on the fourth floor of your yacht.</p>
<p class="p2">Then I'm. <span class="s3">Uh, </span>then than worrying about that, right? Like you shouldn't be worrying about like, well, how can I make something happen that people like and now we're going to get a hundred people to like it. I'm going to get about a thousand people to like it, right? Worrying about what will happen once you have a billion users and do you know what?</p>
<p class="p2">I think you're wasting your time here.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah,<span class="Apple-converted-space">  </span>but it's hard to find where the line is, I guess. I don't know. So let me, let me give you some examples. <span class="s3">Um, </span>so a company called, <span class="s3">uh, </span>Amazon. I think kind of pioneered, <span class="s3">um, </span>microservices and, you know, my experiences with it have been that it can be a pretty useful way to, <span class="s3">uh, </span>to do things.</p>
<p class="p2">What, what do you think?</p>
<p class="p2"><span class="s2"><b>DHH: </b></span>Is this a trap? Do you know? I have like a 15 minute rant of micro services, so I'm always at the re the in my gun holster.</p>
<p class="p2">Yeah. I think microservices and the hype around it is probably one of the most damaging, <span class="s3">uh, </span>trends that has hit. Web development in the last 10 years. <span class="s3">Um, </span>I think very few things have done more damage to sort of the integrity and the productivity of software development teams.</p>
<p class="p2">Then the premature application of microservices. I am a stound. Stout and proud supporter of the majestic monolith. This idea that you have a single application that a single person can fully grasp, comprehend, understand, deploy, operate, and then as far, far preferable to this. Idea of having a fleet of microservices, a building, a hundred different toolkits and languages that no one knows how to sort of operate in and go on.</p>
<p class="p2">Microservices is a great</p>
<p class="p2">example of an organizational tech pattern. It's not actually a programming tech pattern. Microservices is what you do when you have teams so large that they essentially need. Dominion over their own domain. Right. They need to sort of control their own boundaries and so on. And when you have 50,000 programmers, yeah, it's a completely reasonable pattern and it makes total sense trying to apply it while you have two, five<span class="Apple-converted-space">  </span>2050 programmers.</p>
<p class="p2">Jesus, no, just no.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>So I would agree</p>
<p class="p2">at five, I don't know, 50 50 is a lot of people, like it can be helpful to break people up into teams. Right. <span class="s3">Um, </span>and then it can be helpful if those teams have a, a clear,<span class="Apple-converted-space">  </span>you know, area that they own with clear interfaces.</p>
<p class="p2"><span class="s2"><b>DHH: </b></span>Yeah. I think that just that the boundaries are much higher, right? Like, I don't think it happens. It's 50. <span class="s3">Um, I think</span> I think it happens a, a much later in the equation. And that the benefits of having a single application that everyone sort of, <span class="s3">uh, </span>operates on are vastly underrated. And that this, <span class="s3">uh, </span>appeal of the microservices, <span class="s3">um, </span>approach neglects all the tremendous.</p>
<p class="p2">Downsides to that approach. <span class="s3">Um, </span>including the whole idea that a method call is now a network call. Right. And just the complications that come with trying to orchestrate different applications together. And I don't say that just out of sort of a high minded, <span class="s3">um, </span>theoretical concern. I say it out as a practical concern of someone who did microservices back in like 2006.</p>
<p class="p2"><span class="s3">Um. </span>Base camp actually had a number of microservices when I kind of, <span class="s3">uh, </span>before microservices we called it service oriented architectures. And it's sort of the same thing depending on how coarsely you, you grain things, right? But we broke base camp up into a number of sort of sub-services right. And I just, I learned on my own body just how different a method call is from a network service call.</p>
<p class="p2">And it's funny because in some ways we're, we're traveling back in time here. <span class="s3">Um, </span>when I got started with Ruby on rails, the big thing in Java was EJBs, <span class="s3">um, </span>and J2E, which had sort of these remote and local services and which was essentially doing the same thing, right? Turning method calls into network service calls, and it was a shit show then too.</p>
<p class="p2">And I think it is exactly as we talked about, people looking at. The big shops. Oh, Netflix has 126 services to run their thing. Of course we should have 23<span class="Apple-converted-space">  </span>right, and you just go like, no, you shouldn't. You should have one.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah. That's funny. What about another example I can think of, I guess is. Like single page applications or or react like, I think rails is in the, in the world primarily of like emitting HTML, but a lot of things are moving towards maybe a more<span class="Apple-converted-space">  </span>free standing front end</p>
<p class="p2"><span class="s2"><b>DHH: </b></span><span class="s3">Um, </span>first, I think tons of rails applications are feeding Jason into react applications and . And, and all peace be with that. That's not how I want to build applications. <span class="s3">Um, </span>that is a, another instance of distributed applications where you end up having one application on the front end that talks over an API to an application on the backend.</p>
<p class="p2"><span class="s3">Um, </span>and you end up with a lot of reimplementation back and forth and a lot of contortions to make that happen. And I'm not a fan at all. And at base camp, we try to not do that. And all of our approaches to, <span class="s3">uh, </span>dealing with the front end is in, in, in essence, <span class="s3">um, </span>ways to get out of that while delivering the same high quality user experience.</p>
<p class="p2">And there are not surprising we tons of other alternative techniques that people can use. <span class="s4">But I will absolutely say that react has been an astounding popularity success. I mean, it's really quite something to watch. Just how. Sufficiently it's swept the world. I think it's more of a tragedy or a comedy than it is a documentary of how to do things well.</span></p>
<p class="p2"><span class="s3">Uh, </span>especially once you mix it and not so much just react in its core, beautiful form of sort of blow away the world. And rerender I actually kind of like that. <span class="s3">Um, </span>it's more, once you get into all the contortions needed to make to make a complete application, right. And a Redux and all these other things.</p>
<p class="p2"><span class="s4">When I look at,</span><span class="s6"> uh, </span><span class="s4">a fair amount of that code, I look at some redox routing code and you'll go like, do you know what J2E<span class="Apple-converted-space">  </span>was simpler than this, even at its height of complexity, even at the height of the Ws. Deathstar for an, it was simpler than this. Like, how did we end up here? Holy shit. </span><span class="s6">Um, </span><span class="s4"> so.</span></p>
<p class="p2">Even if I think that the single page application front end is a horrifically overuse pattern, far more so than than even microservices. <span class="s4">And I think, so the crimes, against programming humanities that have been done in the service of single page applications are far worse than the ones that have been done in the service of microservices.</span></p>
<p class="p2"><span class="s4">But then of course, as it is, lots of people combine the two. So it's a fleet of microservices serving a single page application, and that's just where it go. Like. Co plan, my head explodes with like, yeah, I would rather retire and fucking, I don't know, make weaved baskets than deal with that shit</span>.</p>
<p class="p2">If I had to work in assembler or, or even C, I'd go like, do you know what? I could do something else with my life. It doesn't have to be programming. And if someone told me, do you know what? You have to build a fleet of microservices and the has to work with a single page application, front end.</p>
<p class="p2">I could go like, do you know what a farming sounds nice. Give me a rake. <span class="s3">Um, </span>but so we are different, right? Like, it doesn't mean that, that's just my personal truth as we were talking about, right? Like, it doesn't mean that that's right for everyone and community. There are people who, who like this thing and to each ther own in some regard.</p>
<p class="p2">Like, I will continue to advocate for the fact that I think that this is , but, <span class="s3">um. </span>That's just my efficacy. Right? And you have to discount that from with my biases and so on and so forth. But you can use that as a counter melody to play in your head for reconsideration. When you think, Oh, let me just go with what's popular on the industry norm.</p>
<p class="p2">Like, let me start up with my Ragnar services. Let me go for my react Redux monstrosity. And like, that's best practices, right? You'll have me sitting as a little Canary singing, no, it's not. right. Or like. That's a dead end, like a Canary in the coal mine lane with my tongue out, just going like, don't go so deep.</p>
<p class="p2">You're going to die</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>like you think we make things too complicated, like just in general, is that true?</p>
<p class="p2"><span class="s2"><b>DHH: </b></span>I would even go stronger than, than think in that statement. I would say people make things too complicated, period. And it's tragic period. And I wish they wouldn't pay re it. And I'm trying to focus most of my advocacy on . Helping them unlearn the things that they have learned that have let them down this, <span class="s3">uh, </span>tragic path.</p>
<p class="p2"><span class="s3">Um, </span>so yes, I think that programmers in particular are susceptible to the siren song of complexity and they get this kick. Out of being able to master that complexity and out to wield that complexity, whether it's appropriate or not. It feels just like a, a sense of intellectual accomplishment that you can figure out the most gnarly shit on the universe.</p>
<p class="p2">Like a multi microservices backed application serving a single page, front end application. You can go like, I am victorious. I beat the computer and you can feel good about that and I just go like. Oh, Kay. I mean, we all have our kicks. That's not my kick. <span class="s3">Um, </span>and let me tell you that there is a different way here.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span><span class="Apple-converted-space">  </span>how about unit testing and test driven development.</p>
<p class="p2"><span class="s2"><b>DHH: </b></span><span class="s3">Um, </span>you hitting all the, all the highlight and hot buttons here. <span class="s3">Um, </span>yeah, I gave a talk. It was actually that same talk that the one we just talked about with, <span class="s3">uh, </span>about software development being writing 2014 you can look it up on YouTube. <span class="s3">Um.</span></p>
<p class="p2">Where I call TDD the greatest diet fad that the software development world has ever seen.</p>
<p class="p2">And<span class="Apple-converted-space">  </span>I kind of labeled in that it, that from perspective of sort of this approach of pseudoscience, right? TDD presenting itself as the scientific method of creating better software. And, <span class="s3">um. </span>I just thought it was bullshit and I lived under it for a long time where I thought, yes, the gospel is true to teach truly better, and I'm a bad program and a bad person because I don't get it right.</p>
<p class="p2">I, I wrote TDD, I wrote a lot of TDD, right? Test driven development. I wrote a lot of tests first and then I wrote my code and I didn't like it. I<span class="Apple-converted-space">  </span>thought it was not a way to fit with my flow of my brain. Like most of the time what I will do is I will explore my programming first, just sort of exploratory.</p>
<p class="p2">I'll figure out how it works, and then I'll write my tests afterwards. I'm a huge believer in automated testing.<span class="s3"> I mean, I can't even comprehend how you can make a modern application without automated testing and have it. Any confidence that the thing is </span>It often serves the proponents of TDD to conflate those two things. Like, Oh, you're against TDD, therefore you're against automated testing.</p>
<p class="p2">No, you're not. What the fuck you talking about? I love automated testing. <span class="s3">Um, </span>what I don't love is to drive my development through my tests. I don't love writing my tests first and then writing my code afterwards. I don't love having my tests dictate the inner workings off my. Classes and in my methods to serve some sort of testability purpose.</p>
<p class="p2">There's TDD proponents who simply believes that like. If you write code, it's easy to test. It means it's better code bullshit.</p>
<p class="p2">No, it's not. I did a whole series together with Martin Fowler and, <span class="s3">um, </span>Kent Beck on this topic. When back from that 2014 talk, when I sort of provocatively pronounced TDD to be dead and I promoted it to be dead and sort of that niche, a sense of the word that God is dead, right?</p>
<p class="p2">Like it's not that God doesn't exist, it's that that doesn't. He doesn't hold the central focal point in our universe anymore, right? And that's how I felt about TDD, the TDD for wild health, that central focus point and in a programming universe. And, and. And I want it to kill that. Right? Or I wanted to see that die.</p>
<p class="p2">I just got fucking tired of listening to people telling me like I just didn't get it. No, I get it. I just don't agree. Like those are two separate things. Right.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>the TDD advocates or whatever, they're, they always seem a <span class="s3">bit too.</span> A bit too keyed up or something like it's the, it'll, it solves everything. <span class="s3">Um, </span>what about just like, just like unit tests? I believe I watched something,<span class="s3"> uh, </span>where you were saying, <span class="s3">I dunno, </span>unit test not as valuable as people think.</p>
<p class="p2"><span class="s2"><b>DHH: </b></span>We usually have about half as much test code as we have production code, and that's been a ratio that has been surprisingly stable across all the applications that we've done at base camp. Not because we designed it that way, but that seemed to just be a heuristic that for us, for our application, turned out to be.</p>
<p class="p2">That's the level of tests that we sort of.<span class="Apple-converted-space">  </span>Like to, to have the confidence for, um, for our code and unit test is one part of it. But I think that oftentimes, actually I've stopped calling it unit test, what we call it now. We call it model tests<span class="Apple-converted-space">  </span>cause some purists took offence to the fact that when we do unit tests in rails in particular, we often end up talking to the database, right?</p>
<p class="p2">Which is a big no note when it comes to unit tests that you're supposed to isolate all your sort of dependencies and, <span class="s3">um, </span>Test only in isolation, both for speed and for repeatability and blah, blah, blah. And I just went like, do you know what? I'm not interested in that. Those kinds of tests do not reveal anything interesting for me.</p>
<p class="p2"><span class="s3">Uh, </span>I want to be able to test all the way down to the database layer when I test my models, because that's where I often find the bugs or the issues or whatever. <span class="s3">Uh, </span>and I don't really like mock or stub data. I find that it often introduces all sorts of bugs, and then I need to deal with those and<span class="Apple-converted-space">  </span>da da da da da.</p>
<p class="p2">We write some model tests and I think model tests are great. And then we also write some sort of control of tests which happened at the layer above.</p>
<p class="p2">And those controls also do not stop anything out. They actually called the real models and those real models called real database calls and so on. And then above that we write call system tests that flex the system for active of, <span class="s3">um. </span>The job and driving a browser and so on and so forth.<span class="Apple-converted-space">  </span>Sometimes you have the same thing tested in your model tests as you do in your controller test and as you're doing your system test, and other times you just go like, do you know what the system test covered tier is fine. The controller of test coverage here is fine.</p>
<p class="p2">I don't need to replicate everything down to a unit test level because I have to level of confidence than I need or want in my code. So we're done.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>There you go. Your, your book had some interesting things that were kind of like more organizational, but, but that I found equally shocking, like in my work, we meet daily, <span class="s3">um, </span>kind of, we have a standup meeting where we kind of all say how things have been going.</p>
<p class="p2">If anything's in the way. <span class="s3">Mmm. </span>Do you think that's a good use of time?</p>
<p class="p2"><span class="s2"><b>DHH: </b></span>in the broad sense. No, I think the requirement for standup, which often. Have these connotations of in-person that they're better when they happen, sort of face to face, <span class="s3">um, </span>are not worth their price. And the price, especially for in-person standups, are synchronization of time that everyone shows up at the same time synchronization of space, that they're all in the same location at the same time, these are.</p>
<p class="p2">Dramatic compromises and costs that I could never subject our organization to. And the value you get out of that synchronized, <span class="s3">uh, </span>linkup to me seems very small in comparison, right? The advantages of remote working, <span class="s3">uh, </span>we have 56 people at base camp, and I think the city that has the most people, <span class="s3">um, </span>in one cities like Chicago and there's like 10, <span class="s3">um, </span>we could not operate our business like that.</p>
<p class="p2">If it was for an in-person standup. Now people do these stand ups, they do it in over sort of video chat or whatever. <span class="s3">Um, </span>I also find that just to a lot of time, be a waste of time. Like I don't need, we don't need a SyncroNis meeting that's sort of under calendar every day to give status reports. In fact, writing status down as.</p>
<p class="p2">Far better use of time so people can show up when they show up. They can read it at their leisure when it fits into their schedule of the day, and then you can have this asynchronously communication back and forth if there's blockers. The need to to happen. Now that does not mean that there was never a time where you should sync up synchronously and talk things through when you hit real deep blockers where you need to do collaborative design work together, by all means, jump on a video chat.</p>
<p class="p2">I do that all the time. It just doesn't happen like every day. Barely happens every week. Maybe it happens every few weeks. Then we have a thing where we go like, Oh, this is a real hard problem. We don't want to wait for, the asynchrony is back and forth. Like most of our design problems we solve through pull requests and comments, and someone will chime in on that pull request when they're ready.</p>
<p class="p2">And someone will read those comments when they're ready and it's plenty good enough and you don't need these synchronized gears that kind of grind the whole organization to a halt unless they line up perfectly.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>so I work remotely from, from here. <span class="s3">Uh, </span>I have for some time, <span class="s3">um, </span>and my team. So we all kind of do our stand up on zoom as we're talking now. <span class="s3">Um, </span>you know, one thing that I get from seeing people's face, like maybe not everybody's as vocal as you are. So like if I'm saying like, Oh, we need this new calendar thing, so I'm going to rebuild the section using like react in a single page app.</p>
<p class="p2">Like maybe I'll see somebody wince and then they can explain.</p>
<p class="p2"><span class="s2"><b>DHH: </b></span>I agree it's important. Humans are important. Looking at humans move and picking up the subtle cues. Important, everyday important. No. We do these synchronizations at base camp every six to eight weeks. So we run these six to eight week cycles, which also comes into a whole critique. I don't know if we have time for that too, but I think sprints and the whole sprint language is absolutely a travesty and a harm to the software development community at large.</p>
<p class="p2"><span class="s3">Um, </span>this idea that you should be constantly sprinting and that sprint should only be like a couple of weeks long, I think is has caused immense damage and harm to software development. Now it came as a reaction to something that I totally understood why that reaction came, right? Like if you're used to sort of projects that run on for years and years, you go like, Holy shit, this feedback loop is totally broken.</p>
<p class="p2">Let's do the counter to that and let's just do it every two weeks. I just found that like doing that every two weeks is, is, is, <span class="s3">um, </span>is its own kind of harm. And where we ended up at base camp was, <span class="s3">um, </span>with this methodology we called shape up. We just. Published a, a web book around that is base camp.com/shapeup the details, our full methodology and how we approach it, the software development process.</p>
<p class="p2">And that process includes that every six to eight weeks you have essentially sort of some cool downtime where you consider what you do next. And it is in that time when we sync up and we have a chat face to face. Well. Zoom to zoom or video chat to video chat, <span class="s3">um, </span>where you go over what you should build next.</p>
<p class="p2">If you are in the middle of developing things and you just come up with, Hey, we should build a calendar in react, you're<span class="Apple-converted-space">  </span>software decision making processes broken, right? Like if you can just on any given Wednesday, come up with a whole new branch of feature, <span class="s3">um, </span>something's wrong.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah. I guess my example is bad, but sometimes people thrash, right? Like they just start working on something and they get stuck and I don't know. Yeah.</p>
<p class="p2"><span class="s2"><b>DHH: </b></span>Totally, and you should follow up on that. <span class="s3">Um, </span>and you, you can write, like if you have someone observing the work and following along and doing pull requests, you can see when people get stuck and then you can do an intervention when that happens. But over sort of<span class="Apple-converted-space">  </span>prescribing that intervention to be something that has to be applied every single day for every single one is to me, a complete misapplication and miss intervention and actually disruption and, <span class="s3">uh, </span>one that comes at great cost</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>how about just like a, I use Slack and you know, often pinging people on my team. <span class="s3">Uh, </span>to ask them questions</p>
<p class="p2"><span class="s2"><b>DHH: </b></span>my condolences.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>not useful.</p>
<p class="p2"><span class="s2"><b>DHH: </b></span>Harmful.</p>
<p class="p2"><span class="s4"><span class="Apple-converted-space">   </span>I think actually the introduction of chat as a main source of company communication has probably been the most hurtful introduction in the history of sort of interactive communication tools. And<span class="Apple-converted-space">  </span>I say that as someone who built a, essentially a chat tool just like Slack in 2006 called campfire and for many years essentially ran a company on that philosophy<span class="Apple-converted-space">  </span></span>it's a terrible way of working and you don't realize it until you take a step back and look at how your day is spent and how it's broken up and the cognitive harm that happens through interruptions, that if you can't seem to get two, three, four hours of uninterrupted time without someone pinging you, interrupting you.</p>
<p class="p2">It's, it's, it's not good. We have a whole big a write up on this, <span class="s3">uh, </span>that Jason, my business partner, just recently finished called group chat stress.</p>
<p class="p2">Again, not the chat is always bad, but the chat as a main mode of communication is a horrible interruption and intrusion on people's . Productivity, cohesion and sanity.<span class="Apple-converted-space">  </span>So you have this partial attention syndrome going on all the time because of chat versus sort of the reaction that chap came to, which was email, right? Email has in its sort of most naive implication, a lot of all of these issues, right?</p>
<p class="p2">Like <span class="s4">it's, it's, I'm not saying that email is sort of in its base form is wonderful, but you know what is wonderful asynchronous. Write-ups of cohesive, full thoughts, people using actual goddamn fucking paragraphs to describe ideas and proposals, and they put those paragraphs together into form entire,<span class="Apple-converted-space">  </span>cohesive thoughts.</span></p>
<p class="p2"><span class="s4">And then letting someone take that in, read those several paragraphs, sit back for more than fucking five minutes. Ponder that. And then respond. </span></p>
<p class="p2">That is all lost. Once you move your collaboration to chat, every <span class="Apple-converted-space">  </span>person now thinks on a line by line staccato basis and you don't want the quality of that thinking is low.</p>
<p class="p2">It is poor and it has all sorts of cognitive consequences to interrupt people constantly during the day to get them to reply to this or reply to that. <span class="s3">Um, </span>I think chat has really done tremendous harm in that regards and in some ways, <span class="s3">um. </span>We're still healing our organization from the harm the chat has influenced,</p>
<p class="p2">because once you pick up the habit of chat, once you pick up the habit of pinging someone, it is so fucking addictive. Like you have to slide as issue. You're, you're stuck for 30 seconds. Oh, let me pick the Sam because Sam knows the answer, right? With no consideration about whether Sam is in the zone trying to solve a real hard problem. Right? You just ping Sam. Hey Sam, what's up with it? Can you solve it for me? You have no consideration about whether what you're, what the cost of that interruption is, and often the cost of that interruption is incredibly dear, right?</p>
<p class="p2">Because Sam wasn't just pinged by you. He was also pinged by, I mean Susan and Jack and a bunch of other people, right? That you didn't even know. And before you know it, Sam has spent his entire day just answering other people's questions, trying to get into his groove, into his loop, and he has nothing to show for it.</p>
<p class="p2">Absolute travesty, absolutely. A contributor to burnout and all these other things.</p>
<p class="p2">Chat is not the sort of devil in all regards. And I think especially with the social components of chat, chat can be quite</p>
<p class="p2">Helpful and useful to create cohesion in a remote team and they're good and you should do some of them. You just shouldn't drip it throughout the whole day and require everyone to pay attention through the whole day and require them to be immediately responsive to someone pinging you on chat.</p>
<p class="p2">We have a concept, for example, called office hours. That's, let's say you have someone like Sam who's the expert in some domain, and a lot of people have questions they want to post up. Sam Sam decides the Thursdays from 10 to noon, you can reserve time with Sam.</p>
<p class="p2">To ask him questions about his expertise and you don't pepper those questions over the whole week, you simply hold them until it's fucking thursday Right? And do you know what? Most of the time you'll solve your own problems sooner and you'll learn more and you'll be better. You'll, you have taught yourself how to fish before it's Thursday and it's not relevant or it gets to be Thursday and you get some real dedicated time where you're not in position where everyone has agreed upon that this is now a good time to do it.</p>
<p class="p2">And Sam has set time aside to be available for you and that works well.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>it's, it makes sense. <span class="s3">Um, </span>but at the same time, because of the way that I feel like I'm working. Currently, it sounds insane like that. I would wait until Thursday to talk to Sam. .</p>
<p class="p2"><span class="s2"><b>DHH: </b></span>Yeah, totally. Because we've all gotten addicted to right here, right now is ASAP and that is a terrible addiction. That is very hard to break once you've become addicted to ASAP. <span class="s3">Uh, </span>almost anything else seems insane. I could totally see that. Right. But, <span class="s3">um, </span>actually the insanity is the water that we're in.</p>
<p class="p2"><span class="s3">Um, </span>I, I love this, <span class="s3">uh, </span>commencement speak by David Foster Wallace that goes, <span class="s3">uh, </span>this is water. <span class="s3">Uh, </span>you can look it up on YouTube, which basically goes to say that like, you become blind to your insane environment very quickly. If, to me, it's an absolute insanity that anyone can interrupt anyone else in entire company at their leisure with no warning, no consent, <span class="s3">uh, </span>and just like, Hey, because I want to fuck that.</p>
<p class="p2">It is such a selfish, <span class="s3">um, </span>view of the world, right? And I think it's counterproductive. And when it happens back to you in return, you don't like it. Right? Like, people get it. People like helping other people. So this is why they always say, yeah, yes, right? <span class="s3">Um, </span>this is why you never get like, Hey, can you help me with this?</p>
<p class="p2">And people say, no. Come back on Thursday, right? Like you need to set up procedures and protocols for this to be effective. <span class="s3">Um, </span>and if you don't, you just get this selfish imposition of people stealing other people's attention in sort of the slight inconveniences, just because it's good for me. It's good.</p>
<p class="p2">This is what I want right now. I want someone to help me this second. It can't wait 10 minutes. It can't wait an hour. I can't write it up. As opposed to for Sam to ponder later. I just need this right now. No, no, that's, that's insanity. But I totally, I mean, I, your reaction is, is a perfect reflection of, of how most people respond to a lot of the ideas we have about how to work.</p>
<p class="p2">Right? You go like, well, this is not how it works like this. That seems crazy. Like, right. Which is, I mean, that's literally the title of our latest book. It doesn't have to be crazy at work.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah. So we're running out of time, but yeah, I've really liked the book. It's, it's very, I think it's short and pithy<span class="Apple-converted-space">  </span>and the, I guess the big takeaway I got Was something like that, like, Hey, we're all really busy. <span class="s3">Um, </span>but we're not getting anything done. Maybe. Maybe we should stop that.</p>
<p class="p2"><span class="s2"><b>DHH: </b></span>Isn't that insane? Right. The fact that people can't go work done at work that so many people think like I have to show up early in the morning, stay late at night or work weekends cause that's the only time I can get my actual work done if I'm just there. In the office from nine to five. Well, what happened to my time is I had to spend half of it paying attention to some rolling conveyor belt of chat.</p>
<p class="p2">Then I have to spend the other half with people pinging me and then another half, and now we're up to three halves. That's intentional being pulled into all sorts of meetings for status reports. Holy shit. Just shoot me now.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span> so I recommend everybody check out the book. <span class="s3">Uh, </span>thank you so much for your time. This has been a lot of fun.</p>
<p class="p2"><span class="s2"><b>DHH: </b></span>Absolutely. Thank you for having me on and and pushing all my red buttons.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>that's what I'm here for.</p>
<p class="p2"><span class="s2"><b>DHH: </b></span>Awesome. Thanks man.</p>
Picture from <a href="http://www.facesofopensource.com/david-heinemeier-hansson/">Faces of Open Source / Peter Adams</a>

<strong>Links:</strong>
<ul>
 	<li>
<ul>
 	<li><a href="https://m.signalvnoise.com/the-majestic-monolith/">The Majestic Monolith</a></li>
 	<li><a href="https://dhh.dk/2014/tdd-is-dead-long-live-testing.html">TDD is Dead</a></li>
 	<li><a href="https://m.signalvnoise.com/all-my-railsconf-keynotes/">RailsConf Keynotes</a></li>
</ul>
</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1254</wp:post_id>
		<wp:post_date><![CDATA[2020-02-01 05:00:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-02-01 10:00:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[david-heinemeier-hansson-software-contrarian-transcript]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="architecture"><![CDATA[Architecture]]></category>
		<category domain="post_tag" nicename="micro-services"><![CDATA[Micro Services]]></category>
		<category domain="post_tag" nicename="react"><![CDATA[React]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
		<category domain="category" nicename="transcript"><![CDATA[Transcript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[157]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[3964]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1267]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>1691</wp:comment_id>
			<wp:comment_author><![CDATA[Gordon]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[madelineelizad@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://value</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[188.163.75.85]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-03-25 15:39:22]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-03-25 19:39:22]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I didn't have any expectations concerning that title, but the more I was astonished.
The author did a great job, he informed me about the author that 
wrote this https://shedprojects.org/what-makes-a-great-extracurricular/. I spent 
a couple of minutes reading and assessing the facts. Everything 
is clear and understandable. I like posts that fill in your knowledge gaps.
This one is of that sort. Moreover, I like how the writer organized his 
thoughts as well as the visual part.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1585165162.780277;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>1793</wp:comment_id>
			<wp:comment_author><![CDATA[Anthony Vang]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[nichole_carey@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://value</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[178.171.43.156]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-04-26 19:09:47]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-04-26 23:09:47]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Veal was great.  Lasagna could use little more ricotta but it was 
great.  Bread pudding the best.  Going back for pizza.
Danny was an awesome server.  The service was so much better than I'm used to anywhere.
He really does his job well.  It was a wonderful dinner.
Looking forward to pizza and linguine next time.   https://pushisback.com]]></wp:comment_content>
			<wp:comment_approved><![CDATA[0]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1587942587.2864721;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>Don and Adam discuss Folds</title>
		<link>https://corecursive.com/046-don-and-adam-folds/</link>
		<pubDate>Sat, 15 Feb 2020 19:52:04 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1281</guid>
		<description></description>
		<content:encoded><![CDATA[Today we try a different format. Adam invites his neighbour, Don McKay, over to ask him questions. An interesting discussion on recursion, corecursion and the naming of the podcast unfolds.

<a href="https://corecursive.com/don-and-adam-discuss-folds-transcript/">Episode Transcript</a>

"Imagine that the podcast is some sort of function. It takes into it my interests. I was interested in whatever, a Scala and rust and types and functional programs. So it takes in this list and then it has the step function, which is basically me talking to people where I just pulled down one of these interests, find somebody and talk to them, and I produced an episode.

If you think back to the type of the unfold, it takes in like a single thing. In this case, it's a list of my interests and then it just keeps on producing elements until it's done right. Which are the various episodes and it will probably never end because there must be a bug in the algorithm where like new things keep getting added to the interest collection."

"John was saying, we conclude that since modularity is the key to successful programming, dah, dah, dah, dah, dah. I think what he means by modularity is okay, we write our fold and it's like three lines long.  Once that exists somewhere, we don't have to have that base case all over our code. We ended up programming a higher declarative level.
The other reason is just I really like clean abstractions. There's more to learn but once you do, you're able to kind of have this language where you can talk about these things at a higher level"
<ul>
 	<li><a href="https://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf">Why Functional Programming Matters - John Hughes</a></li>
 	<li><a href="https://www.youtube.com/watch?v=6a5Ti0r8Q2s">Beautiful Folds - Gabriel Gonzalez</a></li>
 	<li><a href="&quot;https:/softwaremill.com/beautiful-folds-in-scala/">Folds in Scala</a></li>
 	<li><a href="https://github.com/softwaremill/recursion-training">Recursion Training</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1281</wp:post_id>
		<wp:post_date><![CDATA[2020-02-15 14:52:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-02-15 19:52:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[046-don-and-adam-folds]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1279]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[http://chtbl.com/track/7D91G/traffic.libsyn.com/corecursive/046_-_Fold.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[36:16]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[50]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:7:{i:0;s:26:"01:25 -- What is Recursion";i:1;s:13:"05:48 -- Fold";i:2;s:22:"08:38 -- Change Making";i:3;s:20:"11:39 -- Corecursion";i:4;s:32:"16:21 -- Why use folds / unfolds";i:5;s:22:"30:09 -- Naming things";i:6;s:35:"32:27 -- Why name the podcast that?";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Don McKay]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Software Engineer]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/Donald_McKay">@Donald_McKay</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1689]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[1280]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Don and Adam discuss Folds Transcript</title>
		<link>https://corecursive.com/don-and-adam-discuss-folds-transcript/</link>
		<pubDate>Sat, 15 Feb 2020 20:12:01 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1285</guid>
		<description></description>
		<content:encoded><![CDATA[Today we try a different format. Adam invites his neighbour, Don McKay, over to ask him questions. An interesting discussion on recursion, corecursion and the naming of the podcast unfolds.

<iframe style="border: none;" src="//html5-player.libsyn.com/embed/episode/id/13165580/height/90/theme/custom/thumbnail/yes/direction/backward/render-playlist/no/custom-color/87A93A/" width="100%" height="90" scrolling="no" allowfullscreen="allowfullscreen"></iframe>

“Imagine that the podcast is some sort of function. It takes into it my interests. I was interested in whatever, a Scala and rust and types and functional programs. So it takes in this list and then it has the step function, which is basically me talking to people where I just pulled down one of these interests, find somebody and talk to them, and I produced an episode.

If you think back to the type of the unfold, it takes in like a single thing. In this case, it’s a list of my interests and then it just keeps on producing elements until it’s done right. Which are the various episodes and it will probably never end because there must be a bug in the algorithm where like new things keep getting added to the interest collection.”

“John was saying, we conclude that since modularity is the key to successful programming, dah, dah, dah, dah, dah. I think what he means by modularity is okay, we write our fold and it’s like three lines long.  Once that exists somewhere, we don’t have to have that base case all over our code. We ended up programming a higher declarative level.
The other reason is just I really like clean abstractions. There’s more to learn but once you do, you’re able to kind of have this language where you can talk about these things at a higher level”
<h3>Transcript</h3>
<strong>This is a machine translated transcript. Podcast page for <a href="https://corecursive.com/046-don-and-adam-folds/">this episode is here</a></strong>
<p class="p2"><span class="s1"><b>Narrator: </b></span>This is co recursive. Today we change up the format a little bit. My neighbour, Don is a software engineer. He was over last Friday for coffee. You know, we had some super interesting conversations. I thought this would be a great fit for the podcast. So today he's back for coffee and he has some questions.</p>
<p class="p2">And we recorded the whole thing. I live in a fairly generic suburban house. Don lives a street or two over. He drove over because of the super cold Canadian winter. We set up in my dining room with a couple of microphones and hit record</p>
<strong>Adam:</strong> Ready to podcast?

<strong>Don:</strong> Yep
<p class="p2"><strong>Adam:</strong> All right. Let me call it at the beginning. All right,</p>
<p class="p2"><span class="s2"><b>Don: </b></span>so first question, what is machine learning?</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>So I do not know. I know that some machines learn and that's good, I think.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>Yeah. I mean, according to what movie you're watching.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah. I don't know anything about machine learning. So hopefully you brought some other questions.</p>
<p class="p3"><b>Don: </b><span class="s3">Um, </span></p>
<p class="p2"><span class="s1"><b>Narrator: </b></span>as much as it might be fun to hear me Bumble and stumble through machine learning, I'm just going to skip forward to later in our conversation where I get to a more fun question for me to answer, which is, what is corecursion and why is the podcast called<span class="Apple-converted-space">  </span>corecursive?</p>
<p class="p2"><strong>Adam:</strong> What do you think are recursion is?</p>
<p class="p2"><span class="s2"><b>Don: </b></span>Recursion is a way to harness the power. Of repetition to get what you need. It's a way to kind of iterate over some sort of of data until you get your own common goal.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah, I think it's a really good answer. The joke, recursion answer is like the dictionary definition where it's like recursion, see recursion and kind of loop.</p>
<p class="p2">That's actually not,</p>
<p class="p2"><span class="s2"><b>Don: </b></span>that's a bad function though. I mean, come on, because that doesn't end, right? Like,</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>yeah. So let's say you want to add up a list. So we're going to calculate the sum of a list of integers. So. And see, we might have a while loop, we'll kind of have some variable, and then we'll go through the loop and we'll keep adding our element from the list to that kind of mutating that state.</p>
<p class="p2">And then at the end, we return that as their sum. The recursive way we have like a function called some and then how it's going to work. Is this going to take the first element of the list, the head of the list, and it's going to add that to the, some of the rest of the list, and the way I'm describing it is kind of the way your implementation works.</p>
<p class="p2">So you take off the first element and then you add it. To the, some of the rest of it so that some is actually recalling itself, right? So if you add one, two, three, you end up with like one plus two three, which becomes one plus two plus three and you get six that is recursion, right? That's like your basic simple recursion.</p>
<p class="p2">Where do we go from there? Another thing you could do is like multiply, right? So if you have something called product, it takes a list of integers and it calculates the product. So we'll do the same thing. The product of the list is the first element of the list, times the product of the rest of the list, and you kind of have the same structure where you're always like taking off the first element.</p>
<p class="p2">And then applying something, et cetera. Right? Right, right. And then you kind of need a base case for both of these to exit. For ad, you can say like, Oh, if my list is empty, then I will return zero. So the empty list says the sum of zero</p>
<p class="p2"><span class="s2"><b>Don: </b></span>might mess up your product though for your product</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>function. So the interesting, great transition for product, you obviously can't use zero because you hit the empty list, multiply everything times zero.</p>
<p class="p2">You got zero. Right? Right. So you need to use one for product, which actually forms a Monoid. That might be a topic for another time.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>I'm taking a way off, way off the rails here.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>We'll also like, I think we're constantly in danger of me just saying things that are incorrect, but so if you think of these two definitions, we have the product and the sum.</p>
<p class="p2">Both of them kind of have the same structure, so they have like, okay, here's what we do for the empty case. And then for the non empty case, we kind of have some sort of looping call. Right, right. And so there was this guy named John Hughes, not the John Hughes who made like home alone.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>Oh, okay. I thought this was going in a different</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>direction.</p>
<p class="p2">But yeah, John Hughes is computer scientists. He wrote this paper called why functional programming matters in 1990 and actually here, I'll pull up the paper here. I'm going to put you on the spot. It's the abstract. Of John's Paper.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>As a software becomes more and more complex, it is more and more important to structure it well.</p>
<p class="p2">Well structured software is easy to write and to debug and provides a collection of modules that can be reused to reduce future programming costs. In this paper, we will show that two features, functional languages in particular, higher order functions and lazy evaluation can contribute significantly to modularity.</p>
<p class="p2">We conclude that since modularity is the key to successful programming, functional programming offers important advantages for software development.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>This paper is great, but you could find a free online and it just goes through some basic stuff about writing recursive functions. The thing you'll notice about these two that we described as kind of the habits, the base case, and then the second case, what John shows in his paper is like, Oh, Hey, in a powerful programming language with higher order functions where functions could take functions, you can just.</p>
<p class="p2">Pull that out, we can take away that logic, put it in a common commonplace, and that gives us the ability to handle this form of recursion all the time using just something built into the standard library.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>Right. So a functional approach using recursion would enable us to kind of like take that piece of looping code in anywhere you need to do that is now in a a function somewhere.</p>
<p class="p2">Is that what you're talking about?</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>What John is saying? Is, Hey, I made this function called fold. Fold. Does this work for you? Fold takes in two things, right? The first thing that it takes in is your base case. What do you do when you hit your empty list? The second case that you have is just the working case.</p>
<p class="p2">So, and my sum function, instead of being this calling itself, I can just say like list dot fold. Now, from my base case, I want to give it one. And then for my function, I just give it the addition sign. So that's just saying, Hey, fold over my list and kind of put plus signs between each camo. I imagine it like visually, like if I have this like one comma, two comma, three folds going to like take up those commas.</p>
<p class="p2">And just put in plus signs. Does that make sense?</p>
<p class="p2"><span class="s2"><b>Don: </b></span>Yeah, it makes sense to me. Yeah.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>The previous part we were talking about, I would call that manual recursion. I'm manually calling myself,</p>
<p class="p2"><span class="s2"><b>Don: </b></span>right? Yeah.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Often when you see manual recursion, you can like replace it with a fold. So instead of having to call yourself, you can just say, Oh, maybe a fold should go here.</p>
<p class="p2">And I think that's cool. So this concept,</p>
<p class="p2"><span class="s2"><b>Don: </b></span>it's like folding. Steel. You just,</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>you keep</p>
<p class="p2"><span class="s2"><b>Don: </b></span>pulling the steel right, to make it stronger. I don't know. I'm reaching for now what you hear</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>the, yeah, like where does the name folds come from? Yeah. So interestingly, if you think of the structure of the fold, these examples we're talking about, we're starting with the list of something and then at the end we're getting like a single value, right?</p>
<p class="p2">Right. We're sort of like taking each value. And folding them all together into each other. So that's kind of how I think about it. But a lot of languages have folds because they're super useful. So Scala has like fold left and fold, right? Basically, that's just which direction you start from. It also has just a fold.</p>
<p class="p2">It also has something called reduce, which is the same as fold, except you don't apply your base case. Haskell has foldL<span class="Apple-converted-space">  </span>and fold iron that's left and right. JavaScript and Java and Python all have reduced, and it actually to your question, right, I think reduces maybe even a little bit more descriptive of how you were thinking about</p>
<p class="p3"><b>Don: </b><span class="s3">it.</span></p>
<p class="p2">Yeah. If you think about, if you think about reducing the context compared to just the regular fold.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah, so Ruby calls it inject, which is a weird name, and I don't know why, but I'm thinking maybe it has to do with what I was describing where it's like. If you have this one comma two comma three and it's like, Oh, inject, inject</p>
<p class="p2"><span class="s2"><b>Don: </b></span>another.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah. And a thing between all of these to me that,</p>
<p class="p2"><span class="s2"><b>Don: </b></span>I don't know the word inject means a lot of different things to me.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah. Yeah. So scala's got fold, Haskell, fold, JavaScript, Java. Python. They all have reduce, if you want to sound really smart. So there's a category theoretic term for this. It's called a catamorphism.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>Oh, okay. I'll add that to my lexicon.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>So less commonly used, right. That would be a really long function call to like list dot catamorphism plus. Okay, so that's fold, right? We were trying, I guess you asked me what corecursion is. I'll get there, I promise. Yeah. So that's a fold. We're taking like some collection of things and we're kind of like reducing it.</p>
<p class="p2">We're folding it down. Right? So here's the different recursive thing. Have you ever worked in a retail environment?</p>
<p class="p2"><span class="s2"><b>Don: </b></span>I have worked. In a retail environment though this claimer it was very limited. I worked in a computer store for a high school co-op and I had to work the till among other things and fixing computers and stocking shelves and things like that.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Nice. So you're at the computer store. Somebody comes in, they buy something, you know, they give you $20 and their changes like a dollar 57 how do you make a change? I guess.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>Well, I mean, how I did it is I put it into the tail. Right. And it was calculated and figured it out.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>But then how do you decide like what dollars and coins to give them?</p>
<p class="p2">Oh, I see.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>Yeah. So the tray comes out. Yeah. And they're like, what do you, what do you grab?</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah, exactly.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>Well, first you would grab a dollar, right? Because that's the largest denomination of what you owe them. And then I would grab two quarters and a nickel, and because we still have pennies back when I worked retail.</p>
<p class="p2">I would give them too many</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>nights. You could give them change by giving them just 157 panties,</p>
<p class="p2"><span class="s2"><b>Don: </b></span>but you, I mean, I think you would be fired.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah. This is going somewhere. I promise you can express this like as an algorithm, right? I'm going to have a function called make change. I'm going to pass into it 157 four.</p>
<p class="p2">You know, a dollar and 57 cents express a pennies, and then I want it to return the change that it should hand out. Right in a C program. I'm just going to loop while there's still change left to give, find the largest denomination and then return that and keep while looping, subtracting away as we return it.</p>
<p class="p2">We can change this into like a recursive function. Our base cases, if somebody calls the function, I would like change for $0 million and you're like, okay, here you go. Yeah. Well you actually do, and your little function is you just returned an empty list. So that's like your base case. Yeah. It stands for get out of my store.</p>
<p class="p2">Oh God. I think. I may never make it through the explanation, but besides the base case, if it's more than 0 million cents, then you just look at your denominations, right? And you say, okay, we have one that's a hundred for a hundred pennies, and that's less than the amount owed. So I return a hundred plus I return the change for whatever's left.</p>
<p class="p2">So that's my recursive call. I'm saying I returned the first amount, and as long as there's still change to give, I just called the function again. The first loop will return a dollar second loop will return a<span class="Apple-converted-space">  </span>quarter. And then a quarter and then a nickel, and then two pennies.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>It's like you're continuously refactoring what you're owing them.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>yeah. This is recursion again, like we're calling ourselves to get work done, but if you think about it, it has a different structure. Before what we were doing is taking a list of the elements. And we were reducing them to a single one. We're here, we're kind of doing the opposite. We're being given a single value, and what we're returning is the list.</p>
<p class="p2">So if I give you one 57 turn a list, that's like 1205205511 or something. Right? I</p>
<p class="p2"><span class="s2"><b>Don: </b></span>guess in my brain I went to like, I'm reducing it until I don't owe you any more money.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah. Yeah, there is a reduction and you have that remainder and the remainder keeps carrying on until it's zero. But like from the outside caller</p>
<p class="p2"><span class="s2"><b>Don: </b></span>you're creating, I see where you're going with</p>
<p class="p4"><b>Adam: </b><span class="s3">that.</span></p>
<p class="p2">It's exactly the same, except it's the opposite, if that, if that makes any sense. So earlier I said, Hey, you can use this fold. So you never have to manually do this call where you're calling itself. Well. You can't actually make this change thing by sticking it into fold, because the fold is always working down, taking a list and working down to a single value.</p>
<p class="p2">Right?</p>
<p class="p2"><span class="s2"><b>Don: </b></span>Right. So we need to have multiple values at the end of this.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah. And we're going to start with the single value. Instead of like having this list and taking the first element, like we're starting with a single value and traveling the remainder down. So this is called<span class="Apple-converted-space">  </span>corecursion.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>Okay, I see you finally got down to answering the question.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>I got it. I got there, I got that. So this is called corecursion and. The reason that they use the word co comes, I think from category theory because co is used to indicate that it's the opposite from my</p>
<p class="p2"><span class="s2"><b>Don: </b></span>like cosin sign?</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah, exactly. He likes sign co-sign. So recursion is taking these values and reducing them down and the Co is taking a single value in producing some, it's the reverse direction at the type level co recursion. So we're getting someplace you can do the same trick, right? The fold trick is we don't need to manually do this call. Let's just make something. We'll put it in our standard library. This generalization of coercion is called unfold.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>It makes sense. I mean like naming things is one of the hardest things in programming, but I think they nailed it. What I would like to know though is how many other candidates there were for the name of that function before they were like, you know, the first guy came in and said, well, unfold and, well, I don't know, maybe, and there was probably like a three hour meeting about the alternatives.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah, yeah. Somebody from Ruby, like proposed</p>
<p class="p2"><span class="s2"><b>Don: </b></span>object. I don't think that's a word, but</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>yeah, the fold is called a catamorphism. The term for a unfold for a corecursive<span class="Apple-converted-space">  </span>function is called an Anamorphism. If you look this up and Wikepedia, so it says in computer programming and Anamorphism is a function that generates a sequence by repeated application of the function to the previous result.</p>
<p class="p2">I think you can picture how the change-making you apply it, and then with what's left, you apply it and with what</p>
<p class="p2"><span class="s2"><b>Don: </b></span>you have, like you have like a make change and you just apply it and then it goes through. It comes back with the remainder, and then you apply it to say make change again. And you just keep making change until there's no more change to make.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah, exactly. Right. What did I explain so far? Why don't you give me the summary? Let's see.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>See if I've been listening. Is this a best?</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>This is done.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>All right, so what we have covered so far is the fact that corecursion is the opposite to recursion, where you will start with a single value and end up with multiple values.</p>
<p class="p2">Whereas in recursion, you will start with multiple values and reduce them down to one. And then we've just went into polymorphism and catamorphism and I think that's where you left off is you explained, and a catamorphism is where you take a function and apply it repeatedly until you get your rezone.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>I think it's pretty close.</p>
<p class="p2">So yeah, the anamorphism is just another way. It's just, it's just the unfold. It's just another term for it. And a term for fold is a catamorphism. So this topic is like super deep</p>
<p class="p2"><span class="s2"><b>Don: </b></span>beyond the scope of one podcast.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah. So it's funny, I was on this podcast called programmer down. I think it was super fun.</p>
<p class="p2">But yeah, their first question was like, is your podcast about recursion? And I mean. I guess that could be possible. Is</p>
<p class="p2"><span class="s2"><b>Don: </b></span>that what you're doing? This podcast is like he went on to programmer throw down and then you came and you're like, well, I have to do</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>now. Yeah.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>I have to do one about, because I've been made a fool of on this other MCASTs.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Exactly. Exactly. So it is a deep topic. I couldn't pull off making a whole podcast series out of it, but maybe somebody could. And then there's other things besides catamorphism and anamorphic seems like it goes deep. There's like combining them and it turns out that like a lot of complicated things can be expressed in terms of these topics.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>So yeah, I guess going back to, I like to relate everything to practical applications, so I mean in day to day work. I've done this a lot when I've worked in C-sharp. I haven't worked in C sharp in a very long time, probably five years or six years or something. But when I did four loops where kind of like what you did, right, like if you had to loop over a collection of something, you just did a four loop and I guess we kind of stayed away from recursion.</p>
<p class="p2">It was like a mysterious. Monster, right? Where you only hear about the bad things, right? You'd hear horror stories about a recursive function that went off the rails and had like a memory leak or looped infinitely and destroyed something. So why would I use recursion and over the, what did you call it, the imperialist.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>In theory, this approach, I like</p>
<p class="p2"><span class="s2"><b>Don: </b></span>most approach,</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>I call the imperative</p>
<p class="p2"><span class="s2"><b>Don: </b></span>list. Yeah. Yeah. So the imperative reproach, I think it's mainly a lot of a lot of people are comfortable with.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>And these more advanced topics are kind of definitely from my perspective, are interesting to learn about because I'm always looking to improve myself.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah. I mean, I want to unpack some of that. Um, so I like this idea. They're like a four loop is like, Oh, that's a simple on that can understand it, but like recursion is this monster. They can let it run out of control.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>When I was in college, it was like I was a new and you know, just learning all this stuff for the first time and recursion is hard to wrap your head around if you're like a programming student that's just like walking in and being like, computers.</p>
<p class="p2">I like them. I want to write programs. And your first thing is a recursive function. It's gonna throw you a little bit right where. It's more convenient to be able to see everything it's doing at face value in like a a four loop, you can see it's easier to follow, right? Whereas in recursive, you have to recursively process it in your brain.</p>
<p class="p2">And I think that is hard for different types of people. Right?</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>So, yeah, so I think it's totally valid. Right. Earlier when I was describing how some works, it's actually kind of declarative, the recursive approach. Like if I try to describe the code for doing the kind of. Imperative for each. Right? I'm like, okay, I'm going to make a VAR.</p>
<p class="p2">That's like sum equals zero and then for each and then dah, dah, dah, dah. There's just a lot going on there.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>It's very verbose.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah. It's very verbose and it has all these details that don't seem entirely relevant, right? Like why do I even care what that variable at the beginning is called that I have to like mutate and what if I don't know like something else.</p>
<p class="p2">Changes it or, but like the fold, some definition, it take a list and fold over it, you know, adding the elements together. When I describe it that way, that's like almost what the code will be, right? If I use the reduce, which you like better, it'll be like lists dot. Reduce plus. You can just see that and think like, okay, in my head.</p>
<p class="p2">All those commas become pluses. I think it makes sense to sometimes trace it through in your head like this, cause this caused this, but you can also just think about it definitionally the function product. We take the first element of the list and we multiply that times the product of the rest of the list.</p>
<p class="p2">I think once you get used to that way of kind of declaratively understanding things, it's really nice. Once you understand kind of what fold means. Then when you see the code, you're like, Oh, that's easy.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>Exactly. Yeah. I think that's the word I was looking for is like it's a pattern and a lot of the times if you haven't been exposed to the pattern in the past, it can seem mysterious.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah, totally.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>So a lot of these methods are kind of like a, they're very ambiguous to somebody who hasn't. Seeing the pattern before, whereas if it's a four loop, right?</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>Everyone's seen that. You've seen that from the first day of like taking programming courses. Yeah.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>You know, and if we go back to what John was saying, we conclude that since modularity is the key to successful programming, dah, dah, dah, dah, dah, and like, I think what he means by modularity, right?</p>
<p class="p2">Is okay, we write our fold. It's like three lines long or something and it has that standard. Here's my base case. Here's my other thing. Once that exists somewhere, we don't have to have that base case all over our code. W we ended up programming at kind of like a higher declarative level, like you do Skella whenever I have this kind of like pattern matching and I'm like case none and then case some, I should just use folds for that.</p>
<p class="p2">The other reason is just I really like clean abstractions. There's more to learn, like you have to learn what a fold is and want to unfold. Unfolded. But once you do, you're able to kind of have this language where you can talk about these things. Let's take it beyond lists. Let's talk about a tree. So let's say we write a four loop that traverses a tree.</p>
<p class="p2">You have elements, and they each have children. You can write something that kind of traverses it. The kind of recursively walks through each element and prints them out or something, or, or adds them up, right? And then you can do the same thing instead of having to have some complex. Code to add up all the elements in a tree.</p>
<p class="p2">You just do like tree dot fold plus treat up, fold product and get the same thing. So once you have this obstruction, you can just talk about these things. Like we don't work together now, but if we did and we jumped on a zoom call and you're like, I'm trying to figure out how to multiply all the elements in the tree.</p>
<p class="p2">I could say like, Oh, just fold over it with the, maybe this isn't an actual question that comes up.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>I mean, probably not, but I think we understand where you're going with</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>it. I've had like several times where I just have some really ugly code. There's just like some complicated logic that I'm working on.</p>
<p class="p2">It has a bunch of cases and it just ends up seeming super complicated. And then like you kind of look at it, and maybe this is a fold, or maybe this is a map and there's these higher order functions. Maybe this is a flat map and you start to pull it apart. And I've had this happen where you start with this big gnarly thing, you start reducing it, it gets simpler and simpler, and then it ends up just being like, oof.</p>
<p class="p2">And instead of having my own function, I just call this built in, but I raised the pull request on some changes I want to make to something. And then Adrian, who's on my team and really has deep kind of functional programming knowledge. He's like, Oh, it looks good, but there's like a couple of nitpicks I want to make.</p>
<p class="p2">And then he's like, Oh, you could change this to a fold. And like this could be a flat map, but. Basically, he would be able to point out places where the logic that I was doing could be abstracted into some of these higher order components. I mean, what actually happens is I get kind of grumpy and I'm like, Oh, I don't want to change all this, but I do.</p>
<p class="p2">And I learned something and I learned this new concept. And then as a team, we have these higher order concepts to talk about.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>I think like all programmers kind of like enjoy that a little bit. I dunno if it's something that's like common to have the type of people attracted to our profession, but there's something about taking through factoring, right?</p>
<p class="p2">There's something about taking something that, well, it works. You need to see if there's a better way to do it and that like need or drive to improve the existing code that while it may work, you just need to see if it can be better. Yeah. And I find when I was first getting into Skalla from C-sharp, that's something that I was constantly doing because I was, well, Skalla will work.</p>
<p class="p2">Like you could apply concepts and how you program in C sharp and you can apply them directly in discount line. It'll work, but you're not familiar with any of those higher order functions. And you look at code after you've learned some of them and you come back, you're like, Oh, I can change this whole thing and reduce it down to like maybe even a few lines where it used to be like, you know, dozen or something.</p>
<p class="p2">Right. And.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>I have a strong opinion that this is useful pragmatic thing to do, but also I just really like it.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>But if you want to give Adam a present, just give him some gnarly code and send it to them and be like, can you clean this up? Yeah, that would be a present for you.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah, right. Don't actually do that.</p>
<p class="p2">No, maybe. But if you think of somebody learning functional programming and they write something as like a while loop, and then like the next step, maybe they're like, Oh, I can do this without mutating this variable that I'm adding into by doing like a recursive function. And it'd be like, well, I can use a fold.</p>
<p class="p2">Right? So now I don't even have to write the recursion myself. It just becomes this like one-liner when you get down to this fold. The folds going to work. It's being used in other places. It's not broken. Right. So like,</p>
<p class="p2"><span class="s2"><b>Don: </b></span>I mean, like that's the advantage of, of using some builtin functions to that. The languages, you know, that they'll probably work.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah. We had this other example at work. I'm making a request to this web server and it's going to return to me large amounts of binary. A hundred megabytes or something, maybe more. And sometimes for certain servers that we were interacting with, it would start sending binary and then partway through sending, the connection would die.</p>
<p class="p2">So it would send you like 10 megabytes and it would die. Somebody quick hacked in a fix. The servers like underload or the other server has something where it just shuts down. If it kills connections that are open for too long, who knows? But. We have to deal with this. We need to get this data somehow. So there's range headers.</p>
<p class="p2">When you make a request, you can actually say in the header, give me from this offset to this offset in the data. This is how it's kind of like paging. Yeah. It's also how like YouTube works. Like if you skip to the middle of the video, it just starts asking for data from that point. Right? Right. So we get like our 10 megs and then something dies.</p>
<p class="p2">Then we have some complicated retry logic that says, okay, how far did we get. Well, let's ask for more and then that'll die and we'll ask for more. I'm going to keep</p>
<p class="p2"><span class="s2"><b>Don: </b></span>repeating, I think, I think a lot of modern implementations of that kind of method, you can see in almost anything that's streaming, right?</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah, totally. We had this kind of gnarly code. To deal with that, and then somebody, let's just say it was me, but realize that this is unfold. What's happening is you have this function that takes in this request, and it's either going to return like a hundred megabytes or if something dies, it's going to have to keep requesting.</p>
<p class="p2">It'll get the first 10. And then, Oh, let me request the next 10 and then let me request the next 10 until, it's kind of like your change remainder case until we've actually gotten everything that it said was the length of the document. Well, now instead of our like wild loops, then we can just turn this into an unfold and kind of carry this through.</p>
<p class="p2">And so this like gnarly server access and code. Got simpler. These concepts are everywhere and they're super cool to me. I mean,</p>
<p class="p2"><span class="s2"><b>Don: </b></span>I'm so, a lot of people, I'm sure that people listening to your podcast will also have some kind of affinity.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah. Maybe. Who knows?</p>
<p class="p2"><span class="s2"><b>Don: </b></span>Yeah. I recently implemented something similar that I have.</p>
<p class="p2">Where I needed to fetch a large data set and you you can't, you just can't do it all at once. I think we all kind of run into that where the data that you're fetching is just too large for either the, the database or the processing. Like you want to be efficient, so you page it, you take it chunks at a time.</p>
<p class="p2">So you just stream it in and chunks. I did it with recursion, those, well maybe I'll go back and see if I could do it with a full.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah, yeah. With an unfold unfold. Yeah. If you were going to grab the results of some page and it only showed 10 at a time, and then you had to go to the next page, you can write an unfold where it's like grabbed the first page and then if it has a next link, then call with that and you keep on calling until there's no next and there's no next link.</p>
<p class="p2">So the next is your remainder from the change example. It's another example of a, an unfold. Happens all the time, man, I don't. So there's a guy that I had on the podcast, Gabe Gonzales. He wrote a bunch of things about folds. Like he went really deep on it. He showed all kinds of things can be written in terms of folds.</p>
<p class="p2">Once you understand the definition of these terms, you're able to write some really. Concise code,</p>
<p class="p2"><span class="s2"><b>Don: </b></span>right? It's all of these languages share some of these operations, they just call them different things because when we're executing systems, we're all facing the same problems, right? We're all coming to the same solutions, just in difference in tax.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Do you know that? Like what code golf is.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>No, but seeing how I don't like golf. I don't know. I would</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>like the golf aspect of it is you're trying to do it in as few characters as possible.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>I feel like I might've done something similar or using some of the other types of websites I there like hacker rank or the</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>problem with code golf, like I think it's something fun that people do, but the code is, it ends up just like some horrible mess of symbols, but I think it's an enjoyable process.</p>
<p class="p2">What I'm talking about here, like using folds, using unfold, using. Some of these kind of FP concepts, I think it scratches the same itch cause you're like, Oh, how can I simplify this? But in the practical way, right? Like using fold is actually practical. Using some series of Pearl symbols to do a complicated thing and</p>
<p class="p2"><span class="s2"><b>Don: </b></span>be a topic for another podcast is at what point does brevity sacrifice clarity.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah. Right. A lot of what we're talking about here, it's actually more concise, but at what point is it, is it so concise that</p>
<p class="p2"><span class="s2"><b>Don: </b></span>it's hard to understand?</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah, totally. I don't know the answer. I think that if you don't know the concepts, certainly if you don't understand what unfold is, even if it's shorter, you may not find it to be a more understandable solution.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>Yeah. I mean, you might have to consider the audience, so your team, for example, and all their different expertise levels. Because if you have, if you have some people that are more junior. And you're trying to get them onto things, dumping them into something that you've refactored several times until it's only a series of symbols and, and things might kind of be a little bit above there.</p>
<p class="p2">It might scare them. They might think that that's a monster that they want to avoid.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>The more concise solution is more declarative. There's less saying what's going on in individual steps. There's less that can go wrong because there's just less code. The other thing I would say it is more dense, a harder to learn.</p>
<p class="p2">But once you learn fold, that concept does not just for that piece of code that you're learning. It's everywhere. You can build a complicated thing to solve this individual problem, or you can find this global concept. You're gonna have to learn about this global concept, but that learning you get to take.</p>
<p class="p2">With you.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>Yeah. You're going to encounter this a lot. Uh, when I learned it in college, they were teaching me to be more verbose. So that was more understandable. Right? And they wanted everything very like long names. They wanted everything very clear so that anybody could read it. And I think maybe that might've been more to the benefit of the</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>instructors that were TA</p>
<p class="p2"><span class="s2"><b>Don: </b></span>reading everybody's assignments.</p>
<p class="p2">Right. They just wanted everything to be . Clear, but when you get into the workplace, you learn that that's not the case. And you don't necessarily want to be verbose anymore. You, you want to be clear, but you want to be concise. And that was, I think, a learning experience coming out of college for sure.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>And you just made me think of like a pet peeve, right?</p>
<p class="p2">With people. Would say always use long descriptive, variable name, and you'd be like, okay, well what about that four loop where it's like four? I like, why isn't the name, Oh, I don't want to call it iterator or whatever, and like, well, we all know what the I means like, don't worry about the eye. Okay, well here we have four eye, four J four K.</p>
<p class="p2">well, yeah, that one's like I J K. Those are fine. G H past H like, no, don't do that.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>Then we don't understand. Yeah.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Then somebody explained to me that there's actually a, just like a larger rule that that always use descriptive names, mrs, which is the length of your name should correspond to the length of its scope.</p>
<p class="p2">Which describes all these scenarios, right? So the reason that an eye is fine in a four loop is it only exists in that little four loop. It doesn't need a long descriptive name. Its scope is very small. You're never going to be like, I have the tie here and I don't know what it means. Like, no, it's right there.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>You know what it means by the context in which in which it exists, because that scope is so small. Yeah. Yeah. Descriptiveness is actually costing you clarity.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Okay, so what did that explain so far? Like, hopefully you understand what unfold is now and you might understand what it is for the rest of your life, right?</p>
<p class="p2"><span class="s2"><b>Don: </b></span>I think there's a point at which you start, at least at my age, things start leaving your brain as they enter them. So I might now know what fold and unfold do, but I forgotten something. I guarantee it. I guarantee something that I did know before we started this podcast is now gone.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Okay. Well, that might be a problem.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>It is. It's a constant problem,</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>but it's probably something like to do with calm components or something horrible.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>Maybe it's something that's irrelevant,</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>but I can bring this all back around to the core concept. You asked me at the beginning. What is corecursion . We got that. Why is your podcast called corecursive?</p>
<p class="p2">How would that,</p>
<p class="p2"><span class="s2"><b>Don: </b></span>that's a good question. Yeah.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>The very dumb answer is because I was reading a book explaining some of these concepts when I decided to make a podcast, and domain names are hard to find, so I just put in some concept names and came up with that. So that's kind of a throwaway answer, but an equally true answer is like.</p>
<p class="p2">Imagine that the podcast is some sort of function and it takes into it my interests, like when I started the podcast, right? So I was interested in whatever, a Scala and rust and types and functional programs. So it takes in this list and then it has the step function, which is basically me. Talking to people where I just pulled down one of these interests, find somebody and talk to them, and I produced an episode.</p>
<p class="p2">If you think back to the type of the unfold, it takes in like a single thing. In this case, it's a list of my interests and then it just keeps on producing elements until it's done right. Which is an elements for me are the various episodes and it will probably never end because there must be a bug in the algorithm where like new things keep getting added to the interest.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>I think in the, in this example, like the interest is one giant element of things that you're interested in and you keep, you keep, it's the change, right? It's the change. That you're trying to make and you just keep coming out with the denominations of currency, which is the podcast. It also sounds like you just came up with a name and then really tried to figure out what the explanation the</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>may also be true.</p>
<p class="p2">Yeah. Did I answer your question? I don't know. I think I just went on a long tangent. No, I</p>
<p class="p2"><span class="s2"><b>Don: </b></span>think it did. I think I learned some things. I learned some things about full, I might actually go back and look at some of my previous code.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>You can go back and be like. This code is all crap.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>It's crap. I could pull this.</p>
<p class="p2">I think anybody who's ever written code goes and looks at things they wrote three months ago and they just look at it and disgust and they're like, I can't believe I</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>wrote this. Yeah. That like, if you haven't done that or if you stop having that, then you're probably not learning and progressing. Yeah.</p>
<p class="p2">So this has been fun. I mean, keep bringing me your questions. I'll, I'll keep going on rants and then, Oh yeah,</p>
<p class="p2"><span class="s2"><b>Don: </b></span>no, I have lots of questions, so,</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>okay. I forgot the most important part. So let's validate your learning. You came here and you were like, what is. . And why do you use that name in your podcast? So what's the answer?</p>
<p class="p2"><span class="s2"><b>Don: </b></span>I think the answer is a coworker version is the, I wouldn't say so much the opposite of recursion. It's just the opposite result, right? So what goes in and what comes out is the opposite to what you would normally precursor. So if your recursion is turning one too many. The co recursion is turning many to one.</p>
<p class="p2">And a. Why is your podcast named coworkers? As far as I understand it, you sounded cool and you liked the idea and it wasn't taken. The domain name was available and then you thought about it and came up with a reason.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>I think that's valid.</p>
<p class="p2"><span class="s2"><b>Don: </b></span>I mean, that's completely. That's completely acceptable. There's nothing wrong with that.</p>
<p class="p2">Not every name for everything has to be a Eureka moment that somebody comes up with while they're in their kitchen or their shower or something. It's like, that's the name. Like it. It can just be like, I think that's cool. Domain's available</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>and it's very practical. Yeah, that's true. So is corecursion</p>
<p class="p2"><span class="s2"><b>Don: </b></span>is very practical.</p>
<p class="p2"><span class="s1"><b>Narrator: </b></span>All right. That was the episode. Thanks to Don McKay for being such a good sport. Hopefully this turned out all right, and Don and I can keep doing this. Maybe sometimes I'll even bring him questions. He is an expert in many things that I know  nothing about. Until next time, thank you so much for listening.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1285</wp:post_id>
		<wp:post_date><![CDATA[2020-02-15 15:12:01]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-02-15 20:12:01]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[don-and-adam-discuss-folds-transcript]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="transcript"><![CDATA[Transcript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1243]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1291]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[157]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Karl L Hughes on Conference Talks</title>
		<link>https://corecursive.com/047-karl-l-hughes-conference-talks/</link>
		<pubDate>Mon, 02 Mar 2020 10:00:25 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1295</guid>
		<description></description>
		<content:encoded><![CDATA[Adam talks to Karl Hughes about his path to becoming a conference speaker and the work he has done to make it easier for others to follow in his footsteps.

<a href="https://corecursive.com/how-and-why-to-speak-at-conference-with-karl-l-hughes/">Episode Transcript</a>

"I didn't start trying to speak at conferences until I was at least seven or eight years into my software development career. So. Just a couple of years ago and before that, I think what helped build confidence was speaking occasionally at meetups. I started talking occasionally at local code bootcamps, just kind of getting to be in front of a crowd and start to build up some like level of self-assuredness and eventually I think the next step was just obvious. I wanted to push myself to do something a little scarier and bigger, and that was like, get in front of people at a real conference. "

"And so it is scary. Partly also it's that, you know, because it was my first time, I didn't really know what to expect. I had only been to a couple of tech conferences before. I didn't know what the audiences were going to be like. If there was kind of be this like big tomato throwing thing at the end, they're all just bashed me or if it was going to be like a more of a friendly conversation."

<strong>Show notes:</strong>
<ul>
 	<li><a href="https://www.cfpland.com/">CFP Land</a></li>
 	<li><a href="https://www.karllhughes.com/">Karl's Personal Site</a></li>
 	<li><a href="https://www.youtube.com/watch?v=Aw5B8XDQLT8">Washing Machine Guy Talk</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1295</wp:post_id>
		<wp:post_date><![CDATA[2020-03-02 05:00:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-02 10:00:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[047-karl-l-hughes-conference-talks]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="conference"><![CDATA[Conference]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="speaking"><![CDATA[Speaking]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[http://chtbl.com/track/7D91G/traffic.libsyn.com/corecursive/047_-_Conference_Talks.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[50:31]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[39.3 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:11:{i:0;s:27:"00:36 -- Becoming a speaker";i:1;s:21:"04:46 -- Being Afraid";i:2;s:29:"05:54 -- Why become a speaker";i:3;s:28:"10:27 -- Booking Conferences";i:4;s:31:"12:44 -- Preparation for a talk";i:5;s:25:"18:28 -- Choosing a topic";i:6;s:27:"24:58 -- On being an expert";i:7;s:24:"29:28 -- The CFP process";i:8;s:25:"31:14 -- Abstract writing";i:9;s:14:"33:10 -- Costs";i:10;s:33:"43:20 -- The benefits on speaking";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Karl L Hughes]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Conference Speak & Washing Machine Guy]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/KarlLHughes">@KarlLHughes</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1578]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1300]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[1299]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>1618</wp:comment_id>
			<wp:comment_author><![CDATA[Patricia Ayuso]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ayusopatricia@yahoo.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[98.254.227.55]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-03-02 19:06:48]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-03-03 00:06:48]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Funny to see this podcast just few days after my first conference talk. Now I feel even luckier that I get my talk accepted and encouraged to get more kind of talks. 
Great podcast! I enjoy it very much.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1583194008.6180789;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>1621</wp:comment_id>
			<wp:comment_author><![CDATA[Adam Gordon Bell]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[adam@corecursive.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[70.54.16.157]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-03-03 10:15:41]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-03-03 15:15:41]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great Patricia!  I would love to hear more about the talk.  drop a link if it is recorded anywhere or join the slack channel and tell us all about it.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>1618</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1583248541.4749849;s:5:"event";s:9:"check-ham";s:4:"user";s:4:"adam";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>How and Why to speak at Conference with Karl L Hughes</title>
		<link>https://corecursive.com/how-and-why-to-speak-at-conference-with-karl-l-hughes/</link>
		<pubDate>Mon, 02 Mar 2020 10:00:23 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1301</guid>
		<description></description>
		<content:encoded><![CDATA[Adam talks to Karl Hughes about his path to becoming a conference speaker and the work he has done to make it easier for others to follow in his footsteps.

<iframe style="border: none;" src="//html5-player.libsyn.com/embed/episode/id/13365026/height/90/theme/custom/thumbnail/yes/direction/backward/render-playlist/no/custom-color/87A93A/" width="100%" height="90" scrolling="no" allowfullscreen="allowfullscreen"></iframe>

"I didn't start trying to speak at conferences until I was at least seven or eight years into my software development career. So. Just a couple of years ago and before that, I think what helped build confidence was speaking occasionally at meetups. I started talking occasionally at local code bootcamps, just kind of getting to be in front of a crowd and start to build up some like level of self-assuredness and eventually I think the next step was just obvious. I wanted to push myself to do something a little scarier and bigger, and that was like, get in front of people at a real conference. "

"And so it is scary. Partly also it's that, you know, because it was my first time, I didn't really know what to expect. I had only been to a couple of tech conferences before. I didn't know what the audiences were going to be like. If there was kind of be this like big tomato throwing thing at the end, they're all just bashed me or if it was going to be like a more of a friendly conversation."
<h3>Transcript</h3>
<strong>This is a machine translated transcript. Podcast page for <a href="https://corecursive.com/047-karl-l-hughes-conference-talks/">this episode is here</a></strong>
<p class="p2"><span class="s1"><b>Adam: </b></span>Hey Carl. How's it going?</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Carl Hughes is a developer and conference speaker. Not everyone is comfortable talking at a meetup or a conference. That includes me. So I invited Carl on to explain how he got started speaking at conferences. Let's jump into the interview. I start by asking Carl how he decided he wanted to become a speaker.</p>
<p class="p2"><span class="s2"><b>Karl: </b>So </span>every year I try to set a goal for myself that is to something that I've never done before. That's a little outside of my comfort zone in some way. And so that's changed year to year. Uh, several years ago, I stopped eating meat. That was my big goal. Uh, and then. I ran a marathon a couple of years after that.</p>
<p class="p2">That was a huge, you know, personal goal. And then I've done some professional ones as well. And one of the big ones in, I think it was 2017 was I wanted to get accepted to speak at a tech conference. And so it was really the pursuit of that goal that started me on the journey, which is I'm just a very goal driven person.</p>
<p class="p2">I like to set that thing and just have something out there in the Verizon to look at. So that sort of was my forcing function. And from there when I did was I started to think about things that I knew technically that maybe were a little unique. To my situation. I've always worked at early stage startups.</p>
<p class="p2">And so one of the advantages I've had is I've been able to help teams set up the initial infrastructure and architecture of an application. And I realized after talking to a lot of my friends who were engineers, that they didn't get that Greenfield opportunity very frequently. And so the opportunity to talk about how a small company makes those initial decisions and then how those decisions grow over time and changes.</p>
<p class="p2">Business changes was really interesting and that kinda got me started on a couple of topic ideas that I started pitching around. I think for me, a a big sort of barrier to getting started was feeling like I didn't know enough technically to be worthy of being on stage. And I think that held me back for a number of years.</p>
<p class="p2">I didn't start trying to speak at conferences until I was at least seven or eight years into my software development career. So. Just a couple of years ago and before that, I think what helped build confidence was speaking occasionally at meetups. I started talking occasionally at local code bootcamps, just kind of getting to be in front of a crowd and start to build up some like level of self-assuredness and eventually I think the next step was just obvious. I wanted to push myself to do something a little scarier and bigger, and that was like, get in front of people at a real conference. Unfortunately, you know, I've realized now that I've done a few, that most of them are not that much different from doing a large meetup group that you know the number of people that sort of.</p>
<p class="p2">Intensity level of what they expect. Most conferences are actually pretty laid back, especially in tech, and so it's not as maybe as scary as I initially thought it would be. Anyway, so I was interested in the topic of testing and sort of setting architectures at small teams. I started pitching a couple talks at conferences.</p>
<p class="p2">I slowly figured out how you . Get how you sort of apply to conferences and how you get accepted and what the acceptance rate is going to be. There's all a ton of things I learned along that those, that first year of the journey and eventually got accepted to do one. I think it was late 2017 was my first <span class="s3">one.</span></p>
<p class="p3"><b>Adam: </b>Oh, what conference was it?</p>
<p class="p2"><span class="s2"><b>Karl: </b></span>So that was API, Strat and practice is what it's called and not a huge conference. It's mostly focused on different open source tools run by the Linux foundation. And I was giving that talk on testing distributed systems and. So just testing modern web applications that have, you know, multiple services and things like that.</p>
<p class="p2">And I remember, I mean, I had done a lot of public speaking up til that point, and I had been in, uh, everything from, I was in a band where I played an open mics in college. I did. Main stage theater production at the university of Tennessee when I was there, and I did a lot of meetups and bootcamps, so I was actually pretty comfortable in front of people.</p>
<p class="p2">But once I got up there in front of this like tech audience, and I look out there and I see all these, for lack of a better term, you have gray beards guys and women both who had been doing this for clearly much longer than me. They listened to me dating. I mean, it was like, these people can call me on my BS, you know, like I can't go up there and really not know what I'm talking about because I was, you know, I felt like.</p>
<p class="p2">I've talked to now a number of speakers. This is not an uncommon feeling that we all feel like we don't have enough knowledge to get up there.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Wow. It sounds scary though, like, well, that specific conference, especially like, I mean, I build things that end up running on Linux, but I feel like I only vaguely know how it works.</p>
<p class="p2">I wouldn't want to. Like, did you have that fear of like, Oh God, they're gonna.</p>
<p class="p2"><span class="s2"><b>Karl: </b>Absolutely. </span>Yeah. I was afraid they were going to ask me about the Colonel and I barely know what that is. I mean, I, uh, yeah, I'm a high level web application developer and I, I'm at this point I'm okay with, I'm proud of that decision, but there's a lot of people that know these, these lower-level components that know assembly and C and things like that that I have never really touched in, in detail.</p>
<p class="p2">And so it is scary. Partly also it's that, you know, because it was my first time, I didn't really know what to expect. I had only been to a couple of tech conferences before. I didn't know what the audiences were going to be like. If there was kind of be this like big tomato throwing thing at the end, they're all just bashed me.</p>
<p class="p2">Or if it was going to be like a more of a friendly conversation. Again, kind of going back to the experiences leading up to that, I think talking at meetups and. Bootcamps, these sort of friendlier, smaller audiences was really helpful because I at least had some idea of what might get thrown at me, you know, during and after the talk.</p>
<p class="p2">And a lot of people I've spoken to as well who are speakers, they also try to do company lunch and learns, which I think is a great way to get your talks kind of bedded and practice.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>I mean, I feel like there's still something missing there. Like what did you think this goal would get you?</p>
<p class="p2"><span class="s2"><b>Karl: </b></span>Yeah, that's a good question.</p>
<p class="p2">So besides pushing myself personally, I was really. I think that giving talks has always forced me to sort of create a story around what I'm doing, and that's helpful on a number of levels. It's helpful when I talk to my boss or CEO who's nontechnical, but certainly interested in why we chose to build things the way we can.</p>
<p class="p2">So if I have a better story crafted around why that is and the results and the things that I've learned in the past, it's a lot easier to convey that to her. So even just preparing those talks about these technical decisions that our teams have made, and then sort of being able to convey that to other developers has helped me convey it to people like my boss or.</p>
<p class="p2">Yeah, I haven't looked for a job since, but like if I were looking for a job, it would be great experience for like explaining what we built and why we built it, because that's something that always comes up in the job interview. So kind of having that, I guess it's like a professional practice doing professional communication.</p>
<p class="p2">It was really valuable to me too. And, and there's also these other sort of tangential benefits that are really hard to measure, like personal branding, you know? So now I'm out there as a conference speaker and maybe others conferences see that maybe they. Decide to invite me to speak later, or maybe people just start to know me as a topic expert in a certain area.</p>
<p class="p2">Around the same time I started speaking, I actually wrote a short book about PHP in Docker, which were two technologies we were using at work, and it was just kind of a getting started guide. It was really short, it was free, but writing that and then having some conference talks about the same topic later in 2018 and 19 was really helpful for kind of establishing.</p>
<p class="p2">A little bit of my personal brand around those topics, like I knew those topics pretty well. And so when they come up, a lot of times people end up writing the questions on the internet, which is kind of cool.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>So if I, or somebody listening, like wanting to get started, what do we do? Like to me it always seems like a catch 22 step one. Speak step to become a guru. And then once I'm a guru, then I'll be able to speak at things. I don't know.</p>
<p class="p2"><span class="s2"><b>Karl: </b></span>Yeah, it is a catch 22 and I think that this is the thing that holds a lot of people back. And this was what I was afraid of was that because I wasn't a guru, I would get up there and people would call me out for being a, an impostor.</p>
<p class="p2">And I think the reality is everybody kind of takes that first leap without being really ready. And that's okay. And so it's kind of like, I think back to getting my first job as a software developer. I didn't think I knew enough to be a software developer. You know, and people would, in the job interview and first few days, people would rattle off these acronyms I had never heard before.</p>
<p class="p2">And I mean, we all go through that. So the first step is kind of being willing to put yourself out there a little bit. And that's why I always recommend starting with things like meetups and bootcamps in places they're a little friendlier. Easygoing audiences, but once you decide like, Hey, look, I'm going to speak at a conference, I think it'll be beneficial for my career, or maybe it'll be a good way to meet other people in the industry that I haven't for.</p>
<p class="p2">It's a great way to travel. Usually the conferences will cover some of your travel costs, and so you can get out there for free, which is nice. But let's say you decided to do that. So the first thing you want to do is find a CFP, which is a call for proposals or call for papers. Everybody's used to that kind of a little differently, and there's a bunch of websites out there.</p>
<p class="p2">I run a newsletter called CFP land that sends out CFPs, but there are several others that you can find or you can just Google around for tech conference CFEs or ask people in your community. If you go to conferences, you can meet other speakers and ask them about it. It's all this stuff is actually not too hard to find on the internet.</p>
<p class="p2">Once you find a few CFEs you think are interested in submitting to, you have to write what's called an abstract, and that is usually a, it can depend, but one to 10 sentence sort of introduction to your talk. Sometimes they ask for as much as an outline where you kind of give them bullet points on everything you're going to cover.</p>
<p class="p2">Sometimes it's as little as two couple of paragraphs, and you're just going to explain what it is you're going to talk about, why you're the best person to talk about it. And so you'll fill out that and abstract. You'll submit that and then you'll wait. And you kind of do a lot of waiting with the conference speaking game.</p>
<p class="p2">And what I found initially, I think the first year that I submitted that I really decided I was going to do this. I talked to some other speakers and they said, you're going to have to submit 2030 maybe 40 conferences before you actually get accepted, because the first one is really hard and. You have no idea what you're doing.</p>
<p class="p2">And so I've found, I think my acceptance rate in that first year and still is probably like 10 to 20% so it's pretty low to be honest. And so you, you may have to submit to 10 20 conferences before you get your first acceptance and that's okay. That's normal.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yes. It's insane though.</p>
<p class="p2"><span class="s2"><b>Karl: </b></span>It's like job interviews and because it's this two sided matching that's really hard to do, you can never fully predict what the conference is looking for.</p>
<p class="p2">You can read their website, you can try to tailor your talk for them, but like at the end of the day, you can only sort of adjust so much and they don't exactly know what your talk is going to be and they can't fully understand it. Even if you write a great abstract. So it's like this imperfect knowledge on both sides means that nobody makes perfect decisions and it's impossible to get 100% acceptance rates,</p>
<p class="p2"><span class="s1"><b>Adam: </b></span></p>
<p class="p2">It seems to me that there's like some. What I'm thinking of is like saved by the bell where Zach has like two dates to the prom or something, right? Where I'm going to apply to like the JS conference and then the rust conference, and they'll both be like, okay. And I'm like, I can't be in Munich and the Prague at the same place.</p>
<p class="p2"><span class="s2"><b>Karl: </b></span>Right? So that does happen. And even in just a couple of years doing this, I've had to. Sort of decline one or two invitations that were conflicting with either something that came up after I had applied or another conference, and so it's perfectly okay to decline. They know that a certain percentage of the speakers they invite will decline.</p>
<p class="p2">That's kind of part of the whole thing. There's some people that speak at dozens of conferences a year, and for them it's a whole scheduling challenge to just figure out. Where they should go and when and who's going to invite me to what. So anyway, it can be actually a pretty challenge, but in your first year or two, if you're submitting 10 or 20 conferences and you're getting a couple of sentences, there's probably not going to be a ton of overlap to worry about.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>How soon do you find out? Like I'm still imagining my scheduling being hard.</p>
<p class="p2"><span class="s2"><b>Karl: </b></span>Yeah, it is. And so usually the way I've handled this is like. I sort of will apply to a conference and I'll sort of have their date of what that conference is written down somewhere. Either a spreadsheet or, I use CFP land's tool for this, but like you can just kind of keep track of that event date so you'd know you don't have too many you've applied for in the same weekend maybe.</p>
<p class="p2">And then I don't go as far as walking it off on my calendar until I get accepted, to be honest, because there's such a low chance of actually being accepted. But they'll usually start sending out acceptances. Anywhere between two and six months before the conference happens. So usually you have quite a bit of lead time.</p>
<p class="p2">Usually it's more like four, five months of time, and that's plenty of time for you to decide like, is this really gonna happen or am I really going to do it or do I need to book a flight or is this not going to happen for me?</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Are you prepared to do the talk before you're accepted?</p>
<p class="p2"><span class="s2"><b>Karl: </b></span>Usually not. Um, now this is normal.</p>
<p class="p2">I, so this is another thing that I've, last year I interviewed about 35 different conference speakers. Just asking a lot of these questions like, you know, how do you prepare? How do you submit? Like, where are your tips for this? And, um, I found that most of them don't have the talks already before they submit.</p>
<p class="p2">Now the nice thing is you can reuse talks. So in your first year and my first year, I think I had two talks that I was submitting. So I was submitting both of them to every conference every time. And they weren't always, always both. Right. For every conference. I'm sure I was wasting some time there, but it was just easier to kind of try to tweak it a little and make it seem okay and then submit to, and then once those started getting accepted, it was like I only had to pair two actual talks.</p>
<p class="p2">So I did think six or seven conferences and that after that first year, and they were all like. I basically just only had to prepare two real talks. And so it wasn't as much work as it sounds like. And that's usually what speakers will try to do is get the same two to five talks, except it as many places they can so that they only have a limited number of presentations that are actively giving.</p>
<p class="p2">They take time, and then in the weeks leading up to the presentation, you're going to get accepted. You're going to know there's four to. Three or four months at least before the the conference itself. So you might try to submit that talk as an idea to a local meetup so that you can practice it there. Or you might schedule a company lunch and learn so you can practice there and you may just schedule on your own in front of the bathroom mirror, which is what I do a lot of.</p>
<p class="p2"><span class="s1"><b>Adam: </b>Before you get there, w</span>hat do you do in front of the mirror? Do you have your slides and you stand in front of the mirror</p>
<p class="p2"><span class="s2"><b>Karl: </b></span>and, yeah, so I, this is so nerdy and I don't really care that it is, but I like to. Kinda know what my body language looks like when I'm giving a talk. So if I just do it out in the middle of the living room, that's okay.</p>
<p class="p2">But I don't really know what I'm doing with my hands, and if I'm standing in a natural way. So I'll try to like do it somewhere in a room where I have a mirror to look at so I can kind of see, you know, am I. Making appropriate facial expressions at appropriate times and like sort of moving around in a way that makes sense.</p>
<p class="p2">Just awareness of my own body language before I actually get on stage and do this in front of people. I don't know that every speaker does that, but I did find from talking to speakers that the broad majority of them practice a lot and a lot more than you would think anywhere between 10 and 30 times.</p>
<p class="p2">They'll sort of practice their talk. Usually it's just to themselves in front of a, you know, in a conference room or in front of the mirror or. Going to meetups or traveling to other companies to try and give it there, and so it is important that you practice. I think that's one of the things that helps lower your nervousness and make you more effective as a speaker.</p>
<p class="p2">There's a couple of good talks and I'll send you some links. There's one by a guy named Nicholas means he gives a talk on what happened at three mile Island and. It's just this amazingly intricate and detailed engineering story about the disaster and your disaster at three mile Island. And he's clearly rehearsed it a lot.</p>
<p class="p2">Like he knows the details, but it doesn't sound like he's reading cue cards either. And hitting that balance is what I find really challenging. Um, and I think a lot of speakers do, and it's probably something we all could work on, especially because. You don't want your slides just be a bunch of bullet points that you're reading from.</p>
<p class="p2">You want to sort of have more of a image on the slides and you, you do the speaking yourself in an ideal world. So anyway, that kind of getting into the mechanics of speaking, and that's a sort of a whole nother topic. But I think finding a way to make yourself sound like you know what you're talking about and you have rehearsed this and you're clearly.</p>
<p class="p2">Knowledgeable, but also not a robot is that challenge that we all have to face.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>It sounds like you have had a lot of public speaking experience before you even tried to speak at a tech conference, like what would you recommend for somebody who doesn't have that kind of experience?</p>
<p class="p2"><span class="s2"><b>Karl: </b></span>Yeah. The biggest thing is practice and just doing it, getting more comfortable doing it.</p>
<p class="p2">Like a lot of. Skills. Public speaking isn't a, there may be some natural aptitude that some people have, but it is mostly how much you cultivate it and practice it and do it. You know, I was lucky, I guess in a way that from the time that I was a kid, I was kind of in different church choirs and places where I was sort of up on stage and couldn't get off.</p>
<p class="p2">So I think in a way that set me up to be like a little more open to public speaking than some people. But even if that hasn't been your background, there's no reason you can't start small. With the things that are just slightly uncomfortable now, but not out of your reach. So that one, for example, whenever I hire new employees, I have them give a six week presentation where they get in front of, we support one of the company and sort of give a quick overview, 30 45 minutes.</p>
<p class="p2">What they've been doing in their first six weeks. Kind of what they learned, what projects they worked on. If they fixed a little bug or they, they cleaned up some texts somewhere, I'll have them put that in there so everybody knows that they're contributing and it's a way for other people to get to know them, but it's also a chance for them to practice this skill of public speaking, because I think it's pretty critical that at some point, as an engineer, you're probably going to do some of it, even if it's just your team, even if it's just in a casual setting, it's still important.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah, because there's just communicating . Even if you're not going to public speak, like, you know, I ended up talking to people at my company, or even if it's just a singular person, but somebody very important. So it kind of gets your nerves up and then,</p>
<p class="p2"><span class="s2"><b>Karl: </b></span>yeah. Yeah. And then you think about job interviews. I mean, very rarely are we gonna stay in the same job for 30 years and then retire.</p>
<p class="p2">We this, the field seems to be moving where people change jobs pretty frequently. And so every time you go into a job interview situation, it is essentially. The biggest test of public speaking that you're going to have. And I think having practiced that in other situations is actually helps a lot with sort of making you ready for those, those really high pressure situations.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>I feel like we skipped over some steps. How should I think about choosing a topic?</p>
<p class="p2"><span class="s2"><b>Karl: </b></span>Yeah, so there's a number of ways to do this and different people sort of. Think about this differently. So from talking to a lot of speakers, some considerations you should put into your mix. Does it fit the conference? So if you're gonna apply to a Ruby conference, don't submit a bunch of Python talks.</p>
<p class="p2">It's just not gonna work. You know more than that. Sometimes you'll find the conferences have a specific agenda or theme for the year. So look at the CFP page, read it and see your talk. Actually make some sense for it and that'll avoid you submitting a lot that don't make sense. Or preparing a talk with doesn't make sense for the audience that you want to think about.</p>
<p class="p2">Whether the talk itself will get you excited and is something that you're like actually interested in talking about. Because like I said, you're going to spend a lot of time practicing and. Reading about this topic and learning it because you don't want to get up on stage and look like you don't know what you're talking about.</p>
<p class="p2">So a lot of the speakers I talked to last year were very passionate about their topics, whether it's something very technical, like writing Java plugins or it's something very nontechnical and kind of a softer skill like. Building business off of there, you know, whatever technology they're using. And so whatever it is, you should sort of shape your talks around something you care about.</p>
<p class="p2">You obviously want to pick something that you know well or think you can learn pretty well. And that can mean a lot of different things. Different conferences are going to have different. Thresholds of how technically difficult they want the talks to be. So this kind of goes back to that first point, which is it makes sure, you know, if the conference only wants senior-level talks, that you don't submit a bunch of introduction to X or Y.</p>
<p class="p2">Uh, but think about that and think about if you're the right person to give that level of difficulty. The good news is that most conferences want a variety. Of experience levels to be represented, because the truth is the audience is going to be a mix of junior and senior mid-level and managers probably.</p>
<p class="p2">So whenever you pick, you can definitely give a entry level talk. There's nothing wrong with that, but just know what level you're shooting for.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>I have a sense that like people don't do enough beginner or intermediate talks. Maybe this is just my skill level, but it's like when I go to a conference, there seems to be more things where I'm like, I'm not quite sure what they're talking about.</p>
<p class="p2">Then things where I'm like, this is too basic for me. Do you think that's true or that's just me?</p>
<p class="p2"><span class="s2"><b>Karl: </b></span>Well, I think everyone's knowledge is spiky, and what I mean by that is some people it's like maybe I know the front end really well, but I don't know much about backend. So I may be a senior level, front end person with a junior level backend knowledge or a entry level database knowledge, because I've never had to deal with those technologies.</p>
<p class="p2">So just because a talk is. It sounds entry-level or whatever. It doesn't mean it is for everybody. And the same with senior-level talks, like you can be a senior engineer who knows nothing about, like we were talking about the Linux kernel, but you know, our field is just so broad that, and everyone's knowledge is a little spiky, that the levels are a little arbitrary.</p>
<p class="p2">I feel like. And it sort of simplifies the problem to call this a senior level versus a junior level talk. It's not that simple. But I will say that I would generally agree that. There's plenty of space in conferences to have junior level talks. A lot of conferences are, I think, becoming more aware of this and starting to try to find speakers who are new to speaking because they tend to be on the more early end of their career.</p>
<p class="p2">And I think that that's something I've seen more in CFPs as I've looked at them over the last few years as they want. Say they want a certain percentage of their talks to be from first-time speakers. And it's a great way to get people up there who haven't been giving talks and maybe they aren't giving, they're early in their career, or maybe they're from an underrepresented audience group and want to be on stage and sharing what they know.</p>
<p class="p2">So there's a lot of advantages to that, I think.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah, if I want to speak at something like step one is like build something really cool. So like spend three years building a new. Database or something. Right. And then try to tell people about it. So you haven't mentioned that at all, like you haven't mentioned.</p>
<p class="p2">Creating something, or I dunno, be the creator of some huge open source project or et cetera.</p>
<p class="p2"><span class="s2"><b>Karl: </b></span>Yeah, there are certainly people who are, but not many of them. I mean, you know, when you think about the millions of software engineers that are out there, and the tiny percentage who make an open source library that is used by more than a thousand people, the reality is there's just not many of them.</p>
<p class="p2">And most of them are busy people who have jobs and careers outside of speaking, and so they can't just go to every conference and talk about it. Somebody was saying that there's this fear that you know, you're going to submit a talk about react, let's say, and then the creator of react is going to submit a talk about react and you're like, well, I'm baffled.</p>
<p class="p2">You're going to lose that one if it happens, but it's very unlikely that that's going to happen. You know? I don't know who it is that created, I don't remember the name, but they cannot be everywhere at once. And so the great thing is there's a lot of conferences that are. Sort of focused on specific technologies in maybe even regional areas.</p>
<p class="p2">So for example, if you look for JavaScript conferences, you're going to find local to city JavaScript pamphlets. I've been through like a New York JavaScript kind of conference. There's even a New York node conference that's a little different. And so there's just so many little niches of conferences that there's no reason you can't be the person in your tiny little area that is pretty knowledgeable about that topic.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Should you be afraid of? If I'm like, Hey, there's this cool library, I have some certain fear that like, Oh, the creators in the audience, and he's like, actually, I stopped using that. It's no good.</p>
<p class="p2"><span class="s2"><b>Karl: </b></span>I've done this. And then not the best way. So I gave like a talk at a meetup about this node framework called nest.</p>
<p class="p2">It's uses TypeScript. I really liked it. So I gave a talk and somebody started asking questions about whether you should use it with serverless. And I'm like. Honestly, I have no idea. And you know, I'm like, I don't, you know, can't imagine it would be the best for that. And then the next week, somebody from the nest team messaged me on Twitter and it's like, you know, we actually do support that, that serverless thing that that guy was asking about.</p>
<p class="p2">And I'm like, Oh, so of course I'm getting called out after. I don't know. I think that people know you're trying your best and you admit you don't know things. That's fine. You know, nobody's going to be mad at you about that. And as long as your talk description is clear. Sort of what you're going to cover.</p>
<p class="p2">There shouldn't be a surprise. So if in other words you say you're going to cover building your first react component and someone asks you about some really obscure small part of react that had nothing to do with what your talk was, I wouldn't expect you to know that necessarily. That goes back to the whole, like.</p>
<p class="p2">Throw it to the audience and see if they have any ideas or have dealt with that problem because you can't be an expert in every single thing.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah. I feel like there's a certain talk persona, and maybe it's just in my head of like the very polished expert who's here to tell everybody how things work, and I don't feel that that's me.</p>
<p class="p2">Right. I mean, I have this podcast where it's basically me asking smart people stupid questions, like the persona of like, Hey. I'm the expert. How do you approach that?</p>
<p class="p2"><span class="s2"><b>Karl: </b></span>Yeah, so there's a couple of ways that I think people do a good job of addressing that problem. And you're right, like coming off as I am, the guru of X technology is really hard to do legitimately.</p>
<p class="p2">So I think a better way to approach that would be to. Sort of take a personal story of your use case for a certain technology and tell the audience a your honest story. So for example, I used to do a talk a couple of years ago about microservices and it's kind of a microservice slash sort of service oriented architecture for small startups.</p>
<p class="p2">And the sort of trajectory was we started off, we had this huge model. If we had no idea, you know, what we were doing, it was kind of like, and here's how we started breaking it up and making the pieces more digestible and learning to test it. And it wasn't like. I'm an expert on microservices and I know how to do it.</p>
<p class="p2">It was more like, here's the things we tried and what did work and didn't work, and the tech stacks we were using, but like, it's great because I give that talk and then immediately people in the audience have, they sort of like have their own experience to throw in there. And so it really invites a lot of participation and people sort of.</p>
<p class="p2">Being okay with just kind of timing it because nobody in that room is necessarily setting themselves up as the expert who knows everything. I'm not telling you this is the way to do microservices. I'm giving you one story about how I did them once and there's lots of room for improving and changing.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah. I like that. It's a case study or something like this isn't Carl's rules for microservices,</p>
<p class="p2"><span class="s2"><b>Karl: </b></span>right? The older I get, maybe the less, I believe there's an absolute truth and way to do everything.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span> Yeah. The other distinction that I perceive, it seems easier to give a talk about something that is a hard piece of tech than like career advice for developers or something that could be very valuable, but it's less specific.</p>
<p class="p2">It's harder to evaluate. I feel like soft talks are like for the keynote speaker who's famous,</p>
<p class="p2"><span class="s2"><b>Karl: </b></span>so these talks that are not heavily technical. And maybe more about people skills, team management and things like that that are fuzzier. They are harder to give ice. I would agree with that. Maybe it's just because I'm an engineer and that's like know my brain goes to engineering, things that likes absolutes and it likes black and white, right and wrong.</p>
<p class="p2">And you know. Evaluating decisions with data and all this stuff that is really, really hard to do when you are talking about something like team management or feelings or performance reviews with team members, like all that stuff is very hard. So I agree with you now that said, I kind of like the speakers who bring it back to a personal story again because I think.</p>
<p class="p2">That is really a powerful way to convey that these things I'm telling you are not absolutes. They are just one experience and we kind of, we form ideas about things based on all the data we have. And that data might just be a lot of stories because those top 10 lists, they kind of blow in your brain and write out.</p>
<p class="p2">Cause there's nothing really memorable to dive in there. But the more you can tell the stories that like link it into something that's memorable, I think the more your audience will receive and sort of ingest that information.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>It's like the sneaky soft talk where you're like, I'm here to talk about Docker, but it's really a talk about how learning has changed my life.</p>
<p class="p2"><span class="s2"><b>Karl: </b></span>Yeah, I mean that could definitely be one way to do it. And I think, again, this is like there's sort of, I don't want to like discourage new speakers from talking because that sounds really hard to do and it because it is, I think there's sort of tiers to where people get in their speaking careers.</p>
<p class="p2">I'm way down here in the early stages, like trying to learn it all. It's sucking information from as many people as I can, and I see people all the time who are in the, like the keynote stage of their career where they can give these. Big talks that are just so inspiring, like Ted talk level things. Yeah.</p>
<p class="p2">And, and to me it's like, man, I don't even know where you start there, but I think you have to start down here. You start down in the low low, like just doing what you can and you get a little better and you keep getting a little better. And maybe eventually you do get up to where you're giving these keynote talks and you've got these really inspiring stories to tell people, but it's about being kind of critical and thinking through how you want to get there.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>I talked to somebody, they had applied to a lot of conferences as sort of a way to travel around, and the method that was described was. To gather a bunch of buzzwords that were popular and put it in Excel, and they had some sort of like, pick a random word from this row, and then this row and this row, like mad lips.</p>
<p class="p2">So how do talks get chosen?</p>
<p class="p2"><span class="s2"><b>Karl: </b></span>Yeah, it can vary quite a bit from conference to conference. Most of them have a CFP process. If they don't, then they just straight up invite the speakers they want to speak. So some conferences. Do that because it's simpler and they want to have control over every talk comes in, but accepting those, because you just have to be a woman speaker to get invited.</p>
<p class="p2">Most of them will have a CFB and it'll open up and they'll either do one of a few ways they can evaluate. Uh, so the submissions, they could do a rolling review where every time submission comes in, they check it and they see if it meets certain criteria. And if it is, they might accept the speaker or accept that talk and then kind of move on and evaluate the next one.</p>
<p class="p2">In that case, you're, it's beneficial to get your talks in as early as possible. So that's interesting. And sometimes they'll tell you they're doing that. Sometimes they won't tell you, so you sort of just have to know or learn or ask the organizers. But that's kind of a rare thing. Usually what they do is they wait until the end.</p>
<p class="p2">When they have gathered, say a couple of hundred submissions or more, whatever the threshold is, and then they are before the deadline, and then they'll just sit down as a committee of organizers and they'll decide which talks they want based on some predetermined criteria. Usually. And usually that's things like the uniqueness of the talk, the interest level, the topic, the buzzwords included might be a criteria.</p>
<p class="p2">I don't know. I haven't been on a conference selection committee, but I've talked to a couple people who have organized conferences and you know, they've told me basically what they realize their job is to sell tickets so that they can keep doing the conference, but they also want to like give speakers and opportunity who are new and.</p>
<p class="p2">From different areas to kind of just bring in new perspectives to the community, which I think is really cool too. So there's a mix of things happening and how they make that selection, but usually it's done by the organizing committee.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>I want to submit my abstract and I want it to get picked. So you know what's the key to that?</p>
<p class="p2"><span class="s2"><b>Karl: </b></span>Hi, I hate to. Cop out, but it depends is definitely the answer here. So when a conference opens up their CFP, they're usually going to include some details on the CFP website. It'll tell you like what topic areas they're looking for or what focus the conference has. So matching your talk to that focuses.</p>
<p class="p2">The first thing, but also just writing a good abstract in general is a skill in itself. And this is kind of an interesting thing I didn't find out until I got into speaking, was that there's the skill of public speaking, but then there's the skill of writing the abstract and it's like taking a lot of information that's going to be an hour long slide show and putting it into</p>
<p class="p2">Two paragraphs like that is a skill and it certainly can't be discounted. And I think some of the best speakers or most prolific speakers at least are very good at abstract writing and maybe they could be average speakers making your abstract compelling, and that's a whole skill in itself. The conference organizers are also looking for a good blend of topics.</p>
<p class="p2">So what this means is if there are tons of people submitting about react, they aren't going to just take 10 react talks. They're going to like sort of vary it up and maybe they're going to talk to have one person talk about react and they're going to have another person talk about. Vue, JS or angular or whatever.</p>
<p class="p2">Um, so they're gonna look for that. They're also going to look a little bit at the speaker's prior reputation. And why this matters for is a couple things. One is a well known speaker will draw some audience members. So that's, that's part of it. But also people who've spoken before are less likely to flake out or be unreliable or sort of blow it when they get on stage.</p>
<p class="p2">So to be honest, conferences are trying to de risk the fact that new speakers. There's some level of risk involved. They could also be looking at the cost of transporting you and the hotel that you're going to stay at. So in other words, local speakers might get preference in some conferences, especially if they're smaller community run conferences that don't have much budget to pay speakers.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>How do these costs get covered?</p>
<p class="p2"><span class="s2"><b>Karl: </b></span>Great question. So this is a whole nother thread that every few months a thread on Twitter will crop up. That is people debating whether, you know, speakers should get paid, whether they should get all their, their costs reimbursed, or whether these community run conferences.</p>
<p class="p2">It's not their obligation. Maybe the companies should cover it instead. So there's no right answer here. And it depends on the conference. I've seen a few things in general, about 30 to 50% of conferences that I collect for CFP land. Have either travel or hotel or some combination of those covered for all their speakers.</p>
<p class="p2">So it's not even half of conferences cover that and probably only. Three to 5% of conferences give you a stipend on top of those costs. So it's actually pretty rare to get paid anything to speak in tech conferences, but it's not that rare to get at least your travel and hotel bills covered. So that's kind of</p>
<p class="p3"><b>Adam: </b><span class="s3">nice.</span></p>
<p class="p2">My wife took me to this like home show around here and it's like you pay to go into an arena where people are like selling things like a hot tub or whatever, and I paid to get in there. The people selling things there, they paid to be there. So I found the whole business model like, well, it's genius, but confusing, right?</p>
<p class="p2">Like why? And I guess conferences, they seem similar to like what is the business model behind the conference? Or is there one or,</p>
<p class="p2"><span class="s2"><b>Karl: </b></span>no, that's a great question. And honestly, I think a lot of speakers don't ever ask this or think this. It's kind of too bad because conference organizers most of the time are very idealistic.</p>
<p class="p2">Good. Meaning people that want to make a community better and they don't always do a great job of that. Sometimes they screw it up massively, to be honest, but I believe most of them have very good intentions. Now, the way that a conference makes money is either they sell sponsorships and or they sell tickets and usually comes to this do both, but some conferences are only one or only the other.</p>
<p class="p2">And it's interesting too, that every conference has a different actual business structure. So for example, a lot of the smaller conferences, local conferences might be either non-for-profits, which means that they can't make a profit at the end of the day, and nobody can make really money off this thing other than just sort of cover their costs, or they're actually for profit companies that that.</p>
<p class="p2">Create conferences for brands or their brands themselves that create the conference. So I'll kind of give an example. Like AWS throws a big conference every year, and the goal of that conference is to get a bunch of developers in one place. They can. Sort of teach them and sell them on AWS products, right?</p>
<p class="p2">So it's very clear that their goal is like this is a cost of marketing cost for them. And so they probably subsidize the conference. I don't know how expensive it is to go, but it's probably not as expensive as it could be because Amazon wants you there. And that's kind of one end of extreme corporate end of the conference world.</p>
<p class="p2">On the other end are these like smaller community based events where maybe a local meetup organizer decides they are going to. Trying to get a couple of hundred people together to do a local conference. And for those, usually they're going to have to get sponsors to help out for the cost. They're going to get there and sell tickets for at least a couple of hundred bucks a piece to sell to cover their costs.</p>
<p class="p2">They have to rent a space, which is by far the biggest expense. And they'll probably have to provide some food. They may have to pay for speakers, travel and hotel lodgings. So anyway, most conference organizers at that level. Make very little to no money or lose a lot of money on the effort. I've known several conference organizers, I've never known one who got wealthy off of the conference organizer game.</p>
<p class="p2">Most of them do this as a sort of social good Goodwill sort of thing. And so to keep that in mind as you're applying to speak, and you're kind of. Peeved about the conference, not covering your costs, like they're probably not making money.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>That's good to know. Are there counterexamples like,</p>
<p class="p2"><span class="s2"><b>Karl: </b></span>yeah, I mean, there are, and you can certainly dig into from the conference website, you can probably figure that out.</p>
<p class="p2">Like if it's run by a, uh, an event organizing company that, you know, does this professionally, then maybe they do have a profitable business. But even a lot of those event organizing companies, they're not an extremely profitable businesses. I mean, you know. They're just small businesses, like a couple of people running this because they enjoy it.</p>
<p class="p2">I've met a couple of people that do that as well, and I don't know, it doesn't feel like this big faceless corporate entity. We don't see as many of those in tech conferences right now. Yeah,</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>no, that's very true. So once I get selected, what do I do.</p>
<p class="p2"><span class="s2"><b>Karl: </b></span>One of the things I found as I was speaking and getting invited to speak was that the conference organizers may or may not tell you exactly what to expect and when, as as you get ready for the conference.</p>
<p class="p2">So it's kind of on you as speaker to figure out your timeline and what you need to have prepared. Usually. I try to have like everything worked out with my employer as far as like time off and all that, at least two or three months beforehand, just so I know I'm going to have the day, the days off or you know, be able to be remote those days.</p>
<p class="p2">I may also double check with the organizers on the dates and location because to be honest, like I said, running a conference is really hard and it takes coordination between places, times and money. That is actually pretty challenging to work out and sometimes maybe a venue gets sort of like. The sides, they can't do it that week.</p>
<p class="p2">And so they may have to move it to another venue or they may have to change the date. So just double check on all those things. Either check the website or email the organizers a couple months ahead of time, make sure you're in a good spot. And then beyond that, you've got to do a lot of logistical things on your own, like book the flights and hotel rooms that most of the time conferences won't do that for you, but you can ask if they will.</p>
<p class="p2">A lot of times they would prefer if you just submitted receipts to get reimbursed rather than they pay up front and it's just easier for them from a cashflow perspective. So that's something to think about. You may, in some cases, if you're going to travel internationally, you have to have like a passport and all that stuff.</p>
<p class="p2">So make sure you have that ahead of time. That seems obvious, but, well, if you're us centric, like I am abused, you're living in the U S like usually you can travel over the U S and there's no restrictions. But like in somewhere like Europe, it may be, you know, more common that you're having some form of international ID.</p>
<p class="p2">So just be ready for that sort of paperwork. And then. There's a lot of times a speaker dinner or speaker after hours event where you'll get to meet some of the other speakers, so try to get some details on that. Make sure you go to those. I found those to be one of the most fun and helpful sort of networking events in tech and that's like you get to sit down with a bunch of other speakers.</p>
<p class="p2">Most of them, I always feel like. Way under, I feel way outclassed by these people. Like they are way sharper than me, more experienced, and it's always fun to learn from them and just try to pick their brains. And then as you get closer to the date, you're going to, you know, hopefully you're practicing, you've got your slides going, all that good stuff.</p>
<p class="p2">Um, there's some of the other things you want to think about are like, are you going to go to other sessions? Which I would recommend that you do, but you may want to look at the schedule and see what other sessions would be fun to attend that maybe there's other speakers, you know, things like that. You want to also think about how you actually get to the conference from wherever you're staying.</p>
<p class="p2">So if you're not staying in the sort of. Conference hotel, like there's all this logistical stuff is my point that they don't necessarily give you. So be ready for it. And then once you get there, what I like to do is try to test out my laptop and presentation on the exact same equipment that I'm going to be giving it on.</p>
<p class="p2">Because in most cases, the event venue will have, you know, projectors and all that stuff that you can plug right into. But. You want to try it ahead of time so that you're not debugging lives if it doesn't work and you have hopefully a backup plan of like email your slides to somebody or something like that.</p>
<p class="p2">And then the other thing to think about here is what happens when inevitably you're giving a talk in the wifi goes down. Do you have all your slides backed up? Do you have like a video of your demo? You were going to give all this stuff that could go wrong because there's that whole, if it could go wrong, it will go wrong at some point.</p>
<p class="p2">If you speak enough, you're going to hit . One of these times. So I would just be ready for that. Like I've unfortunately seen speakers who didn't have a backup plan and something went wrong and they forgot their slides or lost them, or the power went out or something weird and they would just stop.</p>
<p class="p2">There's like nowhere to go. So you can't avoid all that. But try to think about that. And then when you get there, you're leading up to, your, getting up to your time is closer, figuring out what your sort of prep needs to be. So some speakers I've talked to, they have like funny little rituals they go through and you don't have to have anything.</p>
<p class="p2">You know, really cool. But one of my favorites is, uh, Alex Lakota. He's a Lucado, so I think it's how you say his last name. He, uh, is a speaker and Nikki goes into the bathroom before his talk and just starts celebrating, just acting like he wants something. And he did. It's like, it doesn't matter what. I just want to get in there and get pumped up, get that energy going, get moving, get like jacked up.</p>
<p class="p2">And he'll just beat on his chest and like, that's how he gets himself hyped up. So you don't have to go that far if you don't want. But I think it's good to have, like a lot of people have pop up songs they listen to or like they'll go run around the . Building real quick, maybe 30 minutes before just to get their blood moving.</p>
<p class="p2">I don't know. I, yeah, figuring out what works for you. And then, um, as you give your talk, start thinking about, well, you know, as you sort of wind down, you have to decide if you're going to get questions time or not and that you probably want to think about head time. A lot of conferences will either say we do or don't encourage questions, but if they don't say you can kind of pick what you want to do, you can tell people either I'll take questions while I'm on stage or maybe tell them I don't take questions on stage.</p>
<p class="p2">But. Afterwards, come meet me in the hallway. I'll hang out there for a few minutes. That can be good too if you don't want to like get yourself on the spot, which can feel a little awkward.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah. What's your preference on questions?</p>
<p class="p2"><span class="s2"><b>Karl: </b></span>I enjoy them, but I understand why people don't always, so I don't think there's a right and wrong answer.</p>
<p class="p2">I think it's kind of what works for you. I like the ability to get the audience involved. And so when someone asks a question, and even if I don't know it, I'm okay with pushing it off to another audience member or saying, I'll look it up and get back to you.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>There's always somebody at the conference who like asks a question and then it's not even a question.</p>
<p class="p2">It's like, it's like you talk and like any questions and there's somebody who's like, that was neat. Let me tell you what, something I did that was better.</p>
<p class="p2"><span class="s2"><b>Karl: </b></span>It does happen. That's probably why so. That's probably a big part of why some speakers don't like questions because that's just very distracting and annoying.</p>
<p class="p2">I don't know. I was looking at it is like I just got my 45 minutes to talk on stage. If you want to now have two minutes, I don't care. I'm not going to fight you.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Nice. Now you've done it. You completed your goal, so was it everything you thought it would be to be a speaker?</p>
<p class="p2"><span class="s2"><b>Karl: </b></span>Yeah, I guess I'm still doing it.</p>
<p class="p2">I've really enjoyed it. The biggest takeaways have been I enjoy the chance to travel and meet. People that I never would have had the opportunity to meet in person before, whether those are attendees or other speakers or the organizers. The connections to me are the really most valuable thing because at the end of the day, you could probably go online and watch a lot of these conference talks in video form, and so the information itself is going to be available soon, but the FaceTime you get with other humans is not easy to replicate other places.</p>
<p class="p2">So biggest takeaway has been that I still do it because. I enjoy all that side of it, and so I don't think I'm going to like stop completely, but I've definitely slowed way down. I'm trying to do more like that. Two conferences a year, which is, it seems like a nice number for me, partly because I just had a family and just had a baby.</p>
<p class="p2">So added to the family. And so it's a, it makes it a little harder to get away. And I feel like I just, I enjoy being home as well because having a new baby is like a new whole new experience at home. So doing less, but still still doing stuff.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>And out of your current speaking experiences, like what was the most powerful or rewarding experience?</p>
<p class="p2"><span class="s2"><b>Karl: </b></span>So. Let's see. I probably have a good one and a bad one that were both memorable in their own ways. And so I'll start with the time. I really kind of blew it. So I, uh, I was giving a talk at a, for an audience that was mostly system administrators and like. Website ministers. They're more than people who work in Drupal and WordPress, other CMSs to update their college websites.</p>
<p class="p2">And so it's like a, it's a different audience than software engineers. You know, there are certainly people with a lot of knowledge and technical ability, but they don't have this, like they don't go in and write. Low-level code. And so it's like basically when I'm talking to a Linux kernel administrator, I have no idea what they do and they think I'm, you know, anyway, so I was giving a talk on testing distributed systems, this group that was a lot less technical than I was used to in the ways that I was used to.</p>
<p class="p2">And so I really did not adjust that. Talk to the audience well at all. And I got up there and start giving it, and I look out in the eyes and it's like clear. Blank faces and I felt like an idiot. I mean, it's like that is the kind of mismatch that you do not want. Like it's one thing if people call you out for missing a couple of facts here and there, but to like throw something at people that they don't understand it all and have no grounding in.</p>
<p class="p2">It just makes you look, you have no idea what you're doing. And to me that was like a biggest failure as a speaker because. Afterwards. You know, I had some, a couple of people said, Oh, that's really interesting, but I had no idea what you were saying. You know, that's way beyond me. And then hello. People were like, Oh, that was good.</p>
<p class="p2">I, you know, I kinda got it. More about this than other people. But like, yeah, it was rough and I felt that's something that I strive not to do again. So in a way that big, like screwing that up once has sort of like made me really conscious of who my audience is and what their level is at different skills before I go in there.</p>
<p class="p2">So I really try to go research like the conference, look at prior talks and. Even ask the organizers questions about what their audience make up is before the actual talk on the other side. I had a, a talk that I did this. The latest one I gave was kind of my favorite one we were talking about earlier, like the challenge of nontechnical talks.</p>
<p class="p2">So I started pitching one this year called stop writing. Code and start solving problems. And the idea is that a lot of times is developers, we tend to jump first to like someone gives problem and we immediately think, Oh yeah, that'd be fine. I'm going to go write a bunch of code that solves it. And that's our engineering brains that want to just build stuff.</p>
<p class="p2">Right. And I'm guilty of this as much as anybody, but I've learned that that is often not the best move for the company. And for the sort of longevity of the project you're working on. Because oftentimes what we do is we reinvent the wheel because we thought that would be really cool to build and we didn't stop and think about was there an open source package that did most of this?</p>
<p class="p2">Was there a vendor that would do this for us that we could integrate with or even sort of higher level is, do we go back and say. Is this really necessary? Like is this the only way to solve this problem or could we maybe do this instead? It's way easier and less technically challenging. And so I noticed that engineers just tend to jump right in.</p>
<p class="p2">And I wrote this talk kind of about that, or pitch this talk kind of about that, and I gave it at a local conference here in Chicago last year. And it was, I feel like I'm starting to get how to give those sort of less technical talks now. It's making me feel like encouraged to do more of that. So I've been kind of pitching that talk versions of that talk a little more lately, trying to get a little less technical and more story-based and things like that.</p>
<p class="p2">So anyway, I don't know that that's super discreet success as much as that discreet failure, but like it's feeling like a kind of inserting to crack a code that works for me in giving those sorts of talks.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Do you think that talk has been impactful.</p>
<p class="p2"><span class="s2"><b>Karl: </b></span>Yeah. So I give it in form of stories. So we've been talking a lot about how I think that's a good method for giving conference talks is to try to tell personal stories.</p>
<p class="p2">And so I kind of was starting it off with how I used to work at GE appliances and I worked in this new product that was called a smart dispense pedestal. Anyway, it just like, it's supposed to be a whole new invention for washing machines, but the reality is it's like they have together 10 or 12 parts that were all available off the shelf.</p>
<p class="p2">They made this thing. Quote unquote unique to GE, and it's a lot of it's marketing. A lot of it is just like, the truth is that most inventions are just a product of what has come before them. That's just how it always has been. We just kind of overlooked that because it's so, I think it's just tempting to think that that of the story of the master engineer who just knows so much that he or she can just build anything from scratch, and that is just so rarely true.</p>
<p class="p2">You know, you've got, like Isaac Newton talks about. We're all standing on the shoulders of giants. And this just continues to be true. It's even more true in this world where we have open source Wikipedia and like public knowledge base. It's just massive by telling stories. I think it does make some impact on people because everybody afterwards came up to me.</p>
<p class="p2">I've never had people do this, come up to me and like call me something cause they all said, Oh, you're the washing machine guy. I loved that talk. I think that's so cool. And so once you start to get known as the washing machine guy or whatever your talk is, I think that's when you know you've made at least some Impact.</p>
<p class="p2"><span class="s1"><b>Adam: T</b></span>his month and every month developers will be traveling to conferences. They will be watching talks and learning new things and getting excited. Carla from an unknown developer to a conference speaker. From a vague yearly goal to the washing machine guy. Thank you, Carl, for showing us how we could all become conference speakers.</p>
<p class="p2"><strong>Adam :</strong> That was the show. Thank you so much for listening all the way through. Let me know what you thought until next time. Thank you so much for listening!</p>
<strong>Show notes:</strong>
<ul>
 	<li><a href="https://www.cfpland.com/">CFP Land</a></li>
 	<li><a href="https://www.karllhughes.com/">Karl's Personal Site</a></li>
 	<li><a href="https://www.youtube.com/watch?v=Aw5B8XDQLT8">Washing Machine Guy Talk</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1301</wp:post_id>
		<wp:post_date><![CDATA[2020-03-02 05:00:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-02 10:00:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[how-and-why-to-speak-at-conference-with-karl-l-hughes]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="transcript"><![CDATA[Transcript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[157]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1100]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1302]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>The Reason For Types with Jared Forsyth</title>
		<link>https://corecursive.com/048-jared-forsyth-the-reason-for-types/</link>
		<pubDate>Mon, 16 Mar 2020 10:00:02 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1315</guid>
		<description></description>
		<content:encoded><![CDATA[Adam talked to Jared Forsyth about his journey from untyped javascript to using flow and eventually reasonml.

"I mean, I was, I'll admit it I was definitely in the: 'I was scarred by Java and C plus plus in an intro to programming class and I never want to look at types again' Camp"

"My first language was Python and followed closely by Javascript. And so I was, I was loving the loosey-goosey scripting language.

My first experience of using types in JavaScript, I was like is this going to be terrible? Because there's so much overhead in Java and C plus, plus you have to write types for literally everything." <a href="https://corecursive.com/the-reason-for-types-in-javascript/">Podcast Transcript</a>

<strong>Links:</strong>
<ul>
 	<li><a href="http://go.thoughtleaders.io/1758920200325">Springboard Scholarship</a> (our sponsor)</li>
 	<li><a href="https://anchor.fm/reason-town">Reason Town Podcast</a></li>
 	<li><a href="https://reasonml.github.io/">ReasonML</a></li>
 	<li><a href="https://jaredforsyth.com/reason-javascript-flavored-ocaml/#"> Jared's Talk on ReasonML</a></li>
 	<li><a href="https://www.youtube.com/watch?v=RV997YRIMZs">React with Reason Talk</a></li>
 	<li><a href="https://jaredforsyth.com/type-systems-js-dev/#/2">Types in Javascript </a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1315</wp:post_id>
		<wp:post_date><![CDATA[2020-03-16 06:00:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-16 10:00:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[048-jared-forsyth-the-reason-for-types]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="flow"><![CDATA[flow]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="react"><![CDATA[React]]></category>
		<category domain="post_tag" nicename="reasonml"><![CDATA[reasonml]]></category>
		<category domain="post_tag" nicename="types"><![CDATA[types]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1312]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:13:{i:0;s:30:"00:58 -- Started against types";i:1;s:44:"03:09 -- DHH and Rich Hickey vs type systems";i:2;s:30:"06:16 -- Defensive Programming";i:3;s:17:"09:03 -- ReasonML";i:4;s:23:"11:26 -- Reason backend";i:5;s:23:"13:21 -- Inferred Types";i:6;s:22:"16:00 -- Reason vs Elm";i:7;s:26:"19:47 -- React with Reason";i:8;s:25:"21:36 -- On immutability ";i:9;s:28:"24:48 -- Sum types in reason";i:10;s:36:"29:04 -- Typescript vs Reason vs Elm";i:11;s:35:"33:23 -- Javascript that won't work";i:12;s:39:"35:11 -- A plea for types in javascript";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Jared Forsyth]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Web Dev at Khan Academy]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/jaredforsyth">@jaredforsyth</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1566]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-sponsor]]></wp:meta_key>
		<wp:meta_value><![CDATA[Today’s podcast is sponsored by <a href="http://go.thoughtleaders.io/1758920200325">Springboard</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[http://chtbl.com/track/7D91G/traffic.libsyn.com/corecursive/048_-_ReasonML.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[36:35]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[38.8 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[1311]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>The Reason for Types in JavaScript</title>
		<link>https://corecursive.com/the-reason-for-types-in-javascript/</link>
		<pubDate>Mon, 16 Mar 2020 09:00:06 +0000</pubDate>
		<dc:creator><![CDATA[adam]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1322</guid>
		<description></description>
		<content:encoded><![CDATA[Adam talks to Jared Forsyth about his journey from untyped JavaScript, to using flow, and eventually ReasonML.

<iframe style="border: none;" src="//html5-player.libsyn.com/embed/episode/id/13555661/height/90/theme/custom/thumbnail/yes/direction/backward/render-playlist/no/custom-color/87A93A/" width="100%" height="90" scrolling="no" allowfullscreen="allowfullscreen"></iframe>

<strong>Today’s podcast is sponsored by <a href="http://go.thoughtleaders.io/1758920200325">Springboard</a></strong>

"I mean, I was, I'll admit it, I was definitely in the: 'I was scarred by Java and C plus plus in an intro to programming class and I never want to look at types again' Camp"

"My first language was Python and followed closely by Javascript. And so I was, I was loving the loosey-goosey scripting language."

"My first experience of using types in JavaScript, I was like is this going to be terrible? Because there's so much overhead in Java and C plus, plus you have to write types for literally everything."
<h3>Transcript</h3>
<strong>This is a machine translated transcript. Podcast page for <a href="https://corecursive.com/048-jared-forsyth-the-reason-for-types/">this episode is here</a></strong>
<p class="p2"><span class="s1"><b>Adam: </b></span> I have been confused about something. I really like having static type information when I code. When I think about building something, I think about defining types, writing things to map from my one type to my other. That's kind of how I design in my head when I'm thinking about how to solve problem.</p>
<p class="p2">However, smart people, talented people that I know view things very differently. There are skilled people who would leave their job before using language with static types. So I emailed this guy.</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>I'm Jared Forsyth. I am a software developer at Khan Academy.</p>
<p class="p2"><span class="s1"><b>Adam: </b>Jared </span>started in one camp and moved to the other. Well sort of, because now he's all about the inferred types.</p>
<p class="p2">And maybe that's the best of both worlds, but I'll let him explain.</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>I'll admit I was definitely scarred by Java and C plus plus and, um, intro to programming class. And I never want to look at types again camp. My first language was Python and followed closely by Java script, and so I was loving the loosey-goosey scripting language.</p>
<p class="p2">So my first experience of using types in JavaScript, I was like, Oh, is this going to be terrible? Because there's so much overhead and so much because in Java and C plus, plus, you have to write types for literally everything, right? You declared a variable. It has to have an explicit time, any function, explicit type.</p>
<p class="p2">just all over the place and. It was actually really refreshing in flow and TypeScript and also reason, which we'll talk about, we are, so much of the typing can be inferred for you. So you declare a function, you use it one place, and kind of from the contents of the function, the type system can discover, Oh, they're adding this variable to another.</p>
<p class="p2">Those are going to be numbers or strengths depending on, it can be really clever about that so that you don't have to be writing types everywhere, but you do still get the checking and you can hover over a variable to discover what's the type that was infered for this, which is super nice.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Like there must have been some moment where you were like, "Oh, this thing got caught", or "Hey, I can go to definition" or something where you were like, Oh, the light bulb turns on?</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>Thing that really has made it so that I never want to go back. Is the way that having an explicit type system changes the way you think about code. And where are you define explicitly this is the shape of the data that I'm going to be dealing with.</p>
<p class="p2">Here are the data structures. I'm going to lay those out, and then I can write functions that will manipulate those . It results in<span class="Apple-converted-space">  </span>much better organized code. And is it just such a help in me being able to process new code that I'm reading or code that I wrote two weeks ago and I've forgotten entirely about?</p>
<p class="p2">And that was kind of the. Wow. This is essential. Right? Cause like, Oh, it caught a bug for me. That was nice. But like, you know, I'll just not write that bug next time. Yeah. But here are new tools for thought. Here are new tools for writing high quality code. We're now, anytime I'm starting something in JavaScript, I add flow to it.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span> So I had a previous interview with a DHH, who created Ruby on rails. And he was, I think he said he doesn't get it right. He's like, I get, some people really want types. I don't want them. It's like a personal taste thing. So you know, you've made this transition. So I'm trying to figure out, there's a thought process or a perspective that needs to change, or am I just missing something?</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>No, it's true. And I've heard also Rich Hickey, the creator of closure is famously skeptical about types and in fact has come up with a different thing that he uses in place of types, schema. And it's, it's runtime schema checking. But it's not really a type system. So I've also kind of listen to him discoursing on why types are just a matter of taste.</p>
<p class="p2">And so I'm familiar with that perspective. I think it's maybe a cop out to say that we're not talking about the same things, but I think it might be a matter of misperception. . Like I said before, I was sold on static typing. I viewed it as this is going to be a lot of manual labor and yes, maybe it will find some bugs for me, but I can write you in a test and that's fine.</p>
<p class="p2">Right? Certainly the Ruby community is all in on unit tests and w we're going to do exhaustive tense thing and that will be great, but it's possible that you'd be able to find some programmers out there that would say commenting your code as a matter of taste. But I th I think in professional development it's pretty standard that, yeah, you want some doc comments to describe at a higher level, kind of at a human level, here's what this class is going to be doing.</p>
<p class="p2">Here's what this general group of functions is responsible for. And some people take those comments and they're like, Oh, well let's add Java doc to these comments. And in JavaScript, if you add Java doc style comments, then. Yes. Lint can do some things or Google's closure compiler can do some things, but the issue is those comments can go stale if you're like, Oh, this argument is, has this thing, or you know, there are these arguments and type annotations to functions are like comments that can't go sale, and they add so much to the trackability of a code base.</p>
<p class="p2">It's possible that I'm too far removed from when I, he didn't like type systems to be entirely useful to you. But I mean, these days I see code bases that were written without regard to types, kind of like<span class="Apple-converted-space">  </span>digging into<span class="Apple-converted-space">  </span>dynamism that's possible with JavaScript and are just like, we're going to, I had a bunch of random attributes to this object and there's no way to know at any given time which attributes at a tad out to it yet.</p>
<p class="p2">And maybe I should read some of DHH's code, but I would guess that the code that he's writing is easy to type. It's not like, Oh yeah, I love to have functions that take a ton of different types of arguments depending on how you call it. No, that's actually<span class="Apple-converted-space">  </span>bad practice. Generally. So having a type checker just helps you read other people's code, and especially as the size of a team gets larger, keeping everyone on board, it's so much easier if there's something that's enforcing kind of those coding practices.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>It's kind of like the TypeScript slogan about scaling, right? They're talking about like scaling a team actually, not really in terms of the</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>exactly</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Whatever amount of data you're going to throw at it.</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>I can't tell you how many times I, I guess I said this already, but looking at a function and untied JavaScript.</p>
<p class="p2">You're like, where does this value even come from?<span class="Apple-converted-space">  </span>what guarantees do I have? Okay.<span class="Apple-converted-space">  </span>zero I have zero guarantees. So then another direction to take it is I'm going to do a million dynamic checks at the top of this function. Mm. And this is what we had in like 2013 2014 Java script.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Like check the number of arguments</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>and the, yeah, we're, we're going to check the number of<span class="Apple-converted-space">  </span>arguments,<span class="Apple-converted-space">  </span>we're going to do a bunch of type of checks to be like, okay, make sure this is a string and this is a number on this. There's an object that has these attributes. That's so much code that is, you know, it's defensive programming. We've got a better way now and it's fantastic.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah, that makes sense. If you think of that, the type checker is something just doing all that defensive stuff for you, right?</p>
<p class="p2">Yeah. What about prop types and react?</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>Prop types were a gateway drug, I guess the creator of react. Jordan Walker is also the creator of reason, again to Ocaml all begin to types. And one of reacts big selling points early on is this is a framework that can scale because it does really dials in<span class="Apple-converted-space">  </span>hard on encapsulation.</p>
<p class="p2">So these components can be reused. In comparison to angular at the time with kind of the dynamic scoping stuff that was going on there, made it moderately dangerous to reuse code, react, really dialing in on, let's make these things were usable and in order to really deliver on that promise, especially with a team that's large.</p>
<p class="p2">You need to be doing this defensive programming. So react proptypes built in all of those texts for you. And then a couple of years later, along came flow, which was like, we can do this comprehensively for all your JavaScript, not just for your react components.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Today's episode is sponsored by springboard.</p>
<p class="p2">If you want to learn how to write machine learning algorithms or if you want hands on experience deploying a machine learning model into production, or if you want to learn how to build and deploy a deep learning prototype, check out their machine learning engineering career track. When you join this program, you'll be paired with a machine learning expert who provides one-on-one mentorship throughout the course.</p>
<p class="p2">This program is designed for software engineers, so you must have at least one year of experience in a modern programming language like Java or C plus plus or Python. Now, here's the cool part. Cool. Recursive is exclusively offering 20 scholarships of $500 to eligible applicants. Make sure you use code AI springboard.</p>
<p class="p2">When you enroll. I'll put a link in the show notes as well. The 20 scholarships are awarded on a first come first serve basis. Check it out. See if you are eligible. Applying is free and it only takes 10 minutes. Thank you. Springboard.</p>
<p class="p2"><span class="s1"><b>Adam:  </b></span>And then where does reason come into this?</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>So reason is reason is built on OCAML. Ocaml is one of those languages that routinely makes it onto . Gotta learn these five languages to change the way you think about code. You know, there's going to be probably closure on, there are some other lists and there's going to be Haskell and there's going to be ocaml, it's something like 25 years old, been around for a really long time, and a lot of the modern, cool languages are.</p>
<p class="p2">Very much inspired by ML and Ocaml. So Rust, Swift, Scala, these things are, are drawing on the type system that, ocaml, and also to some extent the Haskell have. So reason is and attempt to make Ocaml more palatable to JavaScript developers is really kind of one way to pitch it, right? Because there's so much tied up in syntax that.</p>
<p class="p2">For many people, myself included at the beginning, I was looking at Haskell, I was looking at Elm. Elm is a very cool language, but the syntax is so foreign. It takes me so long to read a snippet of code cause I just don't know how to parse it. Gotta be like, okay, what's the precedents here? How do we deal with, is this getting called with arguments or is it just getting past?</p>
<p class="p2">If you just slap some parentheses and curly braces, it just. Feel so much more familiar. And that's essentially what reason is. It's building a community, bringing in JavaScript developers, and fairly early on reason also got very tied to bucklescript, which is a compiler that will take you're ocaml code and turn it into performance and readable JavaScript.</p>
<p class="p2">So these days, the reason ecosystem is a way to write something that compiles to JavaScript, but that has a, a rock solid type system. And has also taken a kind of a middle ground approach on a number of, maybe you'd say purity questions. It supports mutation if you want it. You can do an imperative style in cases, and sometimes there are algorithms where it's like doing this, the FP way is just going to be, well, orders of magnitude slower, so I'm going to, you know, I'm going to do mutation here.</p>
<p class="p2">It's fine. So there are a lot of, me starting out in reason. I felt very comforted by the fact that I could reach too and do something that the messy way, the JavaScript way. And just kind of get the function written so I can move on with my life and then I could go back and write it better with more safety guarantees, that kind of thing.</p>
<p class="p2">So that's, I don't know how well I described reason for him, but that's what it is.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Well, there's a lot to unpack there. So it sounds like OCAML had could compile to JavaScript, is that right?</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>Yeah, it's got a bunch of backends, so it will compile to native desktop also to Android, iOS, JavaScript.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>But then reason is not okay.</p>
<p class="p2">Most strictly speaking, it's a different language, right?</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>It depends on what you call it. Language is elixir, a different language from Erlang. If you're familiar with those two, Elixir is literally just a new syntax for Erlang. Maybe. I think it has any standard library, but is Scala a different language from Java?</p>
<p class="p2">They both were on. The JVM scholar is probably arguably more of a different language than reason is because<span class="Apple-converted-space">  </span>uses the exact same compiler as Ocaml does, but it is a new syntax and tool chain is often what I call it. We're Campbell.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>So you have, okay, we'll compiler. You take off the front, right, and you put some new syntax on the back.</p>
<p class="p2">Yeah. And then you take off the back and you put JavaScript there.</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>That's right.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>And then, but then haven't you removed everything,</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>Well the type system is the same.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Oh, okay.</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>Yeah. And that's really the bones of, if you look at the, okay, a compiler, the compiler itself has a number of, there's the Lexer, there's the parser, there's the type checker, and then there's the, the thing that generates the assembly, and it's really the only last bit.</p>
<p class="p2">Generally no assembly change it. Well, there's a couple other internal steps, but there's a lot that is shared. And that is. I think the things that make</p>
<p class="p2">Ocaml. Great. The language semantics, if you will. The module system, the function system, all of that is the same.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Ah, I see. I think I get what you're saying.</p>
<p class="p2">It's not just the syntax has changed. It's like the syntax has changed at a very surface level to make it more Javascripty. Like it's still like,</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>yeah. Yeah. So literally you could go through, and I mean initially the changes to the parser, like it was based on the OCAML parser and it was like, let's just switch out, let out some, tell me Colin's here and add some parentheses here.</p>
<p class="p2">In, in the intervening years, it's gotten further from that, but it is still based on the<span class="Apple-converted-space">  </span>parser and has a, most of it is shared.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah. And so we started off talking about types. So it is the exciting bit of reason.</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>Yeah. Especially coming from JavaScript and also coming from flow and TypeScript.</p>
<p class="p2">Reason has an OCAML has an almost entirely inferred type system. So whereas with TypeScript and flow, in order to really. Get the advantages from it. You need to right function signatures or at least for the export functions, and you did write your interfaces and stuff, but with reason I only right data types, right?</p>
<p class="p2">I create the data type and this is like I was saying before, when I'm thinking about a problem, I will write out the shape of the data and then I just use it and that I just used the variables and everything is inferred, but unlike flow and TypeScript. There is no any that would just be pervasive throughout everything, right?</p>
<p class="p2">It's like I can have confidence that it really has my back and the tool chain, uh, the JavaScript compiler for OCAML is lightning fast. That's one of the other things about the O'Connell system in general is generally been written for speed. So if you're used to Scala compile times or rest, compile times or anything like that, you'll just be blown away.</p>
<p class="p2">Like it is milliseconds to do a full rebuild of a reasonably large project. And you used a Webpack or babble or you'll be blown away as well.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Oh, so it might actually be faster than my existing JS.</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>Oh so much faster. Oh wow. Cause the js build system is running JavaScript and JavaScript has a 200 millisecond startup time<span class="Apple-converted-space">  </span>buy to run node.</p>
<p class="p2">You're giving away 200 milliseconds for every process. And your reason build chain can<span class="Apple-converted-space">  </span>completed 10 times in that. I'm going to do that.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Oh wow. I wouldn't have expected that. That's impressive. So you mentioned laying out a data type and then using that, do you have an example that might help us understand?</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>Well, let's see. We could talk to new MVC. What's your, to do item shape? It's going to have a title that's going to have an author. Maybe it's going to have a Boolean for whether it's been completed.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah. So I define a to do item. It has some properties. And then if it were TypeScript, then my functions that dealt with that, I would just put like type annotations on them.</p>
<p class="p2">Right, and you're saying I don't have to do that.</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>No. Yeah, I mean, you create the object somewhere and again, reason tries to be as familiar to JavaScript developers as possible, so it'll look like the same object syntax. And the reason they're called records instead of objects because of complicated past, but you just create the object literal and then pass it around.</p>
<p class="p2">You can access attributes and all that, and you don't have to be. Dropping annotations anytime you want to use it.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>But so can I if I want to.</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>Certainly. Yeah. For the purposes of reading code, especially if you're reading it on good habits. Nice to have the annotations there, cause you don't have the hover for type kind of stuff.</p>
<p class="p2">Nice.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>What else does reason to have? What else makes it</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>unique? I've got a different pitch depending on where you're coming from, right? If you've tried Elm, I could talk about kind of similarities and differences. Mmm. For example, Elm has a. A focus on immutability and sandboxing from JavaScript where the creators of Elm somewhat justified in this say JavaScript is very dangerous, right?</p>
<p class="p2">It like does not give you guaranteed. And so in order to interact with you always, if you need to go through a serialization bridge and we're going to make that asynchronous. And that will make sure that there's no way that JavaScript's unsafety can infect the safety of your own program. I've talked to some people that we're using Elm and we're running up against that a lot and tried reason and we're very happy about how reason.</p>
<p class="p2">Doesn't enforce that we are nearly to the next step. You write your type adaptations for what you expect Java script to give you, and that's that. You can call the function synchronously. There's not, that's the realization bridge. There's not nearly as much work two bind to a node module, for example. Now that comes with unsafety, right?</p>
<p class="p2">If you expect JavaScript to give you a number and it gives you a string, then you've got a run time exception. Oh, I see.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah, so Elm is they want it to be completely sound, so then they lock it down, but. It prohibits adoption to a certain extent,</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>right? I mean, and it can make some performance things more difficult and some other things.</p>
<p class="p2">Now, one thing that I love about Elm that it has kind of narrowed the scope of what it wants to do, right? It is, this is a language for building UIs<span class="Apple-converted-space">  </span>and it's phenomenal at that. Because of that, it can make some tradeoffs. Generally, UIs are not performance bound despite what the demos might suggest.</p>
<p class="p2">Your unlikely to be rendering 10,000 elements on a page. Okay.<span class="Apple-converted-space">  </span>most of us don't do that in general, and so the trade off that it's made, I think are are perfectly reasonable reason. And OCAML are much more of a, this is a language that we can use for UIs. We can also use a per servers and for embedded devices we can use it.</p>
<p class="p2">Two build games and there's a ah, very cool text editor, native desktop, et cetera, are being written in reason. It's just such a wide gamut and that's one of the other things that makes me really excited about reason.<span class="Apple-converted-space">  </span>written and shipped a couple of native Android and iOS apps, Britain, and reason. And being able to learn one language and then right at cross-platform without having the tradeoffs and performance hits that come with react native with JavaScript on a mobile device, that's always going to have worse animation performance.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>How are you writing a Android app in reason?</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>That's right. Yeah. And this is taking advantage of the incredible work that's been done in the OCAML world, where there's no ocaml backend for Android for iOS. So I'm not bringing in NPM libraries.<span class="Apple-converted-space">  </span>my Android app. Yeah. But there is a wealth of code that has just been written in pure ocaml, pure reason, and you can just bring that in.</p>
<p class="p2">Interesting.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>It's really exciting. I could see how it could be a limitation too. And just like you're spreading yourself very thin. If people are using this language to do this and that and not, it's like, I don't know. Sometimes it's really great to have a certain domain where people use things and libraries build up in it.</p>
<p class="p2">Gather steam.</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>Totally. And that is certainly a limitation. I think reasons community has generally coalesced around web development. Reason also has best-in-class react support, so using react and reason<span class="Apple-converted-space">  </span>better than using react to JavaScript. I mean, react was built for types. It was built with types in mind, and JavaScripts types are just not going to be as good because flow and TypeScript are partial type systems.</p>
<p class="p2">Using it as a reason, it is a dream, and so we've got a lot of people doing reaction reason and then certainly much smaller communities doing game development, doing native development, that kind of thing.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>What's the advantage of react and reason? Like what is reason by you in the react ecosystem?</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>It's nice that it's a mutable by default, right?</p>
<p class="p2">You don't have to worry that somebody will accidentally have modified the props because they don't know the conventions of react. There are a lot of things that you can do in JavaScript to completely mess up your react application just by accident<span class="Apple-converted-space">  </span>because JavaScript lets you, whereas it's much more tuned in reason because of the type system and the general program semantics on top of that reason has JSX built in, so you can be up and running immediately.</p>
<p class="p2">Did</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>you say the react creator created reason?</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>That's right. Yeah. Jordan walk was originator of react and you know, helped by a bunch of other really excellent people. And then he also started at the reason project.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Oh, very cool. I'm primarily a backend developer. I do a lot of FP stuff and people use that term very generically.</p>
<p class="p2">Right. And I think, at least in my little group, we mean something pretty specific that has to do with<span class="Apple-converted-space">  </span>types and immutability and kind of composing things. We're trying to always convince other people that this is super useful. It's been a new discovery to me that actually on the front end, people have been figuring this out.</p>
<p class="p2">Like while I wasn't looking, I guess like react seems very, uh. It seems to have a lot of this spirit, I guess in it, maybe.</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>Yes, definitely. That's actually another good point with reason and react because react is built very much in an FP mindset. And the reason I know OCAML are kind of the, what you might think of as the original FP is Ocaml Haskell, like those are the things that people are drawing from these days.</p>
<p class="p2">Unless you want untapped FP and then it's the lisp side of things. But if you want reason has immutability, automatic currying of all functions. And just generally functions are the way to do things as opposed to classes that encapsulate both data and functionality.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>You mentioned immutability. How does that work?</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>So the default is just that all attributes on all objects are immutable. You can annotate them as mutable and then you can mutate them. But the default is immutability and structural sharing. As JavaScript has developed, it's actually gotten more and more reason and so it's, it's easy to move over cause it's like, Oh, object spread.</p>
<p class="p2">I know that my thoughts, how I do things and we've got map and filter and reduce and all these things.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>I imagine though, I'm just guessing. When I do something with immutable lists and whatever in Scala to make it performance, there's a certain implementation, right? But are we just using the JavaScript built in types like arrays or whatever?</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>So, ocaml has arrays and lists, unless they're linked. So if you're using a raise, they are mutable and there are certain cases where you're writing reason and a raise make sense. But most of the time I'm just using the default list implementation and the functional methods that go along with that.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>And like, if I want to. Use something that outputs a reason list, but from JavaScript, like what is it ended up looking like?</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>It'll be a link list. So the buckle script, internal representation is a JavaScript array with two elements. The first is the contents, and the second is the tail, and that'll be another too elementary.</p>
<p class="p2">So that'll get boring pretty quickly. So generally when you are writing interface code between reason and JavaScript. You're converting your list to a race, but like I said earlier, if you're interfacing with JavaScript for the most part, you're not. Can I be running into performance intensive applications?</p>
<p class="p2">You're not transforming a million items and somebody's browser. Yeah, that's true. Yeah. But there is some trade off things where you're like, what's the best tool for this job, right? And there are the hash array maps trie thing that. Uh, that clojure has that. It has some cool properties, their implementations of that for ocaml.</p>
<p class="p2">You can bring in that library if you want, but the defaults tend to be good enough, especially as the JavaScript that is output. The reason compiler or the bucklescript compiler is very performance sensitive and it's very kind of tuned to take advantage of ways to make JavaScript pass.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Well, why would I want something to be immutable.</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>Immutability saves you from spooky action at a distance as generally my pitch, I mean, there's so much uncertainty around I'm doing this thing and I call this function, and what if this function completely messes up the object that I passed to it? Right? So I've got a clone object before I hand it in or whatever.</p>
<p class="p2">Like again, defensive programming<span class="Apple-converted-space">  </span>and in a large code base where mutation is the norm, you just have to be looking over your shoulder all the time. Now in, uh, the code bases that I work on at work, immutability is the norm. And so I generally just trust that I don't have to be worried about somebody changes something out from under me.</p>
<p class="p2">It would be nicer to have that statically guaranteed by the language system. But, uh, we do what we gotta do.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah. So it's like you're working in a world where you just assume immutability, but, and that generally probably works, right? Because everybody has the same assumption.</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>Right? And if you're using react and you're using redux, especially.</p>
<p class="p2">Redox will fail in comical ways if you start mutating objects. And so I think these libraries have done a lot to bring immutability as a norm into professional jobs. Group development.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah. What about some types and algebraic data types?</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>Yeah. It's hard to pitch something that you don't know you don't have right.</p>
<p class="p2">For. So a JavaScript developer is not going to be like, Oh, I always wanted that because they just use other ways to get around it. But if you have done any Swift or you have done Scala or<span class="Apple-converted-space">  </span>Kotlin or Rust and you're like, Oh, I wish JavaScript had sum types I wish it had product types, then reason's got your back.</p>
<p class="p2">So some type is an enumeration. It's like a enum except it can hold data and different kinds of data. And it's so helpful, like there are just so many problems that if you're trying to do it the JavaScript way, you've gotta be doing a lot of checks if you're used to flow or TypeScript. They both have some types called<span class="Apple-converted-space">  </span>tagged unions where you have an object and one of the keys is the tag that says, Oh, this is going to be the loading state, or this is going to be the loaded state.</p>
<p class="p2">So you already have that, but it's nicer and reason to have that built in to have dedicated syntax for it to make sure that you're handling all the cases that you need to. It gets really cool when you're writing a switch statement and you can enumerate over all the different cases, whereas in JavaScripts, switch statements are anemic, like they don't even have separate scope between the different branches of the switch.</p>
<p class="p2">And so like you're just dying inside as you have to come up with different variable names. So they don't.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>I didn't know that.</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>Oh, for right now it's the worst because there's automatic fall for, right. And so like, Oh,</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>I feel like we need to put an example on it.</p>
<p class="p3"><b>Jared: </b><span class="s3">Yeah. </span></p>
<p class="p2"><span class="s1"><b>Adam: </b></span>What's a thing that I would do in JavaScript that will get easier with this kind of some type, like I have two different things that are related but have different data on them.</p>
<p class="p2">I'm trying to.</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>Right? No, I mean the biggest or the most important, some type that we have in our code base that's using flow is our loadable data type. This is for anything we fetched from the network that we're putting in Redux, and kind of the, the naive implementation would be on your reacts component.</p>
<p class="p2">On state, you would have a, a Boolean that is whether I am loading like, so there's loading, which is a Boolean, and you would have error, which is an optional error. And then you'd have data, which is optional data. Right? And so on component dead Mount, you set loading to true and you kickoff the fetch and then when the fetch comes back, either you set the error to something or the data to something, and then in your render method<span class="Apple-converted-space">  </span>I have a couple of his statements.</p>
<p class="p2">If we're loading, then render this. Otherwise if there's an error under this, otherwise hope you have the data and nobody messed up your state and render them with the data. But having a some type that and forces, there are three disjoint States. One of them is loading, one of them is. Loaded with error and one of them is loaded with data.</p>
<p class="p2">You don't have to worry that somebody's gonna accidentally set both data and error to something like how do you render that it's just impossible.<span class="Apple-converted-space">  </span>there's a a couple of really good talks about making impossible States on representable where this doesn't make sense. To have loading be true and data be true.</p>
<p class="p2">Yeah. Unless you're refreshing, in which case, let's account for that in the data type as opposed to just like some coincidence of the way you've set things up. How</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>would I pull this apart in reason or flow for that matter</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>in reason, you would switch on the floating state and critically, it's impossible to get anything out of the loading state unless you switch on it.</p>
<p class="p2">And so you can't make assumptions about, you have to switch and say, is this loading or is this loaded, or is this failed? And you have to handle all of those cases. Right. I can't tell you how many bugs and web apps are caused by someone for getting one of the cases. Oh, I forgot that it could be loading here.</p>
<p class="p2">And it is, and so everything's dead.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>It's not just web apps. I think it's the world,</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>right? Yeah. Yeah. And so having that enforced for you. Again, this is another, I can offload this from my internal Ram. I don't have to like try and remember what other cases this can be in. The compiler makes it so you can't forget.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>I think we talked about why this might be a smoother onboarding than Elm. How would you compare it to TypeScript or flow?</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>Sure. Not to quibble with your word choice. I think Elm has fantastic onboarding because they've locked down the problem set. And it's an incredible community. I don't want to turn anyone away from Al, but if you go to Elm and you're frustrated by the lack of mutability and the difficulty of interfacing with JavaScript, then they become a reason.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah. So how would you describe, and maybe I don't have the right words here, how would you describe that distinction?</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>So there are a couple of continue, uh, continuums. Okay. And I would have to pull up on the spectrum from all mutability all the time versus all immutability. All immutability is where Elm is at, right?</p>
<p class="p2">You literally can't mutate anything, and JavaScript is like, there's no way to guarantee immutability and JavaScript. Well, you can do object out freeze, but then you have a performance penalty. And it's still a runtime error, so what are you going to do? Right? And reason is in the middle, right? It's definitely more towards immutability, both by convention and just the easier thing to write is with immutability, but if you need to reach for mutability you can, and that to my mind, it's an easier transition from JavaScript.</p>
<p class="p2">Another neat thing that certainly helped my introduction to reason is you can just dump in a block of JavaScript and be like, I don't know how to write this function in reason I give up. I'll just read it in JavaScript. Yes, there were probably typos in it and it's going to give me type errors and I deserve it.</p>
<p class="p2">But then you can call that, you know, it's just sitting in your reason code so you can get on with your life and then later when it has bugs are, when you feel bad about it, you can go back and rewrite it the correct way. How does that work?</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Because you said there's no any type, so what happens there?</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>It is inferred to be, what do you think it should be.</p>
<p class="p2">Like you can't call the function two different ways, which is what in any type would allow you to do. You can only call it one way, but there's no check, right? Cause it's just you dumped in JavaScript.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>I see whatever you call it, as it becomes that right.</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>And there is technically you can get any type behavior and sometimes you need that for interacting with the JavaScript function that does literally, I got called with like a dozen different arguments, but it's a massive code smell, man.</p>
<p class="p2">It has to be explicit.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>So Elm is more. Restrictive JavaScript is the least restrictive. So where does TypeScript and flow fit on this continuum?</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>Yeah, so TypeScript and flow are right next to JavaScript. TypeScript or and flow are doing their darndest to fit a square peg into a round hole and doing a very good job.</p>
<p class="p2">So like if you can't leave JavaScript, at least at some types, but if you can, why would you stay? Because there's so much undefined behavior inherent<span class="Apple-converted-space">  </span>JavaScript runtime. And reason is it feels so much like working in JavaScript<span class="Apple-converted-space">  </span>but just without<span class="Apple-converted-space">  </span>the bad parts. I mean, do you remember the, I don't know if you saw it, Douglas Crockford's JavaScript, the good parts book that was like 20 pages long or <b></b>whatever.</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>It's like the good parts are enforced and you can rely on them.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Part of the allure of like TypeScript, I'm less familiar with flow, is just like how easy it is. Like you can just rename your files and start there. What's the adoption path to get to reason?</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>Because of the heavy emphasis on JavaScript interop being easy. You can start out by just renaming your funds and especially this is a specially compelling and the react ecosystem because a reason we are component. Is there a reason jobs or is a job react to ask him about it? So you can use a react as component from reason and vice versa. I guess there are two different syntax for introducing reason to a JavaScript project.</p>
<p class="p2">One of them is I'm going to bite off a component and the rest of JavaScript doesn't have to know. And the other is I'm going to bite off some like gnarly algorithm. Because I really want some guarantees there. And then you might have to do a little bit more data conversion there, but that can often be really big bang for buck, where it's like, this has been a systemic source of bugs and I want to really lock it down kind of thing.</p>
<p class="p2">But yeah, as far as you're using Webpack and whatnot, buckelscript will produce JavaScript files that'll be consumed by your whole tool chain if you want to keep doing that.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>So have you made the transition in your day job?</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>Not in my day job. And there are a number of things that go into that. We recently converted to react native from native iOS and Android, and we've adopted flow and graphQL, and we're rewriting our whole backend and go.</p>
<p class="p2">So like, there's a lot of, a lot of technical innovation budget that's been spent the past couple of years. And so I've, it just hasn't made sense to be like also let's ditch JavaScript for this new language. So it just depends on your situation because software development is about so much more than the programming language you choose.</p>
<p class="p2">It is mostly about people and it is incidentally about code. But if I were on a smaller team, five to 10 people, I choose the reason in a heartbeat.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>How often is there JavaScript that can't be converted? Because it's type is not representable.</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>That depends on how strict you are because flow has any. And you can just say, ah, I'll type it does any and I will<span class="Apple-converted-space">  </span>pay the cost and bugs and developer tiers down the line.</p>
<p class="p2">Flow has done some really remarkable things with the types of, some that allows it to<span class="Apple-converted-space">  </span>a lot more of JavaScript than you expect at the cost of, again, still having to deal with JavaScript runtime semantics.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah. Yeah. It's a messy world out there. I guess with TypeScript, I know that somebody was talking to is having problems just because they had a lot of stuff that took like a variable number of arguments.</p>
<p class="p2">It was perfectly acceptable to call it with one or five or whatever. Right. I don't think TypeScript, I may be getting the example wrong. But it seemed like it was. Yeah. I don't know what to do with that.</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>Yeah. There are libraries, especially libraries written in 2010 that were like, my favorite thing is to have a function that can be called 11 different ways with these different specific arguments.</p>
<p class="p2">And my response to that is, that's a bad idea. Okay. When I'm using these functions, I have to remind myself, okay, is it three arguments or is it four? The behavior changes drastically based on that's just not, can it be easy to maintain? Now, if you mean like a spread of arguments, like I want to be able to call this with the math.</p>
<p class="p2">Dot. Min function can take any number of numbers and I'll just take a the of them. That's fine. That's easy to type both in TypeScript flow. But if you're like for some interesting reason, I want my library to only export one function when it could just as well expect support 10 I'm like, why are you doing that?</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>Yeah. Or curried functions that people have written where you can call it with one argument and then it returns a function that takes the next one, right?</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>Yeah. There is the kind of Scala FP style JavaScript. It goes in some interesting directions and is harder to type. For sure.</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>So I'm sure somebody's listening, you know, lives in a big JavaScript code base, and this is curious about these things.</p>
<p class="p2">What's your sales pitch for types and reason?</p>
<p class="p2"><span class="s2"><b>Jared: </b></span>I would say learning types will make you a better JavaScript developer regardless of whether you start using Flow or TypeScript or ReasonML. The conventions that a solid static type system enforces aren't going to make the code just easier to read in general.</p>
<p class="p2">And because I have learned reason because I've learned Haskell, and various other languages, the JavaScript that I right is different. It is more robust, it is easier to read, and it's just made me a better professional JavaScript, devs</p>
<p class="p2"><span class="s1"><b>Adam: </b></span>dynamic type people listening. What do you think? Do you buy it? Maybe you were just thinking of telling me where to take my static type propaganda.</p>
<p class="p2">I don't know, but I hope you find Jared's perspective. Interesting. Go check out<span class="Apple-converted-space">  </span>ReasonML and Jared's podcast called reason town. There's a link in the show notes to both. Speaking of show notes, springboards special scholarship program is linked in the show notes. Springboard with my first sponsor.</p>
<p class="p2">Woo, They reach out to me and the mentorship program they have sounds super cool. So check it out.</p>
<p class="p2">Until next time. Thank you so much for listening. .</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1322</wp:post_id>
		<wp:post_date><![CDATA[2020-03-16 05:00:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-03-16 09:00:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[the-reason-for-types-in-javascript]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="post_tag" nicename="ocaml"><![CDATA[OCaml]]></category>
		<category domain="post_tag" nicename="reasonml"><![CDATA[reasonml]]></category>
		<category domain="category" nicename="transcript"><![CDATA[Transcript]]></category>
		<category domain="post_tag" nicename="types"><![CDATA[types]]></category>
		<category domain="post_tag" nicename="typescript"><![CDATA[Typescript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[157]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[3003]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1324]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Loving Legacy Code with Jonathan Boccara</title>
		<link>https://corecursive.com/jonathan-boccara-loving-legacy-code-transcript/</link>
		<pubDate>Fri, 03 Apr 2020 09:00:17 +0000</pubDate>
		<dc:creator><![CDATA[webmaster@corecursive.com]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1355</guid>
		<description></description>
		<content:encoded><![CDATA[Legacy code is everywhere. I don't think I've met anyone who doesn't have to deal with legacy code in the substantial portion of his work.

Our guest, Jonathan Boccara is a French C++ developer and the author of The Legacy Code Programmer's Toolbox. In this episode, Jonathan will help us understand and build the correct mindset to effectively work with legacy code by using his approach and processes.

Listen in and learn how you can be good at working with large existing codebases and how legacy code works.

<iframe style="border: none;" src="//html5-player.libsyn.com/embed/episode/id/13797818/height/90/theme/custom/thumbnail/yes/direction/backward/render-playlist/no/custom-color/87A93A/" width="100%" height="90" scrolling="no" allowfullscreen="allowfullscreen"></iframe>

"An important message I'm trying to get across is that you should not complain if you don't, in turn, intend to improve the code." - Jonathan Boccara

"That would be any critique that's technical. One thing that comes up very often is levels of abstraction. If I had to sum up best practices in, in three words, that would be those levels of abstraction." - Jonathan Boccara

"The point of code is to make a piece of software run and to make it run in a way that will make customers happy. " - Jonathan Boccara
<h3><strong>Transcript</strong></h3>
<strong>This is a machine-translated transcript. Podcast page for <a href="https://corecursive.com/loving-legacy-code-with-jonathan-boccara/" target="_blank" rel="noopener noreferrer">this episode is here</a></strong>
<h2><strong>Meet Our Guest, Jonathan Boccara</strong></h2>
<span style="font-weight: 400;"><strong>Adam</strong>: So I get to talk with quite a few people and what I learned from that is that legacy code is everywhere. I don't think I've met anyone who doesn't have to deal with legacy code in the substantial portion of his work, at least</span>

<b>Adam: </b><span style="font-weight: 400;">Hello and welcome to CoRecursive. I'm Adam.</span>

<b>Don: </b><span style="font-weight: 400;">I'm Don. That was Jonathan Boccara.</span>

<b>Adam: </b><span style="font-weight: 400;">He's a French C++ developer, and he's on a mission to teach people how to work more effectively with legacy code. So much so that he's written a book all about it.</span>

<b>Jonathan: </b><span style="font-weight: 400;">I hope this book will change how people will see that everyday life with working with existing code.</span>

<b>Don: </b><span style="font-weight: 400;">To write the book, Jonathan needed to define what legacy code was.</span>

<b>Jonathan: </b><span style="font-weight: 400;">It's essentially, existing code that's hard to work with.</span>

<span style="font-weight: 400;">I had to come up with a more precise definition, so my definition would be threefold. First, it's code. That's hard to understand for you. Second, it's code that you're not comfortable changing. And, three, it's code that you're somehow concerned with.</span>

<b>Adam: </b><span style="font-weight: 400;">So today we want to answer this question. How do you get good at working with large existing codebases? How do you work with legacy code? Basically.</span>

<b>Don: </b><span style="font-weight: 400;">And how do you enjoy working with legacy codebases?</span>
<h2><b>The Reason Why Legacy Code Is Hard to Work With</b></h2>
<b>Adam: </b><span style="font-weight: 400;">We're going to talk about what legacy code is, how to work with it, how to improve it when you shouldn't improve it, and as you said, you know why you should want to, you know, be comfortable working with it, enjoy working with it.</span>

<b>Don: </b><span style="font-weight: 400;">Yeah, legacy code is, after all, just code and reading code and understanding it, is what our job is all about.</span>

<b>Adam: </b><span style="font-weight: 400;">Yeah. There's this quote from Joel Spolsky about legacy code. The reason that developers think that old code is a mess is because of a cardinal fundamental law of programming. It's harder to read code than it is to write it. Nobody talks about that. Right? It's totally true. Like writing code is easier than reading it. That's weird, right? Like, it's the opposite of what you would expect.</span>

<b>Don: </b><span style="font-weight: 400;">It's very counterintuitive. </span>

<b>Adam: </b><span style="font-weight: 400;">Yeah. So today we're going to explain how to live with and love the legacy code that you have to work with. And how to think about code you're not familiar with in general. How to get comfortable with it. And to do that, I took my various questions about legacy code to Jonathan.</span>

<b>Don: </b><span style="font-weight: 400;">Yeah. His process is to accept the code, critique it, own it, document it, and improve it.</span>

<b>Adam: </b><span style="font-weight: 400;">And we're going to take you through all the stages. Let's start at the beginning. </span>
<h2><b>Accepting the Code and Having to Work With It</b></h2>
<b>Jonathan: </b><span style="font-weight: 400;">I've been a software developer for a couple of years now, like eight years. I noticed that people around me, like the people I met, like meetup or on the internet or whatever, they were sad about the code they were working with. And I think it's a terrible thing. Because most of us, we choose our job out of passion. You know, quite a few developers have been programming before they were actually working as a developer. It really saddens me when I see people's motivation or whether overtime because it's not worth what they were expecting and that they don't really know what to do with it. And they feel like they're a victim of code and that ended up in the worst place on earth.</span>

<span style="font-weight: 400;">When you think about it when you get into a new job. It's like your first job or something, you're probably going to get into an existing project. And perhaps this project or company has been there for years and some other people have worked on it. Perhaps quite a lot of other people.</span>

<span style="font-weight: 400;">And so on your first day, you're going to be thrown into that huge sea of code written by perhaps dozens or more of people over the years. So you have to be able to work with that somehow.</span>

<span style="font-weight: 400;">When you enter a company, chances are you're going to have to face some code that's not as easy to work with as you would wish it were. So yeah, that's an essential thing because that's what is out there and you have to do something with it.</span>

<b>Don: </b><span style="font-weight: 400;">So I would call this acceptance. Accept that as a professional, you need to deal with old, possibly crappy code.</span>

<b>Adam: </b><span style="font-weight: 400;">Google has tons of old C++ code. Facebook has tons of old PHP code. Somebody is maintaining old versions of Windows, and just being old or not being in your favorite language doesn't mean that it's not valuable code.</span>

<b>Don: </b><span style="font-weight: 400;"> I feel like this is honestly the hardest part, accepting old, crappy code and having to work with it.</span>

<b>Adam: </b><span style="font-weight: 400;">Definitely agree. All right. Next up in Johnathan's steps is critiquing.</span>
<h2><b>How to Critique a Code</b></h2>
<b>Jonathan: </b><span style="font-weight: 400;"> Where you look at a piece of codes, that you have written a while ago or that someone else has written. Something that's not fresh for you.</span>

<span style="font-weight: 400;">It happens that it doesn't look quite right to you. It feels like it's badly written. And when you see that you have two choices, I think one of them is saying, this is bad code and move on. And the second choice is to try to express why this is bad code.</span>

<span style="font-weight: 400;">Because it happens that, you know this piece of code is not well designed, but you can't quite place a finger about what exactly is wrong with it. And sometimes it takes a bit of time of reflection and analysis to exactly pinpoint what's wrong with that piece of code and being able to critique this code in depth.  Being able to voice exactly in excruciating details why he didn't like it. Once you find out when you identify what's wrong with it, you can, you know what to pay attention to. You know that specific aspect of design and you know it's important because it made you feel uncomfortable in the first place. Next time you're going to write your own code, then you will know, need to pay attention to that.</span>

<span style="font-weight: 400;">By doing this kind of analysis, you get better as a programmer. I often compare that with the vaccine, where you get short of a disease, but that's not dangerous and your body has time to do its stuff for the immune system with antibodies or whatever.</span>

<span style="font-weight: 400;">And then your body remembers it. It remembers exactly what's wrong with that molecule or whatever. If you happen to actually encounter the actual disease, then your body is going to recognize it. And, and smash it apart in no time.</span>

<b>Don: </b><span style="font-weight: 400;">I really like this metaphor. Don't just say, Oh, this code is horrible. I understand why it is bad.</span>

<b>Adam: </b><span style="font-weight: 400;">Yeah.</span>

<b>Adam: </b><span style="font-weight: 400;">If you want to be a great developer, you should actually work on some legacy code. There is one caveat with this critiquing approach, though.</span>
<h2><b>The Purpose of Critiquing the Code</b></h2>
<b>Jonathan: </b><span style="font-weight: 400;">Yeah, I was going to say it's also a dangerous thing to do to critique or rather to criticize code.  As a natural reaction, people would like the existing code that's done. The theory is badly designed and sometimes it's badly designed. Sometimes that's not badly designed and it's more difficult than it looks, but it's not really the point.</span>

<span style="font-weight: 400;">An important message I'm trying to get across is that you should not complain if you don't, in turn, intend to improve the code. So you don't criticize just for the sake of it because it's a natural thing to do. And if you start by saying, Oh, this code is terrible, Oh, I would have done such a better job, and you do that all day, then you're going to get depressed and you're going to depress everyone who sits around you.</span>

<span style="font-weight: 400;">So I think you've, yeah, you need to be careful to criticize only for learning purposes or improving the code.</span>

<b>Adam: </b><span style="font-weight: 400;">That's kind of the tricky part. it's really easy to complain about the code that you have to work with. Like it just comes naturally, right? When you see some codes, you're like, this is a mess . And it can actually be hurtful because the person who wrote it might be sitting nearby.</span>

<b>Don: </b><span style="font-weight: 400;">And also like you don't understand the original constraints like maybe this code made sense at some point. Maybe it still does. And it's just so complicated that you don't know how it's supposed to work. I think that what Jonathan is trying to say is if you can try and move past that and maybe accept it, then you can better yourself.</span>
<h2><b>Taking Ownership of the Code Can Be Empowering</b></h2>
<b>Jonathan: </b><span style="font-weight: 400;">If you have to work with codes, be it good, be it bad, be it the one you wrote or be it that someone else wrote. Think about it as your code.</span>

<span style="font-weight: 400;">If you're working on it, this is your code. You have to take ownership, and if even if you don't think it, it's good. Even if you didn't write it yourself, this is your code. And when you get into that mindset, you have the position as a leader you feel empowered, do things with this code because this is your code.</span>

<span style="font-weight: 400;">So it doesn't matter that it's bad. You have to make the most of it. And you, when you take the ownership over the code you're working on, you leave this victim attitude, for doing that. That's one thing that's particularly frustrating with legacy code is when you feel like you are bearing the consequences of someone who made a poor design in the past.</span>

<span style="font-weight: 400;">And it's not true because in the first place, maybe that person didn't make a poor design. Maybe just not seeing the big picture and maybe even in the same situation, you wouldn't have them touch a better job.</span>

<b>Adam: </b><span style="font-weight: 400;">This is such a great attitude, like, I've been, you know, accidentally on the receiving end of like what moron wrote this code and it's not fun.</span>

<b>Don: </b><span style="font-weight: 400;">Yeah, I mean like ownership is a great attitude. And also I think what you're talking about is empathy. Like, have some empathy for the person that wrote it.</span>

<b>Adam: </b><span style="font-weight: 400;">Okay. So far, we have accepted our code. We've learned how to critique our code and, and take ownership of the code.</span>

<b>Don: </b><span style="font-weight: 400;">And don't be a dick.</span>

<b>Adam: </b><span style="font-weight: 400;">You mean develop empathy?</span>

<b>Don: </b><span style="font-weight: 400;">Yes and develop empathy until you get it.</span>
<h2><b>Considerations for a Valid Code Critique</b></h2>
<b>Adam: </b><span style="font-weight: 400;">All right. Before we leave a critiquing, Jonathan has a rule for what type of code critiques he considers valid.</span>

<b>Jonathan: </b><span style="font-weight: 400;">That would be any critique that's technical. One thing that comes up very often is levels of abstraction. If I had to sum up best practices in, in three words, that would be those levels of abstraction.</span>

<span style="font-weight: 400;">That's something that's sometimes not respected and that makes the code look bad and complicated.</span>

<b>Adam: </b><span style="font-weight: 400;">Do you have, an example of that?.</span>

<b>Jonathan: </b><span style="font-weight: 400;">Yes, when you have to choose the name of a parameter or anything else really, but let's stick to the parameters example. That's a tricky thing to do. That's like naming is a difficult thing to get right in programming surprisingly. I think that to get the right name, you have to choose a name that's at the right level of abstraction.</span>

<span style="font-weight: 400;">And to do that in practice, you have to think about what this object you are trying to name represents. It may sound a bit trivial, but this question, what is this object representing? I think it's the crux of how to get to do good naming for an easy example of the parameter. If you name your parameter with a name that reflects how it participates to the inside of the function, then you know you're too low in terms of levels of abstraction because the parameter represents something that's at the same level as the name of the function.</span>

<span style="font-weight: 400;">If it looks like something that's logical to implement the function on that, then it's too low. And on the other hand, if you're too high in terms of the level of abstraction for a parameter, that would be that your parameter is bound to the context that uses that function. Does this make sense?</span>

<b>Adam: </b><span style="font-weight: 400;">I think I understand. If I have some function that is called, let's say, format email and it takes in a string and it goes through and it removes any like double line breaks and I call it that because I use it for my email. So that is kind of a violation of these levels, right?</span>

<span style="font-weight: 400;">Because it doesn't actually format an email. I'm giving it too specific of a name, what it's actually should be called to something like remove extra line breaks.</span>

<b>Jonathan: </b><span style="font-weight: 400;">Exactly. And your parameter should be called email but should be called. text. For example, as a great example because it shows immediately. </span>

<b>Don: </b><span style="font-weight: 400;">If you're keeping track, we have now covered accepting, critiquing.</span>

<b>Adam: </b><span style="font-weight: 400;">And also, you know, using that critique to improve your code.</span>
<h2><b>Why Fixing the Code Right Away is Not the Way</b></h2>
<b>Don: </b><span style="font-weight: 400;">And speaking of fixing the code, should I just fix these right away when I find them?</span>

<b>Jonathan: </b><span style="font-weight: 400;">Oh no. Absolutely not. I don't think so. The thing is it would be great in theory. If you could fix the world, that would be awesome. But the thing is, legacy codebase tends to be vast. One thing that makes codes go into legacy codes is age. You know, like you have old code, it has more chances to be legacy than like brand new code you just ship</span>

<span style="font-weight: 400;">But I'm sure that all the code is not equal and that really shows at any scale. Even if you're like at function, you're going to see that all lines don't matter, but just a handful of lines that really contain some meaningful action. And I think that's true for like larger scales, like code-based. Some places where you go everywhere all the time, everyone goes there all the time. That's the places that are hot, if I may say, in terms of like of cash, cash for Cadbury. It's the places that people change. They make fixes because our bugs will be called that. Interesting. And the clients want more features in them. And those parts, they represent a portion of your codebase.</span>

<span style="font-weight: 400;">And this is the portion that matter.  The point of code is to make a piece of software run and to make it run in a way that will make customers happy.</span>

<span style="font-weight: 400;">And that's a very harsh business view, but I think that's what code is for in, I mean, in a professional context of course. So making code good has to somehow improve your business. So if you make code better, it can be because better code tends to have less bugs. Right? Or because it's easier to add features to better code than it is to code that you can't make any sense of.  Like for example, you shouldn't do a refactoring project just because it's easy to do or just because it doesn't cost a lot. Like I hear people sometimes say, Oh, I'm gonna go in that code and improve, I don't know, like the names or make the code cleaner. And that's an easy thing to do. And if no one goes through that code, that doesn't matter. It's the same thing as fixing some other's company codes, you know, that won't make you better. That won't make your business better.</span>

<b>Adam: </b><span style="font-weight: 400;">You're saying the cost is low, but the value is zero?</span>

<b>Jonathan: </b><span style="font-weight: 400;">Absolutely. That's exactly my point. No, I'm not saying that naming is a bad thing, that naming is tremendously important, but that matters more in code that matters</span>

<b>Adam: </b><span style="font-weight: 400;">So my biggest concern is not what Jonathan just described, like fixing code that doesn't need to be fixed. It's actually just making code worse by, trying to improve it. So I asked Jonathan how to deal with that situation.</span>
<h2><b>Making Code Worse By Avoiding Nesting</b></h2>
<b>Jonathan: </b><span style="font-weight: 400;">I think it can do the same kind of analysis like when you did choose to fix a piece of code, like to improve its quality by making a refactoring task. After it I think it's a great thing not to move on immediately, but rather to think about why it's better. And once again, it's not something that's obvious to do sometimes.</span>

<span style="font-weight: 400;">Like for example, I remember one time where we had a slightly complicated if statements like something that was an if involving several Booleans and a bit of nesting, you know, nothing monstrous, but you know the thing that takes you a few minutes to figure out. And we were thinking, well, this if we see it often, maybe we should do something about it.</span>

<span style="font-weight: 400;">So we went about and, and refactor it. And we moved it around and somehow it was looking much better, much easier to understand. And then we stopped and thought, why is that? Why is it better? You know, it looks better. I feel I can understand it better. And that's the point of code really. But why is that?</span>

<span style="font-weight: 400;">After I view, I know, like minutes apps or perhaps, even more, I don't remember, maybe an hour of analysis or perhaps like when you think about when you sleep on it really. We realized it was better because sticking to the specification like the business had explained this. If such and such condition is met within this context and without this other then we should do that thing, you know? And, and after the refactoring our if statements were looking exactly like that. And surprisingly it was more nested. By nested, I mean when there is an if statement inside of an if statement and you can measure nesting with indentation, which is the distance from the left margin of your screen.</span>

<span style="font-weight: 400;">And you know there's a general guideline about if statements that's a classical thing in programming, which is avoid nesting. Like, refactor your if statement so that there are as little nested as possible, it can be not nested at all. And in this particular case the if statements became more nested but clearer. Because it fits better with the specifications.</span>

<span style="font-weight: 400;">So we came up with that go line that we try to use every time we have to do something that's related to conditional, try to stick to the specification to what the business side more than about nesting </span>

<b>Adam: </b><span style="font-weight: 400;">I liked this example. The structural indenting. So following the rule very clearly about reducing indent actually would lead you to a solution that was less good than what you ended up with.</span>

<span style="font-weight: 400;">So the rules, it's not, it's not totally rule-based, but you should be able to explain it somehow.</span>

<b>Jonathan: </b><span style="font-weight: 400;">Yeah, absolutely. You have to know the rules. Like you have to know that nesting is something that can be dangerous. That's a smell. But performing your analysis on your codes allows you to go further. Expound beyond the rules, and that's like, you know, another level of skills.</span>
<h2><b>Create Understanding with Documentation</b></h2>
<b>Don: </b><span style="font-weight: 400;">Learn the rules for improving code, but learn the exceptions</span>

<span style="font-weight: 400;">All right, we have hit except it, critique it and improve it.</span>

<b>Adam: </b><span style="font-weight: 400;">And there is one more key left to legacy code and this one I have to admit is not my favorite. That is documentation. To Jonathan. The magic of documentation is</span>

<b>Jonathan: </b><span style="font-weight: 400;">You can create understanding out of nowhere with documentation. That's a very surprising thing to know to do because it's, it sounds like magic, but the very fact of explaining what you already understood helps you understand more.</span>

<span style="font-weight: 400;">You probably know that if you have made a talk or written a blog post or written a book or written actually a piece of documentation. If you explain anything to anyone in any form, and I'm sure we'll ever listen to data at some point, you know, that this makes you this made you realize things.</span>

<span style="font-weight: 400;">And. If, if anything else, it helped you realize that there were things you didn't know. There were holes in your understanding, and that gives you more questions to answer to make a consistent whole. So that's just one aspect of how documenting helps understanding now.</span>

<b>Adam: </b><span style="font-weight: 400;">That's a great example cause you're, you're saying that the actual act of explaining it to somebody via documentation actually deepens your understanding. It's a way for you to understand it better.</span>

<b>Jonathan: </b><span style="font-weight: 400;">Yeah. And of course, it goes without saying that it helps the other people. Oh, it's going are going to read your documentation. Now I think. When you're a software developer doing documentation is not hype. That's not the thing that motivates people becoming developers, or at least most people that I've met.</span>

<span style="font-weight: 400;">That's why I think it's important to realize how important it is and that it's not a terrible thing today. And one. Way to this to see things that I've realized over time by actually managing people and making them write documentation is documentation. Just like improving good quality. You don't do it because it's a good thing.</span>

<span style="font-weight: 400;">You know you don't do it because you're a good person. You do it because it helps the business.</span>

<span style="font-weight: 400;">And knowing that. You, you're going to quit this horrible. It's horrible for everyone. An attitude where you write documentation and then we do homework. You know, like, my manager asked me to do that. I don't have a choice.</span>

<span style="font-weight: 400;">I'm going to crank it out and, and be done with it. And that's the worst documentation you can make for you if for everyone, for you, because it's going to be pain and for everyone, because it shows really when you read a piece of documentation that's been written that that's someone that didn't want to write it, that just cranked it out. It shows and you're doing, really understand that it's not helpful. And, and if it's not helpful, then you wasted your time,</span>
<h2><strong>How Your Future Self Will Benefit From Documentation</strong></h2>
<b>Adam: </b><span style="font-weight: 400;">Yeah. That's a great attitude.</span>

<b>Jonathan: </b><span style="font-weight: 400;">Yeah. So one simple tip I was going to say when you write documentation is to write it not because you have to because your, because you're, you've been asked to or because you feel guilty not to, but write it to explain something you had a hard time understanding. Explain it to your past self.  Because you know how it feels not to understand that thing. You know what's easy to understand. You know what's. Like they're tricky parts and sound as if you are speaking to your past self because other people are like your past self. They don't know about it.</span>

<span style="font-weight: 400;">And actually, your future self has a high chance to be like your past self at some point, regarding this particular topic.</span>

<b>Don: </b><span style="font-weight: 400;">In other words, document things because you're going to forget them and you're going to need to explain to your future self when you come back to this code, inevitably what it does.</span>

<b>Adam: </b><span style="font-weight: 400;">Yeah. You're going to be the person reading this documentation, so if you don't write it, you're just hurting yourself.</span>

<span style="font-weight: 400;">So we understand now how to work with legacy code. We have accepted it, critique it,</span>

<b>Don: </b><span style="font-weight: 400;">Critique nicely,</span>

<b>Adam: </b><span style="font-weight: 400;">Improve it.</span>

<b>Don: </b><span style="font-weight: 400;">But don't make it worse.</span>

<b>Adam: </b><span style="font-weight: 400;">And document it.</span>

<span style="font-weight: 400;">There's one item from the beginning we haven't covered though, and that's how to enjoy working with existing code bases.</span>

<span style="font-weight: 400;">The key to loving maintenance programming is understanding how valuable a skill you're developing. Get good at it, master it, enjoy it. Or as Jonathan says.</span>

<b>Adam: </b><span style="font-weight: 400;">It's a fascinating thing to be programming. We love that.</span>

<span style="font-weight: 400;">But more importantly, yes, it empowers you to do great things and you can do fantastic things with legacy code.</span>

<b>Don: </b><span style="font-weight: 400;">You can find out more about Jonathan and his book at <a href="http://www.corecursive.com">CoRecursive.com</a></span>

<b>Adam: </b><span style="font-weight: 400;">This interview with Jonathan originally aired on SE Radio, a software engineering radio. It's a great podcast. I'm one of the hosts.</span>

<span style="font-weight: 400;">Let us know what you think of this show. </span>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1355</wp:post_id>
		<wp:post_date><![CDATA[2020-04-03 05:00:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-03 09:00:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[jonathan-boccara-loving-legacy-code-transcript]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="c"><![CDATA[C++]]></category>
		<category domain="post_tag" nicename="code-abstraction"><![CDATA[Code Abstraction]]></category>
		<category domain="post_tag" nicename="code-documentation"><![CDATA[Code Documentation]]></category>
		<category domain="post_tag" nicename="debugging"><![CDATA[debugging]]></category>
		<category domain="post_tag" nicename="legacy-code"><![CDATA[Legacy code]]></category>
		<category domain="category" nicename="transcript"><![CDATA[Transcript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
		<wp:meta_value><![CDATA[Legacy Code]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[In this episode, Jonathan Boccara talks about understanding, developing and setting the correct mindset by using his approach to work with legacy code.]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
		<wp:meta_value><![CDATA[75]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1138]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1395]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[157]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Loving Legacy Code with Jonathan Boccara</title>
		<link>https://corecursive.com/loving-legacy-code-with-jonathan-boccara/</link>
		<pubDate>Fri, 03 Apr 2020 09:00:48 +0000</pubDate>
		<dc:creator><![CDATA[webmaster@corecursive.com]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1365</guid>
		<description></description>
		<content:encoded><![CDATA[Legacy code is everywhere. I don't think I've met anyone who doesn't have to deal with legacy code in the substantial portion of his work.

Our guest, Jonathan Boccara is a French C++ developer and the author of The Legacy Code Programmer's Toolbox. In this episode, Jonathan will help us understand and build the correct mindset to effectively work with legacy code by using his approach and processes.

"An important message I'm trying to get across is that you should not complain if you don't, in turn, intend to improve the code."

"That would be any critique that's technical. One thing that comes up very often is levels of abstraction. If I had to sum up best practices in, in three words, that would be those levels of abstraction."

"The point of code is to make a piece of software run and to make it run in a way that will make customers happy. "

<a href="https://corecursive.com/jonathan-boccara-loving-legacy-code-transcript/" target="_blank" rel="noopener noreferrer">Podcast Transcript</a>

<strong>Links</strong>:
<ul>
 	<li><a href="https://leanpub.com/legacycode/" target="_blank" rel="noopener noreferrer">Book “The Legacy Code Programmers toolbox”</a></li>
 	<li><a href="http://www.fluentcpp.com/" target="_blank" rel="noopener noreferrer">Fluent C++: A Blog About Expressive Code</a></li>
 	<li><a href="https://www.se-radio.net/2019/04/363-jonathan-boccara-on-understanding-legacy-code/" target="_blank" rel="noopener noreferrer"><span data-story-id="story_80e2c020e8dcd865873e7aa62289d63c" data-room-id="room_b6b26d4fc614d34499fe32b312de5ce4" data-timestamp="1585700731512" data-text="&lt;https://www.se-radio.net/2019/04/363-jonathan-boccara-on-understanding-legacy-code/&gt;" data-userid="687769286601347072" data-orgid="687769287638503424">SE Radio: Understanding Legacy Code</span></a></li>
 	<li><a href="http://www.fluentcpp.com/word-count/" target="_blank" rel="noopener noreferrer">Counting words in your code</a></li>
</ul>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1365</wp:post_id>
		<wp:post_date><![CDATA[2020-04-03 05:00:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-03 09:00:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[loving-legacy-code-with-jonathan-boccara]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="c"><![CDATA[C++]]></category>
		<category domain="post_tag" nicename="code-abstraction"><![CDATA[Code Abstraction]]></category>
		<category domain="post_tag" nicename="code-documentation"><![CDATA[Code Documentation]]></category>
		<category domain="post_tag" nicename="debugging"><![CDATA[debugging]]></category>
		<category domain="post_tag" nicename="legacy-code"><![CDATA[Legacy code]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[In this episode, Adam and Don talked to Jonathan Boccara to discuss his processes to effectively working with large existing and legacy code bases.]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[http://chtbl.com/track/7D91G/traffic.libsyn.com/corecursive/049_-_Loving_Legacy_Code.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[24:51]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[24.9 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:9:{i:0;s:34:"01:17 -- Why Legacy Code Is a Hard";i:1;s:54:"02:25 -- Accepting the Code and Having to Work With It";i:2;s:31:"04:36 -- How to Critique a Code";i:3;s:43:"06:49 -- The Purpose of Critiquing the Code";i:4;s:55:"08:21 -- Taking Ownership of the Code Can Be Empowering";i:5;s:49:"10:00 -- Considerations for a Valid Code Critique";i:6;s:54:"12:47 -- Why Fixing the Code Right Away is Not the Way";i:7;s:46:"15:56 -- Making Code Worse By Avoiding Nesting";i:8;s:50:"19:15 -- Creating Understanding with Documentation";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Jonathan Boccara]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Author of The Legacy Code Programmer's Toolbox]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/JoBoccara">@JoBoccara</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1502]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1393]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[1381]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Rust And Bitter C++ Developers With Jim Blandy</title>
		<link>https://corecursive.com/rust-and-bitter-c-developers-with-jim-blandy/</link>
		<pubDate>Sun, 05 Apr 2020 17:27:59 +0000</pubDate>
		<dc:creator><![CDATA[webmaster@corecursive.com]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1336</guid>
		<description></description>
		<content:encoded><![CDATA[<span style="font-weight: 400;">Writing secure, performant, multi-threaded code is very difficult. In this episode, I talked to Jim Blandy,  a free software hacker and coauthor of Programming Rust. Rust is a programming language that is used to make multi-threaded coding a lot easier. </span>

We talk about what problems rust is trying to solve, the unique language features and type system of rust and why it is so hard to write secure code.

<iframe style="border: none;" src="//html5-player.libsyn.com/embed/episode/id/6580284/height/90/theme/custom/thumbnail/yes/direction/backward/render-playlist/no/custom-color/87A93A/" width="100%" height="90" scrolling="no" allowfullscreen="allowfullscreen"></iframe>

<span style="font-weight: 400;">“it's targeting all those bitter C++ programmers who are sick and tired of writing security holes.  ... Y</span><span style="font-weight: 400;">ou are writing the code, which is going to go out in front of ... millions of people.  If you're the reviewer, you're sort of like the last line of defense. </span><span style="font-weight: 400;">This is the last chance for a bug to get caught before it becomes an exploit.</span><span style="font-weight: 400;">” - Jim Blandy</span>

<span style="font-weight: 400;">“You want to make them say ... I can handle it. I can get things done. Even though Rust is restrictive,  I can overcome these things. I can take this limited, buttons downed system and make great things.” - Jim Blandy</span>

<span style="font-weight: 400;">“Rust is just a really good, productive language to work in. It will make you worry about a bunch of things that maybe you thought you shouldn't have to think about.”  - Jim Blandy</span>
<h3><strong>Transcript</strong></h3>
<strong>This is a machine-translated transcript. Podcast page for <a href="https://corecursive.com/013-rust-and-bitter-c-developers-with-jim-blandy/" target="_blank" rel="noopener noreferrer">this episode is here</a></strong>
<h2><strong>Welcoming Our Guest, Jim Blandy</strong></h2>
<b>Adam: </b><span style="font-weight: 400;">Welcome to CoRecursive, where we bring you discussions with thought leaders in the world of software development. I am Adam, your host.</span>

<b>Jim: </b><span style="font-weight: 400;">So it's, so it is sort of asking them to give things up. But the thing is what you get in return is exactly this guaranteed memory safety. And this guaranteed freedom from data races and it's just this huge win.</span>

<b>Adam: </b><span style="font-weight: 400;">Writing secure, performant, multi-threaded code is very difficult. Today I talked to Jim Blandy about </span>Rust<span style="font-weight: 400;">, a programming language that is trying to make this a lot easier. We also talk about why it's so hard to write secure code to </span>Merck's on Firefox<span style="font-weight: 400;"> and his insights into the difficulty of writing secure code are super interesting.</span>

<span style="font-weight: 400;">I also asked Jim about Red Bean software, a software company that refuses to sell software at all. Jim Blandy is the co-author of Programming Rust among many other things, </span><span style="font-weight: 400;">Jim, welcome to the show.</span>

<b>Jim: </b><span style="font-weight: 400;">Hi. Thanks for having me.</span>

<b>Adam: </b><span style="font-weight: 400;">It's great to have you. I have your book and I really hoped I made it a long way through it before I talked to you but I could see the bookmark.</span>

<span style="font-weight: 400;">It's about a quarter of the way through.</span>

<b>Jim: </b><span style="font-weight: 400;">It ended up a lot longer than we wanted it to be.</span>

<b>Adam: </b><span style="font-weight: 400;">I don't think it's your fault that I haven't made it.</span>

<b>Jim: </b><span style="font-weight: 400;">What we had in mind originally, we wanted to do something more like K&amp;R. This slim volume just covers exactly what you need.</span>

<span style="font-weight: 400;">But basically Rust is a big language that is trying to address the things that people need and we took a little while to cover that.</span>

<b>Adam: </b><span style="font-weight: 400;">Yes, it's not a small language, I wouldn't say.</span>

<b>Jim: </b><span style="font-weight: 400;">Yes.</span>

<b>Adam: </b><span style="font-weight: 400;">So what is Rust for? What is it targeting?</span>
<h2><strong>How Rust Is Targeting Bitter C++ Programmers</strong></h2>
<b>Jim: </b><span style="font-weight: 400;">Well, I mean the funny answer is that it's targeting all those bitter C++ programmers who are sick and tired of writing security holes. My coauthor Jason and I, we both have worked on Mozilla SpiderMonkey JavaScript engine and that is a big pile of C++ code. It's got a compiler front end and i</span><span style="font-weight: 400;">t's got a byte code interpreter. It's got two jits and it's got a garbage collector, which is compacting and incremental and generational. Working on SpiderMonkey is kind of hair-raising. Because Firefox, it's not the leap browser. We still have hundreds of millions of users, and that means that when we make a mistake in the code we can expose a huge number of people. I mean, of course, when you're working in this field and I think of all the browsers you get to see these things get published, you find out about exploits and so it really is very humbling.</span>

<span style="font-weight: 400;">And so whether you are writing the code, which is going to go out in front of all these millions of people, or whether you are reviewing the code, somebody has finished their patch and they flag you for review. If you're the reviewer, you're sort of like the last line of defense, </span>

<span style="font-weight: 400;">This is the last chance for a bug to get caught before it becomes an exploit and you sort of getting used to it. You sort of accepting this is the way things are done. And then you start working in Rust or I just was curious about Rust because the original creator of the language, great and Graydon Hoare is a personal friend of mine.</span>

<span style="font-weight: 400;">We worked together at Red Hat. Modern Rust has gone far beyond what Graydon started with. So I wouldn't say that it's his language anymore but I was curious, I've been following its development since the beginning, so I was curious about it. And once I really started getting into it I realized that this is systems programming, where I the programmer and in control of exactly how much memory I use. I have full control over how things are laid out in memory. The basic operations of the language correspond closely to the basic operations of the processor. So as a systems programmer, I have all the controls that I need.</span>
<h3><strong>How Rust Is Helping a Program Compile</strong></h3>
<span style="font-weight: 400;"><b>Jim: </b>But I don't have to worry about memory errors and memory safety. Just like I said, when you're working on a security-critical C++ codebase as I said, I have been, you sort of getting used to it,  And you sort of internalizing that. Like there's these, this is just the standards that you're being held to is actually perfection.</span>

<span style="font-weight: 400;">Right because that's what it is, right. The smallest mistake and these people when you read about the exploits and people show off at black hat, it's just amazing. Just the ingenuity and work and just blood, sweat and tears that people put into breaking things are really impressive.</span>

<span style="font-weight: 400;">You've internalized that and then suddenly you work in Rust and that weight is lifted off your shoulders. And it is like getting out of a bad relationship. You just sort of gotten used to being like, just treat it badly and then suddenly somebody is reasonable to you and you're like, holy cow.</span>

<span style="font-weight: 400;">I am never going to do that ever, right. And then the next thing is that, when you get to work on, concurrent code in Rust. Actually trying to use, trying to take problems distributed across multiple cores, Rust is constructed so that once your program compiles it is free of data races by construction.</span>

<span style="font-weight: 400;">So make sure not using unsafe code and in C++ everybody thinks that their multi-threaded code is fine. Everybody understands what a new text is and how it works so the criminals are not difficult to understand at all.</span>

<span style="font-weight: 400;">But then you end up getting surprised by what's actually going on in your code when you have to work on it. One of the engineers here at Mozilla. Firefox is a heavily multithreaded program. I think when you start off, there's like 40 or 50 threads that get going.</span>

<span style="font-weight: 400;">And there's the garbage collector does the stuff off thread; the JavaScript compiler will push compilation work off to a separate thread. We do IO, like for example, when a tab is trying to write something to local storage, that IO is often pushed off to a worker thread.</span>

<span style="font-weight: 400;">And it's sort of handled asynchronously on the main thread. So it's a very heavily multithreaded program. So, anyway, so we had an engineer, here at Mozilla who decided that he was going to use </span>Chief Sam<span style="font-weight: 400;">, the thread sanitizer tool to look for data races to actually look at our code and observe how well we were doing in keeping data properly so that we keep data properly synchronized. And what he found was that in every case where Firefox uses threats, we had databases.</span>
<h2><strong>What is Data Race?</strong></h2>
<b>Jim: </b><span style="font-weight: 400;">Not most, every single case.</span>

<b>Adam: </b><span style="font-weight: 400;">Yes, that's kind of astounding. So let's back up. Well, so what's a data race?</span>

<b>Jim: </b><span style="font-weight: 400;">So, a data race is when you have one thread write to a memory location, and then another thread reads it, but there is no synchronization operation that occurs between those two, that it's not like that. Nobody releases a new text when the person acquires new texts or the write isn't atomic, or there isn't like a sort of message sent right there.</span>

<span style="font-weight: 400;">There is a number of primitives the language provides that ensure memory synchronization. This is an issue for two reasons. One is that, whenever you have any kind of non-trivial data structure, the way. They're always implemented if you have a method or a function, just any operation on that data structure. And the method will temporarily relax the invariance that data structure is built on, do the work, and then put the invariance back into place. </span>

<span style="font-weight: 400;">For example, if you're just trying to push an element on the end of a vector. Usually, it will write the new elements to the end of the vector, and then it will increment the vector’s lengths. Well, at that midpoint between those two operations, the vectors got this extra element that it's supposed to own, but the length doesn't reflect that. So there's this momentary relaxation of the invariance of the type that the length actually is accurate, or even more so if you are appending an element to a vector and the vector has to re-allocate its buffer.</span>

<span style="font-weight: 400;">So first it's going to allocate a larger buffer in memory. Next, it's going to copy over the existing elements to that new buffer. At which point there are actually two copies of every element. Which is kind of strange, which one is the owning copy, which one is live? </span>
<h3><strong>Problem With Unsynchronized Access</strong></h3>
<span style="font-weight: 400;"><b>Jim: </b>And then it frees the old buffer, and then it sets the vector pointer to point to the new buffer. So that's a more complicated operation wherein the midst of this operation, the vector is actually in this wildly incoherent state.  But by the time the method returns, the vectors guaranteed to be back, in shape and ready to use again, right.</span>

<span style="font-weight: 400;">And so when you have data races, getting back to data races, the problem with unsynchronized access is that it means that you can have one thread observing the states of your vector, or really of any nontrivial type while it is in the midst of being modified by some other thread. </span>

<span style="font-weight: 400;">And so whatever invariance, the vectors methods are counting on holding. In order to function correctly, may not hold. And so, that's sort of the language level view of things. but then modern processors of course, add even further complication to the mix where each processor will have its own cache.</span>

<span style="font-weight: 400;">And, although they do have, cache coherency protocols, trying to keep everything synchronized. It turns out that even Intel processors, which try to make fairly strong promises about memory coherence, it's still visible. That each processor will queue up writes to the main memory. That is, if you are one core on a multi-core machine and you're doing a whole bunch of writes to memory, those writes actually get queued up and, reads on that same core will actually, if you try to read a location that you just wrote to, it'll say, “Oh! wait, I see in my store queue that I just wrote to this.”</span>

<span style="font-weight: 400;">And so I'm going to give you the value that I just wrote. Even though the other cores will not have seen those writes yet. And so the other thing that synchronization ensures is that at the processor level, the memory that you are about to read is guaranteed to see the values that were written by the processor that wrote them.</span>

<span style="font-weight: 400;">Assuming that both have executed the proper synchronization. So data race is a write to a location. I'll buy one processor if I want a thread and a read from that location from another thread without proper synchronization. And it can cause a variance to be evaluated and it can cause you to encounter memory coherence errors.</span>
<h3><strong>Intel Processors</strong></h3>
<b>Adam: </b><span style="font-weight: 400;">The, the hardware thing you mentioned is interesting and maybe it's a bit of divergence, but, so how does that work? So if there's writes queued up to like a certain sector or something and you are reading from it as it does it block until those writes go through? Is that what you're saying?</span>

<b>Jim: </b><span style="font-weight: 400;">Okay. So this is something, the processors change over time and the different processors have different details about exactly how they do this. And so I'm not sure that I am going to be able to accurately describe as the current Intel processors, but this is as I remember it, what you've got at the basic level, you've got the cache that is communicating with each other about what they have cached locally.</span>

<span style="font-weight: 400;">Like, for example, if nobody has read a particular block of memory, then that's fine.  But when one core brings a particular block of memory into its cache, it'll actually mark that and say, okay, I've got this, but I haven't written to it yet. And it's okay for other cores to read that memory.</span>

<span style="font-weight: 400;">And so maybe all the cores, maybe it's a big block of read-only memory. Maybe it's, I don't know. Maybe it's. Strings, static strings or something like that. And so all the cores can bring copies of that memory into their caches and then use it. However, before a core is able to write to a block of memory it says, I need exclusive access to that. It actually broadcasts out on this local bus for the purpose of this kind of communication and says, okay, all you other cores, I'm about to write to this block of memory, please evict it from your caches and market as exclusive mine. </span>

<span style="font-weight: 400;">And so all the other cores, they, they kick out that block from their caches. They say we don't, we don't know what's in this block of memory anymore. Only that guy knows what's in it. So then that processor that's obtained exclusive access to that block of memory can do it, will do as it pleases.</span>

<span style="font-weight: 400;">And then in order for the other course to actually even read from that memory. Now they have to go and get a copy of it back from, force the core that was writing to it to flush. It's what it had back to me and memory and so then it goes back into the shared state. and so they call it the MESI protocol.</span>
<h3><strong>What is MESI Protocol</strong></h3>
<span style="font-weight: 400;"><b>Jim: </b>It's MESI which is like, I can't remember what it is. But like, E stands for Exclusive are four letters are the names of the four states that a particular block can be in. And E has exclusive access, which is when you're writing something, S is for Shared access. when you're, when it's actually just everybody has the same copies and everybody's just reading from it.</span>

<span style="font-weight: 400;">And I think I is Invalid where like somebody else's writing to it. So your copy is its focus. So that's just keeping the caches coherent. But then the other thing is that writes are a lot slower than reads. And so each core has a queue of the writes to memory that it is made, that it is waiting to write out to main memory.</span>

<span style="font-weight: 400;">Right. And so if you do a whole bunch of stores, your store queue will get filled up with the list of these things going out. And if the core, which has done the writes tries to read, then certainly it. It knows what the current values of things are. But the other cores can't see it yet.</span>

<span style="font-weight: 400;">It can't see those writes yet. And so it is the way that you can get incoherence, the way that you can end up with different cores having a different idea of what order things happened in is when one core gets a result out of its store queue, and then the other core gets the results out of main memory.</span>

<span style="font-weight: 400;">And so you can end up with different cores. Seeing write to memories seem to happen in a different order. And the history, this is actually really interesting for a long time, see, Intel would have sections of their processor manuals where they tried to explain how this worked, and they would make these very friendly promises like, Oh yes, everything's coherent.</span>

<span style="font-weight: 400;">Don't worry. You just do the writes you want to, and everybody sees them. And then there was this group, I could look up the reference later if you're curious. But there was this group, in either Cambridge, I think, or Oxford. Anyway, a very theoretically inclined group who basically said, we're going to actually make a formal model. If you know the memory, going to formalize the memory model that Intel has.</span>
<h3><strong>Running Tests on Intel and Apple Processors</strong></h3>
<b>Adam: </b><span style="font-weight: 400;">Like formalize it?</span>

<b>Jim: </b><span style="font-weight: 400;">They get a little logic that says which executions are acceptable and which executions are committed by this and which executions are not permitted by this.</span>

<span style="font-weight: 400;">Now again, the specification doesn't say exactly what happens. It just says what the rules are. So it says this could never happen. This might happen. So it identifies a set of acceptable executions, not a specific, it doesn't tell you exactly which one the processor's going to do,  It just specifies a set of acceptable executions or a predicate that you could run our execution to say, this was real or this is not acceptable.</span>

<span style="font-weight: 400;">So anyway, so what this research group did is they said, well, let's take them at their word and we're going to write tests. We're going to use this, formal if we're gonna use this specification that we've written. I mean, made up,  Because all we got us English to work with, and we're going to generate a ton of tests that we will run on the Apple processor to see if the processes actually behave the way their claims to behave in the manual. </span>

<span style="font-weight: 400;">And I mean, you can tell obviously, yes or no. That Intel themselves in their own documentation did not directly describe the behavior of their own processors. This group and the great thing about it, what was really powerful was that their techniques allowed them to just generate lots of tests and then find ones that failed. </span>

<span style="font-weight: 400;">And then, they were able to reduce them. So when they published, they had very short examples. If you run this sequence of instructions on one core and this sequence of instructions on another core, you will observe these results, which are forbidden vibes back, </span>

<span style="font-weight: 400;">So it was really nice. It was really just like, here's your book, you know? And basically what they found was that in general, yes. The MESI protocols do work as advertised. but the thing that you really have to add, the thing that you have to put it, you add to the picture to make it accurate is the store queues, the right queues. </span>
<h2><strong>Rust Takes Control of Aliasing </strong></h2>
<b>Adam: </b><span style="font-weight: 400;">Because if you have a write that hasn't done, then you're going to have this.</span>

<b>Jim: </b><span style="font-weight: 400;">If you have a write that you've done, if you've just done a write, you will see that write before other cores will see it. Yes. So anyway, this is the kind of thing, </span>

<span style="font-weight: 400;">Just to bring this back to Rust. This is the kind of thing where. It sort of raises, I think the programmer or sort of macho hackles,  You say, well, that seems pretty tough for those people but I can handle it. Everybody says that I think I catch myself thinking that It's not true. You are not up to the task of being perfect. And so to have a language where you can start, pushing your algorithm out across multiple cores, pushing your code out to run, in multiple threads and just know that you may have bugs, but they're not going to be these bugs that, it depends on exactly the order in which memory writes happened in the exact instructions that the compiler selected and things like that. It's just a huge win.</span>

<b>Jim: </b><span style="font-weight: 400;">So, data races are out.</span>

<b>Adam: </b><span style="font-weight: 400;">Yes, data races are out.</span>

<b>Jim: </b><span style="font-weight: 400;">So how?</span>

<b>Adam: </b>Well so, the key idea of Rust, which is something, and this is, I think really the thing that most programmers get hung up on when they learn it, is that Rust takes control of aliasing. And by aliasing, I mean, the ability to reach the same piece of memory under two different sorts of names under two different expressions.
<h3><strong>How Rust Handles Aliasing</strong></h3>
<span style="font-weight: 400;"><b>Jim:</b> The example that I give in the book is, I actually give a C++ example and I say okay, he's got this a C++ mind you, this is not Rust. So you got int x,  And it's variable, it's not constant facts.</span>

<span style="font-weight: 400;">It's just int x,  And then you take a const pointer to it. So I say const int * x or * p. const int * p and I say = &amp; x. So I've got a constant pointer to a non-const x. Now the way C++ works, you cannot assign now to * p. </span>

<span style="font-weight: 400;">If you try to assign a variable to * p or use the increments operated on it or something like that, then that's a type error. You're forbidden from using a p to modify the reference to the pointer. But you can assign to x, no problem. And so you can go ahead and change the value of x anytime you want.</span>

<span style="font-weight: 400;">And so it's not the case that just because p is a pointer to a const is that the integer it points to is constant.  How, how privileged is that? I mean like what does constant mean? If it can change. Okay. But the thing is, I want to make clear that there are uses for this kind of thing, </span>

<span style="font-weight: 400;">It is pretty useful to say, well, through this point, or I'm not going to change this value,  So in some, I'm not saying it's useless, but, but it is kind of, not what you expect. And so, but if you think about what it would take to fix that, To say, well, if I'm going to say that this pointer to this thing that this point, this is a really a pointer to a constant thing that would mean that for as long as that pointer p exists, appointed to a constant that all other access or that all of their modification of the thing that it points to has to be from it.  You have to, basically, as long as P is pointing to x, you have to make sure that x can't be modified.</span>

<span style="font-weight: 400;">And so that's what I mean by aliasing, that * p that is the referencing the point p and x are both things that you can write in your program that refer to the same location and this kind of aliasing kind of rise under pretty much any circumstance,  Anytime you have two paths through the heap.</span>
<h3><strong>Shared and Mutable Reference</strong></h3>
<span style="font-weight: 400;"><b>Jim:</b>  That all arrive at the same object,  And you come, you have a shared object right in the graph of objects. That's two ways to get to the same location. And there will generally be two different expressions that you could write to refer to the same object, So JavaScript lets you do this job.</span>

<span style="font-weight: 400;">Java lets you do this basically every language lets you create aliases. And what Rust does is it actually restricts your ability to use pointers, such that it can tell when something is aliased and they can say, okay, for this period, for this portion of the program. These objects are reachable by basically there are two kinds of pointers.</span>

<span style="font-weight: 400;">They are shared pointers, and then there are shared references and there are musical references. So it'll say these objects are reachable by shared references, and thus they must not be changeable. And so you know, not just that you can't change those values through those shared pointers, but you know that nobody else can change that either.</span>

<span style="font-weight: 400;">So it's really powerful when you have in Rust. If you have a shared reference to an int, you know it will never change and i</span><span style="font-weight: 400;">f you have a shared reference to a string that string will never change. </span>

<span style="font-weight: 400;">If you have a shared reference to a hash table you know that no entry in that hash table will ever change. </span><span style="font-weight: 400;">While you have that shirt just as long as you have that shirt.</span>

<b>Jim: </b><b> </b><span style="font-weight: 400;">Right. So once that goes out of scope, then changes could happen. </span>

<b>Adam: </b><span style="font-weight: 400;">Exactly, and then the other kind of reference is a mutable reference, where what it says is you have the right to not modify this, but nobody else does.</span>

<span style="font-weight: 400;">Nobody else has the right to even see it. And so a mutable reference, like it's basically, it's a very exclusive kind of pointer. So when you have a mutable reference to a hash table. Nobody else can touch that hash table while you have it. And that's statically guaranteed. It's part of the type rules.</span>
<h3><strong>Segregation Between Sharing</strong></h3>
<span style="font-weight: 400;"><b>Jim:  </b>It's guaranteed by the type rules around mutable references. And so you can imagine that, any type of system which can guarantee this thing about like, Oh, this, there's nothing else. There's no other live way in the system to even refer to the reference of this people pointer. That's a pretty powerful type system.</span>

<span style="font-weight: 400;">And, we're working through the implications of that, I think is where most people stumble learning Rust, that there is strict segregation between shared references where you have shared immutable access, and where you have mutable references, where it is exclusive access.</span>

<span style="font-weight: 400;">So there's this strict segregation between sharing. The mutation and the way that Rust accomplishes that is I think is really novel. It's something people aren't used to. And honestly, when you tell I was having lunch with a very accomplished programmer who just sort of old friends.</span>

<span style="font-weight: 400;">We haven't talked in years. And we're talking about Rust, and he says, Yes, and I can't create cycles. I mean I'm a programmer and I know exactly what I want to do with those cycles. I want to have data structures that are arbitrary graphs and I need those data structures and Rust which let me make them.</span>

<span style="font-weight: 400;">And so I'm not interested. And so I think he's, I think he's wrong, but I think he's making a poor choice. But he is correct in his assessment that basically Rust really is asking you to give up something that is just such a fundamental tool that most programmers have to have, just internalized and they've learned to think in those terms. So it's, so it is sort of asking them to give things up.</span>

<span style="font-weight: 400;">But, the thing is, what you get in return is exactly this guaranteed memory safety and this guaranteed freedom from data races. And it's just this huge win. So the way Rust works when it does work is when you can take that, I think I mentioned the programmer machismo I want a gender-neutral term for that, but like based on the programmer's pride.</span>
<h3><strong>Concurrency to Cover Every Possible Execution</strong></h3>
<span style="font-weight: 400;"><b>Jim:  </b>The programmers like that, the little bit of confidence that you've got, you want to flip that from people saying, oh, I can handle data races, I can handle unsynchronized memory access. No problem. You want to flip them from thinking that to thinking, oh, I can write my code in this restricted type system.</span>

<span style="font-weight: 400;">You want to make them say, I can feel I can handle it. I can get things done. Even though Rust is restrictive,  I can overcome these things. I can take this, this limited, buttons down the system and make it.</span>

<b>Adam: </b><span style="font-weight: 400;">Maybe people just shouldn't be so invested in their own pride. I don't know.</span>

<span style="font-weight: 400;">But one thing is, it sounds like what you're talking about is a, it's like changing the relationship you have with the compiler. I mean, I think some people view a compiler as a teacher with like a ruler that hits on your hands, like don't do that. But there's an alternative way where maybe it's more like an assistant.</span>

<b>Jim: </b><span style="font-weight: 400;">Yes. And, what's going on a lot with Rust is that your debugging time is getting moved from runtime to compile time. That is the time that you would spend chasing down pointers or problems in C++, you instead spend in negotiation with compiler about your borrows and about your lifetimes.</span>

<span style="font-weight: 400;">And the thing about it is, the difference is that tests only cover a selected set of executions. My tests cause the programs to do this. It runs it through its phases in this specific way, whereas types cover every possible execution.</span>

<b>Jim:</b><span style="font-weight: 400;"> And so that's the property that really makes it wonderful for concurrency, which is with concurrency, you have to just give up on your tests really exercising all possible executions.</span>

<span style="font-weight: 400;">Because the rate at which different cores run the code and how the threads get scheduled and what else happened to be competing for your cache at the time. None of that stuff is really, something that you can get a grip on. And so having a type system that says all possible executions are okay, is exactly what the doctor ordered</span>
<h2><strong>RustBelt Project</strong></h2>
<b>Adam: </b><span style="font-weight: 400;">So are we at risk of there just being a problem with the type system?</span>

<b>Jim: </b><span style="font-weight: 400;">Yes, sure. I mean, the type system isn't sound then you lose or we lose. In fact, so one nice thing is that the people who are sort of the lead designers of the type system right now, as I understand it are </span>Aaron Turon and Niko Matsakis<span style="font-weight: 400;">.</span>

<span style="font-weight: 400;">And in particular, Niko is the one who had this insight about. Hey, we have the possibility of really separating, sharing and mutation. Keeping those two things completely segregated. That's what I think is really the defining characteristic of Rust. or rather the defining novelty of Rust.</span>

<span style="font-weight: 400;">And so they work. When they talk about type systems, they're playing with, with PLT redox, which is the system from the, from the PLT group that made a racket and all that stuff. For playing with formal systems and looking at derivations informal systems, but they're not proving things about it.</span>

<span style="font-weight: 400;">There is then a project, called Rust Belt. I mean there's also a conference called Rust Belt, but Rust Belt is a project. At a German University where they're actually trying to formalize Rust, it's a research program where they say, okay, we are a group of people, and we're going to work on finding a formal model of the Rust type system and Rust semantics.</span>

<span style="font-weight: 400;">And in particular, there's a guy, </span>Ralph Young<span style="font-weight: 400;">, who is really taking this on and he is working on machine verified proof of the soundness of Rust type system. Now it turns out that there are aspects of Rust that make this very interesting and challenging and turn into something that just has never been done before.</span>

<span style="font-weight: 400;">In particular, all of Rust is built on a foundation of unsafe code and unsafe code is code where it uses primitive operations whose safety the compiler cannot check.  These operations, they still have, they still can be used safely. They just have additional rules in order to be used safely that you as the programmer can know.</span>
<h2><strong>Is Rust Safe to Use?</strong></h2>
<b>Adam: </b><span style="font-weight: 400;">So what do you mean to say that it's built on a foundation of unsafe code?</span>

<b>Jim: </b><span style="font-weight: 400;">Well, the Rust vector type, for example, is the vector type itself is safe to use. If you are writing Rust code and you use the vector type, it's a fundamental type in the standard library.</span>

<span style="font-weight: 400;">It's like, analog of </span>Haskell's list <span style="font-weight: 400;">or something like that. Just, you can't get away with it. You can't use it. And so basically if you are using vector, then you are at no risk. Any mistakes that you make using vectors will be caught by the type checker and the borrow checker at compile time. </span>

<span style="font-weight: 400;">So Rust is a vector that is safe to use. Vec is safe to use, but the implementation of vec uses operations whose correctness the compiler itself cannot be sure of. In particular, when you want to push a value onto the end of the vector, what that's doing is taking this section of memory.</span>

<span style="font-weight: 400;">You got to imagine the vector has a big buffer. And it's got some spare space at the end of the buffer, and you're gonna push a new value, so you're gonna push a string onto the end of that vector. You're transferring ownership of the vector, you're transferring ownership of the string from, whoever's calling the push method, to the vector itself.</span>

<span style="font-weight: 400;">And so there's a bit of uninitialized memory at the end of the vector's buffer or towards the end of the vector buffer, which is now having a string moved into it. And in order for that to be correct in order to make sure that you don't end up with two strings thinking they are both on the same amount of memory in order to make sure that you don't leak the memory it has to be guaranteed.</span>

<span style="font-weight: 400;">It has to be the case that to be true, that the memory that you're moving the string into is uninitialized. And whether or not the location that something gets pushed onto is initialized or not depends on the vector being correct. That is the vector knows the address of its buffer.</span>
<h3><strong>Unsafe Code in Rust</strong></h3>
<span style="font-weight: 400;"><b>Jim: </b>It knows its length and it knows its capacity, the actual in-memory size of the buffer. And so the vector has to have checks that there is spare capacity, that the length is less than the capacity. And that link has to have been accurately maintained through all the other operations on the vector.</span>

<span style="font-weight: 400;">If there is a bug in the vector code and the length ends up being wrong, then this push operation, which transfers ownership can end up overriding some existing elements of the vector. And then that could be a memory flaw, a memory problem. But the nice thing is that vec is a pretty simple type.</span>

<span style="font-weight: 400;">It's built on some modules which have a very simple job to do. And so that is a small piece of code that we can audit to ensure that the vector is using its memory correctly. And once we have verified by hand, by inspection, that the vector is using its memory correctly.</span>

<span style="font-weight: 400;">Then we can trust the types of vectors, methods to ensure that the users will always use it correctly. So the users have no concern it's only we who implement the vector, who are responsible for this extra level of vigilance and making sure that we're getting the memory right.</span>

<b>Adam: </b><span style="font-weight: 400;">So the type system can be and is being formally verified, but the libraries need to be hand audited. What's the vector written in? Is it written in Rust?</span>

<b>Jim: </b><span style="font-weight: 400;">Vector is written in Rust and that's the key, is that unsafe code in Rust is sort of this escape hatch that lets you do things that you know as the programmer is correct, but that the type system can't recognize as correct.</span>

<span style="font-weight: 400;">So, for example, my main vector is one of the write of the vector itself is written in Rust uses a selected unsafe code and so this is exactly what the Rust Belt project is tackling. In order to really make meaningful statements about Rust, you're going to have to actually be able to handle unsafe code.</span>

<span style="font-weight: 400;">Because of the primitive operations of Rust, like the synchronization operations, the stuff that implements new taxes, the stuff that inter-thread communication channels or the basic memory management of things. </span>
<h3><strong>Trust the System to Do the Audit</strong></h3>
<span style="font-weight: 400;"><b>Jim: </b>That gets memory that obtains memory, free memory for a vectors’ buffer or that free vectors buffer when the vector is disposed of. Or, the IO operations and say, look, we're gonna read memory. We're going to read the contents of a file or data from a socket into this memory and without wiping out random other stuff around it.</span>

<span style="font-weight: 400;">All of those things are sort of their code that no type system can really. Yes, I think you say that they're, primitive operations and so no type system and really say what they do. But you can use unsafe code and make sure that you use them correctly. Assuming that you're unsafe code is right, you can build well-typed things on top of those that are safe to use. </span>

<span style="font-weight: 400;">And so this two-level structure of having unsaved code at the bottom and then having time to code on the top is what allows people to have some confidence in the system. And so, the Rust Belt people actually want to.</span>

<span style="font-weight: 400;">Understand the semantics of unsafe code and actually spell out, what the requirements are in order to use these features safely. And then they want to verify that Rust standard library doesn't indeed use them correctly. So they're really going for the whole enchilada. They want to really put all of Rust on a firm theoretical foundation and it's really exciting.</span>

<b>Adam: </b><span style="font-weight: 400;">And the trade-off, like as a user of the language, it seems to make sense to me. So you're saying like, rather than needing to audit my code to make sure these issues don't exist, I can trust that the system has been formally verified except for these unsafe primitives, which have been audited themselves.</span>

<b>Jim: </b><span style="font-weight: 400;">Yes. Well basically if you don't use unsafe code. Then the compiler prevents all undefined behavior, prevents all data race and memory errors if you don't use unsafe code, you are safe. If you do use unsafe code, you are on say features. You are responsible for making sure that you meet the additional requirements that they impose above and beyond the type system.</span>
<h3><strong>Implementing Under an Unsafe Code</strong></h3>
<span style="font-weight: 400;"><b>Jim:  </b>And so, Yes, I mean, either you can figure out how to fit your problem into the safe type system. And the nice thing about Rust is that the same type system is actually really good and quite usable, and most programs do not need to resort to unsafe code. So you can either work in that world, which is what I almost always try to do.</span>

<span style="font-weight: 400;">Or if you really need, if there's something that's a primitive that you really know is correct, but that Rust that the type system can't handle, then you can drop down to unsafe code and you can implement that. </span>

<span style="font-weight: 400;">And one of the things we, one of the strategies that we emphasize in the unsaved chapter of the book, it's the very last chapter after we presented everything else, is one of the strategies that we encourage people to use is to make sure that or to try to design interfaces such that once the types check that you know that all of your unsafe code. </span>

<span style="font-weight: 400;">It is ok and then that means that you've exported a safe interface to your users. And so if you have an unsafe trick, would you want to use you isolate that unsafe trick in one module. That has a safe interface to the outside world, and then you can go ahead and use that technique, and not worry about its safety anymore.</span>

<span style="font-weight: 400;">You use the module. And then the module types ensure that it's okay.</span>

<b>Adam: </b><span style="font-weight: 400;">The unsafe code doesn't escape.</span>

<b>Adam: </b><span style="font-weight: 400;">It sounds similar to the idea of like people be writing some Haskell function that claims to do no side effects, but for performance reasons, maybe it's actually doing some sort of generating a random number. Maybe that's a bad example, but it's totally hidden from the user. It acts purely from the outside, whatever may happen.</span>

<b>Jim: </b><span style="font-weight: 400;">Yes, that's, that's a good example. That's a good example because the question comes, the question arises, is it really pure from the outside? If they did it right, if they really actually kept all of the state fullness local and isolate this, but you can't tell from the outside, then everything's fine.</span>
<h2><strong>Rust Performance</strong></h2>
<span style="font-weight: 400;"><b>Jim: </b>The people that in the rest of that, whoever's using that. Oh, from the outside can use it and not worry about it. And they get the performance and they don't have to worry about the details. But then inside, the people who wrote that code are, they have extra responsibilities. And the normal Haskell guarantees of statelessness don't apply to them because they've broken the rules or they've stepped outside the rules and they're now responsible.</span>

<b>Adam: </b><span style="font-weight: 400;">And you mentioned, the type of system Rust is and actually it has a lot of features that I guess you wouldn't expect from something that maybe I didn't expect. It has a lot of functional, filling features.</span>

<b>Jim: </b><span style="font-weight: 400;">Oh Yes. I'm really glad that you brought that out because I've talked about safety and I think I've talked about performance.</span>

<span style="font-weight: 400;">But Rust, the really nice thing about Rust is that it is not by any means a hair shirt. It is actually really comfortable to use. It has a very powerful, generic type system. The trait system is a lot like type classes in Haskell if you use tech classes in high school.</span>

<span style="font-weight: 400;">I mean, everybody uses hypothesis and Haskell, but they know it or not.  and, Yes, so Rust has traded. The whole standard library is designed around those generics and those traits, and it puts them to full use and it's actually a super comfortable system to use.</span>

<span style="font-weight: 400;">I did a tutorial at AusCon in Austin last May, where we went through to the extent that you can, three hours, writing a networked video game. And that involves 3D graphics and involved a little bit of networking and it involves some game logic.</span>

<span style="font-weight: 400;">Obviously I had to up the game ready for the talk and I put it off. And so I had to do the last stages of development in a rush, and it was fantastic. It was like I had wings or something because once I'd gotten something written down.</span>
<h3><strong>Utilizing Serializer Deserializer</strong></h3>
<span style="font-weight: 400;"><b>Jim:  </b>Once I'd really gotten the types right, it was done. It was done. if I had been working in C++, I would have had to randomly take three hours out of the schedule to, to fix, to track something down, and debug it. Because it was Rust, I just gotta keep going forward.</span>

<span style="font-weight: 400;">And so it was just like really great progress and Rust has all of these sorts of batteries included kind of things. Like there's a crate out there called SerDe which is for serializing or utilizing serializer deserializer. And it is a very nice collection of formats like this JSON, there's a binary format, there's XML, there's a bunch of other stuff right.</span>

<span style="font-weight: 400;">And then a set of Rust types that can be serialized. String hash, table vector what have you. And SerDe is very carefully constructed which it knows how to serialize or deserialize. Then you can use that with any format that it knows how to read or write.</span>

<span style="font-weight: 400;">So you're just like, pick something off of this list and then pick something off of that list and you're immediately ready to go for sending something across the network. You can actually, and that naturally, if you've defined your own types, you can specify how they should be serialized or deserialized.</span>

<span style="font-weight: 400;">You'll define your own custom struct and say, well, but the thing is, that's real boilerplate stuff so there is actually this magic thing that you can say you can slap on the top of your own type of dish. You can say derived serialized and deserialized and what that does.</span>

<span style="font-weight: 400;">I guess the Haskell has something like this too that automatically generates the methods. It looks at the type and automatically generates to serialize and deserialize that type and so it is super easy to get your stuff ready to communicate across the network and so for communicating people's moves and communicating the state of the board.</span>

<span style="font-weight: 400;">that was, it was just a blast because there was all of this sort of boilerplate stuff that I didn't have to worry about and those are just the kind of power. </span>
<h2><strong>Is Rust for Non-C++ Developers?</strong></h2>
<b>Adam: </b><span style="font-weight: 400;">So, and I think just for a callback, I think that's like generic derivation and I did have miles on the show earlier who wrote something similar for Scala and yes, Haskell has it. I think it was originally called scrap your boilerplate. But yes, a very cool feature.  A lot of boilerplate can be removed by things like that.</span>

<b>Jim: </b><span style="font-weight: 400;">Scrap your boilerplate is done within the Haskell type system. If I remember that paper right and SerDe is doing a little bit of procedural macro kind of, I'm actually gonna exactly look at your type definition and decide what to do with it.</span>

<span style="font-weight: 400;">And I wonder if that stuff could be done in the scrap your boilerplates style. I don’t understand scrap your boilerplate well enough to say. But yes, it's that stylistic and yes, those are just wonderful tools.</span>

<b>Adam:</b><span style="font-weight: 400;"> I think you're making a good argument. So Rust apparently is hard to learn. This is what I've heard. However, once you learn that there's a superpower. So is this superpower applicable to non-C++ devs? Is this a useful skill for somebody who's like throwing up web services?</span>

<b>Jim: </b><span style="font-weight: 400;">I think so. So you had </span><span style="font-weight: 400;">Edwin </span><span style="font-weight: 400;">on talking about interest and Edwin made a comment that I want to push back on. He said I don't think that types really helped people eliminate bugs that much because unit tests are still useful. So I work in the developer tools part of Mozilla, and we have a JavaScript front end.</span>

<span style="font-weight: 400;">The user interfaces for the developer tools in Firefox is written. They're written themselves in JavaScript, and it's a react-redux app basically, that talks over a JSON-based protocol to a server that runs in the debug key and it looks at the webpage for you. I'm proud to say that my colleagues are enthusiastic about the potential for types and they really see the value of static typing.</span>

<span style="font-weight: 400;">And we are bringing, we're using a flow-type in Javascript. We're bringing flow types into our codebase but it's not done. We haven't pushed them all the way through. There's plenty of untapped coats still because of full Javascript flow types. Let you type one file and leave the rest of the file.</span>
<h3><strong>How Errors Are Missed</strong></h3>
<span style="font-weight: 400;"><b>Jim: </b>Left just the system untyped. Leave the rest of the system untyped. And so you can gradually introduce types to more and more of your code as you go. So we're in that process and of the bugs that I end up tracking down. I don't want to put a number to it because I know I haven't been keeping statistics, but it feels like, at least half of them, would have been caught immediately by static.</span>

<b>Adam: </b><span style="font-weight: 400;">I've heard people say this when moving to typescript, which is similar. Often they found a yes. Like, not a super obscure bug, but like a little corner where things would go wrong. That the type system was like, what are you doing here?</span>

<b>Jim: </b><span style="font-weight: 400;">The thing is I think people like the people who work in Haskell or, certainly somebody who works on the address, I don't think they really know what the JavaScript world is like. It's just insane what people do. </span>

<span style="font-weight: 400;">In JavaScript, if you typo the name of a property on an object, it's just a typo, you capitalize it wrong or something. That's not an error. JavaScript just gives you undefined as the value and then undefined just show up at some random point in your program. And so until you have like complete unit test coverage of every single line.</span>

<span style="font-weight: 400;">You don't even know whether you've got typos. That's crazy. That is just not what humans are good at and it's exactly what computers are good at. And so to put that on the human programmer's shoulders doesn't make any sense.</span>

<b>Adam:</b><span style="font-weight: 400;">  To be fair to Edwin, he does have t-shirts, but say if it compiles, ship it.</span>

<b>Jim: </b><span style="font-weight: 400;">Oh no, I thought that was a really good podcast. And like I said, we're all really curious about the address. So, I think that we don't want to undersell the benefits of static typing and so back to your question. For people who aren't doing systems programming, why would they be interested in Rust?</span>
<h3><strong>Value of Rust for Single-Threaded Code</strong></h3>
<b>Jim: </b>Rust is just a really good, productive language to work in. It will make you worry about a bunch of things that maybe you thought you shouldn't have to think about. <span style="font-weight: 400;">But in retrospect, I kind of feel like I'm happy to have those things brought to my attention. Like for example the at the very beginning I talked about how data structures the method of a data structure will sort of bringing it out of a coherent state and put it back into a coherent state.</span>

<span style="font-weight: 400;">You don't wa</span>nt to make sure that you don't observe it in the midst of that process. Well, you can get those kinds of books even in single-threaded code. You can have one function which is working on something and modifying something that it caused something else because something else goes through a callback.

<span style="font-weight: 400;">And you have several call frames and then suddenly you have something that tries to use the very new instruction that you were operating on at the beginning but you weren't aware of it. And so nobody knows that they're trying to read from the data structure that they're in the middle of modifying and that's something that's called the iterator validation in C++ its undefined behavior. </span>

<span style="font-weight: 400;">In Java, you get a concurrent modification exception. Like I just mentioned this to a Java program and he's like, Oh, yes, see, he says though, if they'd had a name for him, they knew. and that's also, that's a totally a single-threaded programming error. </span>

<span style="font-weight: 400;">And that's also prevented by the Rust type system. So I feel like Rust types actually have a lot of value even for single-threaded code, which is not performance sensitive, but it's just really nice to house. It's really got your back in terms of letting you think or making sure that your program works the way you think it does.</span>

<span style="font-weight: 400;">So, yes, I think it has a lot of applicability as a general-purpose programming language.</span>

<b>Adam:</b><span style="font-weight: 400;"> Hey, the one thing we didn't talk about, but I think that you touched on briefly at the beginning was to do with security. So we talked about data races, but you also mentioned security.</span>
<h3><strong>What Happens When There Are Security Holes</strong></h3>
<b>Jim: </b><span style="font-weight: 400;">Yes, there are lots of different kinds of security holes. And according to the collected data, there are a few people who collect statistics on the published security vulnerabilities and sort of what category they fall into, is it SQL injection? Is it cross-site scripting?</span>

<span style="font-weight: 400;">They sort of categorizing them. And the category that I'm interested in. In this particular case is memory. Memory corruption, memory errors, and those have been consistent, 10, 15% of all the security vulnerabilities being published altogether.</span>

<span style="font-weight: 400;">And so there's still a very big issue, and most of the time, almost all the time, what's happening there is you've got a buffer overrun, or you've got a use after free, or you gotta have some other kinds of dynamic memory management error, which normally would result in the crash. But in the hands of a skilled, exploit author can be used to take control of the machine because after you have seen enough of these attacks, you start to feel like pretty much any book could be exploited with enough ingenuity.</span>

<span style="font-weight: 400;">So like, I can't find this post anymore, but the Chrome security team, Google's Chrome browser security team had a blog post about just about security errors caused by integer overflows. The intro, integer overflow sounds so innocent.</span>

<span style="font-weight: 400;">I mean, but it turns out that integer is the size of something you are 90% of the way to perdition.  Because basically you can make it think that something is much bigger than it actually is in memory. And then you've got access to all kinds of stuff you should have access to and you've broken out of jail.</span>

<span style="font-weight: 400;">And, so having a type system which prevents major mayhem in which basically makes sure statically that you're not going to your program doesn't behave in an undefined way, really does close off a very significant opportunity for security holes.</span>

<span style="font-weight: 400;">One of the quotes we open up was a tweet by </span><span style="font-weight: 400;">Andy Wingo</span><span style="font-weight: 400;">, who is a great JavaScript hacker and a great free software hacker and basically there was a bug and a true type parser, a font parser and that was one of the bugs that were used to break into the machines that were controlling the Iranian nuclear purification facilities.</span>
<h2><strong>Red Bean as a Consulting Company</strong></h2>
<b>Adam: </b><span style="font-weight: 400;">Oh, I didn't know that. What's that at Stuxnet?</span>

<b>Jim: </b><span style="font-weight: 400;">He was built around a flaw and true type. So true type is a font parser. The true type is security-sensitive code. So basically all code. It's a security sense. There's no longer, you can no longer say, Oh good, no, it's just graphics code.</span>

<span style="font-weight: 400;">If you're writing C++ code and you've got control of memory and it's doing point or arithmetic, you've got to be on your toes and the standard is perfection.</span>

<b>Adam: </b><span style="font-weight: 400;">And so Rust, like the same as a data race, it takes a certain class of these vulnerabilities off the table?</span>

<b>Jim: </b><span style="font-weight: 400;">Yes. In a Rust without unsafe code, if you have a program type, then we are saying it will not exhibit defined behavior.</span>

<b>Adam: </b><span style="font-weight: 400;">And undefined behavior is like?</span>

<b>Jim: </b><span style="font-weight: 400;">Is often the root of the security hole.</span>

<b>Adam: </b><span style="font-weight: 400;">So we're reaching the end of our time here. One thing, I was Googling you, what I found is your Red Bean software site. I actually ended up forwarding this to a couple of my friends. It says on it, to all intents and purposes: it appears you have a consulting company that does not sell software. Is that correct?</span>

<b>Jim: </b><span style="font-weight: 400;">Well, first of all, it's really, really old. My friend Karl Fogel and I ran a little company called </span><a href="http://www.cyclic.com/"><b>Cyclics Software</b></a><span style="font-weight: 400;"> and we were selling CVS support. We were the first group to distribute network, transparent CVS. We didn't, we didn't write it, but somebody else wrote it and they said they didn't want responsibility for it.</span>

<span style="font-weight: 400;">And so we were the ones who were distributing it. And so I'm kind of proud of that because it was network transparent CVS. That was really the first version control system that open source used to collaborate on a large scale and then got replaced by subversion and gets material.</span>

<span style="font-weight: 400;">Network transparent CVS was, was really how things got started. So yes, so we had cyclic software and then we, we decided we didn't want to run it anymore. We couldn't run it anymore. And so we sold it to a friend and we realized we had to change our email addresses. We had to tell everybody, don't email us, gimpy at sick like anymore.</span>

<span style="font-weight: 400;">And that's kind of a bummer. We realized that we were going to be changing our email addresses every time we changed jobs. So we resolved to create a company whose sole purpose was never to have any monetary value.</span>

<b>Jim: </b><span style="font-weight: 400;">So we would never have to sell it. And so he could keep a staple email address for the rest of our lives.</span>

<span style="font-weight: 400;">Is it, I mean, it's a vanity domain and lots and lots of people have vanity domain. But our joke is that it's a company whose purpose is never to have any value.</span>

<b>Adam: </b><span style="font-weight: 400;">Yes. I found on the front page it says, let me read this. By buying our products, you'll receive nothing of value. But on the other hand, we will not claim that you have received anything of value in this.</span>

<span style="font-weight: 400;">We differ from other software companies who insist in the face of abundant evidence. On the contrary that they've sold you a usable and beneficial item.</span>

<span style="font-weight: 400;">Well, it's been a lot of fun. Jim, thank you so much for your time.</span>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1336</wp:post_id>
		<wp:post_date><![CDATA[2020-04-05 13:27:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-05 17:27:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[rust-and-bitter-c-developers-with-jim-blandy]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="c"><![CDATA[C++]]></category>
		<category domain="post_tag" nicename="c-developers"><![CDATA[C++ Developers]]></category>
		<category domain="post_tag" nicename="integer-overflow"><![CDATA[Integer Overflow]]></category>
		<category domain="post_tag" nicename="jim-blandy"><![CDATA[jim blandy]]></category>
		<category domain="post_tag" nicename="mesi-protocol"><![CDATA[MESI Protocol]]></category>
		<category domain="post_tag" nicename="red-bean-sofware"><![CDATA[red bean sofware]]></category>
		<category domain="post_tag" nicename="rust"><![CDATA[Rust]]></category>
		<category domain="category" nicename="transcript"><![CDATA[Transcript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1327]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1353]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[157]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
		<wp:meta_value><![CDATA[Rust Programming]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
		<wp:meta_value><![CDATA[67]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[In this episode, I talked to Jim Blandy, coauthor of Programming Rust, a programming language that is used to make multi-threaded coding a lot easier. ]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020-03-30]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Type Driven Development and Idris With Edwin Brady</title>
		<link>https://corecursive.com/type-driven-development-and-idris-with-edwin-brady/</link>
		<pubDate>Tue, 07 Apr 2020 20:48:48 +0000</pubDate>
		<dc:creator><![CDATA[webmaster@corecursive.com]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1405</guid>
		<description></description>
		<content:encoded><![CDATA[In this episode dives deep into Type Driven Development and Idris with Edwin Brady.

I interviewed Edwin the creator of the Idris programming language and Author of the book Type-Driven Development with Idris and a computer science lecturer.

Discover the about dependent types, type holes, interactive and type-driven development, theorem provers, Curry–Howard correspondence, dependant Haskell, total functional programming, British vs American spelling and much more.

<iframe style="border: none;" src="//html5-player.libsyn.com/embed/episode/id/6170562/height/90/theme/custom/thumbnail/yes/direction/backward/render-playlist/no/custom-color/87A93A/" width="100%" height="90" scrolling="no" allowfullscreen="allowfullscreen"></iframe>

<span style="font-weight: 400;">"It is a theorem. It's a fairly trivial theorem. But as you start adding a little bit more precision into your type system, and you start looking at the relationships between what is a type and what is a theorem you start getting rather more interesting properties of your programs." - Edwin Brady</span>

"It's not always total. So this is one of the all of the decisions that I made quite early on this, that I'm checking that something is total is important because it's a check that allows you to be certain various properties of your program." - Edwin Brady

<span style="font-weight: 400;">"I write programs where I kind of, I know the happy path or I've got a rough idea of what the happy path is." - Edwin Brady</span>
<h3><strong>Transcript</strong></h3>
<strong>This is a machine-translated transcript. Podcast page for <a href="https://corecursive.com/006-type-driven-development-and-idris-with-edwin-brady/" target="_blank" rel="noopener noreferrer">this episode is here</a></strong>

<b>Adam: </b><span style="font-weight: 400;">Welcome to CoRecursive, where we bring you discussions with thought leaders in the world of software development. I am Adam, your host.</span>

<span style="font-weight: 400;">Edwin Brady is the creator of the Idris programming language and author of the book Type-Driven Development with Idris and a computer science lecturer. The book, the language, and Edwin himself all seem to be chock full of ideas for improving the way computer programming is done by applying ideas from programming language theory.</span>

<span style="font-weight: 400;">And this interview, we discussed dependent types, type holes, interactive and type-driven development theory improvers Curry-Howard Correspondence, dependent Haskell, total functional programming, and of course, British versus American spelling. It's a really fun interview and I hope you'll enjoy it.</span>

<span style="font-weight: 400;">Edwin Brady is the creator of the Idris programming language and the author of Type-Driven Development with interests. Edwin, welcome to the show.</span>

<b>Edwin: </b><span style="font-weight: 400;">Good afternoon. Thanks for having me.</span>

<b>Adam: </b><span style="font-weight: 400;">So I have your book here in front of me. I enjoy it. I have not gotten through it, but I've learned a lot.</span>
<h2><strong>What is a Type?</strong></h2>
<b>Adam:  </b><span style="font-weight: 400;">I thought. Before we dig in. Maybe we need to lay down some terminology. So What is a Type?</span>

<b>Edwin: </b><span style="font-weight: 400;">This is a surprisingly hard question to answer. I think if you ask a hundred computer scientists, you'll get at least a hundred answers. So I would say that a Type is a way of classifying data. So it's a way of putting some kind of meaning to the data that you're working with.</span>

<span style="font-weight: 400;">But I think depending on the kind of context you're in, Type can mean something different. So you know if you're the computer, then the type is a way of describing how data is laid out. And if you're a programming language, that a type is a way of making sure the data is interpreted consistently.</span>

<span style="font-weight: 400;">But as far as the programmer is concerned what we're all interested in. So Type is a way of describing the data we have.</span>
<h2><strong>First-Class Types Can Make It More Precise</strong></h2>
<b>Adam: </b><span style="font-weight: 400;">What then is a dependent type?</span>

<b>Edwin: </b><span style="font-weight: 400;">So dependent type is, I've at least am preferring to use the phrase first-class types. The reason being that if you so when we talk about the functional program, we are programming and what distinguishes it from say, imperative operator into programming or what additional features it gives us.</span>

<span style="font-weight: 400;">We like to say that. Some functions are a first-class part of the language that is, you can assign functions to variables. You can pass functions to other functions. You can return functions and so on. So when I say dependent types of first-class types, I mean the same kind of idea, but for types that as you can assign types to variables.</span>

<span style="font-weight: 400;">Because you can write functions, which compute types you can pass types as arguments to functions and so on, what makes this dependent is the fact that you can then use types or use values to more precisely describe the data that you're working with. So types can be computed from or depend on other bits of data.</span>

<span style="font-weight: 400;">So the classic introductory example of this is,  imagine you have a list and then you can make that more precise by saying, okay, I have a list where all of the elements of the list are the same type. And then I can make that even more precise by saying, I have a list where all the elements of the say are of the same type. And it has specific lengths. So lists with length is the example of calculating the type from a number being the length but that's the essence of it. The fact that types become first-class and you can compute types from values to some extent, vice versa.</span>
<h2><strong>Introduction to Idris </strong></h2>
<b>Adam: </b><span style="font-weight: 400;">So what is Idris?</span>

<b>Edwin: </b><span style="font-weight: 400;">So Idris is a programming language that I've been working on really as a, as a part of my research in programming language design and software correctness. So it's a purely functional programming language. It takes a lot of its ideas from a Haskell, largely because of I quite like Haskell and it's something I've been using to put into practice a lot of the research ideas that have been coming from all sorts of people over the last, I don't know, 20, 30 years in using programming languages to better express correctness of software. So all these wonderful ideas have come out of various places such as the Cocke- theorem improvers that come out of  France, the axial programming language to come from the group in Charmaz, in Sweden and research dating back to your paramount in nerf in the 70s.</span>

<span style="font-weight: 400;">And I think that all of this stuff is wonderful and it allows us to be very precise about the programs we want to write and very precise about the data we're working with. But it's not something that mainstream programmers can, pick up and run with. And the one thing I would like to do with Idris and possibly with most likely with success assessments is making these techniques available to practitioners and software developers.</span>

<span style="font-weight: 400;">Cause it's cool and I want people to use it.</span>
<h2><strong>What is a Theorem Prover? </strong></h2>
<b>Adam: </b><span style="font-weight: 400;">What is the theorem prover?</span>

<b>Edwin: </b><span style="font-weight: 400;">So when we talk where to start, theorems prover in programming in some very real sense, the same thing. There's something when you write a program, let's say you write a program that w</span><span style="font-weight: 400;">e'll stick with functional programming. So you write a program that takes an integer as an input and gives you and ensures an output to just something as simple as that. Then if you can write that program, that is, that program constitutes proof that it's possible to take an int and give you back an int so you can read it as, as the theorem int implies int now that as a theorem is not particularly exciting.</span>

<span style="font-weight: 400;">Nevertheless. It is a theorem. It's a fairly trivial theorem. But as you start adding a little bit more precision into your type system, and you start looking at the relationships between what is a type and what is a theorem you start getting rather more interesting properties of your programs.</span>

<span style="font-weight: 400;">So if I think of a nice, simple example, I did say. A simple theorem such as if A is true and B is true, then  A is true. Okay. So A and B apply A. So in terms of a program, what are the, so this is just some logical propositions, simple logical proposition in terms of a program. What is that?</span>

<span style="font-weight: 400;">Well, it's a proof that it's a program that takes a pair of an A and a B and returns an A, so this would be taking the first projection of a pair, for example. So as you start adding more interesting features into your types, so you start adding even more interesting features into your theorems, such as if you have a type that represents a sorted list and you have another type that represents an unsorted list.</span>

<span style="font-weight: 400;">So if you can add that level of precision, then a program that goes from unsorted list to sorted list is with certain extra assumptions and properties added. You've got a function that is guaranteed to be a function that's also a list. So the question is, is that proof or is it a program?</span>

<span style="font-weight: 400;">Is it proof that this algorithm sorts of lists or is it a program that does sort a list? And the answer is it's both. So I mean I came into academia from having been a C ++ programmer in the industry for a couple of years.</span>

<span style="font-weight: 400;">Yeah, I went to a talk and on theorem proving and decided this would be more fun. And so went into the other directions and started doing the theorem proving and then generating implementations of sorting algorithms from specifications. And started thinking, well, how, what is the relationship between these, the C++ programming that I've been doing?</span>

<span style="font-weight: 400;">And the seek this very abstract theorem proving that these people have been teaching me something. Well, there's a very close relationship. So this is people often when people talk about this idea, you'll hear it referred to as the Curry-Howard correspondence. So it's a pretty well-known idea.</span>

<span style="font-weight: 400;">It's been known for decades now, but it's not something that people typically think about when the programming, but you very much are using these concepts that the programs are proofs.</span>
<h2><strong>Is Idris Pacman Complete?</strong></h2>
<b>Adam: </b><span style="font-weight: 400;">And when you say that Idris is Pacman complete, I think this is a reference to the fact that these other dependently typed languages don't run or?</span>

<b>Edwin: </b><span style="font-weight: 400;">Not so much that. So people ask questions about it. Programming languages, like when it's theory incomplete and you know that's a people are worried about this sort of thing because you know it's your incompleteness means that you can solve all of the interesting covetable problems. But I just don't think theory completeness itself is a very interesting property of a practical programming language.</span>

<span style="font-weight: 400;">For example, C++  templates are theory complete, but you probably wouldn't write Pacman using only C++ templates and make files are probably theory complete white space. The programming languages, theory companies, I mean, all these things that have tiering complete, but you couldn't write Pacman in them.</span>

<span style="font-weight: 400;">Whereas it's not beyond the realms of possibility that you could take a language that isn't quite a theory complete. That is you can, you can always guarantee that the program terminates in a certain finite time and you could still write Pacmanin it. If you had the graphics libraries and the operating system interface libraries provided that you had a suitable author band on the amount of the time, that program is going to wrap.</span>

<span style="font-weight: 400;">I think it's a much more interesting property of a practical programming language that it is that you could write Pacman in it then that you could solve any computable problem in it. What you mean this is opening quite a can of worms Gloss over some of them, some of the details, but seer improvers like Kako actors, generally the ones we talk about in worldly dependent type programming they require programs to be a total, which means that they need to cover all well-typed in pots.</span>

<span style="font-weight: 400;">And programs or functions need to produce a non-empty finite prefix of the output in finite time. That is to say, they need to do some useful work in finite time. An, unless you do a few little tricks, this can mean that your language isn't theory complete because a theory, complete programming language, you can't solve the halting problem in general because.</span>

<span style="font-weight: 400;">Wealthier. You can't ride the program that says whether any given program with any given input is going to terminate. But in a theory proving, everything has to terminate. So that's that kind of suggests that it can't possibly be theory incomplete. But the question is, what kind of useful things can you do, or rather what useful things can't you do?</span>

<span style="font-weight: 400;">And I haven't yet found a useful thing. I can't do a be by disallowing programs looping forever and not producing any output on the way.  I'm not entirely convinced these programs to exist. something that merely makes my machine get off there while it's running is probably not something that's going to be useful to me.</span>

<span style="font-weight: 400;">Now it does make some programs a little bit harder to write cause I have to start, I have to, I have to produce some guarantees that this thing is going to produce some output. eventually. On the other hand, the payoff is that I know for certain that this program is going to give me some, a result at some point.</span>

<span style="font-weight: 400;">So. I mean, if nothing else it's a useful technique for ruling after silly mistakes. Anyway, all of that is why I think Pacman completeness is more interesting is because, again, I can still ride pack band within these constraints but if you've picked some arbitrary, your incomplete thing, that amazing number of things, I accidentally theory incomplete, but you can't write Pacman in them.</span>
<h2><strong>Totality in Idris</strong></h2>
<span style="font-weight: 400;"><b>Edwin: </b>It's quite hard to be accidentally Pacman complete.</span>

<b>Adam: </b><span style="font-weight: 400;">So I take by implication, Idris is a total language. Is it always total or?</span>

<b>Edwin: </b><span style="font-weight: 400;">It's not always total. So this is one of the all of the decisions that I made quite early on this, that I'm checking that something is total is important because it's a check that allows you to be certain various properties of your program.</span>

<span style="font-weight: 400;">And so, I remember early on I was talking about programs and proofs being the same thing.  and while this is true in a theory complete programming language your proofs come under the assumption that your program is also total that all your program produces a result. So all your proof, my intern intake sample, it's only a proof that the, that an intern plies into if this program terminates, if your language is total, then it is proof that and will return it.</span>

<span style="font-weight: 400;">So in Idris, it will always check whether something is total. Because if something, if you know something is total the machine tells you that. I am convinced it as total, you can place a lot more trust in it than if it's not total. However, there is this goal of being accessible to the more mainstream software developers and bringing it closer to what people do in practice.</span>

<span style="font-weight: 400;">And I think you have to take things a little bit slower if you want people to adopt your ideas. </span>
<h2><strong>The Concept of Language Strangeness Budget</strong></h2>
<span style="font-weight: 400;"><b>Edwin: </b>And there's a very nice concept I came across only quite recently that I think it's due to Steve Klabnik, who's very heavily involved in Rust, so he calls it the Language Strangeness Budget.</span>

<span style="font-weight: 400;">So if you make a new programming language you have a target audience. So in my case, it was kind of Haskell ML, low camel developers to a lesser extent, scholar developers. So you pick your target audience and then you decide how many things you're going to do. That is away from what they used to.</span>

<span style="font-weight: 400;">So how many odd concepts you're going to introduce. And those odd concepts have to have some at least, well, I would say some clear value maybe not an obvious value, but over time,  those concepts become clear and you could only have so many of them. And my feeling at the time was, although I didn't know that under this name, my feeling at the time was that if I were to require totality for totality as a default rather than non-totality as a default, then I would have blown my language training budget many times over. I've got a feeling that first-class types are already spending that stranger's budget and that's enough. That's enough for people to deal with as, as a first step. So I think future versions or future languages that,  hopefully, they will be future languages that are inspired by Idris.</span>

<span style="font-weight: 400;">Hopefully, they will take this idea of totality much further than as people get used to the idea so I, I think you know it once the tools are better for detecting where the programs are terminating this, it's going to be just like these days you have the arguments between dynamic typing fans and static typing fans.</span>

<span style="font-weight: 400;">Maybe in the future that will have arguments between the total language fans and nontotal language fans, but I like</span>

<b>Adam:</b><span style="font-weight: 400;"> I like this concept.</span>

<b>Edwin: </b><span style="font-weight: 400;">I think it's lovely, explains and explains so much about language design choices.</span>

<b>Adam: </b><span style="font-weight: 400;">Although there's a certain amount of, I don't know, disappointing this that's even a word, because like, languages seem to take decades to reach popularity, and if it can only defer two steps in one direction</span>

<b>Edwin: </b><span style="font-weight: 400;">Yeah but I think that we're talking here about. Mainstream languages. So if you look in the academic research community, the kinds of languages that are people are coming up with. So if you go to the, one of the academic conferences, like principles of programming languages, say people tend to come up with new languages to demonstrate your point, and they will,  they'll have all the exciting features, linear types or a session types or total programs.</span>

<span style="font-weight: 400;">And, and if the best of the very best ideas come out of these languages and then get adopted by mainstream languages. Then as academics, I think we've won, and then the side goes for Idris I mean a, I don't have the resources for Idris to be a mainstream language that's adopted by the world now, but if people were to take the ideas, like even just to totality checking and reporting errors or warnings, if things are not total and people put them in mainstream languages.</span>
<h2><strong>Dependently Typed Java</strong></h2>
<span style="font-weight: 400;"><b>Edwin: </b>Scholar or even, you know Java, C++, and then we're winning. So, if you keep an eye on the academic community, there are all sorts of interesting ideas coming out.</span>

<b>Adam: </b><span style="font-weight: 400;">So, is it possible to take first-class types and bring them to it to an existing language?</span>

<b>Edwin: </b><span style="font-weight: 400;">I don't see why not in principle, there would be all kinds of interesting challenges to get them to interact with the type system as it stands. So, sometimes I see discussions on, I occasionally get tagged on discussions about ascensions to the Rust type system, for example, which would be pretty cool to get a bit dependent types in that.</span>

<span style="font-weight: 400;">But the difficulties, I suppose, is to do with a mutation. So how do you make types which are known at compile time? Interact nicely with mutable variables. So something true about value at the start of a function's execution might become not true after things are modified.</span>

<span style="font-weight: 400;">So it is, we don't have a problem with that because Idris is a purely functional language and things can't update so you might have to introduce some restrictions on what you can do, but in principle, we've, we've thought about side effects and dependent types. We thought about interaction with the outside world and, and dependent types.</span>

<span style="font-weight: 400;">So if we find the right restrictions for the type-level language, then, it's something that could be doable. So what I mean, if Idris being purely functional. It means that it's all about evaluation. So, an Idris program or the when we talk of what it means to be a first-class type, we're only allowing things to evaluate.</span>

<span style="font-weight: 400;">We're not allowing things to execute. So to get for a purely functional program to execute in the outside world. You just think of it as an operating system, executing the description of the actions that have been computed by the functional program. So if you start putting o</span><span style="font-weight: 400;">r let's say hypothetically, you add first-class types to Java and you start saying, okay, now everything that's a Java program can go into type. Well, at that point, you're able to execute arbitrary IO actions while you're compiling the program, which is ideal. It's probably not a good idea you get it wrong, you get a compile error, you delete your source code, that sort of thing.</span>

<span style="font-weight: 400;">So usually you need to be a little bit careful about the restrictions and you need to think carefully about how it interacts with subtyping for example. No, I'm sure it's stable.</span>

<b>Adam: </b><span style="font-weight: 400;">I thought you were going to say the reverse, that it wasn't possible that we would need a, a new language.</span>

<b>Edwin: </b><span style="font-weight: 400;">So maybe a new language is a better place to experiment with these ideas. So as languages evolve, they do tend to get a very big moment. If you look at C++, now we're even Haskell now it's not clear that everyone is using the same language when they say they're writing a Haskell program.</span>

<span style="font-weight: 400;">Well, they're not using the same language when they say they're writing a Haskell program. So, I think it wouldn't make sense to rationalize the ideas into a new system. But of course, if you make a new language, people aren't going to use it cause they're heavily invested until it already exists.</span>
<h2><strong>Things We Can Learn from Rust</strong></h2>
<span style="font-weight: 400;"><b>Edwin: </b>So. I don't know. I don't know how to solve that problem. I'm just here to throw out ideas and prototype implementations people run with,</span>

<b>Adam: </b><span style="font-weight: 400;">Yeah. It's interesting like you mentioned Rust, which is, which is quite a new language. And they, they've managed to kind of, coalesce a whole community around themselves. </span><span style="font-weight: 400;">And seem to be in the process of rewriting everything a C++ developer would need using Rust. I don't know how they</span>

<b>Edwin: </b><span style="font-weight: 400;">I mean, Rust seems to be taking off and  I should get into learning it to be honest. Cause it has all sorts of interesting ideas and that, that I think we could pick up and triumph.</span>
<h2><strong>Dependent Haskell vs Idris</strong></h2>
<span style="font-weight: 400;"><b>Edwin: </b>They've got people to adopt it. So I guess part of it is if you have an organization like Mozilla behind it, and you have this flagship system that you're developing, I think that's going to help to some extent. In Idris, we don't have a half that has those resources, but maybe it helps. I don't know.</span>

<b>Adam: </b><span style="font-weight: 400;">You mentioned high school I saw a talk by a, I think it's Stephanie Weirich about dependent Haskell. So she did a pretty cool demo with like a RepLib library. It was really neat. But then she showed me, like, I didn't understand how it was written at all but using it was quite cool because you had the types of RepLib, they're kind of at a compile-time but my question is, so why, why do we need Idris?</span>

<b>Edwin: </b><span style="font-weight: 400;">I think it comes back to this point about languages evolving and getting bigger and bigger over time. It's good to rationalize these extensions. So it's their one single extension or the small number of extensions that could capture all of the ideas that are in the many, many extensions that Haskell has now. I think it's fantastic that all of these things are coming in to ask, cause it's brilliant. I mean, it, it sends a funny to be to, to call Haskell a wider mainstream audience by, yes, from where I'm sitting it is. So the fact that these ideas that we talk about it, in the full dependent types world are.</span>

<span style="font-weight: 400;">Being increasingly adopted by people but not only in Haskell but in scarless thanks to the work of people like Miles Simon. So people, people assigned to see what we're doing in a context that they can use in their day to day life. So that's brilliant. But as the question of why do we need this, I mean, we, it's, I think it's always good to experiment with new ideas without the constraints of decades of, of, of design decisions, languages, things that have come before. So if you're to go with Haskell for example, you are going to have to take a lazy evaluation, for example, something that may or may not be a good thing. I'd say that I think that's up to individuals to decide you're going to have to deal with the fact that types and values are distinct things, so you'll, you don't have truly first-class types. There may be plans to improve that, but you, you sort of have to work with the tools you've already got. Whereas if you take a new language, you're free of that.</span>

<span style="font-weight: 400;">You can make your own decisions but I think just, just this idea of, of, of Idris is significantly simpler than Haskell. When you take the fact that you've got the first-class types you can do you can do all of the fancy things that can happen in Haskell's type system, and you only have to learn one notation to do it.</span>

<span style="font-weight: 400;">So I kind of feel that. If I'm teaching Haskell, which  I do to undergraduate here in St. Andrews. I'm not going to teach them pendant types. I'm going to teach them more than Haskell ‘98, but the modern Haskell without any of the extensions. I will teach them that, but I'm not going to teach them any of the advanced features just because they've got enough to deal with already while they can compare to moving from  Java, which they've done pretty much exclusively so far.</span>

<span style="font-weight: 400;">Moving on to Haskell. On the other hand, if I'm teaching Idris, I feel that I can move on to dependent types early. You see this in the book that in the, in, within the first chapter, I give an example of, of computing types and by chapter three we're on to here's a thing that just allows you to compute the length of a list in the type.</span>

<span style="font-weight: 400;">And I don't feel like I'm adding anything any new language features to do that. It's just a natural thing that happens if you're able to compute the types. And that's not the case in Haskell, in my opinion.</span>

<b>Adam: </b><span style="font-weight: 400;">Yeah, I agree. It's, it's pedagogically kind of much simpler. Like, I don't understand all of these extensions that were turned on to do the dependent Haskell. And I have a feeling that she did,</span>

<b>Edwin: </b><span style="font-weight: 400;">She's been heavily involved in creation in which probably helps and that,  I’ve seen some of her talks and that sort of fantastic stuff that they're doing that so. So, yeah, I mean, it's great to see, but  I think at some point that the, I would say needs to be a new language, which is not necessarily Idris what probably not Idris, but some new language that takes these ideas.</span>
<h2><strong>Interactive Editing in Idris</strong></h2>
<span style="font-weight: 400;"><b>Edwin:  </b>It brings them all together and, and has enough people behind it that it, that it can become,  robust and production-ready. But we'll see. </span>

<b>Adam: </b><span style="font-weight: 400;">One of my favorite things from this book is the interactive editing. So that's something new to me. I wonder if you could describe it.</span>

<b>Edwin: </b><span style="font-weight: 400;">Right. So this is if you use IDs for, which,  many people do, particularly if you're using.</span>

<span style="font-weight: 400;">A statically typed language. You're kind of used to the idea that writing a program is not just a case of you type a load of stuff and then you feed it to, to,  the Oracle and it says, you know what, it says, It tells you why your program doesn't work.</span>

<span style="font-weight: 400;"> but if you're using an IDE, it's, it's not just writing a program and feeding it to the system. You've got this interaction by giving suggestions for completing method names. And so on. So if you have a precise type system that gives the machine more to work with, the machine should be able to help you write your program a lot more than if you just have a fairly simple type system.</span>

<span style="font-weight: 400;">So, I think this is a much more interesting thing about types, than what people often say, which is about correctness and refactoring. So people always come up with this argument that if you have a static type language you can be more confident that you've done the right thing and they will be fewer bugs.</span>

<span style="font-weight: 400;">While I think in practice, we don't tend to see that because unit testing is a very useful thing. So far more interesting to me is this idea of interactive editing. The fact that you can use what you've said about the program to help you end up at the right program with the machine’s help. So the idea is right, the type first, ask the machine to give you a small candidate definition that matches that type. And then just refine the program, get a few more details into the program according to what the machine might be suggesting. So, to pick an example, we always go back to vectors. Let's say you're writing a program to let's say you've got two vectors of the same length.</span>

<span style="font-weight: 400;">Two vectors, of integers of the same length, and you want to add the corresponding values in each factor so what do you do? You say, okay, what?  well, if, if both of the vectors are empty, then the result is empty. If both of the vectors have a head element and the tail, then I will add the corresponding head elements and I will add together everything in the tape, and there are no other cases. So the types tell me that they can not possibly be any other cases. So what I'll do is I'll write the type, vect &lt;int&gt; N to vect &lt;int&gt; N to vect &lt;int&gt; N so the output is vect &lt;int&gt; N. And then I will say to the machine, tell me all of the possible values of the first input.</span>

<span style="font-weight: 400;">And somehow this seems odd to describe in words rather than on a screen. Then we will persist so so I say to the machine, tell me all of the things that first input can have, and it will split the definition. Give me two possibilities. Then I will say for one of those two possibilities, I will say.</span>

<span style="font-weight: 400;">Tell me all of the values that this could have. So we're in the first case where the first input is empty, I will say, tell me all of the possibilities for the second int. And it will tell me only the empty input is possible. So already I've got something out of the interactive editing here and I have something at the types.</span>

<span style="font-weight: 400;">So I haven't had to write any of this definition other than saying to the machine. I'll tell the machine the steps we're going to take and the machine will tell me what the program looks like. Then even then I can go a little bit further and it'll say,  what is, what is the output?</span>

<span style="font-weight: 400;">If both of the inputs are empty and it will tell me, well, the output you're looking for must be a vector of length 0. There is only one vector length 0. So I say to the machine, you tell me what the output will be and it will tell me so that you get more commands to bite by having a bit more information to type, you get more commands for interacting with the machine.</span>

<span style="font-weight: 400;">So, so not just things like telling me what functions or what methods work with these input types, but tell me exactly what. What, what values can this input be? Which, which values are ruled out?  what values can the app, but they just search for the output for me? So, it becomes much more of an interaction.</span>

<span style="font-weight: 400;">It becomes much more of a conversation with the machine than programming. Typically is. And, and I think really in the end if we're going to be if we're going to write programs that work. It needs to be an interactive process. It needs to be a conversation.</span>

<span style="font-weight: 400;">It's almost, to some extent, pair programming with the machine as your pair rather than just riding the program on your own. No, that's sad. But we've only just scratched the surface of what's possible here. So as types get more complicated, we have some engineering needs to be done.</span>

<span style="font-weight: 400;">So the Idris as it stands just gets a bit too slow once you have, once you have much larger programs it's still useful, but,  you tend to be waiting a few seconds for the reply rather than, rather than getting the reply instantly. So I think we've there's a lot of work we need to do here, but if we start thinking about what, what, how can we get machines to support it.</span>

<span style="font-weight: 400;">Type driven development that goes way beyond what IDs can currently do. I think that's an interesting topic to explore, which do a lot more deeply the probably the key concepts, then I think all languages can adopt, or at least all types or statically typed language can adopt.</span>

<span style="font-weight: 400;">There's this concept of a-holes. So a hole is a part of a program that you haven't written yet, but that is nevertheless syntactically valid. So it's an address. You would mark that as a question mark something. So it's a question mark. Then names are question marks, and then I can ask the machine, what is the type of food and it will tell me what's available and what type needs to go there.</span>

<span style="font-weight: 400;">So, I might have some fairly complex program with some tricky manipulation to do. And I'm in the middle of a definition and I just need to know the types of all the variables that I need to know the types that go in that hole. And if the machine can tell me that, then that helps with development.</span>

<span style="font-weight: 400;">Because I very rarely have a program that. It doesn't compile as a result of this. It's like, instead of, instead of writing,  coming up with some plausible but wrong implementation. What I typically do is write as much as the implementation, as I'm sure I understand and leave a hole for the rest is basically to say to the machine over to you telling you, give me more information.</span>

<span style="font-weight: 400;">And. It almost gets to a point where, people say type errors are really difficult to understand if you have a fancy type system, and you know it's not quite true, but you can almost say what type errors? I don't get type errors because, because I write the part of the program, I understand. And I asked the machine to tell me what I need.</span>
<h2><strong>Type Driven Development</strong></h2>
<span style="font-weight: 400;"><b>Edwin: </b>So rather than giving the program to the machine and the machine says your problem, let's say to the machine, tell me what I need here to be right. Sorry. It's of course, it's not true to say what type of errors in practice, but you do tend to find it type areas aren't.  they're not, they don't come up so often when you ha, you don't spend so much time scratching your head over them when you can just replace the wrong bit of a program with a hole and see what the machine's expectation.</span>

<b>Adam: </b><span style="font-weight: 400;">I think yeah. It's odd to talk about just an audio form, but yeah, you've really. Turns the development model inside out, right? So rather than, writing a program and then trying to see, Oh, well, what type should this return? The method here is,  write out the type, use the sort of built-in features to have this expanded and so you sort of, I guess that's the title, right? That's why it's like Idris's development. And I'm assuming that's also. That's also why it says with Idris rather than using Idris, I'm guessing, right?</span>

<b>Edwin: </b><span style="font-weight: 400;">Because well, yeah, I mean, it was originally intended as, as just a book on address, and then it was like, okay if, if we're trying to sell this as a mainstream publisher, nobody's heard of Idris.</span>

<span style="font-weight: 400;">So what are, what do we do to sort of bringing out the details for a wider audience? So it was, the focus in the end became. I mean, even though we'd call does a book about there's a lot more of the process ha how you arrive at the program, not just how you write the program.</span>

<span style="font-weight: 400;">So that's kind of why the book is full of all of these steps of type, define, refine, start with the programs. Here are all the intermediate steps. There's kind of a tricky thing to do in writing rather than animation.  Nevertheless, that is the key idea. Well, you can follow the ideas in other languages too. That's, the tools aren't a vast much, but I hope they will be.</span>

<b>Adam: </b><span style="font-weight: 400;">And the concept of the whole a, if I can just describe it a little bit so I could write a Java program and whenever I don't quite know what goes here. I could write, throws new, not implemented exception and the program will compile so in a way that's kind of like a hole, except the holes.</span>

<b>Edwin: </b><span style="font-weight: 400;">The difference is that it's a runtime failure rather than compile-time information. So you wouldn't get the information about what type, what type needs to go in that hole you would be able to run a partially written program.</span>

<span style="font-weight: 400;">Which is of course useful. I do it all the time I mean, I compile and run programs with holes all the time and just, accept it. The hole is going to crash. Fine but yeah, it's really about getting the information at compile time. It's like the compiler knows this information. Your Java compiler knows exactly what needs to go there because it has to know that it is checking.</span>

<span style="font-weight: 400;">So it's like, why is it keeping the information to itself? This is like an obstructive coworker that doesn't want you to get you, get your program written.</span>

<span style="font-weight: 400;">It's, it just, I mean, I have, I haven't done much development with IDs in Java lately. So for all I know, this is, this is something that IDs do if they don't, then they should, uh.</span>

<b>Adam: </b><span style="font-weight: 400;">Yeah, it's certainly not as well as, like Idris, as interest does it, which is interesting  I feel like the tooling just using the examples in the book and the tooling and it's quite a process. Like I found even like maybe the example doesn't have to be Java, but if, if I was writing Haskell and I just put in. Like undefined, like the type, all get-go will say like it's, it's bottom or something. It won't.</span>

<b>Edwin: </b><span style="font-weight: 400;">Yeah.</span>

<b>Adam: </b><span style="font-weight: 400;">At least the last time.</span>

<b>Edwin: </b><span style="font-weight: 400;">Haskell, the latest versions of Haskell. So exactly. When this came in a couple of years ago. Anyway, so you can now put an underscore in a program. And it will tell you all of the information it has about that hole, so it will give you a compile error, but it's a compiler that says, okay, this is what you have, this is what you need.</span>

<span style="font-weight: 400;">So it's, it's, they call them to type holes, I think and that's, that's pretty much the same concept. It doesn't have the editing, but it's telling you all the information that has so useful there. </span>

<b>Adam: </b><span style="font-weight: 400;">This concept is kind of working its way. </span>

<b>Edwin: </b><span style="font-weight: 400;">sure. Yeah. Um.</span>

<b>Edwin: </b><span style="font-weight: 400;">Yeah, it's an idea that I have the impression it'san idea that people like, and I mean, it's, it's certainly not an idea.</span>

<span style="font-weight: 400;">I came up with it. It's an idea that's been around for quite some time, particularly in the theorem proving a community. So if you're working through, if you're doing a proof in Cocke, for example, or any of the. The earliest systems you're developing the proof interactively and you have holes in the proofs that you're filling in just by learning more information about the program.</span>

<span style="font-weight: 400;">So it's, it's I guess this is one of the ideas that's coming out of this improving background but is useful for programming too.</span>
<h2><strong>Expression Search</strong></h2>
<b>Adam: </b><span style="font-weight: 400;">Makes sense. Yeah. To me,  it seems like magic, but it makes a lot of sense. So the expression search, you have an example in the book where I think you do insertion sort. And I don't think you write anything. It almost seems like you write the type and then</span>

<b>Edwin: </b><span style="font-weight: 400;">You're not quite giving enough information about the program. So if I remember rightly, the example in the book is a, is an insertion, so on vectors. So then, what you’re getting is the right length, but you have to put a little bit in yourself to get the things in the right order. But the one there is one in the book, which is transposing a matrix so I can end by him vector to M by N vector, and there's very little that you have to write there. So you kind of have to know roughly overall what you need to do.</span>

<span style="font-weight: 400;">But I mean, genuinely, when I was coming up with that example, I was thinking, how on earth do you transpose a vector? This is a classic example of this. How on earth do you do it? And then, in the end, I just thought, why don't I ask the computer? Why am I even thinking about this?</span>

<span style="font-weight: 400;">Let's ask the machine to do it. And I pretty much eat at each step tells you what to do. But I could eat it. The interest expression searches are embarrassingly simple, and there are much more sophisticated systems. So so as a, as another dependent decide programming language so I think it's more, more aim towards the theorem improving sides and the programming, but it's still a programming language.</span>

<span style="font-weight: 400;">There's a tool, a thought of that called ante which can. Which goes way further. It tells you more about pattern matching as well as the expression search. So there's, there's a lot more we can do I'm willing to Idris does, is it just does a brute force search for the first thing it finds that matches to type.</span>

<span style="font-weight: 400;">And if you give enough information, it's, it's almost embarrassingly  good how well it does give them how much or how little effort has gone into it</span>

<b>Adam: </b><span style="font-weight: 400;">In the book, you go through an example of printf. So is printf required dependent types to be done?</span>

<b>Edwin: </b><span style="font-weight: 400;">So point is, it's almost the first example of a dependent type program that a lot of people see. You learn how to print something out and see, then you say, okay, well, the types of the arguments to printf depend on the string. That's the first argument to printf so they're computed at compile time. A-C compiler will tell you if you've got it wrong which is interesting cause a printf is, is not as far as I'm aware, part of the C language standard.</span>

<span style="font-weight: 400;">So, so the only way you could do that, I see not being a dependent type language, this is something that has to be hardcoded into the compiler. So, the reason I picked that example is just cause it's a fairly meaty example, of what it means to do a calculation of types of compile time.</span>

<span style="font-weight: 400;">And it's an example that's familiar to a lot of programmers, at least people who have some kind of C background and it's nice to see how you can extend it with,  different types, for example. So it's something that allows you to see what's going on in a, in a concept. You understand</span>

<b>Adam: </b><span style="font-weight: 400;">The dependent part is that based on the format string than the type the of the next parameters change.</span>

<b>Edwin: </b><span style="font-weight: 400;">Right? Exactly. Yes. You calculate the input type from the format string and you calculate the output type from basically the rest of the format string. And as soon as the format string is empty, the output type is just string.</span>

<b>Adam: </b><span style="font-weight: 400;">So we go through this example in interest in both ends like the first thing that comes to my mind, of course, cause in the interest example,  these secondary parameters are calculated based on the first input but at compilation, so, how does this work? If I'm feeding it a format string,</span>

<b>Edwin: </b><span style="font-weight: 400;">Essentially what's happening here at compile time is it's checking with the information it has and at runtime, it doesn't have that information.</span>

<span style="font-weight: 400;">So this is, this is the basis of the problem and the question. So basically what it means is if you want it to compile based on a runtime format string. You're going to have to check that format string at run time and the only way it's going to compile is if the machine is convinced that you have checked the format string to get the right input.</span>

<span style="font-weight: 400;">So if you imagine you're doing this in C, what would you do if you are doing the same thing in a string? Well, the user types in a format string. What do you expect the next arguments to printf to be in your program? I think you're struggling to get that right. So if, if you're allowing the user to type in what the form of the data is, you're going to have to check that data before you, before you make any progress in the program.</span>

<span style="font-weight: 400;">So it's almost going to be like if you've maybe in, C, maybe you would do some check that says that pauses is the format string at runtime and says, okay, if I have %S %D in that order and nothing else, then you're allowed to call this version of printers. So you, I mean, I don't know exactly how you do it.</span>

<span style="font-weight: 400;">But you'd have to do something similar in this program, but it would be checked at compile time that you had done the appropriate run-time checks so just to, I mean, there is a simpler version of this that's easier to think about, but it would scale up into, which is an example of a fairly contrived example.</span>

<span style="font-weight: 400;">But back to vectors again. So reading in. Well, I'll tell you this vector of numbers example again, why not? Because we've already talked about that.  let, let's say where we're reading in two vectors of numbers from the user and we're feeding it to our carefully designed and guaranteed vectors. The input factors are the same length addition function.</span>

<span style="font-weight: 400;">So we ask the user to enter one vector than another. Do we assume that those vectors are the same length? Well, we can't, users are not motive for typing in the input that we need them to have. So the only way the machine is going to let me call the vector addition function is if I've checked that the inputs are the same length, and if they're not the same length, maybe I've, I modify them somehow to become the same length.</span>

<span style="font-weight: 400;">So this, by having more precise types, we're not well, not freeing the program or from having to do run-time checks, but we are freeing the programming from having to do unnecessary runtime checks. And we are telling the programmer exactly where those run-time checks have to be. So if I read a vector that's going to be a vector of some length, and if I read it in another vector, that's going to be a vector of some lengths M so the next thing I have to do is check that N equals M.</span>

<span style="font-weight: 400;">So I just saw the compiler is going to complain if I don't do that check. This sort of thing has really important implications, particularly if you're interested in security. So if you're taking some arbitrary unchecked input from a user and you have a reasonably precise type that says.</span>

<span style="font-weight: 400;">I know this input is safe, provided I can get it to match this type. So, you know I can't think of an example off the top of my head.  But the info has to take a particular form and I've written a, a function that only accepts the type that makes you have an exact date, exact form. But the input I've read is a string and there's no way I'm going to be able to run my function.</span>

<span style="font-weight: 400;">Unless I can convince myself that the string I've read in is legitimate. So of course, this is something that we should be doing anyway. If you're writing any kind of security-sensitive program, every program is security-sensitive these days, isn't it? So if you're got any kind of program you need to be checking that string, you need to be checking that it's the exact form that your function is going to take and, and just, you don't just assume that the things are going to work out.</span>

<span style="font-weight: 400;">But if your types aren't by precise enough, then it might be the. Well, you don't make those assumptions, but there's something you forgot about. The print example is, it's kind of a tricky one, and you probably wouldn't be taking runtime strings, but in the situations where you are taking runtime strings, you need to have a check.</span>

<span style="font-weight: 400;">That would have been the short answer. You need to check at runtime. That's all it is.</span>

<b>Adam: </b><span style="font-weight: 400;">Well, I think that yeah, my bad, bad example and an interesting one would be so, and I think it's in your book, is if you have a just a vector of four elements and you're like the user provides a number.</span>

<b>Edwin: </b><span style="font-weight: 400;">Yeah, so one of them is, one way of doing it is to say to the user, no, I, I'm going to make you provide those number and another way, it's like she's got over a network and you've got no guarantee that's going to be intact so that then another way of doing it is to say, well, well, we'll take whatever they use it gives us, but we're going to make sure that it's right. So yeah,</span>

<b>Adam: </b><span style="font-weight: 400;">It was interesting to me to seem like there's a finite, finite type of integers. So you could have an interesting class that constraints to the possible values of the,</span>

<b>Edwin: </b><span style="font-weight: 400;">Yeah. So this is. Yeah. Not numbers find likely abandoned by some upper limit. So the natural example for this would be an array lockup. So it's, you're getting compiled time checks on the band for the array.</span>

<span style="font-weight: 400;">So again, this is something where a user might type in something that's out of bands. You can only call the function. It's in bands. So the machine is going to tell you, by the way, you need to do a check here. So I think this is, this is one of the things that the people get annoyed about with types and they're annoyed about with,  I, I have to do these checks, but I want to try the program without doing these checks.</span>

<span style="font-weight: 400;">I want to just do some exploratory programming. So I think when, when it comes to the type-driven interactive editing, this is something that we have to think about. Can we either make it so easy to put these checks in that there's no Idris for not doing it? Or can we make it easy for people to just sort of?</span>

<span style="font-weight: 400;">Incrementally arrive at, a program that does the right thing. Just leaving a hole for, for what you haven't done the necessary checks. So that is where we can go a lot better with the tooling. Can I help exploratory programming by having better tooling for exploring?</span>

<b>Adam: </b><span style="font-weight: 400;">Because the concept of the compiler will force the developer to validate all of the inputs that come in from the user. Like, that is a great concept you're saying the problem is getting to that final program cause in the middle step, you don't want to have to already ever written all the valves.</span>

<b>Edwin: </b><span style="font-weight: 400;">This is what I do not talk about. I mean I, I write programs where I kind of, I know the happy path or I've got a rough idea of what the happy path is.</span>

<span style="font-weight: 400;">I'll code the happy path, but I'll just leave a load of holes for the error checking. And I will test the program out within, but that I know is okay and it will be fine. And then I'll test it out within, but if it’s ok and it'll go into one of my holes and it will crash and it'll tell me which hole it went to.</span>

<span style="font-weight: 400;">So I'll fill that hole in. So I find this quite a nice way of working to, to just write in there, be able to write in complete programs and just how's the compiler, build them. And I could still test them even though they're not finished. But I have, I have a machine to tell me which bits I need to do to make my program robust.</span>

<span style="font-weight: 400;">So it's a. I mean maybe that could be improved tooling that allows us to hide bits of the breast, almost like programming with text as the problem here factor, the fact that programming language is fundamentally still text-based things means the sort of things we might want to do as perfectly reasonable things while developing just hide bits of programs. Things we aren't able to do quite yet.</span>

<span style="font-weight: 400;">But to be honest, that's the next thing I want to work on is making this process of interactive editing and just nicer.  Sort of my dream is to have a, like a, maybe a tablet app or something like that where, where, I program essentially by waving hands around on the screen.</span>

<span style="font-weight: 400;">So I write the types and then I fill in the program by waving, waving my hands around, pulling in bits of programs from different sources. But I know that's some way off. </span>

<b>Adam: </b><span style="font-weight: 400;">Well that would be a, a hell of a demo.</span>

<b>Edwin: </b><span style="font-weight: 400;">Yeah. Well, we'll see. Well, I don't, I haven't, I don't even know where it's not a tablet programming yet.</span>

<span style="font-weight: 400;">I think I'll need help with that one. Yes. That's a that's a dream.</span>

<b>Adam: </b><span style="font-weight: 400;">Yeah. I mean, I've liked the keyboard. I don't know if text.  I've heard this comment before, like why do we just have files with texts when, when programs are so much more structured than that? But I think it's a good lowest common denominator.</span>

<b>Edwin: </b><span style="font-weight: 400;">It's always going to be text in the end, but ways of interacting with this, as I say, it's always going to be tested in the end. It's probably not always going to be texted in the end, but that's just the limitations of my imagination but having. Having better ways of interacting with it, even if it is still texts, I think is important.</span>

<span style="font-weight: 400;">So it's what are the limitations of, of the text editors? We have back. It only interviews if you're using pretty much any modern text editor. It's, it's, it's, it's amazing what you can do with them just by, by, I mean, the Athan mode for, for Idris, it's, it's essentially it's talking to an Idrisprocess in the background so we can get it to do anything as long as, as long as we can explain it to Idris as part of a, just a text command.</span>

<span style="font-weight: 400;">So there are all sorts of stone for interesting new ways of editing programs I think I did,</span>

<b>Edwin: </b><span style="font-weight: 400;">I was just going to say that if you start, I'm imagining new things like writing a program, writing a monomorphic program, but there is a polymorphic version of, it that may be already in the library.</span>

<span style="font-weight: 400;">I just sort of imagined writing that program in the interactive type-driven mode. And then the machine says. Oh, by the way, you've already written this program. It's called a map, or it's called zip. I just, once you start imagining what you can do if the machine knows more about your program, I think there are all sorts of the cool stuff we could be doing in there.</span>

<b>Adam: </b><span style="font-weight: 400;">Yeah. I think like a linter kind of can do that sometimes. Say like, Hey, it seems like you're using Map but yeah, it's not  maybe it is interactive with the right</span>

<b>Edwin: </b><span style="font-weight: 400;">Extend. So, linting tools can do this as all sorts of tools that can detect this, but I reckon it should be something that the machine can spot itself. You shouldn't need to code up these specific examples of higher-order functions by the way, again, that's a dream world, but it would be nice to have.</span>
<h2><strong>Quick Answers</strong></h2>
<b>Adam: </b><span style="font-weight: 400;">Okay. So I have a bunch of a yes or no questions that are maybe a little bit silly that I'm going to hit you. You can say yes or no, or you can refuse to answer or expand. So. Does Idris compile to PHP?</span>

<b>Edwin: </b><span style="font-weight: 400;">Yes and no in that you can generate PHP for co-Idris, programs, but it only does the absolute basics so I did that back end as a bet, as you do. It in principle, yes, but don't use it.</span>

<b>Adam: </b><span style="font-weight: 400;">Haskell, having two colons for a type annotation is a mistake?</span>

<b>Edwin: </b><span style="font-weight: 400;"> It was historically the right choice at the time.</span>

<span style="font-weight: 400;">I don't think people necessarily know why it has two columns instead of one so as far as I know, the reason is that it came out of the evolved in various ways from another language, Miranda. So by David Turner and that had type inference and David Turner, his idea was that he would be writing a lot more, list than he would be writing types, therefore, single colon for lists or single colon for types.</span>

<span style="font-weight: 400;">What do you pick? The one that you pick the shortest thing for the thing you do more. So completely sensible because single colon for lists, well, in Idris, I think I'm writing a lot more types than the list, so it's the other way around but anyways, that, as far as I'm aware, that was the reason for the single colon.</span>

<span style="font-weight: 400;">That was a completely sensible thing too. But that doesn't mean we should. Keep the decision because it was the sensible thing to do in 1980</span>

<b>Adam: </b><span style="font-weight: 400;">Having a programming language with lazy evaluation by default is a mistake? </span>

<b>Edwin: </b><span style="font-weight: 400;">No, true or false. Yes, there are pros. I'm not, I'm doing nothing. Violent, yes or no here so there are lots of arguments in favor of lady evaluation.</span>

<span style="font-weight: 400;">There are lots of arguments in favor of strict evaluation.  I like both I would like a language that could read my mind as to what I wanted and when, but that's even more of a dream than the other things. So, I mean, I, I picked a strict for Idris just cause a while ago I'd implemented a lazy language and I wanted to implement strict one this time that was the real reason there's a better reason, which has come up later, which is a. I want a type to precisely say what the data is at runtime. So if, if the type is int, I want the representation of that to be an int. I don't necessarily want it to be a bit pattern that represents an int.</span>

<span style="font-weight: 400;">So, that's why I argue for strict now, but, both, they both got married.</span>

<b>Adam: </b><span style="font-weight: 400;">Hmm. What do you mean by a pattern that matches it?</span>

<b>Edwin: </b><span style="font-weight: 400;">Yeah, so uh. If you see like in C, for example, if you see the data type int, you know that the, if you look at those bits and you interpret them, you will get the number that is represented by that.</span>

<span style="font-weight: 400;">Int in Haskell, what you will get is a pointer to a computation that will get you an int. It might be, it might be an int, or it might be a function that will calculate an int. And I'm just thinking now that if, if I do want the times to be precise, then if it's an int, if the type says it's an int, it should be an int.</span>

<span style="font-weight: 400;">If it's a computation that calculates an int, the type would say to computation the calculating int. So that's why an interest we call lazy int. So we've got this lazy type. That is merely true for Idris. That's not, that's not something that I believe to be universally true. It is merely the decision that we've taken for Idris.</span>

<span style="font-weight: 400;">So I don't think there is a universally right answer, too lazy or strict. They're both useful in their settings. So yeah, I realize,  this is going out on the internet and therefore I should be controversial, but I'm not going to, it's, it's more, it's more complicated.</span>

<b>Adam:</b><span style="font-weight: 400;"> All right. Here's a controversial one that I saw from one of your talks, Americans are spelling colors.</span>

<b>Edwin: </b><span style="font-weight: 400;"> Oh, I just do that to keep it's very sad to me that just one of the final things that happened with the book before going to print is that they changed it into the Haskel style and they broke all my spelling but I've, I, whatever. It doesn't matter, does it?</span>

<span style="font-weight: 400;"> but in, in, in the source code for Idris spell color with the U and, and we spell normalize with an S and, and all of that, however, there are some things does one of the colors, whether U or without U is also not one of them, but it keeps us busy on the internet. So there you go.</span>

<b>Adam: </b><span style="font-weight: 400;">Well, I want to be conscious of your time, Edwin. it's been great to talk to you about interests and the book, and thank you so much for taking the time to talk with me.</span>

<b>Edwin: </b><span style="font-weight: 400;">Great. Well, thank you for having me.</span>

<span style="font-weight: 400;"> </span>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1405</wp:post_id>
		<wp:post_date><![CDATA[2020-04-07 16:48:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-07 20:48:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[type-driven-development-and-idris-with-edwin-brady]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="author"><![CDATA[Author]]></category>
		<category domain="post_tag" nicename="dependent-types"><![CDATA[Dependent Types]]></category>
		<category domain="post_tag" nicename="idris"><![CDATA[Idris]]></category>
		<category domain="post_tag" nicename="proofs"><![CDATA[Proofs]]></category>
		<category domain="post_tag" nicename="theorem-prover"><![CDATA[Theorem Prover]]></category>
		<category domain="category" nicename="transcript"><![CDATA[Transcript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1246]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[157]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_focuskw]]></wp:meta_key>
		<wp:meta_value><![CDATA[Type Driven Development and Idris]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[In this episode dives deep into Type Driven Development and Idris with Edwin Brady to discover the about dependent types, type holes, and many more.]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_linkdex]]></wp:meta_key>
		<wp:meta_value><![CDATA[65]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1408]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Portal Abstractions with Sam Ritchie</title>
		<link>https://corecursive.com/050-sam-ritchie-portal-abstractions/</link>
		<pubDate>Fri, 17 Apr 2020 09:00:25 +0000</pubDate>
		<dc:creator><![CDATA[webmaster@corecursive.com]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1416</guid>
		<description></description>
		<content:encoded><![CDATA[<h2><strong>How abstract algebra solves data engineering</strong></h2>
Today the story of how twitter engineers came up with a unique solution to data engineering.

Adam interviews Sam about how the a<span style="font-weight: 400;">bstract algebra and probabilistic data structures help solve fast versus big data issues that many are struggling with. </span>

Adam talks to Sam Ritchie, a machine learning researcher.  Stop in to hear their conversation about portal abstractions <span style="font-weight: 400;">that let you leverage work from other fields. </span>

<iframe style="border: none;" src="//html5-player.libsyn.com/embed/episode/id/14012333/height/90/theme/custom/thumbnail/yes/direction/backward/render-playlist/no/custom-color/87A93A/" width="100%" height="90" scrolling="no" allowfullscreen="allowfullscreen"></iframe>

"You want to go mine the literature of what other people have done. You know you want to be able to plug these things into your work and really just benefit from this incredible community that's been cranking, for again, maybe hundreds of years." - Sam Ritchie

"<span style="font-weight: 400;">So I think to go forward like there's always going to be new discoveries to be made, but one very, very fruitful thing to do is to turn around, look back and find these things and say, well, is there an interface I could discover that someone's already found that would let me just plug into this incredible, almost battery of human creativity that just exists waiting for the taking.  It is in maybe dusty old papers and books, but it's there. No one's hiding it.</span>" - Sam Ritchie

"I'm aiming to implement these interfaces and pass these tests and then being able to immediately turn around and have like an approximate sliding window counter that would just work with stripes ... entire machine learning feature generation interface." - Sam Ritchie
<h3><strong>Transcript</strong></h3>
<strong>This is a machine-translated transcript. Podcast page for <a href="https://corecursive.com/050-sam-ritchie-portal-abstractions-2" target="_blank" rel="noopener noreferrer">this episode is here</a></strong>

<b>Adam: </b><span style="font-weight: 400;">Several years ago, Twitter had this problem that may sound familiar. The problem is big data versus fast data or batch processing versus real-time string processing. Probably because of the scale that they operate at and the realtime nature of the Twitter feed t</span><span style="font-weight: 400;">hey hit this problem earlier than the rest of us. </span>

<span style="font-weight: 400;">Batch is very efficient. You can calculate things on years of data, but doing the calculation might take a day. Real-time is much faster, but you can sort of only work forward in time. Really, you need both these things. If I want to look at my most liked tweet, I need to look at all the old batch data, but also any real-time tweets that I'm doing </span>

<span style="font-weight: 400;">So it's 2013 Sam Ritchie is a mechanical engineer by training is uncle is Dennis Richie, and he's working at Twitter, and his job is just translating from one system to the other from real-time to a batch job.</span>

<b>Sam:</b><span style="font-weight: 400;"> And there's just so many jobs that looked like that, and it kind of looked like that was going to be my life, like just coding these things. </span>

<span style="font-weight: 400;">You just said enough is enough. Like we need to figure out how to write one piece of code that will run in a real-time world and also in batch world.</span>

<b>Adam: </b><span style="font-weight: 400;">I guess I've come up with the problem from that side where it's like, “oh, I can calculate this thing, but I just started calculating it and like, the world existed before.”</span>

<b>Sam: </b>Y<span style="font-weight: 400;">eah, the backfill problem's hard and it's hard. Like it just consumes your life writing, you know, backfill jobs and you kinda, you, you stick to really simple things because you know, you're gonna have to write them twice. You're going to have to maintain them twice. </span><span style="font-weight: 400;">I mean, it's really not a nice way to live. </span>
<h2><b>Backstory</b></h2>
<b>Adam:</b><span style="font-weight: 400;"> Hello and welcome to co recursive. I'm Adam Gordon bell. How did Sam get away from these one-off jobs? How did they solve this fast versus big data issue? An issue many are still struggling with, the answer isn't some new data processing system that he's here to show. </span>

<span style="font-weight: 400;">Well, the answer is actually abstract Algebra and probabilistic data structures.  If you don't know what those are, don't worry. We're going to walk through it. We're also going to talk about what Sam calls portal abstractions. That’s finding abstractions that let you leverage work from other fields, But we'll do that at the ending. </span><span style="font-weight: 400;">Let's start at the beginning. When Sam was working away at Twitter.</span>

<b>Sam: </b><span style="font-weight: 400;">I was on the revenue team.  I had a colleague named Oscar Boykin who I didn't know that well. We both maintained one of these like libraries I mentioned before that lived on top of a dupe. He had the scala version. I had this closure version and I'm kind of yet again, I had a task for work that was like building one of these dashboards.</span>

<span style="font-weight: 400;">You're trying to count something like, you know, tweets per user per day. You're just basically grouping on some key and then adding numbers to a database. And there are just so many jobs that looked like that, and it kind of looked like that was going to be my life, like just coding these things. </span>

<span style="font-weight: 400;">Through, you know, this or that, Oscar and I teamed up to work on some shared piece of machinery for serialization between the code we both maintained and we realized that like we both were doing this sort of thing and he's got a lower tolerance for BS. You just said enough is enough. </span>

<span style="font-weight: 400;">Like we need to figure out how to write one piece of code that will run in the real-time world and also in the batch world.   Like this is, this happens with compilers, like this is a compiler problem. Let's just back off and solve it. </span>

<b>Adam: </b><span style="font-weight: 400;">So they solve it. They built version one of this open-source analytics system could do a batch, it could do real-time. Some of the results together. They called it a Summingbird. It sums things, and it's from Twitter, so it's a bird. But then they had some interesting revelations about what they had created.</span>
<h2><b>Stitching Things Together</b></h2>
<b>Sam:</b><span style="font-weight: 400;"> You know, if you really simplify what we're dealing with here,  you're writing code that is generating for some key, tweets per user, per hour, something that happens. It might just tweet per user, it might be how many users we have. </span>

<span style="font-weight: 400;">And then you have some value, you have some counter that you're ticking, so you're just incrementing this thing up. And so many machines learning features and dashboards and everything is just like ticking counters. It's kind of like and that's like the secret of analytics work is you're just adding ones. That seems suspicious too. Like that's something you could maybe break out of like a really, is that all we can do? Like how would you do more complicated things? But so this, this software package, Summingbird was a library that lets you write a logical declaration of what you wanted to happen. And then, the second component of it would take, that data structure that you've built and go run it on any number of these different, underlying platforms. </span>
<h2><b>The God of Counting</b></h2>
<span style="font-weight: 400;"><strong>Sam: </strong> So I can power a dashboard. I can do backfills. I have this boundary that's maintained transparently to me, that behind the scenes we'll give a hard line between the, you know, massive, multi-year database. And then the last couple of hours that are stored in some much harder to manage, much more fragile, but very, very fast, you know, online processing system.</span>

<span style="font-weight: 400;">And you know, phase one was just write something that can do, you know logically you're doing the same thing. You've been rewriting the same code. Just have the machine write it for you. but it does open this door and this is the topic I wanted to get to.</span>

<span style="font-weight: 400;">It opens the door and you start to look at this thing and think you know, you have these two buckets. One is like all, all-time before a couple of hours ago, and then you have a bucket for each of the recent hours. So you're doing this addition of some of the numbers, Uh, but you're sort of putting parentheses in one case around like years and years of data, and then another set of parentheses around like each of the previous few hours, and then you take this final step of adding them together.</span>

<b>Adam:</b><span style="font-weight: 400;"> If you're calculating how many times I've tweeted, like Hadoop gets like everything up to yesterday, and then I'm adding that to something that's actually getting the real-time data and just</span>

<b>Sam: </b><span style="font-weight: 400;">That's right.</span>
<h2><b>Abstract Algebra</b></h2>
<b>Sam: </b><span style="font-weight: 400;"> Those are nice ideas, but they're not that they're sort of obvious and not that powerful. But this idea of adding things and putting parentheses wherever you want, It also seems kind of innocuous. It's like this little lamp you pick up, right? It looks kind of, you know, you rub the lamp, you and what you find is like, this idea is not, it's not your new idea.</span>

<span style="font-weight: 400;">It's very simple, but it actually exists in this field of abstract algebra.</span>

<b>Adam: </b><span style="font-weight: 400;">Alright. Abstract algebra, if you're not familiar with it, it's a subfield of math. Stick with me here. I'll explain it a little bit. A lot of concepts from abstract algebra can be implemented in a programming language. A semigroup is one of these. It's an interface. It has one method. That method is add or sum. If we want to stick with the summingbird pun. It also has a rule that things have to be associative. You might remember associativity from a high school math class.</span>

<span style="font-weight: 400;">What happened here is Sam had the system where to calculate analytics. The calculation had to implement a certain interface and then the system could run it in both worlds. The interface had an add method, which meant it was a semigroup, which meant this subfield of math with people talking about seemingly obscure constructs could suddenly enable him to answer interesting questions in his real-time analytics dashboard thing at Twitter.</span>

<b>Sam: </b><span style="font-weight: 400;">So yeah, you can start slimming things back, and when you slimmed it back almost to nothing, you're left with this object called a semigroup, which is an idea of: okay I need some set of things. So numbers in what we've been doing, which is just counting, some way to quote, add two of them together and get something out that's like still the same type and then a test that goes along with that. So the test is that I have to be able to do that associatively. </span>

<span style="font-weight: 400;">So this is kind of, it sort of sounds like a pedantic Mathy thing. Like there's this impulse that I'm sure we can get into in the functional programming world to like, like see ideas that seemed mathy and like slap math names on them and just tweet about it and to like spraying that and that, that sucks.</span>

<span style="font-weight: 400;">But I think it's, the, the thing you get when you do that when you identify this like mathematical concept is. It's not yours, because it wasn't your core idea. People have been thinking about this. It turns out for a long time you have potentially hundreds of years of work that has gone into answering questions of what can I do with types that are able to implement a plus method and then a single test of associatively calling plus, that is a very, very tiny interface to satisfy. But there's a huge amount of work on all the things you can, one, all the things you can do just relying on these two properties and two like a zoo of data structures that all hold those properties. And yeah. So by backing out what we built and making it not just about numbers, but about this thing in schola, you might say, I want to type where I can implement a type class called semigroup for that type.</span>

<span style="font-weight: 400;">You know, if you just make that one change, suddenly you've kind of opened this portal into. You know, again, this whole zoo of data structures, anything that matches this tiny contract will fit into your model. And that's true of any abstraction. But this one was special because when you turn and look at the computer science literature, you find, you know, things I never would have thought about or never expected to work in the context of like, you know, an add dashboard job.</span>

<span style="font-weight: 400;">Suddenly we were able to plug into this thing. So the work became less about how do we go manage, you know, real-time and batch and this kind of boring suit and tie stuff too like we've gone into Narnia and suddenly there's these like approximate, sketching data structures where I can feed items into it and it'll give me a count for the unique number of items seen.</span>

<span style="font-weight: 400;">And can do that up to billions and billions and trillions of items and it just won't get any bigger. Like it doesn't actually have to store them. How does that work? That's like a different question. All you know is that you can take two of these things, add them together, it works associatively and so they suddenly become candidates for running on years and years of tweet data or Twitter data or any, you know, large scale data set and the results, you know, will make sense, will not have any errors and will be real-time updatable.</span>
<h2><strong>Why Adding Things is the Key</strong></h2>
<b>Adam: </b><span style="font-weight: 400;">So you went out to solve this problem of, of like realtime analytics. And your solution is, uh, is a semigroup. It doesn't seem obvious to me. I guess that that's a solution to the problem of analytics.</span>

<span style="font-weight: 400;"><strong>Sam:</strong> Yeah. That's a semigroup. And then the Monoid, I mean, it doesn't stop at the semigroup. Yeah. It doesn't seem obvious that that's the problem too. Uh, the, that’s the solution to analytics, but, it is, </span>

<span style="font-weight: 400;">What, what started to happen as you start to realize that, okay, well it's not the solution to analytics per se. What it is though is, you know, adding things together associatively this seems to be the key that unlocks being able to store data in multiple places and merge together you know your results when you want.</span>

<span style="font-weight: 400;">So being able to distribute in space or time is tied somehow intimately to the associative property that we know from elementary school. Like that's kind of odd. </span>

<span style="font-weight: 400;">Why do I say it's like intimately tied? Just because if you ask what you need to go do that like it's really just this one simple property.</span>

<b>Adam: </b><span style="font-weight: 400;">Let's do a tiny recap. So if we want to run calculations in real-time and batch, we need a common interface. That interface turns out to be  semigroup from abstract algebra. That interface is important whenever you need to distribute calculations. </span>

&nbsp;

<span style="font-weight: 400;"><strong>Adam:</strong> All right, next up in solving analytics is how you deal with data that may be missing. We're going to change our interface to handle that, which will bring us to another interesting concept. </span>

<b>Sam: </b><span style="font-weight: 400;">There's other properties, like the idea of missing value, like if you're querying multiple databases and data might be missing, like, how do you deal with that?</span>

<span style="font-weight: 400;">Well, okay, you probably need some notion of like a zero. So if I'm adding numbers, like adding zero doesn't do anything, that's fine. If I have like lists of tweets, I'm merging together, I can have all these nil checks or check for none or have optional types, or I can know that for a list if I can concatenate an empty list, nothing happens.</span>

<span style="font-weight: 400;">So my code becomes simpler now because I've got this idea of like, you know, an empty data, an empty element of the type. So you can, you can start to see that like a lot of data types have this idea like a set has this idea, uh, numbers, of course, have this idea, for multiplication, you kind of have this idea or you do it just once instead of zero.</span>

<span style="font-weight: 400;">So that's kind of odd. But you know, in fact, there's another thing called the Monoid, which again has like this in your face name. , but it's just the same as the semigroup, but added on is this extra method you implement called identity. We're just getting back a thing that if I pass it into plus to something else, you just won't do anything.</span>

<span style="font-weight: 400;">So again, a very simple idea. But what you get out of it is suddenly the ability to handle missing data. And that comes up all the time. And like dashboards, like how do you represent, data is not there yet. </span>
<h2><strong>A Restrictive Interface Can Make You Creative</strong></h2>
<b>Adam:</b><span style="font-weight: 400;"> All right. So we have semigroups so that we can distribute work. We had one more method to our interface and we get Monoids so that we can handle the absence of data. This is still a very small interface to enable distributed computing.</span>

<b>Sam: </b><span style="font-weight: 400;">It's a very well defined interface, but it's, it's I really think of it like, Portal. It is like a portal into some like an interdimensional transport system.</span>

<span style="font-weight: 400;"> I used to think when I was thinking about how do I become creative? Like what do I want to do in software? </span><span style="font-weight: 400;">And you want to make like original things that no one's done before, right? You want to make these things like crack the door open on something no one's thought about, but. I think more lately that that, I mean, that's kind of lonely. Like if you do that, if you actually succeed and make some like 2001 obelisk, and that's exciting, but it's the contrast that with. If I managed to build like a transporter gateway from like Star Trek, right? And you look through and like you weren't creative at all.</span>

<span style="font-weight: 400;">Like you just made a thing that like million, you know, millions of other galactic civilizations and made before, like that's good. Now you get to plug into the network, like coming up with abstractions like. You know, figuring out some, like, I don’t know, an endpoint to a website or like the packet format required to talk to the web.</span>

<span style="font-weight: 400;">Like that's what picking an interface out of some, like an incredibly well-trodden field, as abstract algebra does for you. </span>

<b>Adam:</b><span style="font-weight: 400;"> Okay. This metaphor is great. I think it needs a little explanation. The monolith is from the 2001 Space Odyssey. I don't think anyone understands it, but it's powerful. This is like coming up with your own unique solution to a problem, a solution that no one has thought of. But the transporter gateway from star Trek, an HTTP interface is less creative. Perhaps you're implementing something that someone else already built. It's not really a new discovery, but you get to draw on all the existing solutions that exist for that interface. You transform your unique problem into a known type of problem where known solutions exist. This is what Sam is calling a portal interface. </span>

<span style="font-weight: 400;"><strong>Adam:</strong> What was on the other side of this portal behind your, your ad function?</span>

<b>Sam: </b><span style="font-weight: 400;"> I mean, we, what, what we got, we built a library of all the things we found. The library is called Algebird. You know, very concretely we got, I mean, the thing I'd never seen before, it was this whole zoo of data structures that the core idea is that if you don't really care about the exact value that you're accumulating w</span><span style="font-weight: 400;">o for numbers, maybe I want a counter, but I don't really care that it's like exact. Like I'm happy with 0.1% error, maybe a hundred or a thousandth of a percent. It turns out there's this whole field of research on data structures like this where if you can give up a little bit error or a little bit accuracy, you can get often, you know, two orders of magnitude, you get a hundred X space savings on this thing and that just, that's so outrageous.</span>

<span style="font-weight: 400;">That, I mean, that took me a while to even understand like what the hell was going on.</span>

<b>Adam: </b><span style="font-weight: 400;">Like, why so why does the amount of space matter? I can make a Monoid that just adds every Twitter user together.</span>
<h2><strong>The Amount of Space</strong></h2>
<b>Sam: </b><span style="font-weight: 400;">Okay. This is a great point. It's not even that it doesn’t, have anything to say about what you can add. It's that you can plug things in. It will just shatter the system. So this example you gave, if I'm trying to go say, I just want to keep lists of everybody's tweets. I decide to group on a user and every time a tweet comes in, I make a list with the single tweet in it. That's my thing. How do you add lists? You just concatenate them together. No problem. So what you find is that most of your database is empty cause most people don't tweet. The tweets that are putting out anyway. And then some people just have these huge amounts of tweets that are pumping out. I mean, some, some are bots that are just hammering out tweets every couple minutes.</span>

<span style="font-weight: 400;">And so you get these incredibly skewed, keys in your database. Some of the values are just getting bigger and bigger and bigger. And there's nothing in your system that has a limit to this from happening. So when you're running some system that sometimes is fetching nothing, the default value, and sometimes it's fetching like dozens of megabytes of, you know, tweets and then filtering on them.</span>

<span style="font-weight: 400;">Like, this is. In some sense orthogonal from your original problem, like that's totally logically fine to do. Totally fits the interface and it'll fit the database for awhile. But it's not everything you meant. There's some problem there. And the problem is that you know, in almost all these systems, definitely at Twitter, there are just skewed keys everywhere.</span>

<span style="font-weight: 400;">Like somebody has got the most followers. And so when you, when they tweet, you've got to fan it out to everybody. And that just like hammers the system. Whereas maybe when I tweet, no big deal, like the system wouldn’t notice. Okay, so why would you accept like an accuracy loss? Like, Yeah, I want, I want the total result.</span>

<span style="font-weight: 400;">Like I want the full thing. I want to know how many followers I have. I don't want to know how many followers I have, like plus or minus 1%. Maybe not though. So it turns out, if you can, well, the problem you're trying to solve is like, how can I track counters and deaden the effect of these massive explosions of a particular key-value pair?</span>

<span style="font-weight: 400;">You get it for free with something like a counter. Because people had done a lot of work to make sure that, okay, all our numbers, add up to some massive amount are gonna use the same amount of bits.</span>

<b>Adam: </b><span style="font-weight: 400;">Yeah. If it's a long or something, it can only get so big. </span>

<b>Sam: </b><span style="font-weight: 400;">And if you want to double its size, like just that a bit. No problem. Why do we just count numbers like it's easy? Well, why is it easy like, well, a lot of problems are solved for you just because of the architecture you're inheriting about how numbers are represented.</span>

<span style="font-weight: 400;">Like if numbers actually took a ton more bits, if we hadn't figured out like how to write things in binary, </span>

<b>Adam: </b><span style="font-weight: 400;">Counting would be harder. Yea, </span>

<b>Sam: </b><span style="font-weight: 400;">So counting lists, like adding lists is pretty hard or sets let's have that example.</span>

<span style="font-weight: 400;">If I want the set of how many followers I have, how many unique people have seen my tweet today? well, what's one, how would you implement that? </span>

<b>Adam:</b><span style="font-weight: 400;"> I just add them to the set and then I can combine sets by just getting rid of them, like doing a distinct.</span>
<h2><strong>Hyperloglog</strong></h2>
<b>Sam: </b><span style="font-weight: 400;">Yup. Exactly.  you know, if everybody had roughly the same number, and it was small of people that saw their tweets, but sometimes, you know, there's just huge amounts. So the distinct set of people that have seen you’re,  the tweet is just massively larger than, than the average.</span>

<span style="font-weight: 400;">So you get this massive set in memory, and you're serializing a deserializing it every time. And there are two ways you can go. One is you can. You start to build any special cases in your system where the abstraction starts to leak and you say, well, you know, I can't really tolerate this. So like it's not just a type with a semigroup, it's like this other thing and there are more constraints. That's fine. If you can accept a little bit of error, like if I don't really care if my account if people that have seen my tweet is off by 10 which honestly I don't like. I mean in that example like data gets dropped all the time. Like if you see, if you hit like on my tweet and then your phone's offline like there's already air just built into the universe.</span>

<span style="font-weight: 400;">So if I accept that and I just live with it, I can reach for a data structure. Like here's the buzzword, there's this thing, all the hyperloglog where. If you allocate this thing, some very small amount of memory, you can get something like 99.9% accuracy on account of how many unique things you've dumped into this.</span>

<span style="font-weight: 400;">So it's an approximate set. You add things to it, or you sort of put things into the set and then you can ask the question, how many unique things have I seen before? And it'll tell you and it'll be almost right and it won't get any bigger. </span>

<b>Adam: </b><span style="font-weight: 400;">It doesn't seem like it should be possible.</span>

<b>Sam: </b><span style="font-weight: 400;">It doesn't seem like it should be possible. And if you try, if you thought of that idea when you were working on your analytics system and you said, yeah, it'd be really nice if I could just like count this thing and like not have the set grow at all, like you're not going to go take a few months and go off and figure that out.</span>

<b>Adam: </b><span style="font-weight: 400;">Yeah.</span>

<b>Sam: </b><span style="font-weight: 400;">It just sounds impossible. But somebody figured it out and then somebody, maybe the same person, but somebody figured out that, Oh, if I have two of these things, I can add it together so I can track, you know, I can track like users for a few hours. I can track my distinct counts. And then if I have another set that represents like stuff I've seen before, you know, I can merge or at a later time I can merge those two together. And the result of the merge set will also satisfy the properties that I had with either of the two side ones.</span>

<b>Adam: </b><span style="font-weight: 400;">And then we can distribute it. </span>

<b>Sam: </b><span style="font-weight: 400;">Yes. Then you can stop and you can save, you can save your state, and then you can load it up again later and keep going. And that's really all we want to do. Like we want things where you can pause and wait a while and then load it back out and keep going.</span>

<span style="font-weight: 400;">And yeah, these approximate data structures get you that ability. If they have that ability, then you can plug them into a system. You know, Summingbird just running these massive analytics jobs and things will just work and you'll solve again, your system’s problem of heavily skewed key distributions that will just go away the same way it does when you use counts.</span>
<h2><strong>Functional Programming Metaphors</strong></h2>
<b>Adam:</b><span style="font-weight: 400;"> All right, so we have our simple interface for real and batch, and it turned out that it already existed in Abstract Algebra. It was the Monoid or semigroup. We found this portal abstraction. We rated the research papers and found probabilistic data structures like the hyperloglog or Monoids that run in a fixed space, but I wanted to ask Sam about this pet topic of mine: Do names for math help or hinder adoption and in software?</span>

<b>Adam: </b><span style="font-weight: 400;">I just imagine you, you know, standing up and being like hyperloglog is semigroup and everybody, nobody knows what the hell you're talking about, but you're like, no, this is important.</span>

<b>Sam: </b><span style="font-weight: 400;">I absolutely have the reaction that you're saying. Like at first I was kinda like, I had to write this job. Fine, we can do it this way. But then it just started to get like. More and more clear that we'd gone down some rabbit hole that was actually like, not just abstraction for abstraction sake, I  had a few experiences of going out and finding papers that, you know, again, implemented like these, there was an approximate sort of sliding window counter.</span>

<span style="font-weight: 400;">Would I have found the paper? No. Would I have taken the time to implement it? No. Absolutely not. But  I'm aiming to implement these interfaces and pass these tests and then being able to immediately turn around and have like an approximate sliding window counter that would just work with stripes, like entire machine learning feature generation interface.</span>

<span style="font-weight: 400;">Like I could take this thing, put it in the cupboard, write a nice docstring for it, like write a little pitch for why you might want to use it and it would just work. There's no sort of. That doesn't look like it would work in an analytics system. Like that just goes out the window. It just will, you know, we've got the test to prove it and you know, pull it off, see what you can think of.</span>

<b>Adam: </b><span style="font-weight: 400;">Yeah, like it seems so non-obvious to me and I don't, I don't really live in this world, so maybe it's not non-obvious. I don't know. I hear people talk about fast data and big data and pipelines. I never hear anybody say like, “Hey, if you can make something a Monoid then you can like calculate it either in batch or in real-time and you can combine it and all you need to do is meet this interface and that's it.”</span>

<b>Sam: </b><span style="font-weight: 400;">Yeah. Well, you heard it here. </span>

<span style="font-weight: 400;"><strong>Sam:</strong>  No, I look, I'm, I'm with you. And I think, so I listened to your podcast with a DHH and he was talking about Ruby and you know when he first picked up, you know, Ruby-like this, this emotional sense he had and that really got me thinking about like, why is it that this idea is not more out there?</span>

<span style="font-weight: 400;">I mean, it's not a tough idea in that if you didn't need it to If you just write the test down and you encountered it, you wouldn't find it to be you. You could do that code, would you? No problem. But there's this like aesthetic sense with certain abstractions and there's something about like pulling abstractions from math that sounds I don't know. I mean, I'd love to hear your, you're in the functional programming world. Like functional programming has this bad rap of just, you know, like, it's all about category theory. We need to show a funk, DARS, and monoids, and monads and, and you know, if you don't get it like here's this category theory textbook, you go figure it out.</span>

<span style="font-weight: 400;">What we were trying to advertise was, here are the names of these things and the names themselves are important because they, you're going to find these names when you go on the hunt for stuff, you can plug it, right?</span>
<h2><b>Naming in Functional Programming</b></h2>
<b>Sam: </b><span style="font-weight: 400;">If you call it addable you have this problem of, okay, what do, what do you solve? You make it more comfortable. And if I have a preexisting library of things. That I can plugin, like this is great. This, I can look at the name addable the function slot, the parameter type. I can go look at the library and I know what can fit into what.</span>

<span style="font-weight: 400;">But what you lose is this sense that you're plugging into this larger, you know, this mine like that you can go down and find new things. And so for someone who's actually looking to like expand the range, you know, I think it would be not wise to change the name to something more comfortable because what you might do, and here's something that happens, you know, I might pick a, or Adam, you might pick up like this thing and you might go, well, okay, I'm going to make a new data type. Like I have addable that looks pretty easy. It's got a plus method on it. And I can implement my thing. I don't pass the associative test, but like, that doesn't really matter. That's just, I'm still an addable, you know, I can still have a minute plus, so I'll make my thing work and like, I'm just going to ignore the test. No problem. I just won't implement that test for me. Um, but like, now you're in dangerous territory. It was so tight. It was such a poetic little interface. When you ditch one of the two lines like you're totally off the map now. </span>

<span style="font-weight: 400;">but I, it really is tied, I think, to this idea of like the aesthetics of abstraction. Like there's an aesthetic response you have to, some people have an aesthetic response to these mathematical abstractions and go like, Holy shit, like this, I’m plugging into something big, and this is a, I'm so happy this post was here.</span>

<span style="font-weight: 400;">I have no intimidation at all. Well, some people go, I kind of remember getting my ass kicked in eighth grade, like in Algebra, you know? Uh, like is it really that again, </span>

<b>Adam: </b><span style="font-weight: 400;">I think, yeah, there are cases where people are m</span><span style="font-weight: 400;">aybe like overly extraneously using terminology, but here it's actually the key to running things. It is paying weight, I guess, in actual business use cases.</span>

<b>Sam: </b><span style="font-weight: 400;">That's right. That's it is, I mean, a thing I'm really passionate about and the reason this stuff's important is. You want to go mine the literature of what other people have done. You know you want to go be able to plug these things into your work and really just benefit from this incredible community that's been cranking for, you know, again, maybe hundreds of years, but then you're turning around and you're presenting this aesthetic thing and.</span>

<span style="font-weight: 400;">Yes, it matters like what the references are to the past, but it also needs to kind of present itself, you know, as its own thing to use. Like you should ideally like a good design is about giving people an on-ramp at every level of engagement they want. You know, like “experts only” is like, fine, but if you're trying to build something that's accessible across the, you know, the entire range of experience and like, you find yourself confused about why.</span>

<span style="font-weight: 400;">Monoid and semigroup and field are not like doing it for people. I think there's, there's more we need to learn there about how to go use these like incredible minds of abstraction resources in modern code.</span>
<h2><b>Finding Abstractions</b></h2>
<b>Adam: </b><span style="font-weight: 400;">I think this makes sense. These concepts are super valuable and these concepts already have names. Maybe the names aren't the problem here. Now I know how semigroups can model distributed calculations, how hyperloglog can give me fixed overhead, but how do I find these abstractions on my own? Like how do I repeat this trick and find my own portal as Sam calls it? </span>

<b>Adam: </b><span style="font-weight: 400;">Like if I, if I go through and I extract some interface, for everything that has a name, like, you know, a dog has a name, a car has a name,  like, how do I know if that's a valuable thing or just me wasting time?</span>

<b>Sam:</b><span style="font-weight: 400;">  Yeah. It's hard. It's, ‘s like the that's the thing we all deal with is programmers. Like, how do you know? I had this, I was thinking this the other day on a walk that like, I wonder if conspiracy theorists would be like, great software developers would just be so sensitive to like, abstraction. You know, you've seen patterns everywhere.</span>

<span style="font-weight: 400;">Like there's probably some dial in, in our brains that crank up or down and it's hard. I don't think an abstraction can like, tell you, like, you know what you just described, like extracting names for everything, like maybe it's good, maybe not. You need a thousand examples that you look at and go like, I think I've got something really powerful here, and if that gets you excited, you should do that.</span>

<span style="font-weight: 400;">But if you simply, if you want to make your search process faster, then there are these other fields where people have been thinking that way for a while. </span>

<b>Adam: </b><span style="font-weight: 400;">So there's, um, this great talk about, ah, like Richard Feynman.</span>

<b>Sam:</b><span style="font-weight: 400;"> Oh yeah. Totally. Tell the story though. Tell the story I think. I think I know what you're going.</span>

<b>Adam: </b><span style="font-weight: 400;">So Richard Feynman collected all these problems over the course of his life. And he said like, that was the secret to him being so successful is like, he had all these problems.</span>

<span style="font-weight: 400;">And then whenever somebody mentions some new solution as he would just go through his list of problems and see, like if it solved them all. Which I guess is kind of what you're talking about, right? It's like, we'll Monoid solve this, and you try it on. Maybe it's a horrible fit.</span>

<b>Sam: </b><span style="font-weight: 400;">Wow. I love that. That's great. Yeah. That's a brilliant Feynman story. It's like, yeah. He says he'll get a click sometimes and go, ah, here's the connection. People go, how did he do that? Well, most, you just don't tell anyone when, when you don't get a hit. Yeah, I love that. Yeah, absolutely. You have this, you have a solution, you have some interface. If you learn about some abstraction that seems powerful in another field, like go backward.</span>

<span style="font-weight: 400;">Say, does this apply to what I'm doing? Is there, you know, I forget if it seems natural or obvious, but like what would it mean if I forced it in?  </span>
<h2><b>What does the future hold for Software Development?</b></h2>
<b>Adam:</b><span style="font-weight: 400;"> What is, what does this all say about the future of software development? How should we think about this idea of importing these portal concepts?</span>

<b>Sam: </b><span style="font-weight: 400;">Yeah. I think that the clue I get from this is that, you, I mean, you're trying to solve interesting problems. You're trying to go expand the range of what is possible for you to build. You know, if you buy this idea that these things just kind of lead toward greater complexity and interest there's always more to learn, there's always more to do than one way to make progress is to go make new like artifacts, new examples, new kinds of works of art almost. We're trying to build these, these things like spun out of our thought and. You know, that is, that's really powerful.  </span><span style="font-weight: 400;">That's really like what it's all about. </span>

<span style="font-weight: 400;">But in fact, there are other fields that have been obsessed with this idea of, you know, structure and relationships between things. And, you know, Physics is one, Math is another.</span>

<span style="font-weight: 400;">I think that all of these are just these incredible cupboards we can raid of ideas that most of which were invented before, like the modern software era. </span>

<span style="font-weight: 400;">You know, one way to move forward is to really use the hundreds and hundreds of years of work that have already been done to give ourselves hints about, you know we effectively have like an alien civilization that we can raid. And that's like our own work before the 60’s when structured programming just became a thing.</span>

<span style="font-weight: 400;">So I think to go forward like there's always going to be new discoveries to be made, but one very, very fruitful thing to do. Is to turn around, look back and find these things and say, well, is there an interface I could discover that someone's already found that would let me just plug into this incredible, almost battery of human creativity that, you know, that just exists waiting for the, taking in maybe dusty old papers and books, but it's there. No one's hiding it.</span>

<b>Adam:</b><span style="font-weight: 400;"> We started with fast data versus big data, we hit Abstract Algebra and probabilistic data structures, but these are all just examples of Sam's idea of finding another field that has already solved your problem and pulling in those ideas. Sam is actually working on this right now and his latest side project, he's looking for more of these portal interfaces into Math.</span>
<h2><b>What's next?</b></h2>
<span style="font-weight: 400;"> </span><b>Sam: S</b><span style="font-weight: 400;">o I'm, I've got a, like a project that I'm about to, I spent like three or four months in this before my current job and I'm, I'm about to restart it like but it's this like reimplementation of a lot of the core reinforcement learning algorithms, but using like totally hardcore functional programming style.</span>

<b>Adam:</b><span style="font-weight: 400;"> So it's like you're pulling the same trick or you're attempting</span>

<b>Sam: </b><span style="font-weight: 400;">Trying. Yea, to see, see if I can be like a one-trick pony. But from a, you know, like with my math trick. </span>

<b>Adam: </b><span style="font-weight: 400;">I don't mean that in a dismissive way. </span>

<span style="font-weight: 400;"> </span><b>Sam: </b><span style="font-weight: 400;">No, I'm, I'm, I'm on purpose doing it to test this theory we're talking about, about like if you're a one-trick pony, but like your trick is like opening the portal. Like, yeah, just keep doing that. </span>

<b>Adam:</b><span style="font-weight: 400;"> Very cool, sir. Well, um, good luck surviving the pandemic </span>

<b>Sam: </b><span style="font-weight: 400;">Yeah. This is all assuming we survive. Yeah, you too, Adam. Good luck with this man</span>

<span style="font-weight: 400;">So that was the show. If you have an interesting story of a solution to a problem, like Sam's, let me know. It doesn't have to involve Math. Adam@corecursive.com or you'll find me on Twitter or the website or wherever. If you liked this episode, like really enjoyed it, then tell your coworkers about it. I've been trying to improve the quality of the episodes and hopefully, it shows.</span>

<span style="font-weight: 400;">Thank you for listening!</span>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1416</wp:post_id>
		<wp:post_date><![CDATA[2020-04-17 05:00:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-17 09:00:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[050-sam-ritchie-portal-abstractions]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="abstract-algebra"><![CDATA[abstract algebra]]></category>
		<category domain="post_tag" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="post_tag" nicename="hyperloglog"><![CDATA[hyperloglog]]></category>
		<category domain="post_tag" nicename="monad"><![CDATA[monad]]></category>
		<category domain="post_tag" nicename="monoids"><![CDATA[monoids]]></category>
		<category domain="post_tag" nicename="portal-abstractions"><![CDATA[portal abstractions]]></category>
		<category domain="post_tag" nicename="real-time-data"><![CDATA[real-time data]]></category>
		<category domain="category" nicename="transcript"><![CDATA[Transcript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[3093]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1438]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Today's episode is about how the abstract algebra and probabilistic data structures helped solve fast versus big data issues that many are struggling with.]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[157]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Portal Abstractions with Sam Ritchie</title>
		<link>https://corecursive.com/050-sam-ritchie-portal-abstractions-2/</link>
		<pubDate>Fri, 17 Apr 2020 09:00:22 +0000</pubDate>
		<dc:creator><![CDATA[webmaster@corecursive.com]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1419</guid>
		<description></description>
		<content:encoded><![CDATA[<h4><strong>How abstract algebra solves data engineering</strong></h4>
Today the story of how twitter engineers came up with a unique solution to data engineering.

Adam interviews Sam about how the a<span style="font-weight: 400;">bstract algebra and probabilistic data structures help solve fast versus big data issues that many are struggling with. </span>

Adam talks to Sam Ritchie, a machine learning researcher.  Stop in to hear Adam and Sam's conversation about portal abstractions <span style="font-weight: 400;">that let you leverage work from other fields. </span>

<a href="https://corecursive.com/050-sam-ritchie-portal-abstractions/" target="_blank" rel="noopener noreferrer">Podcast Transcript</a>

"You want to go mine the literature of what other people have done. You know you want to go be able to plug these things into your work and really just benefit from this incredible community that's been cranking for, you know, again, maybe hundreds of years." - Sam Ritchie

"<span style="font-weight: 400;">So I think to go forward like there's always going to be new discoveries to be made, but one very, very fruitful thing to do. Is to turn around, look back and find these things and say, well, is there an interface I could discover that someone's already found that would let me just plug into this incredible, almost battery of human creativity that, you know, that just exists waiting for the, taking in maybe dusty old papers and books, but it's there. No one's hiding it.</span>" - Sam Ritchie

"I'm aiming to implement these interfaces and pass these tests and then being able to immediately turn around and have like an approximate sliding window counter that would just work with stripes ... entire machine learning feature generation interface." - Sam Ritchie

&nbsp;

<strong>Links</strong>:
<ul>
 	<li><a href="https://github.com/twitter/summingbird">Summing Bird</a></li>
 	<li><a href="https://github.com/twitter/algebird">Algebird</a></li>
 	<li><a href="https://samritchie.io/" target="_blank" rel="noopener noreferrer">Sam's Blog</a></li>
 	<li><a href="https://www.wired.com/2013/11/twitter-summingbird/">Wired Article on Summing Bird</a></li>
 	<li><a href="https://www.scalarl.com/course.html" target="_blank" rel="noopener noreferrer">Hardcore FP Reinforcement Learning</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1419</wp:post_id>
		<wp:post_date><![CDATA[2020-04-17 05:00:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-17 09:00:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[050-sam-ritchie-portal-abstractions-2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="abstract-algebra"><![CDATA[abstract algebra]]></category>
		<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="post_tag" nicename="hyperloglog"><![CDATA[hyperloglog]]></category>
		<category domain="post_tag" nicename="monad"><![CDATA[monad]]></category>
		<category domain="post_tag" nicename="monoids"><![CDATA[monoids]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="podcasts"><![CDATA[podcasts]]></category>
		<category domain="post_tag" nicename="portal-abstractions"><![CDATA[portal abstractions]]></category>
		<category domain="post_tag" nicename="real-time-data"><![CDATA[real-time data]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1704]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1422]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Today's episode is about how the abstract algebra and probabilistic data structures helped solve fast versus big data issues that many are struggling with.]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/corecursive/50_Portal_Abstractions.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[35:15]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[33.61 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:13:{i:0;s:18:"01:35 -- Backstory";i:1;s:34:"03:34 -- Stitching Things Together";i:2;s:29:"04:25 -- The God of Counting ";i:3;s:25:"05:41 -- Abstract Algebra";i:4;s:38:"10:09 -- Why Adding Things is the Key ";i:5;s:34:"13:02 -- Thinking to the interface";i:6;s:37:"16:11 -- The Amount of Space Matters ";i:7;s:20:"19:11 -- Hyperloglog";i:8;s:48:"22:19 -- A Metaphor about Functional Programming";i:9;s:41:"25:45 -- Naming in Functional Programming";i:10;s:29:"28:55 -- Finding Abstractions";i:11;s:21:"31:33 -- Wrapping up ";i:12;s:21:"33:58 -- What's next?";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Sam Ritchie]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Machine Learning Researcher]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/sritchie">@sritchie</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[1421]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Learning a new programming language with Bruce Tate</title>
		<link>https://corecursive.com/051-bruce-tate-language-learning/</link>
		<pubDate>Tue, 05 May 2020 12:08:50 +0000</pubDate>
		<dc:creator><![CDATA[webmaster@corecursive.com]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1449</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>Finding Joy in Learning Programming Languages</h4>
<span style="font-weight: 400;">There’s joy that can be found in language learning and pain as well. Whether you’re a beginner or an expert, there are still some things you can only discover by picking up a new language. </span>

<span style="font-weight: 400;">Bruce Tate will tell us how learning new languages rekindled the spark of joy for him. </span>

<iframe style="border: none;" src="//html5-player.libsyn.com/embed/episode/id/14285750/height/90/theme/custom/thumbnail/yes/direction/backward/render-playlist/no/custom-color/87A93A/" width="100%" height="90" scrolling="no" allowfullscreen="allowfullscreen"></iframe>

<i><span style="font-weight: 400;">“</span></i><span style="font-weight: 400;">I find that learning a new language mixes a lot of joy in that pain, and that's when I grow most rapidly as a developer.”</span>

<span style="font-weight: 400;">“You can't break somebody else through their own pain. They have to learn their own lessons, and they have to, at some point in the model, they have to feel more and more pain to break through to the expert.”</span>

<span style="font-weight: 400;">“</span><span style="font-weight: 400;">When you visit other places, when you learn other languages, the world gets smaller.”</span>
<h3><strong>Transcript</strong></h3>
<strong>This is a machine-translated transcript. Podcast page for <a href="https://corecursive.com/051-bruce-tate-language-learning2" target="_blank" rel="noopener noreferrer">this episode is here</a></strong>

<b>Bruce</b><span style="font-weight: 400;">:  Even though you get marginally better at what you’re doing, you’re not doing the things that make you curious and joyful and the things that brought you into programming in the first place.</span>

<span style="font-weight: 400;">I think it’s actually poison. </span>

<b>Adam</b><span style="font-weight: 400;">:  Hello and welcome to CoRecursive. I’m Adam Gordon bell. That was Bruce Tate. His books about programming languages are super fun. Today, he’s going to tell us about leaving Java to explore less mainstream programming languages and what he thinks is broken in our industry, and how we can fix it.</span>
<h2><b>Leaving Java</b></h2>
<b>Adam:</b><span style="font-weight: 400;"> I started off by asking Bruce about his career as a Java developer.</span>

<b>Bruce</b><span style="font-weight: 400;">: I probably started writing Java in 96 and went independent in 2000.</span>

<b>Adam</b><span style="font-weight: 400;">: So you started off in Java then you left for greener pastures. I guess what I know about you is your kind of books about </span><strong>Seven Languages in Seven Weeks</strong><span style="font-weight: 400;">. So why learn another language? You were in Java for a long time. Conceivably, you could have stayed in Java till today.</span>

<b>Bruce</b><span style="font-weight: 400;">: Yeah, conceivably, and a lot of my friends did. So there’s a big speaker circuit called No Fluff, Just Stuff, and a huge number of the big Java developers were there. DHH was built in Ruby on Rails, and Ruby language was attractive to me. I got in it just before the rails framework blew up. </span>

<span style="font-weight: 400;">And there was another guy, though. His name is Dave Thomas. I was at one of these No Fluff, Just Stuff talks with Dave Thomas, who after that time has become my mentor and a good friend.</span>

<span style="font-weight: 400;">I started saying, well, I bet Ruby can’t do this, and I bet it can’t do this. No bet it can’t do this. And you know, the consummate British gentleman stares me down and says, Bruce shut up until you’ve done something non-trivial in this language, and then come back. And so I went away with a business partner named Justin Ghetland and we built this application and we built it in just a small fraction of the time that it would take to build a similar job application. I mean because it was right in Ruby sweet spot. It was babysitting this big fat relational database with a very tiny web UI, and there were a lot of things that can do that better than Java could at the time.</span>

<span style="font-weight: 400;">So we did that, and with so much success. This is a pretty significant competitive event.   I lived in Austin, Texas, and there was a tiny town called New Braunfels, a proper German name. And they had this company called Autogas, which was a huge company with a small niche.</span>

<span style="font-weight: 400;">And they basically started the auto fueling. And the problem was that after they started that business, there were all these customers that didn’t want to go into the stores anymore, right? So it became this rewards company, right? So that they had to incent you to go into the stores with great coupons. So that’s, that’s why you always see these programs, like, did you get your rewards today for your latest fuel?</span>

<span style="font-weight: 400;">But they were having problems with a particularly nasty job implementation. And I told them on just a raw gamble that I could build their system for one-third of their cheapest build. And actually did that and made a good amount of money with it. So that’s how I got into Ruby. </span>
<h2><b>Leaving Ruby</b></h2>
<b>Bruce</b><span style="font-weight: 400;">: And then at some point, the same thing happened to me within Ruby that was happening to a lot of people. I was hitting a wall from a lot of perspectives, from an organizational perspective, from a memory perspective. And I read the same paper that everybody else was reading called the “Free Lunch is Over.” That was the one that said as processors double in speed, we get the economic benefits and our industry benefits. But one of the things that’s happening is that we are not getting all the benefits out of Moore’s law that we used to or for physics reasons. Because if you keep cutting the circuit in half, eventually the space between your circuits is going to be just several atoms thick and that’s what was happening.</span>

<span style="font-weight: 400;">So we kind of hit this wall. We couldn’t double things in performance anymore by just doing the same thing by cramming the same chip into something smaller. What we had to do was to stack them like plates in the pantry, and when we stack them, the languages that work on them had to walk and chew gum at the same time.</span>

<span style="font-weight: 400;">They had to be concurrent. And so I wrote </span><strong>Seven Languages in Seven Weeks</strong><span style="font-weight: 400;"> because I was afraid. I was terrified that the Ruby wasn’t going to get it, do everything that I needed to do and kind of the cool kids that I knew were leaving the room and moving on to something else. And I was watching this happen, but I didn’t know enough to know what the next thing was going to be. So I wrote that book hoping to bring other people with me and then several doors opened.</span>

<b>Adam</b><span style="font-weight: 400;">: Wow. I wouldn’t have guessed that you wrote it from fear because it seems kind of fun, oh, let’s take a tour of things.</span>
<h2><span style="font-weight: 400;">Erlang and Joe Armstrong</span></h2>
<b>Bruce</b><span style="font-weight: 400;">: It started to be out of fear, and then that was really the time that I became a language buff. There’s a language called Erlang that I’m sure you’re familiar with, but for your listeners, the Erlang language is a language with a good chunk of the world’s messaging traffic.</span>

<span style="font-weight: 400;">It’s a language that was developed at Ericsson, created by a couple of gentlemen named Robert Vrding and Joe Armstrong and a few other people that aren’t as well known. Joe Armstrong got the first draft, the first two chapters I ever wrote on this thing, and I didn’t know that he was going to get the two chapters.</span>

<span style="font-weight: 400;">The two chapters were Erlang and Prolog. My editors sent them and said, “Hey, I’m sending this up for review,” and I said, “Okay, cool.” After a little while I thought, “Who did you send those chapters to again?” And she says, “Oh a guy.” I knew her by this time, and I said, “Who did you send the chapters to?”</span>

<span style="font-weight: 400;">She says, “It’s Joe Armstrong, but it’s going to be good. It’s going to be fine.” So he wrote to the publisher back and almost killed the project dead in its tracks.</span>

<b>Adam</b><span style="font-weight: 400;">: Oh.</span>

<b>Bruce</b><span style="font-weight: 400;">: I was a new developer, right, of functional languages. I don’t know any of that stuff. Anyway, Joe’s note was not the super kind, gentle note that he is known for, right?</span>

<span style="font-weight: 400;">It was like, “This book is in trouble. I get the sense that this author knows Erlang very well,” which was not true.  I mean, there’s a first, it was based on his example, which is why he thought on a new, well. He said, “This author knows nothing about Prolog.” So anyway, I kind of tucked my pride into this tiny little bag and then just approached Joe and said, “Hey, can you teach me some Prolog?”</span>

<span style="font-weight: 400;">And he did it. And so doors started opening for me. You know, I noticed a couple of people that have been on your last show, you know Edwin Brady, he did an interview for one of my books and Philip Wadler and DHH. I got to meet through one of the early books. It was a very exciting moment for me because Joe was so excited about the Prolog and as his joy kind of bled off on me.</span>

<span style="font-weight: 400;">So we were working on this problem, playing Sudoku.</span>

<b>Adam</b><span style="font-weight: 400;">: Was this a phone call?</span>

<b>Bruce</b><span style="font-weight: 400;">: Yeah. Just an internet call. Here, I’m this nobody developer talking to Joe Armstrong, who’s really one of my idols, right? I kept trying to code the algorithm for the solve. He said less, and I would cut code away and cut code away until all that was left was the rules of the game.</span>

<span style="font-weight: 400;">I mean, literally it’s like this thing has like nine cells and all the rows, columns and squares have to be different. And then I press enter and the solution pops out. Right. And you know, I’m on a different continent and Joe is laughing. And I say, Whoa, what’s this about? Is he making fun of me? </span>

<span style="font-weight: 400;">No, it’s the joy of the language! He said, “You just had your Prolog moment and I was here to see it.”  So it was just a beautiful moment.  And I mean, we are going to miss Joe Armstrong, but that was a wonderful moment to be on the phone and to share it with them.</span>

<span style="font-weight: 400;"> I mean, I didn’t have any idea at the time about his affinity with Prolog. It was great. Since then I’ve kind of talked to Dave Thomas. And I mean, lots of other people about why learning languages is so important. And I’ve spent a long time trying to internalize that.</span>

<b>Adam</b><span style="font-weight: 400;">: That’s a great story. I did talk to Joe myself very briefly. When he put out his Erlang book, I got to like the early edition, and then I emailed him a couple of questions. Yeah, he responded right away. I don’t think I had any extensive phone calls with him, but he was very available.</span>

<b>Bruce</b><span style="font-weight: 400;">:  He was, he was such a gentle man. He was the ultimate ambassador for that language. The ultimate investor. Just very kind.</span>
<h2><b>Why Should People Study Programming Languages</b></h2>
<b>Adam</b><span style="font-weight: 400;">: So you mentioned it briefly there, why should people learn programming languages. I assume you’re not using Prolog day to day, but you found it valuable in some way.</span>

<b>Bruce</b><span style="font-weight: 400;">: I have spent many, many years thinking about this, and I have finally settled on why it’s so important. So have you heard of the Dreyfus Learning Model?</span>

<b>Adam</b><span style="font-weight: 400;">: No, I have not.</span>

<b>Bruce</b><span style="font-weight: 400;">: The Dreyfus learning model is an old air force model for teaching pilots. And there’s some science behind it. Basically there’s this big old pyramid.</span>

<span style="font-weight: 400;">So if you Google for Dreyfus, you’ll find all kinds of resources for it. A lot of the things were based on it, but there’s this big pyramid, none of the bottoms, you always have some flavor of a beginner. And on the top, you always have some form of expert. And the Dreyfus model believed that you taught experts and beginners and everyone in between different ways.</span>

<span style="font-weight: 400;">For beginners, you learn mostly by lists. Joe Armstrong eventually wrote the forward for </span><strong>Seven Languages in Seven Weeks</strong><span style="font-weight: 400;">. And he would say, so the way to learn programming at the very beginning, you’re going to code the programs side by side, and then you’ll add to the program and then eventually you’ll be able to do it yourself.</span>

<span style="font-weight: 400;">That’s very much the way the Dreyfus model works. One of the things that are interesting is that when you’re at the bottom of that pyramid, there’s this thing called pain, and there’s a lot of it. So I’m working with a mentoring program for women and minorities in tech in Chattanooga, and there’s a man named Evan Miller.</span>

<span style="font-weight: 400;">He was watching me teach this woman a particular concept. She would struggle with something and then I would kind of make a little correction and she would struggle with it. Then Evan would shake his head and she would struggle and I would make corrections, and Evan would shake his head. So I finally got frustrated and I turned around and I said, “What?” He said, Bruce, she’s got to feel her own pain</span>

<b>Adam</b><span style="font-weight: 400;">: Yeah.</span>

<b>Bruce</b><span style="font-weight: 400;">: At the bottom of that Dreyfus pyramid, and we all know it. You can’t break somebody else through their own pain. They have to learn their own lessons, and they have to, at some point in the model, have to feel more and more pain to break through to the expert.</span>

<span style="font-weight: 400;">But we’ve found that developers need to scale that pyramid so many times because the pace of technology is advancing so quickly. So I find that learning a new language mixes a lot of joy in that pain, and that’s when I grow most rapidly as a developer. That’s kind of the model I’ve built my company around.</span>

<span style="font-weight: 400;">There’s a tiny little subscription that you get, and then we basically knock you down the whole mountain, the whole pyramid. Let you climb up again. Knock it down and climb up again. Every two months there’s another language and you get knocked down the pyramid to climb up again. I think it’s really important.</span>

<b>Adam</b><span style="font-weight: 400;">: So is it because they’re learning a new language is hard or because it’s fun? I don’t know what.</span>

<b>Bruce</b><span style="font-weight: 400;">: Yes. It’s all of that. It’s hard. There are a lot of things that are important here. The first thing is that you get your brain, you get out of your expert’s brain and into your beginner’s brain.  The ability to go from one to two, to three, to four, to a five, that’s the core skill of our program.</span>

<span style="font-weight: 400;">It’s not whether you can code React or whatever. It turns out, if you invest in people in this way and people, there are companies like Google that have invested in this approach, let developers play. When they play, when they experience pain, and when they experience joy in the context of learning, magical things happen.</span>

<b>Adam</b><span style="font-weight: 400;">: I learned before, there’s like an HR type term for this.</span>

<b>Bruce</b><span style="font-weight: 400;">: Is there?</span>

<b>Adam</b><span style="font-weight: 400;">: Yeah. Well, maybe HR is not the right term. Maybe economics. The economic term is like discretionary input. So it’s like input that people feed into their work that is discretionary. That’s like above their requirements.</span>

<b>Bruce</b><span style="font-weight: 400;">: Yes. And I think that we ought to think of it as an investment. If you wind up clearing the deck for somebody for the whole, let’s just say Friday afternoon or Friday morning, if you clear the deck, magical things happen. It turns out that you’re going to, the first couple of months, it’s going to be an investment.</span>

<span style="font-weight: 400;">It’s not the sunk cost. If that money will come back because that developer will get more tools in the box and that developer will learn to learn more quickly, and as new technologies come online, they won’t be afraid to deploy them. It will 100% pay for itself. The way to turn a passionate, beginner programmer to a passionate intermediate is to give them a playtime.</span>

<span style="font-weight: 400;">The way to turn a passionate, intermediate to the passionate advanced developer is to give them playtime. And when you do that, you get the benefit of basically lower costs for a little while. You get the benefit of somebody who actually enjoys what they do and the endorphins that kick in when you’re enjoying the learning process are just supercharging the whole development improvement cycle.</span>
<h2><b>Friday Projects</b></h2>
<b>Adam</b><span style="font-weight: 400;">: What if I’m just a developer and I want to learn something new, like how do I find time for that in my world?</span>

<b>Bruce</b><span style="font-weight: 400;">: That’s a loaded question.  There are a number of questions, and one of them is where are the resources and how are they shaped? That’s a problem because the resources for an expert are different, or the resources for a beginner. So if you want to make a habit of going down to the bottom of climbing up to two or three or maybe even a four in a language on a regular basis, then you have to have media that’s not just a book, or not just a video series or not just a like a test first problem, like an exorcism.io or something  is a great resource for that kind of thing. One problem is where do you get the media? The second problem is how do I get my boss to buy off on this concept?</span>

<span style="font-weight: 400;">And those are difficult problems. And of course, we have our take on it. We believe that you have to have multiple types of media to learn. We have links so you can go off and read, tiny problems that you can go solve. We have pieces, a slice of a book, a slice of the video, but whatever your take is, this is all kind of new stuff.</span>

<span style="font-weight: 400;">And some people believe you shouldn’t script the fun. No. I think that you can, and you should script the fun and that if you do screw up the fun, you learn more quickly. Other people believe that, as soon as you start scripting the fun, it becomes not fun anymore and you don’t get the same endorphins.</span>

<span style="font-weight: 400;">I don’t know what the science behind that is, so that’s hard. And it’s also hard to make the case to management, Hey, I’m going to do something that is other than what you told me to do and you’re going to be happy that I did it. So that’s a statement of faith. And so you basically have to be able to defend yourself and talk about the test cases, like Google.</span>

<span style="font-weight: 400;">So there are a number of companies that I work with that do the Friday projects, but the people that do them will make that investment. Their developers tend to grow. The complete non-answer!</span>

<b>Work On Finding Your Joy</b>

<b>Adam</b><span style="font-weight: 400;">: It’s an answer. It’s tricky. I get what you’re saying. What about if I can push on this issue? What about if my work is not collaborative with this? If I just need to do my job, how do I prioritize learning in that type of world?</span>

<b>Bruce</b><span style="font-weight: 400;">: So I believe to be a healthy developer, there are all kinds of studies. I just gave a talk in Bangalore called Joy, and I wanted to give that talk in particular - it’s a functional programming conference. I wanted to give that talk in particular because we’re starting to notice that Mumbai and Bangalore developers under stress are developing heart problems at the same rate and even a more extreme rate than similar groups in the United States. </span>

<span style="font-weight: 400;">I wanted to give the talk that says, Hey, you have to take care of your career. You have to work on finding your joy. You have to do things that make you curious and take you away from your day to day programming profession. And your value system that is the Western value system, isn’t considering all of the facts.</span>

<span style="font-weight: 400;">I’ve been thinking about this and I think that the way that we’re building developers is wrong. I think that we don’t think enough. I think that we tend to build people to the point where they can do these repetitive things very quickly to the point where they don’t enjoy them anymore. And then we ask them to keep doing them under more and more pressure as the codebases grow.</span>

<span style="font-weight: 400;">And with raising expectations because now you’re maintaining a larger code base doing the same thing. We’re not giving people enough breaks to, and not just breaks to walk away from the keyboard and take a walk, but breaks to allow the brain to grow in other ways.</span>

<b>Adam</b><span style="font-weight: 400;">: Yeah, I would agree to that. And that the whole service industry, which like a lot of the Bangalore kind of world is billable hours. I think that that is just stressful in and of itself. Like it’s very tightly measured.</span>

<b>Bruce</b><span style="font-weight: 400;">: It is broken. So after the fact that they’re basically upside down from the United States where most where, a lot of those companies serve. You take a highly motivated population that lives probably an hour and a half out of town because everywhere is an hour and a half from where you work.</span>

<span style="font-weight: 400;">So you build in three hours of the day. Then you say you have to be around on both of the margins. When people come in and when people leave, and you have to be productive during the rest of that time, and that’s a recipe for killing a generation of fathers that never know their kids. I think it’s a really difficult thing.</span>

<span style="font-weight: 400;">So the nice thing about being at the functional programming conference there was, many of the leaders in Bangalore were there. I was able to give that talk that said, Hey, don’t discount your personal passion and your joy. I saw people that were 40, 50 who just bread down and cry because it resonated so well.</span>

<span style="font-weight: 400;">I don’t think that they’re alone. I think that we have a whole generation of developers in this country.  If you think about the pattern, we’re successful with the software development model and we say, Hey, keep doing the same thing and you know, more and more tickets.</span>

<span style="font-weight: 400;">Then at the same time, we’re growing the code base. We’re not providing time to refactor and make the code base better. Even though you get marginally better at what you’re doing, you’re not doing the things that make you curious and joyful and the things that brought you into programming the first place.</span>

<span style="font-weight: 400;">I think it’s, it’s actually poison. </span>

<b>Adam</b><span style="font-weight: 400;">: It’s great talking to someone like Bruce who’s been in the industry for more than five years. Our industry is so young and I think we have lessons to learn. One of them is what Bruce is saying here. You can’t build a long career at a place where the work is never fun, where you just have to crank out ticket after ticket.</span>

<span style="font-weight: 400;">There’s a related question that I wanted to ask Bruce as well. </span>

<b>Adam</b><span style="font-weight: 400;">: Does learning a language have to have some payout in career aspirations?</span>

<b>Bruce</b><span style="font-weight: 400;">: No. No. Learning languages, I mean, for Joe Armstrong, it was the Prolog moment.  You know, as I wrote </span><span style="font-weight: 400;">Seven Languages in Seven Weeks</span><span style="font-weight: 400;">, I didn’t expect to sell a single copy of that book. That was about bringing people on the joyful journey with me. And in an age where every publisher is trying to strip the personality of a  book, actually comparing languages to movie characters, it just didn’t fit. Right?</span>

<span style="font-weight: 400;">What I was trying to do is move a person’s head with me, is when I went from page 89, the end of IO, to 90 the beginning of Prolog or whatever. You know, when you went from Prolog to the functional family of languages, I was trying to bring people along the journey and move their brains.</span>

<span style="font-weight: 400;">The payout is secondary. The joy is the journey, right?. So I have this coding club at a high school in Chattanooga where a lot of the kids don’t have their own computer. We basically just pair around a problem. So we were working on Tetris at the time, and we throw out the t-shirts for Groxio and for our conferences, and they kind of strut in and they love them.</span>

<span style="font-weight: 400;">But the favorite t-shirt that I ever saw was a t-shirt that said, “I hate programming, I hate programming. I hate programming. It works. I love programming!” I said, “Yes!” That person gets it. That’s the joy.  That’s tinkerer’s  joy.</span>

<b>Adam</b><span style="font-weight: 400;">: I always found that side projects can be very enriching sometimes just because you get to throw away, like a professional world. There are deadlines, there are things to do, and then if you just get to build something on the side, and in my mind, I’m like, whatever I’m building here is going to change the world.</span>

<span style="font-weight: 400;">But actually the fun of it is that it doesn’t actually matter that I can just build it and throw it away and there’s no bug reports or whatever.</span>

<b>Bruce</b><span style="font-weight: 400;">: So there’s a great talk at our Lonestar Elixir conference in Austin. The talk was the “Grand Bank of Jon Jon” where this guy said, Hey, there’s this framework called Nerves so we could code stuff. And so what I really want to do is put an ATM in front of Amazon. So he actually made this hardware-software project that let the kids put in a card and pay with Jon Jon bucks.</span>

<span style="font-weight: 400;">And his name is Jon, right, and he actually pays for products on Amazon. And they would kind of teach their kids financial responsibility, but he had more fun with that project. They’ll never use it for anything besides the house, but he had more fun with that project than anything. So I completely agree with you.</span>
<h2><b>The Most Fun Language</b></h2>
<b>Adam</b><span style="font-weight: 400;">: So what if I just ask you some questions about languages. What’s the most fun language that you had fun learning?</span>

<b>Bruce</b><span style="font-weight: 400;">: There’s a lot of different categories there, and I’ll answer a few of them. One of the questions is, what’s the most mind-bending programming languages? And there are probably three. One of them is a language called Elm from a guy named Evan Czaplicki, and he worked for Prezi for a while,</span>

<span style="font-weight: 400;">Worked at No Red Ink for a while. And that language was a user interface language, but it was strongly typed and it was a beautiful React style and flow. But it worked that way end to end. And that was just mind-blowing. So Evan had built this Mario game and you could code on it a little bit here and you know, change of parameters and suddenly Mario was jumping higher.</span>

<span style="font-weight: 400;">That was mind-blowing. So the second one, you’ve had Evan Brady on the podcast before?</span>

<b>Adam</b><span style="font-weight: 400;">: Yeah.</span>

<b>Bruce</b><span style="font-weight: 400;">: He has this concept called Dependent Typing. There’s a research field called dependent typing where you build not just the character of a type end, but also values into the types as well.</span>

<span style="font-weight: 400;">So that if you have a list of six and the list of seven and you add them together, you have a list of 13. And what was interesting for me about that language is I kept saying, I don’t get it. I don’t get it. I was just grinding through these types and having a horrible time. And then so I ground through the types and says, Oh man, the functions are going to be terrible. And then I started using the tool and I kept pressing tab. And the program just wrote itself. I said, Oh, I think I can see where he’s going here. Because once you get all the thinking done, and in the language itself, the rest kind of wrote itself. So that was really cool.</span>

<b>Adam</b><span style="font-weight: 400;">: Yeah. He had an example in his book where I think it was transposing a two-dimensional array, and like you didn’t even type anything. It was just like hitting buttons and then it was like you wrote out the type and then you kind of autocomplete autocomplete autocomplete.</span>

<b>Bruce</b><span style="font-weight: 400;">: Right. It was insane. I had a very similar experience with run length and coding, like a zip algorithm. That was cool. So the third one is there’s a program called MiniKanren which is Clojure Meets Prolog, which was absolutely mind-blowing. I wrote about that in </span><span style="font-weight: 400;">Seven More Languages in Seven Weeks</span><span style="font-weight: 400;">.</span>

<span style="font-weight: 400;">It was Jack Moffitt, I believe, who wrote about that language and it was so stunning. He had the story algorithm. He had like a story generator that was cool that would basically take these beginnings and ends and weave together a plot in between, based on facts and language. There are certain languages like Smalltalk that are beautiful but flawed in fundamental ways.</span>

<span style="font-weight: 400;">Like Smalltalk. It’s great to work in until you have to extract the freaking program from the image. You can’t get it out to package it. I’m like, where’s the line around this program? Well, with a Prolog, it’s input output. And so when you can marry Prolog with a language like Clojure, that is about as extensible as a language could be, beautiful things can happen.</span>

<span style="font-weight: 400;">So unlike those three, in those ways. I think that Elixir is a really cool language. That’s my favorite at the moment. I like Elixir because it has this idea of OTP, which is super advanced. Simple concepts that kind of grow up in an advanced way. Have you ever seen the IT Crowd the British comedy?</span>

<b>Adam</b><span style="font-weight: 400;">: I have, I have seen it a little bit.</span>

<b>Bruce</b><span style="font-weight: 400;">: Did you try turning it off and on again?  That’s every episode built to answer the question. Did you try to turn it off and on again? Well, that’s OTP. So if you have a little server and anything breaks, it’ll shut it down and turn it on in the last known good state. So I like that. But I also like that I can take my beginners and I could teach them Elixir.</span>

<span style="font-weight: 400;">And there are simple transformations. We do them in pipes, which means you feed the output of one function as the input is the first argument for another function. And when people see pipes, they say, Oh, I get it. I get that you can build a program in this series of transformations. So yeah, those were some of my favorites. </span>

<span style="font-weight: 400;">And the last two that I’ve explored, there’s the Crystal language, which is kind of like a high-performance Ruby, which is cool. A fully typed Ruby, and I get a lot of the dynamic feeling of Ruby, but instead of doing it with opening the classes, they get with macros. And so that one is wild. All the things that I thought wouldn’t be possible with the stronger typing.</span>

<span style="font-weight: 400;">You know you can get about 90% of the way there. So that was fun to see.</span>

<b>Adam</b><span style="font-weight: 400;">: Yeah. You would think a strongly typed Ruby is not anything like Ruby or.</span>

<b>Bruce</b><span style="font-weight: 400;">: Right. Well, it turns out it’s pretty different, but the programs look very, very similar. So they did a lot of investing in their macro system and a lot of them investing in type inference. And so they got surprisingly far, I would say. And then the last one that was interesting was a language called Pony.</span>

<span style="font-weight: 400;">Have you talked to any of those folks yet?</span>

<b>Adam</b><span style="font-weight: 400;">: No, I had a request from somebody to interview someone about Pony before, but I’m not familiar with it.</span>

<b>Bruce</b><span style="font-weight: 400;">: The one you want to talk to is a guy named Sean Allen. He’s just a brilliant guy. So the guy who built it, and this is a guy named Sylvan Clebsch but it’s a really fascinating language because they built this C like language in terms of performance with typing. That’s turned up to 11 so really, really extreme typing, and they bake into the language this concept of reference capabilities, which are part of the types. And a reference capability won’t let a program compile if there are any concurrency type conflicts in there.</span>

<b>Adam</b><span style="font-weight: 400;">: Oh, it sounds a little bit like Rust, I guess.</span>

<b>Bruce</b><span style="font-weight: 400;">: Yeah. But more like a 100% safe on the concurrent level. So Rust solves it for a narrow window of the system, and it’s very much cooperative. Right. And with Pony, if anything is broken in there from a type perspective, it won’t compile. So you spend a lot of time fighting the type system, but once you beat the type system into submission, your program works and it will work.</span>

<span style="font-weight: 400;">I like language creators that try to think of language creation from a completely different perspective. That one’s interesting because it’s like, what if we had the performance of C, which is copyable. And one of the problems with the Elixir language is that you can’t do high density and place computation because everything is immutable.</span>

<span style="font-weight: 400;">So with Pony, everything is mutable as it is with C, and there are just type roles that enforce concurrency safety. It’s kind of cool. And to see that applied in the places where they did like financial systems.</span>
<h2><b>Engaging Your Curiosity</b></h2>
<b>Adam</b><span style="font-weight: 400;">: I feel like this might just be my own feelings. There’s always a danger when I learn something new that I want to use it a lot in places that maybe it doesn’t fit.</span>

<b>Bruce</b><span style="font-weight: 400;">: Oh, that’s terrible. When you really engage that curiosity and get so hooked on something that looks interesting enough to actually jump into your bag of tricks, it sounds like a bad thing.</span>

<b>Adam</b><span style="font-weight: 400;">: Yeah, I guess. I don’t know.</span>

<b>Bruce</b><span style="font-weight: 400;">: So let me say it this way. If you learn like you’re a Scala developer, you like currying. When I think in terms of currying, even when I’m building frameworks in Elixir, there are problems that I will carve up that way.  Having been exposed to Scala and languages like it that effectively curry. And Idris, it was another one.</span>

<span style="font-weight: 400;">There are languages, so there’s a man at our conference. We had a back and forth on a podcast. They’re called Elixir Outlaws, I think, and he was talking about embracing the joy of programming. And one of the things he likes to do is code games. And I mean, board games, not like Tetris.</span>

<b>Adam</b><span style="font-weight: 400;">: ahh </span>

<b>Bruce</b><span style="font-weight: 400;">: He loves to code this program called the longest or this problem called The Longest Road and Settlers of Catan, which is a common board game.</span>

<span style="font-weight: 400;">And that’s a Prolog problem. I told him so, and I said that it’s really interesting that you struggle with that problem in Ruby. But you were excited about solving that problem in Elixir because the guy who created Erlang loved the Prolog. Which is the ideal language for that problem. And that’s why your solution gave you so much joy. The language and the genealogy of Elixir had Prolog.</span>

<span style="font-weight: 400;">And that kind of led to the four comprehensions, which were kind of created by Prolog’s unification. So, learning languages changes the way it provides tools in the back. It doesn’t necessarily mean providing something you use every day, but it gives you tools in your toolkit.</span>
<h2><b>Enliven Yourself and Your Career</b></h2>
<b>Adam</b><span style="font-weight: 400;">: It strikes me that maybe you’re a perennial early adopter. You’re a very curious person and you hit Java on the upswing and then you hit Ruby</span>

<b>Bruce</b><span style="font-weight: 400;">: Yeah. And get some advantages out of that. Some disadvantages too. Right. So I made some mistakes at icanmakeitbetter. I can tell you about sometime. I adopted some stuff that was a little early and we were okay.  Mostly we were okay because we were building on such high leverage  technologies because we were willing to pick our eyes up and we were willing to say, okay, what can I build with a small number of very good developers,</span>

<span style="font-weight: 400;"> </span><b>Adam</b><span style="font-weight: 400;">:   What can be built with a small number of very good developers. I feel like everything good was built that way at some point, you know, around 2007 I got the book programming Erlang that Joe Armstrong wrote that we’ve been talking about and it was just so much fun, and I was always telling all my coworkers that we should be using Erlang for things, which we, which we never did.</span>

<span style="font-weight: 400;">Which kind of gets to Bruce’s point about how sometimes just learning things and exploring your curiosity is just a way to like enliven yourself and your career. Just to bring some of the joy back to it.</span>

<span style="font-weight: 400;">I think it’s a great message and I recommend people check out Bruce’s talk called </span><a href="https://www.youtube.com/watch?v=rDLq9hFRWBw"><span style="font-weight: 400;">Joy</span></a><span style="font-weight: 400;">.</span>

<span style="font-weight: 400;">Before I let Bruce go, I wanted to check in with him on whether he agrees with me that people should be spending more time doing this. Just playing with weird technology just for the sake of it.</span>

<b>Adam</b><span style="font-weight: 400;">: So if everybody has followed your path and learned a number of languages, how is the world different?</span>

<b>Bruce</b><span style="font-weight: 400;">: I would say that there’s less fear. I say that there are, just like when you visit other places, when you learn other languages, the world gets smaller. We all know people who treat our favorite database model as a religious platform or our favorite framework as a religious framework. When you’ve seen a few, maybe not so much. We talk about things in terms of their strengths and weaknesses. We’re more able to adapt new things and programmers are happier and healthier.</span>

<b>Adam</b><span style="font-weight: 400;">: Sounds like a good world.</span>

<b>Bruce</b><span style="font-weight: 400;">: I like it. </span>

<b>Adam</b><span style="font-weight: 400;">: So this has been great. Bruce</span>

<b>Bruce</b><span style="font-weight: 400;">: Yeah. For me too. Thanks for the invitation. I really, really appreciate it. I saw DHH’s talk and I really appreciate your interviewing style. You’re really good at this.</span>

<b>Adam</b><span style="font-weight: 400;">: Oh, thanks. I try, I don’t know.</span>

<b>Adam</b><span style="font-weight: 400;">: That was the show. Sorry, I got it out a bit late. I did actually reach out to Sean Allen who Bruce introduced me to, and so there should be a super interesting interview with him coming soon. Stay subscribed to the podcast if you want to hear that. It seems like Bruce might be a great resource for me, able to introduce me to all kinds of interesting people.</span>

<span style="font-weight: 400;">Until next time, thank you so much for listening.</span>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1449</wp:post_id>
		<wp:post_date><![CDATA[2020-05-05 08:08:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-05 12:08:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[051-bruce-tate-language-learning]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="erlang-language"><![CDATA[Erlang Language]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="language-learning"><![CDATA[Language Learning]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
		<category domain="category" nicename="transcript"><![CDATA[Transcript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[157]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1453]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1213]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Tune in and find out how you too can start re-learning and how you can ignite the joy within that can only be found in language learning.]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Learning a new language with Bruce Tate</title>
		<link>https://corecursive.com/051-bruce-tate-language-learning2/</link>
		<pubDate>Tue, 05 May 2020 12:09:09 +0000</pubDate>
		<dc:creator><![CDATA[webmaster@corecursive.com]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1452</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>Finding Joy in Programming Languages</h4>
<span style="font-weight: 400;">There’s joy that can be found in language learning and pain as well. Whether you’re a beginner or an expert, there are still some things you can only discover by picking up a new language. </span>

<span style="font-weight: 400;">Bruce Tate will tell us how learning new languages rekindled the spark of joy for him. </span>

<a href="https://corecursive.com/051-bruce-tate-language-learning/" target="_blank" rel="noopener noreferrer">Podcast Transcript</a>

<span style="font-weight: 400;">“I find that learning a new language mixes a lot of joy in that pain, and that's when I grow most rapidly as a developer.” - Bruce Tate</span>

<span style="font-weight: 400;">“You can't break somebody else through their own pain. They have to learn their own lessons, and they have to, at some point in the model, they have to feel more and more pain to break through to the expert.” - Bruce Tate</span>

<span style="font-weight: 400;">“</span><span style="font-weight: 400;">When you visit other places, when you learn other languages, the world gets smaller.” - Bruce Tate</span>

&nbsp;

<strong>Links:</strong>

<a href="https://www.amazon.com/Seven-Languages-Weeks-Programming-Programmers-ebook/dp/B00AYQNR46/ref=sr_1_1?crid=2C3PVCEM6IW1I&amp;dchild=1&amp;keywords=seven+languages+in+seven+weeks&amp;qid=1585511803&amp;s=books&amp;sprefix=seven+language%2Cstripbooks-intl-ship%2C213&amp;sr=1-1" target="_blank" rel="noopener noreferrer"><span id="productTitle" class="a-size-extra-large">Seven Languages in Seven Weeks</span></a>

<a href="https://www.amazon.com/Seven-More-Languages-Weeks-Shaping-ebook/dp/B00RW8XFUK/ref=sr_1_7?dchild=1&amp;qid=1585511762&amp;refinements=p_27%3ABruce+A.+Tate&amp;s=books&amp;sr=1-7&amp;text=Bruce+A.+Tate" target="_blank" rel="noopener noreferrer"><span id="productTitle" class="a-size-extra-large">Seven More Languages in Seven Weeks</span></a>

Bruce Tate's <a href="https://www.youtube.com/watch?v=rDLq9hFRWBw" target="_blank" rel="noopener noreferrer">Joy Talk</a>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1452</wp:post_id>
		<wp:post_date><![CDATA[2020-05-05 08:09:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-05 12:09:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[051-bruce-tate-language-learning2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="erlang-language"><![CDATA[Erlang Language]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="language-learning"><![CDATA[Language Learning]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1456]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:8:{i:0;s:21:"03:19 -- Leaving Ruby";i:1;s:15:"04:59 -- Erlang";i:2;s:39:"9:05 -- Why Learn Programming Languages";i:3;s:24:"14:29 -- Friday Projects";i:4;s:33:"16:35 -- Work On Finding Your Joy";i:5;s:30:"23:26 -- The Most Fun Language";i:6;s:32:"30:39 -- Engaging Your Curiosity";i:7;s:41:"34:19 -- Enliven Yourself and Your Career";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1606]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[http://chtbl.com/track/7D91G/traffic.libsyn.com/corecursive/051_Bruce_Tate_on_Language_Learning.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[33.95 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[35:38]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Bruce Tate]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/redrapids">@redrapids</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_metadesc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Tune in and find out how you too can start re-learning and how you can ignite the joy within that can only be found in language learning.]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[1459]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Krystal&#039;s Story</title>
		<link>https://corecursive.com/052-krystals-story/</link>
		<pubDate>Mon, 18 May 2020 10:00:33 +0000</pubDate>
		<dc:creator><![CDATA[webmaster@corecursive.com]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1487</guid>
		<description></description>
		<content:encoded><![CDATA[<h4><b>Chasing Your Curiosity and Continuous Learning</b></h4>
Things are easier when you are passionate about something.  A lot of great careers are built on curiosity and obsession including Krystal Maughan our guest for today's episode.

Krystal will share her journey as she chased her curiosity in programming whereever it led her.

<iframe style="border: none;" src="//html5-player.libsyn.com/embed/episode/id/14451284/height/90/theme/custom/thumbnail/yes/direction/backward/render-playlist/no/custom-color/87A93A/" width="100%" height="90" scrolling="no" allowfullscreen="allowfullscreen"></iframe>

"Everybody has that moment when everything's shiny, you know when it's new and you walk on to campus like Google or whatever. Like the first time, I went to Google IO and I just thought it was like, this is insane." - <span style="font-weight: 400;">Krystal </span><span style="font-weight: 400;">Maughan</span>

"If you like to learn things, I think that's a gift. I think that's not something that everybody has." - <span style="font-weight: 400;">Krystal </span><span style="font-weight: 400;">Maughan</span>

"I think that seeing programming in different ways and seeing that it could be this kind of fun thing that you could break apart and find different ways of executing." -<span style="font-weight: 400;">Krystal </span><span style="font-weight: 400;">Maughan</span>
<h3><strong>Transcript</strong></h3>
<strong>This is a machine-translated transcript. Podcast page for <a href="https://corecursive.com/052-krystals-story1/" target="_blank" rel="noopener noreferrer">this episode is here</a></strong>

<span style="font-weight: 400;"><strong>Adam:</strong> </span><span style="font-weight: 400;">What was it like when you first started coding? For me, it was super addictive. Krystal </span><span style="font-weight: 400;">Maughan </span><span style="font-weight: 400;">caught the coding bug and she couldn't shake it. That interest pivoted her life towards being a developer until she finally pivoted again and left it all behind. </span>

<span style="font-weight: 400;"><strong>Adam:</strong> One thing like. How do I ask this one thing I don't get? Okay. So you know, for a while you were, you were scrambling, I guess and then so you got a job at Apple. They've paid a lot of money. They hand out Apple stock with lunch as far as I know. But then you left. So like, you know, people talk about getting a job at like, Fang company. I'm pretty sure they're one of the A's.</span>

<span style="font-weight: 400;"><strong>Krystal:</strong> </span><span style="font-weight: 400;"> Yeah ... Like, everybody goes through this thing where everybody has that moment when everything's like shiny but ...</span>

<span style="font-weight: 400;"><strong>Adam:</strong> Hello and welcome to CoRecursive. I'm Adam Gordon Bell.</span>

<span style="font-weight: 400;">Today is Krystal's story. It's a story of working jobs you don't like while taking night classes in Java and C++ a story of making friends at tech meetups. It's also really a story about career growth and about following your curiosity. You know, if something interests you, just chasing after it, even if it means putting everything at risk.</span>

<span style="font-weight: 400;">We started in 2004. Krystal has moved from Trinidad. She's enrolled in film school in New York, and she learns to read HTML source code, and she does it, strangely enough, to help her overcome homesickness. </span>
<h2><strong>Carnival Time</strong></h2>
<span style="font-weight: 400;"><strong>Krystal: </strong></span><span style="font-weight: 400;">So in Trinidad, we have this huge festival every year called carnival. It's kind of like Mardi Gras, but more awesome.</span>

<span style="font-weight: 400;">I was kind of involved around, so the whole theater and lighting thing, a lot of the gigs are around that time. And it's just this massive festival. So that's part of our culture, like the whole carnival thing. And so for carnival season, imagine all these Caribbean people are stuck in this snowy, depressing,   place, and that they know that back in their home country, there are people in bikinis having fun.</span>

<span style="font-weight: 400;">So it's carnival time. You kind of get this. I think if he grew up in that culture, you. Something about you just knows it's carnival time and your friends keep posting pictures and reminding you. And it's really annoying. So,   I think one of the ways we dealt with that was by listening to it, was that, I don't know if it's still around, but it was, it used to be called music media had both reggae and like a dance hall, reggae, and soca.</span>

<span style="font-weight: 400;">And, so this website would have every year when the artist brought out the music. They would upload it. So you would hear all the popular tunes for that year for the carnival season. From around October, the musicians will release, Oh, I just really send any track. And it's people they have these songs have hundreds of thousands of views.</span>

<span style="font-weight: 400;">Cause my brother is a programmer, by the way. I don't know if I mentioned that, but he taught me in college, how to view source and </span>

<span style="font-weight: 400;"><strong>Adam:</strong> So you are on music media and you're listening to your latest.</span>

<span style="font-weight: 400;">And then you, your brother's like, what did he say? Like hit view source and edit this? </span>

<span style="font-weight: 400;"><strong>Krystal: </strong>Yeah. He said so he was showing me, he said if he's hit, if you saw us, it's easy. He's like, Oh, see there is some music,  source right there. And he pointed out and said,. MP3 or whatever. And so I kind of learned.</span>

<span style="font-weight: 400;">That's how to look at the pages, find the music, and download them. And I don't have them anymore. But my old laptop, I think, crashed. But   I had so many, so much stolen music. I had terrible qualities. Of course, this is kind of compressed, but it was good enough for me in college to have access to that music.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> After college Krystal and her laptop of bootleg music had LA. She gets a job at a place doing lighting for film, but she ends up being relegated to a desk job. She gets a bit bored, starts taking night classes and computer college. Then at a meetup, she really finds her new passion. </span>
<h2><b>Meeting a Haskell Group </b></h2>
<span style="font-weight: 400;"><strong>Krystal: </strong>So after the,  getting into programming and deciding that I loved it, I found Haskell.</span>

<span style="font-weight: 400;">Strangely, I was looking for meetups in the Los Angeles area and I found the Santa Monica high school group and the papers love group. I didn't study computer science. I want to learn about computer science papers and who the famous people in computer science are. So I started attending that. So a bunch of hostile people showed up and one of them, Is Sky Fixler.</span>

<span style="font-weight: 400;">He turned to me and he said,  would you like to come to our Haskell to meet up tomorrow? And I said, what's Haskell? And he, and he said, Oh, it's the same time, same place, and I showed up and I left that meetup just kind of overwhelmed by how happy I was and how cool it was. </span>

<span style="font-weight: 400;"><strong>Adam:</strong> I mean, I feel like you kind of, you, you didn't, you jumped over it there.</span>

<span style="font-weight: 400;">Like at some point you were like, coding is awesome, or this is fun. Like maybe you weren't like a, I'm going to do this for a living, but you're like, Oh my God, this is. I hate this. Wait, I got to work. I love this</span>
<h2><b>Seeing Programming in Different Fun Ways</b></h2>
<span style="font-weight: 400;"><strong>Krystal:</strong> </span><span style="font-weight: 400;">I was taking the classes and I was taking Java, but I think the moment that I joined that high school group and I kind of saw this new, I was like, is this programming?</span>

<span style="font-weight: 400;">I think this is so weird.   something about it. And I think the community was so playful.   it's a, it's, I think there's something about functional programming that it's like you're playing with code. Or the rules of what code should be that I thought as somebody who didn't come from that background, I thought it was really interesting.</span>

<span style="font-weight: 400;">And then reading the whole subculture, as you read about Peter Norvig when I was graduating, we just started to have programming, but it was a basic, I know my brother did more Java type stuff and that was not compelling to me at all. I think I took one North to Java class when I was doing the night school classes.</span>

<span style="font-weight: 400;">But I just, it's just something about it. I just, I, I just didn't enjoy it and I thought that if I had come through that path with that expectation of, this is what computer science is, it would have never been, I would have never stuck with it. But I think that seeing programming in different ways and seeing that it could be this kind of fun thing that you could break apart and find different ways of executing. So because in my mind I was kind of taught on, my expectation through my brother was that programming is a certain language. And then seeing different things like a list and just seeing, Oh, this is crazy. Like this is programming. You can, you can do this. It's very compelling. </span>

<span style="font-weight: 400;"><strong>Adam:</strong> So, okay, so you go to the Haskell meetup, and then what happens? You go home, you install like, like what's the steps? You install Haskell and you do one plus one and you, </span>
<h2><b>Programming as a Tool to Build </b></h2>
<span style="font-weight: 400;"><strong>Krystal: </strong>I guess after the first Haskell meets up, I just had all these questions like I was, so I was going home on the bus.</span>

<span style="font-weight: 400;">I took the Metro back home and there were just all these cool things because everybody in that group, so one of the things I'm like, if you go to a typical,   programming group, and I kind of have a huge problem with this if he goes to a programming meetup and you are interested in, say,  Scala or whatever, then that's a, I'm not picking on this, but I'm just making a point.</span>

<span style="font-weight: 400;">A lot of them. The meetup can end up being this thing where all the people, they're interested in spark or like big data, you know, or you go to,     you go to a Java meetup and they're all interested in a cradle or you go to, you know, so it's, it's very,  tightly defined. And the Haskell group that I went to was the first one where.</span>

<span style="font-weight: 400;">There was one person interested in graphics in Haskell, and there was another person interested in ontology in Haskell, and there was another person interested in,   gooey and Haskell or,   making video games or,   you know, all kinds of things. So everybody in that group was interested in functional programming as a means to do something that they loved more so than.</span>

<span style="font-weight: 400;">Oh, this, there's this language and you use it to do X and that's all it's possible. That's all. We kind of think that this is the obstruction through which we think of the language is useful. </span>

<span style="font-weight: 400;">The way I came to hostile it through that meetup was not like that at all. There was a guy making the editor help you to do different languages so you can start coding from any language essentially.</span>

<span style="font-weight: 400;">And they had Alexis who was working on Pockets. So you have all these different people who are interested in doing different things for the long winters. I think maybe if languages are kind of, presented that way, it's, it's appealing because you don't necessarily want to learn a language,   just to, to learn the specific subset of what it can do.</span>

<span style="font-weight: 400;">You just want to learn as a tool for building something.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> Yeah, because you want to build, like what was your, </span>

<span style="font-weight: 400;"><strong>Krystal: </strong>Oh, I see. Do a lot of the code Wars stuff like I, so I used to love code Wars, my website with the puzzles. And I think I used a lot of when I was learning, I liked the idea that you could solve puzzles with code.</span>

<span style="font-weight: 400;">So I think that I was, I was really drawn towards that yeah. And I would just do several of them every day your work. Yeah. I shouldn't be saying. Yeah, I was always in this kind of state of conflict where people were telling me, Oh, you should just learn Java scripts.</span>

<span style="font-weight: 400;">That's it. And you just got a job. But Haskell was just fascinating to me.   and then I started looking, I think not so much building things, but trying to understand why. Things in Haskell worked the way they did. I think that was an interesting problem. So, you know, if we're going through the cold war stuff, I'm trying to figure out why, if this is why, if this is how this works in a job on C++ and Python, why doesn't it work this way in Haskell?</span>

<span style="font-weight: 400;">Like what, what is wrong with this language that it doesn't work like all the other,   languages. And. So I went through this whole phase where I installed a bunch of different things, you know, like Julia, Smalltalk Prolog. And I just kind of played around them and tried to see what, why, why they were different from each other.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> So you're at your lighting place.  Okay. And you have like a, do you have a browser tab open to like code wars and then, Oh, it's like fine though, the longest, the biggest element in the list or something. And you're like working away and then somebody comes by and you switch the tab over.</span>

<span style="font-weight: 400;"><strong>Krystal:</strong> </span><span style="font-weight: 400;">Oh, yeah, it was, I mean, it was pretty terrible because I'm, and some people may not like this because it's kinda, it is kind of unethical, but in the end, but,   There was a metal shop behind me as well. We were all in this building. And so I had to deal with customers right behind a metal shop. So, you know, I'd be speaking to someone and then you'd hear the grinders and it's pretty insane.</span>

<span style="font-weight: 400;">So it's kind of, I dunno, it's kind of one of those spaces where people were working, but not really. And so it's, I mean, sometimes it did cause conflicts, but my supervisor was nice enough. To say. Well, if she's considering that we're not busy all the time,   if she's getting her work done, we don't really care.</span>

<span style="font-weight: 400;">And then my desk started filling up with like, Lisp, books, and,   and I actually met a camera guy who used to study programming. So this is the other direction and he saw a Lisp book on my desk. And he said, Lisp. And I said, yeah, I know. I'm taking a class and we're doing C++. And he told me, he said, I did that for a living.</span>

<span style="font-weight: 400;">So if you ever need any help with C++ for work, I can help you. So,   I dunno. Like, that's awesome. </span>
<h2><b>Moving from Film to Programming</b></h2>
<span style="font-weight: 400;"><strong>Adam:</strong> That's great. What were you like, what were your motivations like were you thinking like, I'm going to like, where are you thinking? Like, I'm gonna. I don't know, get into this professionally or this is just fun or, </span>

<span style="font-weight: 400;"><strong>Krystal:</strong> </span><span style="font-weight: 400;">so I left the world of film for a really strange reason.   cause I did have a wave where I was working on movie sets and lighting plays and all of this stuff. And I just kinda got bored and I wanted more. And I think that's. That led me down that path. So mentally, by the time I had,   gotten to that stage of being curious about code,   I had long left that whole idea of, Hey, I want to work in movies or whatever when,   but I honestly never planned any of that.</span>

<span style="font-weight: 400;">Like I was, I was just doing it for the fun. I just thought it was really cool and, and I thought,   I don't, I just, I don't know how it ended up the way it did. I just kind of enjoyed hanging out with these people and,  I've gotten kind of bored doing the work that I was doing. </span>

<span style="font-weight: 400;"><strong>Adam:</strong> In other words, her job was not exciting, so she found something fun to learn.</span>

<span style="font-weight: 400;">This is the story of my career as well. It wasn't night school classes or Haskell meetups for me, just embracing side projects and ultimately that leads to my next career move for Krystal getting laid off, forced her next career move, and that move was to land a software testing job and apply to the 2018 Google summer of code program.</span>

<span style="font-weight: 400;">Google's summer of code is where Google sponsors students to work on an open-source project along with mentors. Krystal applied with Gabe Gonzalez and Chris Smith as her mentors. She's going to mention GHC as well. That is the compiler for high school. </span>
<h2><b>2018 Google Summer of Code Program</b></h2>
<span style="font-weight: 400;"><strong>Krystal:</strong> </span><span style="font-weight: 400;">So the shop where I like doing all my homework and I got laid off from that job because they were not making any money.</span>

<span style="font-weight: 400;">And so I was applying for jobs, but I also. I didn't have a job since I was still going to school. I was considered a student and I knew that they had a computer lab, so I would, that opened at 8:00 AM, so I was just still there for 8:00 AM and then just worked on Haskell as much as I could during the day instead of the applications.</span>

<span style="font-weight: 400;">And I was just like, go through books and like to write, write simple stuff. I still, I mean super, super beginner. I'm not experienced with Haskell or anything. And,  so a lot of schools have food pantries for students who don't have food. And I was thinking of signing up for one, but I was okay with food but I would assign a check like free food on campus.</span>

<span style="font-weight: 400;">I've just spent the day there and then,   started doing interviews at my school and while I was going through the interview process with a company, it took about two weeks. With a company that I eventually got the manual testing job just to pay me, pay my bills.  I heard, I got an email from my email in the computer lab at school, which is completely not secure.</span>

<span style="font-weight: 400;">and it said, congratulations, your proposal has been accepted. And the first thing I thought was, yes, I have money for summer. And I was super excited because I saw Gabe, I saw his name on there and I saw Chris's name in there. And, and I thought, this is too good to be true.   </span>

<span style="font-weight: 400;"><strong>Adam:</strong> So like one thing I'm interested in is kind of like when you did the Google summer of code? Like what was it like when you,   cause it's, it's somewhat of like a transition to like being like a professional developer.  How was it, was it hard? </span>

<span style="font-weight: 400;"><strong>Krystal:</strong> </span><span style="font-weight: 400;">So we had sessions from, let me see like 6 to 9 sometimes. And so he would spend like hours or like an entire hour on like. Five lines. I think that's a Google thing. I don't know. It's just like, I mean, it's insane to go from like, you know, community college level,   C++ that you would like to copy out of a book or find any internet kind of thing, copy and paste from stack overflow too,  that meant that level. The quality of mentorship between Gabe and Chris is just, it was just outstanding.</span>

<span style="font-weight: 400;">Like, I think that's been one of the better experiences I've ever had. </span>

<span style="font-weight: 400;"><strong>Adam:</strong> Like that. Did you ever get upset, like, and be like, this is bullshit. Like, we're an hour in on my five lines </span>

<strong>Krystal: </strong><span style="font-weight: 400;">Sometimes. So I usually do the sign thing and I get upset, like, yeah. Yeah. But,   and I feel like initially, it's like twofold, right?</span>

<span style="font-weight: 400;">Like they're kind of annoyed because they're like, why? Why Krystal? I'm kind of annoyed because I'm like, this is ridiculous. But,   It was really like, they're really fun. As both of them are actually like really,   really fun mentors in general. So I think that kind of made the experience really great.</span>

<span style="font-weight: 400;">And on the back of my head, I also knew that it was, it's an incredible opportunity. Because both of them have extensive experience and they also write really clean code. And so when you read their code, you can read and know exactly what it means. And it's, it's just well-written, very clean, and,   just proper formatting.</span>

<span style="font-weight: 400;">And that's because I guess both, both company cultures that they,   between, they're both. Places that they work have standards of really high,   quality code. Yeah. So,  I kind of knew in the back of my head, even though, you know, some of it was rough, that I was getting a really good experience. Oh, I do remember this one time when I told them that I'd gotten a job,   and gave a saying that, Oh, you know, you could apply some of the things you learned.</span>

<span style="font-weight: 400;">Even though you're just doing manual testing, you know, like the clean coding practices. And he said, so what language are you guys using at work? And I said, PHP, like, Oh, sorry. So it was, it was really kind of fun,   you know, experience for me. And we tried to, we all try to make the best of the situation.</span>

<span style="font-weight: 400;">But one of the things that I. Was struggling with is that I had limited funding. So, I had, I really thought I could do Google summer of code with a $20 laptop, but I got up off of eBay and,   it became </span>

<span style="font-weight: 400;">It was $29, but I found it on eBay. I saw the troll eBay a lot, and. I found this laptop once and I was like, Oh, this is so cool.</span>

<span style="font-weight: 400;">It's only $29 I have to have it. It's like bought this laptop and I installed, Ubuntu 14.04 on it, with a USB, and I would use it and I thought, Oh, well, if I have to install, if I have to have Linux, </span>

<span style="font-weight: 400;">I guess I'm, I, well, I think my other machine was a Windows machine, like a Dell when this machine, I thought, well, I'm going to use this.</span>

<span style="font-weight: 400;">Linux machine from my Google Summer of code, cause this is all I can afford right now. And this is all I have. And when we said, okay, love, the first thing we could do during our first meeting is, is trying to make the, you know, the bill to get the bill up and running. And so the first thing I did was it failed because it was 32 bit.</span>

<span style="font-weight: 400;">My machine was starting my dollars and apparently it wasn't, it wasn't in the list of bills to install. GHGs and all that stuff with, if it was a 32 bit, so they had to update. We had, so that was the first poll request is, Oh, okay. And like, that's, you know, we opened up issues and, and fix it, and then, okay, great.</span>

<span style="font-weight: 400;">Now it is building, but then it took like a day. I remember at one point in time, Chris could have seen this is ridiculous. He's like, I will buy you. I will. He said at first he was trying to get me one of his friends to get me a laptop that is physically similar to me physically and then he said, that's okay.</span>

<span style="font-weight: 400;">I'll just buy a laptop. And I got a lot, I don't know what it is, like if it's like a Google thing or whatever, but it paired. He spoke about it in the morning. It appeared in the afternoon on my door. I didn't want a magic pony, Google stuff. I don't know.   and so I started working on it, but then,   as I was working with it, that one also failed over time because I think we missed, we underestimated how intensive GHCGS is.</span>

<span style="font-weight: 400;">So I think the screen eventually gave way on that one. And then,   Nadia from the Helium she has a sync Helium Grimes where she, she is like 700 people applied. And   I wrote it. I remember I wrote an application because they were talking about what we are going to do about this computer issue like this is taking days to build.</span>

<span style="font-weight: 400;">And they were talking about, I didn't know yet that he was going to tell me he would buy me a laptop. So I applied for this Helium grant thing. It just kind of floated in my periphery and I said, okay, I'm gonna apply. And I wrote this application telling her that my solution for the Google Summer of Code, pair I'm putting together with my mentor would be to stick a video camera from one computer to another with duct tape.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> Is that true? You are using one computer's webcam to show the other screen? </span>

<span style="font-weight: 400;"><strong>Krystal: </strong>Well, I had a lot of issues too, because we're trying to screen share and care programs. And I think and run GHCGS. So the $29 computer is failing. First of all.   Hangouts were not as great as we thought it would be.</span>

<span style="font-weight: 400;">And,  she emails me and she said, either you've gotten one of the 11 grants that we are giving this year, which is like, I think she had like a thousand dollars with no strings attached. And when the helium grant came along, or I had a discussion with Gabe because I said, should I tell her that I had just gotten the computer they gave me?</span>

<span style="font-weight: 400;">And I said, should I tell her that I have a computer and that she could give the grants to somebody else who wants it, who deserves it? And he said, he said, you should just do the right thing and just be honest with her and it's up to her to decide what to do. And so I told her and she said. I think you're deserving of the grant so you can do whatever you want with the money. And then like a weekly turn, my laptop broke. So </span>

<span style="font-weight: 400;"><strong>Adam:</strong> you got your $29 worth </span>

<span style="font-weight: 400;"><strong>Krystal:</strong> </span><span style="font-weight: 400;">It's just strange how like back, there's a certain kind of mentality that,  people don't think of if you're learning to code. And I've noticed that even in my school, most people here have Macs. So I know a lot of professors think that. Oh, you know, like everybody uses a Mac and I can't help you if you don't have a Ma or whatever. And,   but I went through this whole process of not being able to have those things. And so I'm really sensitive to,  trying to find ways to make things work.   regardless of, and it gave us, has been Davis really.</span>

<span style="font-weight: 400;">If they thought it was cool that I had this $29 laptop, they're like, Oh, this is, they're like, Oh, we love little, little machines like that. And, so it's really nice that they didn't snob me for saying like, Oh, why didn't you cause everybody? Like, can you, even in Silicon Valley, when you join a company, the first thing they do is give you a brand new Mac or whatever to use.</span>

<span style="font-weight: 400;">And, so that was kind of trippy, you know, like coming from having a, like a flip phone. And at $20 laptop</span>

<span style="font-weight: 400;"><strong>Adam:</strong> after Google summer of code, Krystal's still doing QA out of a software company, but she's looking around to see what else is out there.</span>
<h2><b>Getting Recruited</b></h2>
<strong>Krystal: </strong><span style="font-weight: 400;">So I remember, when I started to look at the manual testing shop, so there was a group of.</span>

<span style="font-weight: 400;">Of the group of us. It was so much fun like that. We had a lot of younger interns, a lot of us were in school and working there part-time. I turned nine hours a week and he was, I had these friends that I would go out to Denny's for lunch with at that group, and late at night we'd order pizza, but the building would close at seven.</span>

<span style="font-weight: 400;">So we had this whole strategy where one person would go,   Collect the pizza and the other person wouldn't keep the door open, the front door, and then the other person was standing in the office and, wait for the person to call so that they could call the elevator because the elevator would only go down.</span>

<span style="font-weight: 400;">And we had this whole thing. And like one time we thought we're going to be stuck in the elevator with the pizza because the person in the office was not answering, hadn't called the elevator yet. </span>

<span style="font-weight: 400;"><strong>Adam:</strong> In the midst of this fun, Krystal gets contacted by a recruiter from Apple about a software job. </span>

<strong>Krystal </strong><span style="font-weight: 400;"> </span><span style="font-weight: 400;">And this is the guy who was my recruiter is probably the best I've ever had.</span>

<span style="font-weight: 400;">I, he's so nice, super thoughtful, and, I spoke with him and he kept, I was kind of weirded out by the fact that he kept going through the process at me cause I thought, okay, they're going to tell me at some point in time I'm rejected. They CC’d me and told me that they were interested originally for full time.</span>

<span style="font-weight: 400;">Like they were interested in bringing me on a full time, but I was interested in an internship so I didn't hear from them for about a month. And then I got another email and they said,   Well, we think, would he be interested in interviewing for this internship? And I said, okay. And the recruiter kept acting like he was engaged, but I thought, you know, he's complete, I'm going to hire like some, I don't know, like Ivy league, whatever person.</span>

<span style="font-weight: 400;">Cause I was in community college and working at a manual testing job, I'm the furthest away from. I did like a, like two, the initial and the two rounds of the interviews and no, they said they want to speak with me, so he kept asking me like, what date I want to start and, and </span>

<span style="font-weight: 400;"><strong>Adam:</strong> that's a good sign.</span>

<strong>Krystal </strong><span style="font-weight: 400;"> </span><span style="font-weight: 400;">You know, you never know because he's like, Oh, he's like, would you like the stuff for TNT? Like if it were to happen, like he, I knew he was kind of buying time on it. So I was Googling while I was working at a testing job, I was secretly also Googling. What does it mean when they tell you that? They have like the next steps, so whatever.</span>

<span style="font-weight: 400;">Even like, what does that mean? You know, I the whole trick about like, what if the email uses the rejection, if the phone, if they call you, it's usually, to accept your kind of thing.   so he said he wants to speak with me and he said, Oh, the manager chose you and how's I. I was like, are you serious?</span>

<span style="font-weight: 400;">I kept saying, and then after he ended the call and he was telling me all this stuff and asking me what time, well, they figured out when I found out later on that it was because he was trying to get the paperwork in order. He's, you know, so he called me and he told me and he said, you know, you could tell your parents.</span>

<span style="font-weight: 400;">And I called them in Trinidad and my dad had said the same thing. He was like, Oh, are you serious? And so,   this is the first time. That having a green card that I was able to actually send in a letter of resignation. And I told them, I remember from my exit interview, they said, are you leaving?</span>

<span style="font-weight: 400;">Why are you leaving? And I said, for another job.   and then, the person interviewing me said. What's the company name? And I told him, she's like, Oh, you should've told me to put it on the exit survey. I mean, everybody was just really happy for me. And so we had like, we were really close-knit.</span>
<h2><b>Landing a new Job at Apple</b></h2>
<span style="font-weight: 400;"><strong>Adam:</strong> So Krystal started at Apple and she loved it. If she was most people, this would be the end of her story, but Krystal left Apple for grad school to do a Ph.D. in programming languages and data privacy. She left the Bay area for Vermont. This really surprised me. One thing like. How do I ask this one thing I don't get? Okay, so you know, for a while you were, you were scrambling, I guess</span><span style="font-weight: 400;"> and then, and then, so you got a job at Apple. </span>

<span style="font-weight: 400;">They paid a lot of money. They hand out stock with lunch as far as I know</span>

<span style="font-weight: 400;">what, but then you left. So like, you left to go to grad school-like. Like, you know, people talk about getting like a job at like Fang company. I'm pretty sure they're one of the A's. </span>

<span style="font-weight: 400;"><strong>Krystal</strong>  Y</span><span style="font-weight: 400;">eah, so I was going through this thing with my manager and trying to figure out like what I could, because everybody goes through this thing where,   and there's a guy at the</span><span style="font-weight: 400;"> manual testing shop that I did.   he was a senior, employee there, and he used to work for Microsoft </span>and he said, when I was leaving, he said, wow, you sound just like how I was when I was going off to Microsoft. And I understand now what he means by that, which is that. Everybody has that moment when everything's shiny, you know when it's new and you walk on to campus like Google or whatever.

<span style="font-weight: 400;">Like the first time, I went to Google IO and I just thought it was like, this is insane. Or, like the Google LA campus, like for the first time I went to Google LA and you know, you go there and you're like, Oh, there's this climbing wall and all this stuff and there's like free food and we do this and.</span>

<span style="font-weight: 400;">You know, all this stuff for you. So I think I definitely had, I ate a lot when I was, I was so limited in terms of what I could do before, and I'm just going to like to eat as much as possible. I’d have a blast. </span>
<h2><b>What is Next to Learn?</b></h2>
<span style="font-weight: 400;"><strong>Adam:</strong> I have like a pet theory. Right? So, like I think that you, like, you know, you were into film, but then you got interested in coding </span><span style="font-weight: 400;">and, you know, all the way to Apple and then,   but I think that maybe what you really like is like learning things.</span>

<span style="font-weight: 400;"><strong>Krystal: </strong> </span><span style="font-weight: 400;">That's very true. </span>

<span style="font-weight: 400;"><strong>Adam:</strong> So it's like you can, you know, you are now, you learned, you learned how to work as a software developer to a certain extent. Right? And you're like, what's the next thing to learn?</span>

<span style="font-weight: 400;"><strong>Krystal: </strong>That's true. That's a very good observation. I think that's, that's certainly, And I think that's, that ties into my experience at, is the Hangouts monthly with the JPL, mass scientists. They have like a German JPL group where they just speak German and. Drink and eat your sausages. I'm like.. </span>

<span style="font-weight: 400;"><strong>Adam:</strong> Oh yeah.</span>

<span style="font-weight: 400;">I used to just hang out with the people from NASA and we would eat sausages. I don't know what that means. </span>

<span style="font-weight: 400;"><strong>Krystal: </strong>So there's this bar and Altadena, let's go without seeing that yellow house. And a lot of master scientists hung out there, and one of my mentors works at JPL, so he would bring me there and we would all hang out and it was really fun.</span>

<span style="font-weight: 400;">And,   you just have German sausages even though I'm vegetarian and drink,   beer German beer and this speaking German. But, I think that seeing how, like their intuition about things, because a lot of those people had advanced degrees.   so I, I really, that really resonated </span>

<span style="font-weight: 400;"><strong>Adam:</strong> with me, you know. What do you think it would be like if more people were like you,   and maybe being bolder at like, following like learning or following your interests?</span>

<span style="font-weight: 400;">Would things be different?</span>

<span style="font-weight: 400;"><strong>Krystal: </strong>I think that everybody would just be like 80 or so. People get frustrated with me because I get bored. It might seem if my brother were in, He was in our primary school, or his primary school was separated. We had boarded. So you have a board and a class next to you and you could see diagonally into the class ahead of you.</span>

<span style="font-weight: 400;">And,   his teacher discovered when he was little that he was learning material in the class diagonally, which is a year ahead because he was bored. So I think that,   So that happens a lot for me where I could get sidetracked because I just don't think something's as interesting. The one thing I did get out of the artists, especially those who switched from arts tech or from creative, the creative to tech, is that they're, they're more, they're bolder, they're more courageous, courageous in terms of taking risks.</span>

<span style="font-weight: 400;">And I wish that more engineers could like it. I think that's what I like even from Trinidad, like being able to just find somebody's email and have the guts to email them and say, Hey, I'm this kid. I want to know more about how you got to where you are going. I think people can be a little bit bolder and not accept a lot of software engineers who kind of accept things as the way they are.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> I think that I'm like a serial learner. I guess maybe I'm always chasing shiny things, like, do you have any advice for people out there? Who likes yourself or maybe like myself?   you know, just really like to learn new things. </span>

<span style="font-weight: 400;"><strong>Krystal: </strong>I think it's with shedding, if you like to learn things, I think that's a, I think that's a gift. I think that's not something that everybody has. My dad calls it a curse. Because it means that sometimes you might see things or be fascinated with things that other people think. They think it's a useless thing to learn. I mean, not everybody is obsessed or necessarily wants to be a programmer because they want, they love learning things.</span>

<span style="font-weight: 400;">And that's understandable. And I wished that I thought about the world, I dunno. I don't think that you should have too many of those people because they might be anarchy work, but I think it's a wonderful thing. I think people like you and our Slack, that group and all the other people that I've met along the way have made everything people who love to learn kind of find finding each other.</span>

<span style="font-weight: 400;">They've made it possible for people like me to be a part of the community. I like people who are a little bit rebellious or people who are kind of oddballs and,   because they do kind of make you think, think about things differently or,   just kind of, they basically don't accept things as they are on the surface level. S</span><span style="font-weight: 400;">o I think, I don't know, I think it's worth pursuing. I don't see anything wrong with people who like to learn. </span>

<span style="font-weight: 400;"><strong>Adam:</strong> Have you ever been asked about a five-year plan? Myself, I don't view my career as executing on some sort of five-year plan. I don't even have one. I just get obsessed with something and kind of follow that interest.</span>

<span style="font-weight: 400;">I think there's something about being passionate that makes learning even hard things seem easy. I think a lot of great careers are built on curiosity and obsession, including Krystals. All right. That was the show. I met Krystal through the Slack channel for the podcast. She has a thousand interesting stories.</span>

<span style="font-weight: 400;">I couldn't fit them all in. If you jump on our Slack channel, she's always there. She's the one with the skeletal profile. We have a Friday thread of what you accomplished this week. And the answers are super eclectic. Today, there was a discussion about the math of origami as well as people just sharing fun side projects, which reminds me of one question I think I should end on. </span>
<h2><b>What did you do this week?</b></h2>
<span style="font-weight: 400;">Can you read your message today for them from the Slack thing? </span>

<span style="font-weight: 400;"><strong>Krystal: </strong>Oh sure. </span>

<span style="font-weight: 400;"><strong>Adam:</strong> So the question is, what did you accomplish or build or learn this week? </span>

<strong>Krystal: </strong><span style="font-weight: 400;">Yeah. Okay. What since you accomplished or built something, built or learned this week? And I said, I fell instead for the ICLR, which I did. I did two rounds for two different conferences of reviewing work for acceptance.</span>

<span style="font-weight: 400;">And I'm finishing up the last round for one conference this weekend, which is correct. So I attended two recruiting events. Part two is happening today, which I just finished. I did an exam. I worked on the research. I found out I was one of 20 people chosen for mentorship as a mentee program with someone in my research field of interest.</span>

<span style="font-weight: 400;">It's a three-month thing and I write an article at the end that gets published and joins this amazing community. I applied for two grants and caught my first discord and bought Pokemon. </span>
<p style="text-align: left;"><span style="font-weight: 400;"><strong>Adam:</strong> Sounds like a busy week. Alright, Krystal, thank you again for your time.</span></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1487</wp:post_id>
		<wp:post_date><![CDATA[2020-05-18 06:00:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-18 10:00:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[052-krystals-story]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="haskell"><![CDATA[Haskell]]></category>
		<category domain="post_tag" nicename="krystal-maughan"><![CDATA[Krystal Maughan]]></category>
		<category domain="post_tag" nicename="programming-career"><![CDATA[programming career]]></category>
		<category domain="category" nicename="transcript"><![CDATA[Transcript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1514]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[157]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[865]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Krystal&#039;s Story</title>
		<link>https://corecursive.com/052-krystals-story1/</link>
		<pubDate>Mon, 18 May 2020 10:00:17 +0000</pubDate>
		<dc:creator><![CDATA[webmaster@corecursive.com]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1491</guid>
		<description></description>
		<content:encoded><![CDATA[<h4><b>Chasing Your Curiosity and Continuous Learning</b></h4>
Things are easier to learn when you are passionate about something. A lot of great careers are built on curiosity and obsession including Krystal Maughan our guest for today's episode.

Krystal will share her journey as she chased her curiosity in programming wherever it led her.

<a href="https://corecursive.com/052-krystals-story" target="_blank" rel="noopener noreferrer">Podcast Transcript</a>

"Everybody has that moment when everything's shiny, you know when it's new and you walk on to campus like Google or whatever.
Like the first time, I went to Google IO and I just thought it was like, this is insane." - <span style="font-weight: 400;">Krystal </span><span style="font-weight: 400;">Maughan</span>

"If you like to learn things, I think that's a gift. I think that's not something that everybody has." - <span style="font-weight: 400;">Krystal </span><span style="font-weight: 400;">Maughan</span>

"I think that seeing programming in different ways and seeing that it could be this kind of fun thing that you could break apart and find different ways of executing." -<span style="font-weight: 400;">Krystal </span><span style="font-weight: 400;">Maughan</span>

<strong>Links:</strong>

<a href="https://kammitama5.github.io/" target="_blank" rel="noopener noreferrer"><span style="text-decoration: underline;">Krystal's Blog</span></a>

<a href="https://medium.com/@krystal.maughan/breaking-the-space-time-barrier-with-haskell-time-traveling-and-debugging-in-codeworld-a-google-e87894dd43d7" target="_blank" rel="noopener noreferrer"><span style="text-decoration: underline;">Her GSOC Project</span></a>

<a href="https://medium.com/caribbeantechies/4-questions-with-krystal-a-maughan-2fa2ed9ab9fe" target="_blank" rel="noopener noreferrer">Another Interview with Krystal</a>

<a href="https://kammitama5.github.io/Sunday-May-3rd/" target="_blank" rel="noopener noreferrer">Full Timeline of Krystal's Journey</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1491</wp:post_id>
		<wp:post_date><![CDATA[2020-05-18 06:00:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-18 10:00:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[052-krystals-story1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="haskell"><![CDATA[Haskell]]></category>
		<category domain="post_tag" nicename="krystal-maughan"><![CDATA[Krystal Maughan]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="programming-career"><![CDATA[programming career]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1492]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:9:{i:0;s:33:"04:23 -- Meeting a Haskell Group ";i:1;s:49:"05:28 -- Seeing Programming in Different Fun Ways";i:2;s:30:"07:27 -- Programming as a tool";i:3;s:40:"13:03 -- Moving from Film to Programming";i:4;s:43:"15:12 -- 2018 Google Summer of Code Program";i:5;s:26:"26:17 -- Getting recruited";i:6;s:35:"30:27 -- Landing a new Job at Apple";i:7;s:31:"33:16 -- What is Next to Learn?";i:8;s:35:"39:08 -- What did you do last week?";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/052-Krystal_Maughan.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[40:20]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[38.26 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Krystal Maughan]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/kammitama">@kammitama</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1350]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-desc]]></wp:meta_key>
		<wp:meta_value><![CDATA[Lamda Girl]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[1497]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Scala Native with Denys Shabalin</title>
		<link>https://corecursive.com/scala-native-with-denys-shabalin-transcript/</link>
		<pubDate>Mon, 25 May 2020 10:00:38 +0000</pubDate>
		<dc:creator><![CDATA[webmaster@corecursive.com]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1517</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>Things Can Be Designed to Run Faster</h4>
In this episode, Denys Shabalin talks in-depth all about Scala Native and how the<span style="font-weight: 400;"> effort to bring the Scala compiler to LLVM sped things up. </span>

<iframe style="border: none;" src="//html5-player.libsyn.com/embed/episode/id/6123766/height/90/theme/custom/thumbnail/yes/direction/backward/render-playlist/no/custom-color/87A93A/" width="100%" height="90" scrolling="no" allowfullscreen="allowfullscreen"></iframe>

"So the core Scala is really as close as we can make it, and be as same as in JVM" - Denys Shabalin

"But if you have native, we don’t really have to have this problem because the very first run is already optimized, so you can already run optimize code immediately." - Denys Shabalin

"Backend microservice kind of app. This is kind of the area of which we see Scala being used more in the future." - Denys Shabalin
<h3><strong>Transcript</strong></h3>
<strong>This is a machine-translated transcript. Podcast page for <a href="https://corecursive.com/001-scala-native-with-denys-shabalin/" target="_blank" rel="noopener noreferrer">this episode is here</a></strong>

<b>Adam: </b><span style="font-weight: 400;">Welcome to CoRecursive, where we bring you discussions with thought leaders in the world of software development. I am Adam, your host.</span>

<span style="font-weight: 400;">Scala native takes the Scala language, which traditionally runs on the JVM and brings it to bare metal. It is an optimizing ahead of time compiler as well as a lightweight managed runtime design specifically for the Scala language. Denys </span><span style="font-weight: 400;">Shabalin </span><span style="font-weight: 400;">is a research assistant at the EPFL and the primary creator of Scala native.</span>

<span style="font-weight: 400;">In this episode, I talk to him about the motivations behind the project, how it was implemented, and future directions. One thing exciting that he mentions in this episode is an effort to bring the Scala compiler to a Scala native. And how doing so sped things up. Scala is a language built on the JVM. Could you give a brief overview of Scala the language before we get into a Scala Native?</span>
<h2><b>Overview</b></h2>
<b>Denys: </b><span style="font-weight: 400;">So Scala is a pretty cool language I originally designed for JVM. It really can be described as a mix of functional and object-oriented programming. It really doesn't bias towards one or another style. It really tries to blend both together because there is both good and bad on both ends.</span>

<span style="font-weight: 400;">Like for example, functional programming is basically considered as a better type of Scala and object-oriented to be more of a Java-style old school, less popular side, but still, language doesn't bias towards one side or another. You can perfectly do object-oriented, classical object-oriented programming, and fancy functional programming at the same time.</span>

<span style="font-weight: 400;">This is pretty unique because most languages are heavily on one side or another, which is often considered to be like a negative side of Scala because it's very open-ended. But anyway, that's where it is.</span>

<b>Adam: </b><span style="font-weight: 400;">Yeah. Makes sense. So Scala lets you kinda, you can combine sort of a Java-style with an ML or Haskell style functional composition.</span>

<b>Denys:</b><span style="font-weight: 400;"> Absolutely. Yeah. That's it.</span>

<b>Adam: </b><span style="font-weight: 400;">What is Scala native?</span>
<h2><b>What is Scala Native</b></h2>
<b>Denys: </b><span style="font-weight: 400;">So Scala traditionally has been a JVM centric language, so it used to compile only to JVM bytecode as the only target. And what it means is that it's really a plug and play on JVM. You just compile these codes then you can run it alongside your Java application.</span>

<span style="font-weight: 400;">That was the original backends platform for Scala, but since then, we got way more things. The first, major experiment Scala did outside JVM was the net backend. It didn't work so well because of the differences between how JVM and common language runtime handle generics.</span>

<span style="font-weight: 400;">So it was a bit difficult. I think the first successful alternative platform for Scala is Scala GS. By Sebastian, So basically, it's really a major difference in terms of how your Scala apps because it compiles them to JavaScript. A very elaborate advanced toolchain.</span>

<span style="font-weight: 400;">They have and Scala Native was very much a similar project to college. Yes. But instead of compiling to JavaScript is compiles to native code. And when I say native code, I mean more like a C, C++ standalone binaries that completely just don't require any virtual machine to run it. So just get x86 or ARM binaries that you can just copy, paste them to any machine with the same architecture, and just run.</span>

<span style="font-weight: 400;">Of course, it has good and bad of native style development, but it's really a kind of core idea of the project is very simple, is to compile Scala to native binaries.</span>

<b>Adam: </b><span style="font-weight: 400;">Makes sense. So, you know, Scala GS gives you the ability to run in the browser. What problem does being able to run as a native application solve?</span>

<b>Denys: </b><span style="font-weight: 400;">So why don't the issues with JVM, as I see it, is that JVM is a really heavy, heavy machinery. So it really requires quite a bit of a footprint just to run the VM. So you can see it in terms of memory used. You can see it in terms of application startup time. You can see it sometimes in terms of the overhead of the whole services, like just compilation behind the scenes.</span>
<h2><b>JVM vs Scala Native</b></h2>
<span style="font-weight: 400;"><b>Denys:  </b>And it's really because JVM is a very, very advanced, multistage, multi-tiered VM and it's really hard to support all this functionality because it was incurring some overhead. So Scala native is different in that we do most of the expensive parts, like compilation ahead of time s</span><span style="font-weight: 400;">o it means you already have a pre-compiled and pre-optimized binary. So when you'd started, it just runs your app. It doesn't do the whole multi-tier VM saying, so we don't have an interpreter. We don't have multiple-tiered of compilation and we just, whenever we emitted binary, that's it. There is no recompilation and runtimes, there are no tricks we do.</span>

<span style="font-weight: 400;">It's a simple binary, which means we have a way lower footprint and both in terms of memory, and in terms of startup time, this can be useful for a number of use cases of applications like common line tools. So for the common line, it's done, it's extremely important to start quickly, do your job and then die.</span>

<span style="font-weight: 400;">This is the area where JVM is really bad at right now because. Just start it as a VM is an extremely expensive operation. So you definitely see us kind of like initial slow down if your app is not in the long run.</span>

<b>Adam: </b><span style="font-weight: 400;">So that is what people refer to as like the JVM warmup, is that right?</span>
<h2><b>The JVM Warmup</b></h2>
<b>Denys: </b><span style="font-weight: 400;">Yeah exactly. So it's like just warm-up a</span><span style="font-weight: 400;">nd it also has to do with the fact that when you're on code and JVM, it actually goes through a number of stages. So first you go through an interpreter. The interpreter is really slow. It is not meant to be as is there for a long time. So it tries to go to compiled mode as soon as possible and are at least two compilers right now, which are used in production JVM C1 and C2.</span>

<span style="font-weight: 400;">C1 emits simple code to avoid the interpretation costs? And the C2 does a very advanced optimizer that only optimizes heavily used parts. So basically you have very elaborate machinery, which means that you don't get to optimize code only until your application is warmed up.</span>

<span style="font-weight: 400;">In native, we have basically the equivalent in between Ci and C2. So we already heavily pre optimize your code before you run it, but at the same time, it's not quite the same as the VM. So it draws some problems. Pros and cons.</span>

<b>Adam: </b><span style="font-weight: 400;"> Yeah. So if you're, if you have a long-running Java app or a Scala app, I guess then the costs of this warmup maybe doesn't matter so much, but if something has to start up frequently, then you know, re-optimizing it is a lot of overhead.</span>

<b>Denys: </b><span style="font-weight: 400;"> Absolutely. Yeah. That's it. And another area from the common line is different types of user-facing apps where you can observe and perceive the syrup time. Which often are like, you know, simple graphical apps, like for example, like start to an eclipse takes minutes, and I know it's just before it's like, and you never close it, right, because you're afraid to close it because once you close the eclipse, you'll have to go through the same thing again.</span>

<span style="font-weight: 400;">That's basically not eclipsing problem as far as I can tell, it's largely a JVM problem because for example, other IDs started much faster than eclipse.</span>

<b>Adam: </b><span style="font-weight: 400;">Yeah I use IntelliJ, but I find the same thing. Yeah. I try to keep it running. In your talk, a Scala goes native, you were describing the JVM as a, as a golden cage. T</span><span style="font-weight: 400;">his is sort of what you mean by that, or could you describe this concept?</span>
<h2><b>The Concept of the Golden Cage</b></h2>
<b>Denys: </b><span style="font-weight: 400;">So this metaphor was basically tried to motivate why we don't try to artificially limit what you can do in Scala native-like JVM does. In particular with don't try to sandbox your code so that you can only write very safe code, which not never escapes the cage, basically, t</span><span style="font-weight: 400;">hat's what I meant by the cage. We let you use low-level assistant level tools like broad access to memory rope pointers and stuff like that, which is potentially unsafe, but it's actually necessary for some domains like the systems programming where you want to have a very low level of control of your memory.</span>

<span style="font-weight: 400;">A benefit is that you get more controls to develop or you don't, you're not limited by the language, and the VM, because you can do whatever at C and C++, whatever you can do in C and C++ on the other hand, you do lose some of the safety you get on JVM. But this is kind of a trade-off. We take.</span>

<b>Adam: </b><span style="font-weight: 400;">That makes sense. </span><span style="font-weight: 400;">So is this strictly for memory management or how about interop?</span>

<b>Denys: </b><span style="font-weight: 400;">So generally intro is basically, so it's called native exposes a number of language extensions aimed primarily at the intro with C code. And in a way it's a bit like writing C code in Scala. So we expose things like pointers, instruct. So you can do with familiar assist our programming b</span><span style="font-weight: 400;">ut it also means it's extremely easy to call a C code. You don't need to go through a number of layers of bindings and gather. You can just do it all in Scala without any C and C++ code. But it also means that if you can call arbitrarily C code, you also can get arbitrarily. Issues that have, like, for example, different types of safety issues around buffer overflows and so on and so forth.</span>

<span style="font-weight: 400;">It's definitely a trade-off. It's not free like colon C is not free in terms of the safety guarantees you get, but again, this is kind of a trade-off we make. We don't try to be as safe as possible. We try to be as flexible as possible.</span>

<b>Adam: </b><span style="font-weight: 400;">Makes sense. You want to give people that tool, even if they, you know, it could go wrong. </span><span style="font-weight: 400;">So how about memory management on the JVM?</span>

<b>Denys: </b>S<span style="font-weight: 400;">o JVM is basically a GC only platform. There are some very well hidden but extremely well-known areas like misconceived, which lets you do unmanaged memory and manage yourself. Like for example, you can allocate,  unmanaged memories to sound misconceived and then do roll memory accesses on it.</span>

<span style="font-weight: 400;">It's basically as in TAFE as pointers and only JVM people tried to hide it from you. Even though every major performance-centric framework actually used it. Like for example, Spark does have hip memory to manage this. Most of is data because they're just too expensive to allocate, ever seen on GC here.</span>

<span style="font-weight: 400;">But JVM people like you believe that you only have GC, which is the main paradigm and it's actually like CISI on JVM is really good. So very often it, it, it's a good idea just to just use that and not do any unsafe memory management. It's called native. We'd say both coexist and you have APS for both, and they're involved in doing use.</span>

<span style="font-weight: 400;">So definitely unmanaged memory is a dangerous thing. You can definitely shoot a wrestler, but for example, if you want to do some,  you know, domain-specific seeking to optimize the memory layout and so on, and so forth, you can do that without. Jump into the hook as like JVM</span>

<b>Adam: </b>M<span style="font-weight: 400;">akes sense. So, you know, the JVM complaint, it purports to be memory managed, but if you look at these high-performance apps, they're using backdoors to sort of actually do manual memory management.</span>

<b>Denys: </b><span style="font-weight: 400;">Yeah. And it's like most of them really go far away to try to say, saves a cage to find a small door outside to get more freedom, but it's on JVM. It's really hard to do those kinds of things.</span>

<b>Adam: </b><span style="font-weight: 400;">That's where the cage metaphor comes in. Yeah. Okay. So now that we understand some of the motivations for, you know, getting Scala run natively, not on the JVM, maybe let's discuss,  some of the implementations.</span>

<span style="font-weight: 400;">So could you describe the compilation steps that it takes to get from, you know, Scala source to a native application?</span>
<h2><b>Compilation Steps from Scala Source to a Native Application</b></h2>
<b>Denys: </b><span style="font-weight: 400;">Oh, sure. So it's actually a bit involved. And there is a good reason we have every single step on the line, but it's actually a really multi, multi-step process. So the first thing you do when you go from a Scala source, so you always start with Scala sources, which is a source of truth a</span><span style="font-weight: 400;">nd in case this calls an idea if you end up with native binary, but it's not the one-step saying like from Scala source native binary is the first thing you do is you do parse and type check and basically do the pipeline from the main Scala compiler from JVM. And this, uh. It contains a number of things, but the most important one, I guess its type checking because they have checked Scala</span><span style="font-weight: 400;"> very involved with don't reimplement type checking or the language? We keep the same core, the same language Scala, JVM, and later, once the Scala compiler is almost done, we branch off and we emit something called NIR. NIR is short for Native IR, which is our own intermediate presentation.</span>

<span style="font-weight: 400;">So this NIR is the four-month we worked within our toolchain. And when I say our toolchain, I mean linker optimizer and is the old speaks this language as if it was like. Or were your language? So to get from NIR to binary, now we have one step closer because NIR is already quite low, quite more low-level since Scala, for example, many things are gone and I like, there's the illness of classes are no generics type system is much simpler and it's actually very close to Java by, it's called and it's Scala language.</span>

<span style="font-weight: 400;">And the main difference from Java code is that it's an SSA form, which makes it very easy to admit LLVM later, is this forum for coder presentation, which is very nice to optimize and compilers. So from NIR, we need to get native binary and do major steps on three major steps in this way. Its </span><span style="font-weight: 400;">first linking is linking loads and a minimal subset of your class pass to satisfy your application requirements. Like, for example, an app that doesn't use regular expressions, should not come pre-compiled regular expressions in the binary, and so on and so forth. So we've tried to really limit the amount of code we put in t</span><span style="font-weight: 400;">he final binary not to include every single class on the class pass, because sometimes class passes and get quite bloated, even though we don't use some of those things. Sometimes people depend on the library even though they use a single function from it. So we do something called the whole program that coordination at link time.</span>

<span style="font-weight: 400;">And then after that step, you get a minimal subsistence across the past, which we optimize our own optimizer, which removes common patterns, which LLVM doesn't know how to optimize. Well. And then, in the end, we admit LLVMIR, which is another. But now for LLVM LLVM is this project for reusable compilers, basically, s</span><span style="font-weight: 400;">o it's a core for C lang compiler. And it's also used by many, many other open source languages and it's actually very well documented and very nice to work with. And from there on, basically, LLVM’s jobs to grant from LLVM to native code.</span>

<b>Adam: </b><span style="font-weight: 400;">You have your Scala code, you're using them, you're using the front end Scala compiler to get some intermediate representation and then doing some transformations and then passing that through to LLVM. I</span><span style="font-weight: 400;">s that the. Yeah that's a true,</span>

<b>Denys: </b>T<span style="font-weight: 400;">hat's pretty much the gist of it.</span>

<b>Adam: </b><span style="font-weight: 400;">And then,  because everything, cause there's, there could be a lot in your classpath. You're making sure that you only include things in that binary that are actually part of that are actually called within the program.</span>

<b>Denys: </b><span style="font-weight: 400;">We don't always are going to be called, but we try to analyze it and kind of d</span><span style="font-weight: 400;">o our best guess and what's going to be called. Yeah.</span>

<b>Adam: </b><span style="font-weight: 400;">Okay. Yeah. Makes sense. So one of your frustrations with the JVM was that it's garbage collector doesn't fit every use case. So many listeners may know that there are different types of garbage collection strategies. I was wondering if you could describe a couple of strategies for performing garbage collection.</span>
<h2><b>Strategies for Performing Garbage Collection</b></h2>
<b>Denys: </b><span style="font-weight: 400;">So on JVM, you should have a number of built-in garbage. As far as understanding as the fault one is called G1. And G1 the latest collector from Oracle, which is optimized for latency? Sandra workloads? So typically GCs are often kind of put in ISER latency-sensitive or super tentative buckets. So what latency-sensitive means is that the just use optimized for the shortest pause that GC can take to collect garbage b</span><span style="font-weight: 400;">ut this pause can be extremely frequent, but every single pause is small and stripped with centric collectors care about now that length, so a single, but rather the total time of time spent in the system, for example, sort of what tantric collector can take fewer pauses but makes them much longer.</span>

<span style="font-weight: 400;">And basically on JVM right now is the official ones is G1 for latency-sensitive and parallel and GC for stripped sensitive workflows. As far as I understand. And CMS, which was previously as a default, is deprecated as of Java 9, which is a bit sad because on some of our workloads scala compiler.</span>

<span style="font-weight: 400;">I think CMS is still the best one, but otherwise, it's basically, it's three main collectors we have right now with CMS being duplicated, the general seems for all of those collectors, it's that they're typically generational. It typically directional at least parallel often concurrent. So what concurrent means is that collector, r</span><span style="font-weight: 400;">uns alongside your application and try not to stop your application as much as possible. This is the basic way it does garbage collection, not just in parallel as in doing multiple strides of garbage collection, but also. Concurrently to your application. So compared to all of this, so we're just calling native stent right now.</span>

<span style="font-weight: 400;">We have a rather simple garbage lecture called MX, which is inspired by a paper. You can see our more information on our website if you're interested, but the general idea is it's a single generation collector, which is right now optimized for the predictability. It's not concurrent today. It's still in the works a</span><span style="font-weight: 400;">nd we currently optimize mostly for throughput and latency. Sensitive is our next big milestone, which we haven't reached yet.</span>

<b>Adam: </b><span style="font-weight: 400;">Okay. That makes sense.  you also have,  like,  as I understand that you have more than one GC available in Scala native. Maybe you could describe what they there.</span>

<b>Denys: </b><span style="font-weight: 400;">It's a default one. I</span><span style="font-weight: 400;">t's actually not MX, it's called BOYM GC is this super easy to use, plug and play garbage collector, which was designed originally for C and C++. And the reason why it's even possible at all to make it work in this environment is that garbage collection is conservative. So what does it mean?</span>

<span style="font-weight: 400;">It means that garbage collector doesn't really require your app to declare ahead of time, objects. It will conservatively guess what objects are based on their size and layout. Just for example, if a field-specific offset looks like a pointer. It can consider the pointer, even if it's not, as long as it satisfies a bunch of properties that just he wants to see from pointers.</span>

<span style="font-weight: 400;">This is more expensive than precise garbage collection. So precise garbage perspective knows exactly where at which offsets you have pointers and which offsets it. Just data needs to do less work as the main reason why our current collector called MX  is because it's precise. So we do use information about the call object many hours, and it's way easier to collect the garbage.</span>

<span style="font-weight: 400;">It's still conservative in one small aspect, but it typically doesn't matter much. It's,  the techs are conservative, but. Typically it's not a problem. And another cool thing about MX compared to BOYM  is that it actually uses us a very smart data structure for allocation and collection, which lets it bump a cage most of the time, which is really important because bump allocation is the fastest way to allocate, and while still use a free list from time to time, purely to start, typically quite expensive in our own experience.</span>

<span style="font-weight: 400;">And apart from these two,  we have another collector called,  no GC or settings called native GC colon equals none. So that is, that one lets you completely disabled the garbage collector. And his idea behind that one is to kind of have a rough understanding of how much time was spent in garbage collection and what's the baseline performance.</span>

<span style="font-weight: 400;">What's basically is it a perfect garbage collector? Because essentially allocating and never freeing is actually extremely close to perfect garbage collection. It's not perfect because it will spill arcade objects far apart if objects were not like at the same time. So it can still cause problems with memory locality, but most of the time it's basically spent zero time in garbage collection.</span>

<span style="font-weight: 400;">So it means it's. As low overhead most of the time,  for most applications. And we use it as a baseline to benchmark our, our GC. So it's basically the main purpose is benchmarking. And apart from that, there are some use cases, like extremely short leaf applications, which really don't need to manage memory because they like to run for less than a second, and they don't locate gigabytes of memory, but maybe hundreds.</span>

<span style="font-weight: 400;">So if for those kinds of apps, it's actually beneficial to be able to disable garbage collectors because it means they will run the best performance possible.</span>

<b>Adam: </b><span style="font-weight: 400;">Makes sense. So, none exists as sort of a, for performance testing, but in actual fact, it can be used,  for like a command line up. So you have none.</span>

<span style="font-weight: 400;">So you can test what you're calling like a, you know, a perfect GC, against the two that you have. When you do this type of testing,  like how, how do they perform compared to a perfect standard?</span>

<b>Denys: </b><span style="font-weight: 400;">So compared to our reference, so typically the MX is somewhere around 20% overhead. So it just means if you add MX, your app will run 20% slower in comparison to BOYM. It</span><span style="font-weight: 400;"> is somewhere around a hundred percent. So basically enabled GC slows down your application by a factor of 2x, which is pretty bad. And it mostly has to do with the conservative nature of the collector. So MX is 20%. It's actually still higher than we want it to be. I think we can get to 10, or maybe even less, without changing the design of the collector too much.</span>

<b>Adam: </b><span style="font-weight: 400;">Interesting. Do you, do you happen to know like 20% away from absolutely perfect. Doesn't it doesn't sound too bad?</span>

<b>Denys: </b><span style="font-weight: 400;">Yeah.</span>

<b>Adam: </b><span style="font-weight: 400;">Do you know, like where the JVMs generational garbage collector would fit on, on such a measure</span>

<b>Denys: </b><span style="font-weight: 400;">It hard to compare with such CMS G1, or do you want, because they're on can practically, so it's typically under 5% and I would probably say even probably even less than that.</span>

<span style="font-weight: 400;">Because for a concurrent garbage collector, you never performed the garbage collection on the actual application thread, you have a separate thread, which only points application to do simple things like scans a stack or wait for this condition to halt. It's typically short pauses, so five milliseconds or less.</span>

<span style="font-weight: 400;">It can be frequent, but. I typically ask for incentives, like under 5% so basically this, this is our like gold performance to be on par with JVM right now. We don't guarantee a priority was JVM in terms of performance.  so is there still quite a bit of work to be done there.</span>

<b>Adam: </b><span style="font-weight: 400;">Makes sense. So, you know, some people's complaint with the JVM is sort of the stop the world garbage collection, but you shouldn't go to Scala Native to get away from that because. </span><span style="font-weight: 400;">That's all you have at this point.</span>

<b>Denys: </b><span style="font-weight: 400;">Yeah. So at the moment, I want to be done to solve the stop the world problem. So we're looking, we're like researching ways to refine our GC further, but right now, like as a released version, I'll need, no GC has no stop the world problems because it doesn't GC.</span>

<b>Adam: </b><span style="font-weight: 400;">Yeah makes sense. So now I think a, I understand how the GC works. I'd like to look a little bit at Scala native usage. So is Scala native the same language? Is it Scala or is it something like a</span>
<h2><b>Scala Language Features</b></h2>
<b>Denys: </b><span style="font-weight: 400;">Superset? So Scala native, his score is one to one Scala. So there are very few differences in terms of how we treat normal Scala language features a</span><span style="font-weight: 400;">nd they mostly are around age cases. Like what happens when you call a message on a novel or what happens when you do a cust, which doesn't make sense. So on JVM. Those cases are defined just for exceptions. Some of those are just undefined behavior on native, so it means anything can happen. If you do this t</span><span style="font-weight: 400;">ypically it means that if it just crashes with the sec fault, which is basically a bit worse than JVM but still easily the debugger bowls through native tools like that will show you a stack trace and we'll effectively show you as much as an L pointer exception. We've kindly guaranteed you one to one parity in each case a</span><span style="font-weight: 400;">nd it's likely we will never have this because it's typically been a non-issue for us. It's a bit more known to do a ton of this, but essentially it simplifies our implementation quite a bit. And apart from the core language, which is almost exactly the same, like 99% the same. We have a bunch of extensions for intro, intro extensions, and are very different from Scala and JVM.</span>

<span style="font-weight: 400;">You don't have any similar, we do have parole unmatched pointers. And things that go with them, like memory, layout types, like structure, so you can have structs and they test means which is the same as in C. we also function upon insurers and a bunch of other things to basically make it easy to call a C code.</span>

<span style="font-weight: 400;">Generally don't have to use this kind of extension at all. They're actually, they're only for the intro. Pointers are also extremely useful. Kind of having a lower level, just you free subset of the language that you can use for extremely performance application. But again, you don't have to use any of this.</span>

<span style="font-weight: 400;">So the core Scala is really as close as we can make it, and be as same as in JVM</span>

<b>Adam: </b><span style="font-weight: 400;">May makes sense. And I guess with the pointers, then you can kind of approach that perfect GC we were talking about, so, if you've added a concept like structs. Like structured types of functional pointers, like doesn't that make it the language, like a superset, like are these new keywords in the language. </span><span style="font-weight: 400;">So new syntax?</span>

<b>Denys: </b><span style="font-weight: 400;">We don't add any new syntax whatsoever. So our role is to type check without any problems. But by normal compile rate, it might not make sense. But essentially all of our extensions are tied to like magical intrinsics meshes or magical annotations, which. Modify how we compile things, but at the same time, it's still type-check </span><span style="font-weight: 400;">1:1 Scala compiler without changes from a text point of view, it's the same language from a runtime point of view is quite different. But,  types are still the same example.</span>

<b>Adam: </b><span style="font-weight: 400;">That makes sense. Yeah I think that's a nice way to do it. So I mean. Because you're using annotations, does that mean that you can actually cross-compile?</span>

<span style="font-weight: 400;">So the same source can be a. A native binary and, you know, a jar.</span>

<span style="font-weight: 400;">[</span><b>Denys: </b><span style="font-weight: 400;">Absolutely. So we do support for cross-compilation. So cross-compilation is done through this as SBT cross-project plugin. It's an aesthetic plugin that lets you cross-compile against three major targets, which is JVM and Native. T</span><span style="font-weight: 400;">hese targets are basically treated as separate set projects of one megaproject, which is called a cross-project from SBT. The point of view is kind of like separate projects with separate jars, but we tried to streamline and do the experience so that truly it feels more like. One single project, which you really just manage this,  the corresponding API, but overall ZDF or across completion is you can create a cross-project with one or more platforms, and then when you compile and publish, you publish one jar per every platform you want to support.</span>

<b>Adam: </b><span style="font-weight: 400;">How about libraries? Like the Scala standard library, I think it is kind of very important and kind of gives the language a lot, it's a lot of its fields. So do you have the standard libraries available natively?</span>
<h2><b>Scala Standard Library</b></h2>
<b>Denys: </b><span style="font-weight: 400;">So it turns out every story is a bit involved, but generally the idea is its call center rep, sound library. </span><span style="font-weight: 400;">And you can use it unchanged. Things like collections and type servers and they just work. And the how it works Scala implemented in terms of Java API very often and instead of trying to rewrite the whole library and have like a compatible but different library, we do a bit more which gives us better compatibility to the story is we implement subsets of JDK API, which are used by Scala, science library and popular third party projects to b</span><span style="font-weight: 400;">e able to have the same code on both JVM and native, completely unchanged. Like for example, projects like Utest and fast pers. To the cross-composite idea of they had zero changes in the source. He only had to change the build to support across projects in the city.</span>

<b>Adam: </b><span style="font-weight: 400;">So what about the JDK, like, I assume that's underpinning a lot of this Scala standard libraries, JDK calls.</span>

<b>Denys: </b><span style="font-weight: 400;">Yeah. So basically those are the Java libraries that we care about. So in typical, typically what means is that we have our own Scala implementation of Java Lang, Java I/O, and a bunch of other things, which are essentially core API, which people rely on in open source projects and Scala library.</span>

<span style="font-weight: 400;">We try to implement those as faithfully as possible to their reference limitation on,  under reference JVM. We don't look at the source of the reference, but JVM, because we tried to kind of stay away from the GPL code as much as we can. And essentially Scala is a BSD license, and our implementation is licensed.</span>

<span style="font-weight: 400;">And one of the only inspirations for some of the parts of APS we implemented was the Apache Harmony project, which is an early implementation of Oracle APIs,  without the GPL. But under. Apache license.  so we send time to use it for some cases where it's hard to reverse engineers' behavior of the JVM. </span><span style="font-weight: 400;">I know we need some help there.</span>

<b>Adam: </b><span style="font-weight: 400;">Interesting. I hadn't heard of that project. So if you're recreating the,  I'm just thinking there could be the case where an implementation detail of some aspect of the JDK actually becomes something that becomes dependent on, and then when you have a new. You know, native implementation and somehow that varies and things break. </span><span style="font-weight: 400;">Have you, have you come across any cases like this?</span>

<b>Denys: </b><span style="font-weight: 400;">We already experienced some of those. Technically, every time we see some of us it's a bug and native and we fix it as soon as we can. There are differences that we know of.  some of them seemingly minor, but they can still cause accidental breakage. </span><span style="font-weight: 400;">Like for example, our float to strain, like gentle and float and box-type just train as slightly different output format. It was the same number but has sometimes more trend. Zero is one JVM and it has caused some open-source test projects which rely on two string output to be exactly the same as in JVM to fail.</span>

<span style="font-weight: 400;">We tried to fix those as fast as possible. The first time I was in, it's a bit hard, but I go, our philosophy is if you're going to observe the difference from the reference foundation is a bug.</span>

<b>Adam: </b><span style="font-weight: 400;">Well that's a that's a hard standard to hold yourselves to. I mean, to me it almost seems like, you know, their tests shouldn't be dependent on the number of zeros that a two-string implementation does.</span>

<span style="font-weight: 400;">I'm interested to hear if any,  like of the large Scala frameworks can run on native. I'm thinking like a Spark or ACA. I don't even know what the play framework has any large project been taken over.</span>

<b>Denys: </b><span style="font-weight: 400;">So as far as now. Nothing major has happened yet. Probably the biggest codebase that headed across compile this Colise which has been done as part of our recent experiments.</span>
<h2><strong>Satisfying all the Java Dependencies</strong></h2>
<span style="font-weight: 400;"><b>Denys: </b>Technically it's not hard to compile the source to NIR like the first step. What's hard is to satisfy all of the Java dependencies, all of the Java library assumptions, which are expected by this project. Like for example. You need like  IO support, like from boat complete socket support. Some of these parts are still working on progress. </span><span style="font-weight: 400;">Like for example, it has been just merged in and initial support for Southwest has been just merged in the previous release. We're still working there. So,  it's a bit, a bit early for like. Major frameworks to just happen out of the box, but to be constantly looking at basically what's blocking people in terms of several library coverages and in terms of API specific support.</span>

<span style="font-weight: 400;">And these to me are often implementing things just based on reports of people trying to port libraries. Typically, right now it's a smaller scale, open-source projects like you test and fast bars. And, but for those, even for those cross compilers and test them, it often likes all of these small differences in library semantics are important.</span>

<b>Adam: </b><span style="font-weight: 400;">So you mentioned a Scala. The compiler has been, has been ported over. Could you describe why and how that went?</span>

<b>Denys: </b><span style="font-weight: 400;">So it had this like still private kind of mostly private experiment or the Scala compiler to, to the Scala native. Right now on JVM because of the startup issues, you kind of have to have an SBT always in the background because otherwise compiler just it's only usable after it's warmed up after a few completions. </span><span style="font-weight: 400;">But if you have native, we don’t really have to have this problem because the very first run is already optimized, so you can already run optimize code immediately. And what have you observed in our very early experiments right now is that we offer. Significantly faster performance and called calculations. </span><span style="font-weight: 400;">And simple projects like an understanding line of code can be that time faster. So basically. Called build.  ms Colossian JVM can be like two to three times slower than,  called built on native.</span>

<b>Adam: </b><span style="font-weight: 400;">Wow. That's, that's amazing. I mean, one of my frustrations with Scala is,  Yeah the cold compilation time can be longer than any other language that I can think of. </span><span style="font-weight: 400;">So what were some of the challenges of, this? Moving it to native.</span>

<b>Denys: </b><span style="font-weight: 400;">So probably the major challenge was to have enough IO. So we had the long story, of doing a file IO in different types of file IO because Scala sees like uses almost every single type of file. Your JVM has a, don't ask me why, I don't know, but it's basically, this is IO uses Java IO and a bunch of other things.</span>

<span style="font-weight: 400;">So also things like jar. So most of those kids have been contributed by Martin Durham from the Scala Center.  and it's been extremely helpful to make this even possible because essentially without. Its libraries and project depend on, it's hard to run it on native. So basically those are probably the hardest parts.</span>

<span style="font-weight: 400;">We also had a have a work in progress support of Scala ASM. So is a work of ASM library, which is a Java byte code generation tool kit, which basically lets you programmatically admit job bicycles. What's policy does all the time? So we have a limited,  it's up to the library part. It's native,  to have enough APIs to compile and to clause files b</span><span style="font-weight: 400;">ut otherwise, those basically were the only challenging parts. So we only kind of, the library problems, we haven't really discovered any major bugs in Scala. It's this way. So as soon as we had a library drown, basically, that's basically typical story of port and stuff native.</span>

<b>Adam: </b><span style="font-weight: 400;">Once those libraries are in place, then it works great. </span><span style="font-weight: 400;">So if I have a, if I'm in Scala native and I have access to see as well as to, you know, Scala and JDK libraries, like what is a string? When I create a string, is that a native string? Is that a set of Java string? Is it</span>

<b>Denys: </b>I<span style="font-weight: 400;">mmutable? So let's call a string is an instance of type string. Which is immutable, a</span><span style="font-weight: 400;"> string baked by Scala array, which is also garbage collector, which is quite different from what he has for C has for arrays, Right? So she has just a, basically, a sequence of bytes in memory, which, and was traveling zero. It's really this number. It can be really anywhere because it's C and it's untyped.</span>

<span style="font-weight: 400;">So when you call an API, which expects the C string, you need to convert Scala string to C strings. In some cases where, you know, you have the same data presented in both Scala and C side, you can share data structures, but often you have to,  copies data over if they're completely different formats.</span>

<span style="font-weight: 400;">Like, for example, for file IO, when you read or write a bias, we can just share a memory with  Scala native arrays without copying.  so it does not authenticate that you have to copy data over.</span>

<b>Adam: </b><span style="font-weight: 400;">So you can, you can use either and you get to choose and there are some helpers for going back and forth.</span>

<b>Denys: </b><span style="font-weight: 400;">Absolutely.</span>

<b>Adam: </b><span style="font-weight: 400;">Yeah. I can see why that would be very useful. </span><span style="font-weight: 400;">What hardware architectures, what platforms can Scala native-run on.</span>
<h2><b>What Platforms Scala Native Run On </b></h2>
<b>Denys: </b><span style="font-weight: 400;">So technically we have very little requirements, but right now we only test on 64-bit architectures. Mac and Linux, a 64 bit Intel people have reported and it seems to work on the 64-bit arm unchanged. Also, we don't officially support our amens moment as we don't have for it, but generally just about any 64-bit architecture s</span><span style="font-weight: 400;">o it just worked out as a box.  we only had reports about arm and Intel, but. Maybe more obscure things like PARP is you would work too, but be done now for sure, because we don't have this kind of hardware, so basically anything was a 64 bit  I should just work.</span>

<b>Adam: </b><span style="font-weight: 400;">I think now I kind of understand a lot of the usage around Scala native. </span><span style="font-weight: 400;">What interesting projects have you seen making use of this project?</span>

<b>Denys: </b><span style="font-weight: 400;">So there have been a number of experiments going around. So one of the more interesting ones there is this experimental framework and development code. Denver, and it's actually very, very early stages, but it tries to be like native first f</span><span style="font-weight: 400;">hat framework, which currently is built on simple stuff like CGI. Is it all sort of. Experimented with a faster GI now and it seems like it's an interesting place to be because happened to the point we have a stable that from our, it's basically the first framework to market will be the main framework for Scala native probably, it seems like it didn't, is our, has the biggest lead,  to market so far and is there's already quite a bit of code working and quite a bit of experiment and you can check one of the blog posts.</span>

<span style="font-weight: 400;">I think we had some of them. Who retweeted from his Twitter.  but basically it's sick days to do a native first bad prime Mark, which is pretty cool. I've always seen people do different types of a comma, line tools, and this is basically the area where we excel. And this is the area where JVM is often word land unusable performance-wise.</span>

<b>Adam: </b><span style="font-weight: 400;">Just because of the warmup time. Yeah. If you, if you write a command-line tool, it's just this slow.</span>

<b>Denys: </b><span style="font-weight: 400;">Yeah.</span>

<b>Adam: </b><span style="font-weight: 400;">So because of that quick startup time, I'm interested if anybody has thought of, or if you think it'd be a good idea to use Scala native for things like an Amazon Lambda, like serverless computing.</span>

<b>Denys: </b><span style="font-weight: 400;">It's probably an interesting idea. I've never seen anyone try it on to be interesting to see how it works out.</span>

<b>Adam: </b><span style="font-weight: 400;">I saw, I think I saw some talk on your website about,  compiling down to,  iOS-like to make an iPhone app. Is that a real thing or</span>

<b>Denys: </b><span style="font-weight: 400;">Its people try to compile it to iOS and it seems to work i</span><span style="font-weight: 400;">n principle, the main challenge was iOS and is interrupt with objective C. Right now, we don't support objective C. Basically, you're a bit in an uncomfortable place right now, as far as I know, nobody's actively trying that, so it's a plus in principle, but it's not directly on our shortlist in terms of things we want to do now.</span>

<b>Adam: </b><span style="font-weight: 400;">I think that you mentioned earlier that you were inspired by Swift with the LLVM intermediate language. Is that right? Yeah.  so how, how did it inspire the implementation of Scala native?</span>
<h2><strong>Major Scala Influences</strong></h2>
<b>Denys: </b><span style="font-weight: 400;">So Swift is called, and I recently, but the major inspiration for Scala was Scala GS. because before it's Scala GS, it was basically considered,  like general truth, too hard to implement </span><span style="font-weight: 400;">Scala outside JVM. So, essentially, major, major inspiration from Scala is Scala GS and not Swift. The swift influence is mostly in terms of,  compiler,  technology in terms of what we do under the hood. So, so it has this, an intermediate language called SIL which is short for Swift Intermediate Language a</span><span style="font-weight: 400;">nd it's kind of like a higher level,  LOVMIR and it's basically the area we also aiming for was NIR. Like a higher level, LVMIR likes saying the main difference between a SIL and NIR is that seal is reference content and a NIR is a garbage collected. And basically this probe is a main major difference between the two.</span>

<span style="font-weight: 400;">But otherwise, they're trying to solve a similar problem, both sort of presentation for high level optimizing. A compiler for high-level language and they both try to optimize parts, which LVM cannot do well because LOVM is actually a very low-level API and very low-level representation. Because, for example, some things are just simply gone by the time you and its LOVM are one of her longstanding issues is the promise of virtual dispatch.</span>

<span style="font-weight: 400;">We already did a lot to make it pretty fast, but still,  an LVM,  when you compile a virtual, this past typically ends up with. Calls to function pointers. Basically, this is what you compiled down to, and when you're at that low level of obstruction, you, it's really hard to optimize this away. So LVM typically does very little close to nothing to optimize virtual dispatch a</span><span style="font-weight: 400;">o this is what we do ourselves. So a cell also solves similar problems, and basically it's a. A format for pre-optimization before the LOVM condition happens. So you tried to make the LVM job as easy as possible and to meet high-quality coding.</span>

<b>Adam: </b><span style="font-weight: 400;">Were there any challenges with having a language that has two paradigms like Scala and kind of having this compile t</span><span style="font-weight: 400;">o LLVM.</span>

<b>Denys: </b><span style="font-weight: 400;">Actually, I don't think this two nature thing was a big problem.  probably is the main reason is that essentially Scala already does a functional object-oriented part of combination essentially.  all of the high-level features are all high-level functional features that are placed by equivalent object-oriented features.</span>

<span style="font-weight: 400;">Typically what you end up by the end of the Scala compiler is a very object-oriented code. And essentially most of our challenges to make functional code work well are the same estimate object code. Well, because at the end of the day, for example, at closures are just object to this virtual message, just the same as any other object-oriented s</span><span style="font-weight: 400;">o basically it's all compiled down to this same representation where it has. The same for a much for both object-oriented and functional features.</span>

<b>Adam: </b><span style="font-weight: 400;">That makes sense. Yeah. So that kind of part is taken care of for you. What features are up and coming in </span>
<h2><b>Up and Coming Features for Scala Native</b></h2>
<b>Denys: </b><span style="font-weight: 400;">So right now,  we are pretty much complete in terms of language support.</span>

<span style="font-weight: 400;">So we don't know any major semantic difference, which will be a breaking change as we would like to fix it as soon as possible. So, and most of the innovation right now is happening in libraries. So we are slowly working towards bigger and bigger coverage of our implementation of Java API APIs.</span>

<span style="font-weight: 400;">I was a major thing, which we are trying right now are multi-strategy in API, like from Google, it seems like locks, concurrent primitives, and so on and so forth. And apart from that, it's also networking and its things like that. So basically those are typical API. So you would need for b</span><span style="font-weight: 400;">ackend microservice kind of app. This is kind of the area of which we see Scala being used more in the future.  so apart from library innovation, we do lots of, lots of work on the compiler code quality, and there's around 10 code quality. So basically those are small iterative changes p</span><span style="font-weight: 400;">atterns we see basically to improve performance, to reduce overhead, to reduce footprint,  to make it even more lightweight and so on, so forth. I guess that's pretty much what it is. Why do the areas where we always see the biggest changes, which are like non-iterative, incremental, slow, a convergence towards better performance are changes and garbage collectors are probably the area where we could? </span>

<span style="font-weight: 400;">Do things significantly better than what we do now.</span>

<b>Adam: </b><span style="font-weight: 400;">So if people would like to learn more about Scala Native, where should they go?</span>

<b>Denys: </b><span style="font-weight: 400;">Started places. Our website, scala-native.org, and our Twitter, twitter.com/scala_native. Those are the two central places for announcements, our latest releases. And so as a forth,  you can also go to get her as a Gitter is a second nice cozy chatroom for.</span>

<span style="font-weight: 400;">If you just tried Scala, if something doesn't work or you have a problem, it's basically a place where you go to to ask questions. And of course, for all of the active development where you can get help and type issues, like the discussion on what's going on is happening over there. It's basically if you're subscribed to Twitter and Gitter and get help, it's pretty much, you will see everything that's going on.</span>

<b>Adam: </b><span style="font-weight: 400;">And, I understand since you first announced this project, you've had a lot of contributors. Is there a lot of contributions coming in?</span>

<b>Denys: </b><span style="font-weight: 400;">There's actually quite a bit of contribution right now. We have a bit more than 60 contributors. Overall, it's really nice because people often contribute sometimes small things, sometimes bigger things, but it's really, really nice to see people interested in the project and trying to help as much as, again.</span>

<b>Adam: </b><span style="font-weight: 400;">Yeah. That's great. That's great to have community involvement. It's not just a, you know, a couple of people working a way on it. Well, thank you so much for your time, Dennis. It's been great to learn about Scala Native.</span>

<b>Denys: </b><span style="font-weight: 400;">Thank you for having me.</span>

<span style="font-weight: 400;"> </span>

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1517</wp:post_id>
		<wp:post_date><![CDATA[2020-05-25 06:00:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-25 10:00:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[scala-native-with-denys-shabalin-transcript]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="scala-native"><![CDATA[Scala Native]]></category>
		<category domain="category" nicename="transcript"><![CDATA[Transcript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1520]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[157]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[883]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Incident Response with Emil Stolarsky</title>
		<link>https://corecursive.com/002-incident-response-with-emil-stolarsky/</link>
		<pubDate>Sun, 31 May 2020 10:00:11 +0000</pubDate>
		<dc:creator><![CDATA[webmaster@corecursive.com]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1529</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>Preparedness and Enabling Accurate and Quick Incident Responses</h4>
<span style="font-weight: 400;">An Incident Response does not end when an incident is over; it continues to provide support for a successful investigation, documentation, and historical knowledge to help improve the technical incident response process itself. </span>

<span style="font-weight: 400;">In this episode, Emil </span><span style="font-weight: 400;">Stolarsky goes in-depth with Incident Response and how it can teach the tech industry about responding to problems.</span>

<iframe style="border: none;" src="//html5-player.libsyn.com/embed/episode/id/6123812/height/90/theme/custom/thumbnail/yes/direction/backward/render-playlist/no/custom-color/87A93A/" width="100%" height="90" scrolling="no" allowfullscreen="allowfullscreen"></iframe>

<span style="font-weight: 400;">“But the reality it turns out is that humans, while we might be good at solving these complex problems, we'll often forget the basics, or we'll often forget something that's easily overlooked, but it's really important to the recovery.” - </span><span style="font-weight: 400;">Emil </span><span style="font-weight: 400;">Stolarsky</span>

<span style="font-weight: 400;">“The only way we can fight those biases and do an effective analysis of what went wrong is by having other people point them out.” - </span><span style="font-weight: 400;">Emil </span><span style="font-weight: 400;">Stolarsky</span>

<span style="font-weight: 400;">“Because postmortems retrospectives are super valuable. You don't want to repeat the same mistake.” - </span><span style="font-weight: 400;">Emil </span><span style="font-weight: 400;">Stolarsky</span>
<h3><strong>Transcript</strong></h3>
<strong>This is a machine-translated transcript. Podcast page for <a href="https://corecursive.com/002-incident-response-with-emil-stolarsky-p/" target="_blank" rel="noopener noreferrer">this episode is here</a></strong>

<b>Adam: </b><span style="font-weight: 400;">Welcome to CoRecursive, where we bring you discussions with thought leaders in the world of software development. I am Adam, your host.</span>

<b>Adam: </b><span style="font-weight: 400;">All complex systems eventually fail and software is becoming more and more complex. Incident response is preparing for and effectively recovering from these failures. Emil </span><span style="font-weight: 400;">Stolarsky </span><span style="font-weight: 400;">is a production engineer at Shopify where his role shares many similarities with Google's site reliability engineers, also known as SREs.</span>

<span style="font-weight: 400;">In this interview, Emil argues that the academic study of emergency management and industries such as aerospace and transportation has a lot to teach software engineers about responding to problems. You'll hear Emil argue that we need to move beyond tribal knowledge and incorporate practices such as an incident command system, rigorous use of checklists, and why we need to move beyond a move fast and break things mindset.</span>

<span style="font-weight: 400;">I think you'll enjoy this interview.</span>
<h2><strong>Four Components of Emergency Response</strong></h2>
<b>Emil: </b><span style="font-weight: 400;">Hi. Thanks for having me.</span>

<b>Adam: </b><span style="font-weight: 400;">So you've given some talks about incident response. What is Incident Response?</span>

<b>Emil: </b><span style="font-weight: 400;">Incident response is a field where we look at how systems can fail, both organizational and systems we build and how we can optimize recovery back to their normal state and everything around that s</span><span style="font-weight: 400;">o that is mitigating the system failure, that organizational and figuring out how to organize the human response component, that bringing the system back to running and then doing a retrospective and looking back at the system and seeing what lessons we can learn from the system failing and making sure that it doesn't fail the same way in the future, or if it does that we can minimize the impact it has.</span>

<b>Adam: </b>I<span style="font-weight: 400;">s an incident response made up of several pieces or steps?</span>

<b>Emil: </b><span style="font-weight: 400;">Yes. In my research into incident response. When you're sort of looking into this field, and it's to maybe my naive surprise, I discovered there's this whole body of work where there's sort of institutes that are going and looking and these sort of the term I'll use is an emergency management and it's broken down into four components.</span>

<span style="font-weight: 400;">It's broken down into Mitigation, Preparedness, Response, and Recovery, as the four components. So mitigation systems will fail. Things will break. How do we reduce the risks and make sure we have a safe failure? An example of this is like on a construction site, you might mark off zones under the crane where people can't walk as the crane's operating because if the crane breaks for whatever reason, something can drop in that area.</span>

<span style="font-weight: 400;">For us in software, that might be something like having bulkheading or circuit breakers. Say, remote services, networking, preparedness is how we do this I think like the human component. The analogy I always think of in tech would be on-call, but you don't ever want your system to break, but you assume it will.</span>

<span style="font-weight: 400;">And figuring out organizationally who is going to be the person who comes in and gets alerted. when that breaks, that'd be preparedness. The response is actually fixing if the service is broken. You need to bring it back up and then recovery will be going and looking and doing a retro on it and recovery sort of you getting back to business as usual or operating, and if we're going back to the tech analogy, a response will be, you say switch over from a highly available database. Your first one goes down, your second one is up, so bringing into the second database which is the secondary will be the response and then the recovery will be standing up a new highly available database and having a new secondary for the database that's running.</span>

<b>Adam: </b><span style="font-weight: 400;">So you had mentioned bulkheading. What is bulkheading?</span>

<b>Emil: </b><span style="font-weight: 400;">Bulkheading is when you have, say, slow external service and you have a bunch of app servers calling out to it. Bulkheading is this idea that you don't want all your app servers to be waiting on a response permit where you will sort of say, have allow-only per service connections in your app link to be connected to one service.</span>

<span style="font-weight: 400;">And you assume that if that percentage goes over or if the number of connections goes over, you can assume that the latency and that service is too high. And so you'll do a quick failure and you'll just return a failed connection and the service will have to go into its own degraded state.</span>

<span style="font-weight: 400;">It comes from the idea of in shifts where you have bulkheads and ships where if you have water leaking into a particular portion of the ship, you don't, you want to isolate the damage where you can handle a, say a quarter of your shifting underwater, a quarter of your app servers being tied up in one service, but you can't handle all of them being tied up because then you have no more app capacity.</span>

<b>Adam: </b><span style="font-weight: 400;">And so it's, it's mitigation because you're, you're mitigating a further disaster of some sort.</span>

<b>Emil: </b><span style="font-weight: 400;">Right. You're lowering the risk of failure. So you're identifying your risks and you're saying, how can we lower the impact, if this risk manifests and we have an incident or an issue with it? And that would be mitigation.</span>

<b>Adam: </b><span style="font-weight: 400;">Mitigation is preventing problems. You had an anecdote about how airlines or airline manufacturers tackle mitigation by tracking parts. Could you share that?</span>

<b>Emil: </b><span style="font-weight: 400;">Right. So in my Strange Loop talk, I brought up this idea of how every single part in an airplane is tracked meticulously. It's tracked when it was first manufactured, when it was put into the aircraft, when it was last serviced, how many flights it's been on, and what sort of its operational history.</span>

<span style="font-weight: 400;">And then after a certain amount of time, mechanics will have to go and sort of inspect the part and decide whether or not it can continue flying or maybe it needs to be fixed, replaced, etc. And I was thinking, well, if this looks like in a codebase. So we often, when we design systems, we'll build up the system we'll think a lot about how the system operates, and then we'll ship it. But we don't track usage individually, say function calls. And so it'd be interesting to imagine every time you deployed code. We started tracking how many calls there were to every single function, and you said after a billion calls to this one function, you'll open an issue to go and look and to sort of examine, "Hey, did we design this properly? </span><span style="font-weight: 400;">Is this becoming technical debt? Should we just leave it as is? Should we remove it and move to a different model? Should we be a factor?" And of course, like if you have a large enough codebase, that's unrealistic. But that idea of tracking the age of code is interesting I think.</span>

<b>Adam: </b><span style="font-weight: 400;">I like this idea, it's interesting. So if you're tracking it by the number of calls that are happening to an in production, I guess, that's going to lead to refactoring kind of the code paths that get called the most. I could think of some alternate ways like where you could say if it's the code that these calls or is calling these changes, then maybe it should be reviewed.</span>

<b>Emil: </b><span style="font-weight: 400;">Also, I think the age of code would be very interesting. If you had a heat map, a least recently touched code, which wouldn't be too hard to generate by looking at the commits of a codebase. It'd be interesting to see what the oldest and what's the newest parts of the codebase. And maybe like the oldest parts work the best y</span><span style="font-weight: 400;">ou don't need to touch them, but having that sort of looking at code from that perspective could be very interesting rather than just like a ship and then go back and fix it when it becomes this big issue of technical debt.</span>

<b>Adam: </b><span style="font-weight: 400;">It's like, "look at this code that hasn't been looked at in a while, it should be reviewed again."</span>

<b>Emil: </b><span style="font-weight: 400;">And it's this, the practices of meticulously tracking parts in the airline industry came from having a series of accidents that were due to part failure and in retrospect and sort of, "Hey, we need to be constantly tracking this to know because we know that certain parts will have, will fail under these conditions or will fail after these many uses."</span>

<span style="font-weight: 400;">And I haven't seen an analogy like that, that we can use an in tech or that we're currently using in tech. So it could be an interesting approach and it could lead to some sort of different perspectives of how we prioritize maintenance work on our own codebases.</span>

<b>Adam: </b><span style="font-weight: 400;">Should we be tracking the probability of failure across our software components?</span>

<b>Emil: O</b><span style="font-weight: 400;">ne thing we do at Shopify today is we use resiliency matrixes excessively, and it resiliency matrix is you'll have on your Y-axis, you'll have, you'll have a grid on your Y-axis, you'll have every component and an application, and then on your X-axis, you'll have different services across the entire application architecture.</span>

<span style="font-weight: 400;">And you can track, there'll be sort of like three entries for every service. So the first one will be healthy, the second one will be degraded. And the third will be doubt or complete outage, and then you can sort of track the state of the component in the application to see how it'll react in that condition. </span><span style="font-weight: 400;">If the database is partially down, can the applications still served something, or is it just going to return a complete 500?. If the elastic search is down, search what might be down, but you can still complete a checkout. And we've been looking at sort of trying to figure out what are the different failure scenarios and in more complex systems, say like aerospace and airlines in complex industrial processes, like in chemical plants.</span>

<span style="font-weight: 400;">They'll build diagrams out for every single individual component, and then though, attach different probabilities or risk factors -- may be that component failing. And then they'll also map out in these trees the different relationships and dependencies they have between different components. So maybe a door, a cargo door will fail if two particular bolts will fail, or maybe it'll only care if one of those bolts will fail.</span>

<span style="font-weight: 400;">And then the bolts have their own dependency of trees of like. What will cause them to fail and building out these sorts of maps of how can our systems fail? What is the chance of them failing in different scenarios is powerful. It allows us to sort of realizing, "Hey, maybe a whole large chunk of our application is dependent on this one component" and then that tells us, "Oh, we have a very high risk in this component, all our best effort, or it'd be best for us to sort of direct all our efforts to mitigate that one component to make sure it's a lot more resilient to failure."</span>

<b>Adam: </b><span style="font-weight: 400;">So it helps you to kind of pinpoint, I guess like linchpins are very...</span>

<b>Emil: </b><span style="font-weight: 400;">Exactly.</span>

<b>Adam: </b><span style="font-weight: 400;">..elements that could have cascading failure stories, I guess.</span>

<b>Emil: </b><span style="font-weight: 400;">Yeah. So in the talk I talked about probabilistic risk assessment, which is sort of the overarching topic of what are the different sorts of ways you can look at a system and figure out the chances of it failing in different scenarios. And what the different components rely on each other, et cetera.</span>

<b>Adam: </b><span style="font-weight: 400;">What was the preparedness in emergency response?</span>
<h2><b>Preparedness in Emergency Response</b></h2>
<b>Emil: </b><span style="font-weight: 400;">Preparedness is how the responders prepare, for lack of a better word, to an incident or failure. So in my talk, I talked about the incident command system. The incident command system was developed after a series of forest fires in Southern California, the response to them was mismanaged. And what ended up happening in the LA city fire department and the LA County fire department both competed and they had this sort of miscommunication and almost chaos and how they responded to the fire. And after the fire, sort of after the fire was extinguished, people went back and looked at it and they saw that these two organizations sort of not communicating together substantially exacerbated the size of the fire and the impact of it. And they went off and they developed a system organizing response to fires, and it was called the Incident Command System. And the idea behind the incident command system is that during incidents, out of just failures you'll have one person who's in charge, uh, responding to the incident, and they'll have complete or almost complete authority on how to respond to it. And they'll delegate and they'll say something like a portion of people needs to go respond to this. And that structure and placing that structure and having that structure laid out beforehand was very valuable. </span>

<span style="font-weight: 400;">An interesting analogy for an incident commander would be a composer in an orchestra. The composer can't play every instrument individually in the orchestra as well as the musician. Yet, without the composer, we wouldn't have like the final piece or the final composition won't be as great.</span>

<span style="font-weight: 400;">And so it's this idea of somebody who's organizing the response is important. It makes that every individual component, the sum of it, much greater than the absolute sum of it.</span>

<b>Adam: </b>D<span style="font-weight: 400;">oes that mean that the person who is the incident response person? What are they in charge of?</span>

<b>Emil: </b><span style="font-weight: 400;">I'll, I can give you an example of how this works at Shopify. </span><span style="font-weight: 400;">At Shopify we have a dedicated IMOC role. So an incident responder role, and that's an on-call rotation of production engineer. So at Shopify, our roles, we call it a production engineer. And so in addition to their normal on call, they'll sometimes go onto this other on-call instead. And what'll happen is if an incident is severe enough, the IMOC will come in and they'll be sort of.</span>

<span style="font-weight: 400;">There'll be the incident command, the incident commander. And what that means is their job is to make sure that all the on-call personnel that is necessary to mitigate the issue or to respond to it are present. They'll facilitate that, so if on-calls need to get somebody else to come online. The IMOC will go and make sure that happens.</span>

<span style="font-weight: 400;">If there's like the unlock will be the person who's in charge of tracking the incident. And so if a new responder comes online, they'll update them on the situation. They'll also be the ones who communicate with stakeholders. So in the past,  if an incident was superior enough, we, there wasn't, it was nobody's job specifically to go and update the status page or write the status based message or say inform leadership and this IMOC is the formalization of it. And it's interesting. When we first rolled this out, you sort of realized that there is implicitly this already. If you think back to times when there's an outage or a severe enough incident, there are one or two people who are managing the process.</span>

<span style="font-weight: 400;">But they're never elected. It's never, they never come in and go, I'm the one who's responding. It just sort of naturally happens with having a dedicated, I'm off role or dedicated incident commander well, you can not only sort of clarifying who's going to be doing that role but then you can also roll out appropriate training and give the best techniques. </span>

<span style="font-weight: 400;">So one thing we have is we have an IMOC bot, which is a chat-up spot that's integrated into our main chat-ups tool that'll help coordinate the actual incident. So during incidents, we can add notes that will then later show up in our RCA docs with this, uh, the IMOC bot, we'll also send one-on-one Slack messages to certain people with checklists.</span>

<span style="font-weight: 400;">So, for example, it'll say "make sure to update the status page." It'll say "if this makes sure to lock deploys, does this look like a broken code issue? Can you roll back? It's been three hours. Do you need to swap it? Swap out your IMR sort of a world right now with somebody else." And so all this formalization is very powerful and putting a term on it and putting the idea on it, and then having dedicated people focus on that role has tremendously helped us with reducing our time to recovery.</span>

<b>Adam: </b><span style="font-weight: 400;">IMOC, their job is to not actually address the issue, but kind of coordinate the addressing of the issue. And another thing you kind of led into there was checklists. Could you expand on the checklist?</span>
<h2><b>The Power of Checklist</b></h2>
<b>Emil: </b><span style="font-weight: 400;">So in my research around emergency management incidents, I was reading about airlines and sort of the power of checklists. And I happened upon this story of the B17  and sort of the origin of checklists and airlines. And the story goes in the ’30s the US Army/Air Force was trying to procure new bombers and all the major airline manufacturers had developed their own sort of prototypes, for this competition.</span>

<span style="font-weight: 400;">And Boeing had developed the B17. Which had all these sorts of amazing capabilities? It was more resilient to damage. You could fly farther than any of the competing prototypes. It could carry a lot more weight, and so many people were really excited about this, but it was also with that, with all those added features, it was also a much more complex plan, and they had brought all these prototypes out.</span>

<span style="font-weight: 400;">To a test airfield out in Seattle and on the second test flight for the B17 just before take-off, the airplane crashed. And during the investigation they had realized there was a pilot error. There's a particular valve that has to be open just before takeoff and during takeoff, but immediately after it has to be closed.</span>

<span style="font-weight: 400;">And the two pilots have forgotten to close it and in the investigation, a bunch of the pilots, the test pilots for the army went off and they started thinking like, what do we do? Because this wasn't, these weren't novice pilots. One of the pilots was the chief test pilot for the army at the time, and when they came back, they didn't introduce or roll out new more additional training.</span>

<span style="font-weight: 400;">Instead, they came back with this idea of a checklist and this was the first checklist in airlines and in aviation. The checklist was quite basic it had sort of do these say three or four steps for just before engine start or before takeoff, during takeoff, after takeoff, etc.</span>

<span style="font-weight: 400;">And the reason they rolled that out was that they had this realization that the system was so complex that you couldn't remember every single component right when you needed it in your brain at all times. They had put down the most important steps onto this list that pilots can follow and this sort of took the whole industry by storm, where now if you think of a profession that uses checklists, pilots are immediately going to jump into your head.</span>

<span style="font-weight: 400;">In a cabin checklists are built into the dashboard with the computer. They also have binders full of them, and whenever there's an incident or an issue onboard an aircraft, the first thing I probably will do is take out the checklist and start going through the steps. And when you look at more generally other industries, I've also started beginning to adopt this in the military, in medicine. And when you look at sort of the before and after of mistakes or failures or meantime to recovery with checklists. Everything gets substantially better, and it's almost, it's almost a malice not to start using a checklist, surprisingly. </span>

<span style="font-weight: 400;">It was surprising to me because when you go and you think of a checklist for me personally, I was thinking of a checklist as something that took the thinking out of responding to an issue. </span><span style="font-weight: 400;">If a human responds to a critical issue, why do they as critical thinker, why do I need to use a checklist? But the reality it turns out is that humans, while we might be good at solving these complex problems, we'll often forget the basics, or we'll often forget something that's easily overlooked, but it's really important to the recovery.</span>

<span style="font-weight: 400;">And the analogy I used in my talk was this idea of automating thinking. In tech, we and in programming, we automate everything that's manual and repetitive all the time because why would we redo it? But an incident response checklist, you're doing that, but for your brain, almost. So going back to the example of the IMOC bot, if you have an incident in production. Luck applies. Don't let new changes go out unless they're related to the response, but you're gonna. While it seems like a very obvious thing to do, there's going to be those situations where you, it skips your, you sort of, that thought, sort of skips your brain or whatever and you forget to lock the place and somebody deploys a new code and it exacerbates the issue.</span>

<span style="font-weight: 400;">Checklists are sort of this thing that lets us go like, okay, there's an incident of production. What do we do first? Lock deploys second, go down to the debug checklist, and you can have a second debugging checklist or whatever to sort of start figuring out, are we seeing, how did the database is looking, how is the edge network edge looking? What are our apps? Is it capacity? So on and so on. And then when you actually see that there's an issue in a particular component, you can then, that's where you want to save all your sort of thinking and time and focus all your energy on that complex problem and figuring that out because checklists can't help, can't always help with those type of problems.</span>

<b>Adam: </b><span style="font-weight: 400;">So why, and maybe this is just a very small detail, but why do we want to lock deploys when an incident happens?</span>
<h2><b>Why Lock Deploys When an Incident Happens</b></h2>
<b>Emil: W</b><span style="font-weight: 400;">e follow that process to lock deploys just because failure happens from change and systems break when something changes because before they break, they're in a stable state. And so the idea is, is that if you lock deploys, you won't be changing anything new. </span><span style="font-weight: 400;">So you have your current sort of you won't be introducing new changes that could change the response.</span>

<b>Adam: </b>T<span style="font-weight: 400;">here's already an incident taking place. Aren't you already in a non-stable state?</span>

<b>Emil: </b><span style="font-weight: 400;">Right, but you don't want to be introducing more changes during that. You want to figure out what change brought you to the point of incident and then mitigate that, fix it, or remove it.</span>

<b>Adam: </b><span style="font-weight: 400;">Makes sense. So, checklists are another example of an area where other fields have things to teach us about, how to respond to outages. What can pilot communication teach us about responding to incidents?</span>
<h2><b>Crew Resource Management</b></h2>
<b>Emil: </b>Ano<span style="font-weight: 400;">ther really interesting thing that came out of my research from the other industries was Crew Resource Management.</span>

<span style="font-weight: 400;">And there was a story that I happened upon for United Airlines Flight 173 and the story was, it was a flight from JFK to Portland. And on the approach to Portland as they were lowering the landing gear, the pilot heard a thump and the gear down success light didn't turn off, so they weren't sure if their gear was actually down.</span>

<span style="font-weight: 400;">So they aborted their landing and they started circling around the airport. Try and keep out the issue and figure out what had happened. And he did that for about an hour until they decided to start an approach to land and all their engines began to burn out. They lost power and the airplane crashed just before the runway, it turned out that the airplane had run out of fuel.</span>

<span style="font-weight: 400;">When investigators went and looked at the flight recorders, they had heard how both the first pilot or the first officer and the flight engineer had warned the captain that they're running out of fuel. But the captain didn't respond or didn't acknowledge, and they had assumed that he had acknowledged or kind of heard the issue, but he just chose not to do anything about it and didn't deem it a problem.</span>

<span style="font-weight: 400;">Around this time there's a series of incidents. Where a breakdown of communication was one of the core reasons the accident had happened. Maybe there was a miscommunication between the air traffic controller or the pilots, maybe the tower and the pilots, between pilots within the cabin where one pilot might have identified an issue and brought it up to somebody else, but nobody acknowledges it or they assume that the person who brought up the issue, we'll fix it, whatever it might be. And this has led to countless, almost countless. And so what had happened, almost countless, actually, this, and what happened is the FAA, which is the agency in America that regulates Aircraft Aviation, with NASA went and did a workshop to try to figure out how to rectify these issues. And NASA came out with this idea of Crew Resource Management. It</span><span style="font-weight: 400;"> is a formalization of best practices in communicating in high-stress situations where time is almost of the essence.</span>

<span style="font-weight: 400;">Some of these things are, they use a very basic, it'll be like clearly indicating who you're talking to, specify the issue you're noticing, specify why you've, how you've noticed the issue. So maybe that gauge is broken, talk about, or mention how you plan to resolve the issue and wait for acknowledgment from the person you're talking to. E</span><span style="font-weight: 400;">ven as a reciting these, it seems so basic. It seems so obvious like, of course, I'm going to be like, “Hey, captain, I'm seeing this problem. This is why I'm seeing like..” It's, there's nothing. Nothing that's going to blow your mind. But what the airline industry noticed is that when they formalize these ideas and when they sort of train them and almost like making it second nature for anybody who's a pilot to use these techniques, the results are, you can't sort of, you can't debate the results. It works. </span>

<span style="font-weight: 400;">When in my research I was listening to talks from pilots talking about near misses or accidents that were involved in. In every single one of them. The pilot will talk about how they use Crew Resource Management to more effectively communicate. They said they might tell their copilot to look at an issue, or they might know if one person's debugging stuff, if the other one's flying the plane. And having that really helps. And I was thinking as I was reading through this stuff about passes since I've been involved in incidents where, let's say there's maybe a major outage and a bunch of people come in and start helping, there'll be sort of three or four people who'd be like, Oh, I think this is broken, and they're four separate things.</span>

<span style="font-weight: 400;">And then one of those gets ignored or it gets lost in the noise, and then an hour later people circle around back and they realize that one of those was really the issue that was, that was what needed to be fixed in the very beginning. And you go, “okay, why did we miss it?” And it's because we don't have this same structure where sort of there's when you're going and looking at the emergency, like emergency management and other industries sometimes a lot of it are processes. </span>
<h2><b>Forcing an Acknowledgement is Powerful</b></h2>
<b>Adam: </b>I<span style="font-weight: 400;">s it the forced acknowledgment? I could see how that would be valuable. I've actually seen this happen where I think this would help him in terms of mitigation, where somebody mentions off-hand, the master database. Hard-drive is almost full, and it just kind of rolls, you know, everybody moves on. But that is, that is that kind of the piece that nobody acknowledged, like, “Oh yeah, that's something important.”</span>

<b>Emil: </b><span style="font-weight: 400;">Right, and forcing that acknowledgment is really powerful. And it's also I've seen oftentimes where somebody that will just make a statement, but it's not directed to anyone. </span><span style="font-weight: 400;">And so nobody will take ownership of it at that moment and directly up making a statement to somebody. Well, it could force a conversation around it.</span>

<b>Adam: </b><span style="font-weight: 400;">So is that like how does that influence how you guys do things at Shopify?</span>

<b>Emil: </b><span style="font-weight: 400;">So one of the things we're looking at is modifying our uncle training and talking about these ideas and talking about how. </span><span style="font-weight: 400;">What are the best ways to communicate and sort of point out issues you're seeing, talking about how the United Airlines Flight 173 the captain not acknowledging, was that a time when the captain was above all, in charge of the aircraft and you couldn't sort of challenging them.</span>

<span style="font-weight: 400;">And with a Crew Resource Management is this idea that there might be a hierarchy in terms of managing the incident response, but you want to get rid of human fallibility and social interaction sometimes where you might be a little nervous to say something because somebody is your superior or whatnot, and it's sort of like, get rid of these ideas you're trying to fix the problem. You're all equals, how can we best do this? And I was, I was mentioning how this feels like process a bit and obvious process and in the emergency management industry, a lot of stuff sometimes just process. Like I was reading NTSB investigation manuals and the NTSB is the national transportation safety board.</span>

<span style="font-weight: 400;">It's the agency in America that is responsible for, for any transportation-related accident, figuring out what happened and then once they figure out what happened, deciding whether or not they need to either issue new regulations or a bulletin or like an issue of sort of here's the device and how to avoid these accidents in the future.</span>

<span style="font-weight: 400;">And it's an agency of 500 investigators whose job is to investigate and figure out the root cause of accidents. And when you're reading the manual since it's a government-issued manual, the first few pages are talking about expensing items and when you expense an item to make sure to keep the receipt and you're in this, it's like, “okay like this is pretty obvious I don't need to know this.” But for other stuff like calling out, calling out, people are getting, trying to like break down this formality in social settings between people is actually very beneficial. And it's like the, I think one of the reasons the tech industry has been looking more and more into this is because you have to look for these golden nuggets in the rough or that needle in the haystack where you have to work through, like can sometimes like really thick manuals, but then a few of those pieces in there is very valuable.</span>

<b>Adam: </b><span style="font-weight: 400;">Yes. It sounds like you've, you've extracted some great nuggets with checklists, Crew Resource Management. Have you learned anything about root cause analysis from this world?</span>
<h2><b>Root Cause Analysis</b></h2>
<b>Emil: </b><span style="font-weight: 400;">So it's interesting in some regards, the tech industry is actually better at root causes or figuring out or doing, postmortems, retrospectives than other industries. So other industries have a very much operator-error focused mentality. So they'll try to figure it out who messed up. And then they'll just fire them, which I find in the tech industry, we've been a lot better off going, what happened? How do we make sure this doesn't happen again?</span>

<span style="font-weight: 400;">And it's important. Dave Zwieback is a director of engineering. I believe it's Pandora and he has a book on postmortems. It's a very interesting book where it's his idea, he gives this example of, a story, a technology sort of group in a bank and how they had an incident and somebody was fired for breaking the system and how they sort of think through and discuss it like whether they should have shipped by the operator, should they have fixed the root cause or whatever it might be. And he talks about how really what retrospectives are and post mortems are, is trying to figure out what went wrong and controlling for bias. People as humans are biased for many different reasons.</span>

<span style="font-weight: 400;">And the only way we can fight those biases and do an effective analysis of what went wrong is by having other people point them out. And so some sort of biases that you might have is attribution error or an attribution bias. Where you'll identify sort of the root cause of an incident to a single person.</span>

<b>Adam: </b><span style="font-weight: 400;">How does bias affect in generating a root cause analysis?</span>

<b>Emil: </b>A<span style="font-weight: 400;">n example would be if you think of an incident. And you build a linear timeline and this idea of a linear timeline is also partially broken. But suppose, for now, we'll go, we'll have a linear timeline. There could be a point where an operator, a programmer, operations engineer, production engineer makes a change, and the system breaks and it looks when you look at it in that sort of context or in that way. It looks like that person made that decision. They made a decision to ship broken code. They made the decision to delete the wrong database. I really think back to the adage that kid lab had a while back where an operator there had logged into the wrong database machine to do maintenance and ended up deleting the wrong database.</span>

<span style="font-weight: 400;">When you in that post mortem it's written. So and so logged in and deleted the master database or primary database. It looks like they had logged in, they knew they were on the primary database and they decided to delete it. But that's not the case, right? People think they're making the right decision up until the moment they make a mistake.</span>

<span style="font-weight: 400;">And so we have all these different biases. When we look back, it's important to try to build tooling and use different processes to control for them and to try to lower the chance of having those biases come into our decisions going forward because postmortems retrospectives are super valuable.</span>

<span style="font-weight: 400;">You don't want to repeat the same mistake. And if you can figure out what this is sort of like. Core reason or root cause that's causing multiple other issues throughout your system. That's invaluable, but it's important we get there the right way,</span>

<b>Adam: </b>So y<span style="font-weight: 400;">ou have to make them try and find who is at fault, but more look in terms of process or how you would change processes, right. Is that the idea?</span>

<b>Emil: </b>F<span style="font-weight: 400;">or instance, at Shopify, we expose a lot of tooling around, say flushing our caching system, and an example might be, I don't believe you've ever had this issue, but suppose somebody accidentally flushes the caches without intending to. One approach in the retrospective could be. Why on earth did you flush the caching system? Do you cause issues? Suppose, but another approach could be, why was it so easy for you to flush the caching system without the intention to do it?  Why would somebody make a mistake of being on the wrong database node? Why was it sort of easy to ship broken code?</span>

<span style="font-weight: 400;">And maybe the conclusion is, is that because in order to have. “Perfect Code” or have such a test suite that like it's that particular bug could be super low. The cost of it is too high. Maybe it takes too much time to run the test suite and so the tradeoffs, we say, “okay, this is a risk we've decided to take.”</span>

<span style="font-weight: 400;">But having trust in the people in your organization is very important. And figuring out the systems around them and ensuring that they have the right tools to not cause issues is where postmortems should focus on.</span>

<b>Adam: </b><span style="font-weight: 400;">I've seen where a way that that's handled is, is with the 5 Whys. Like “Dave deleted the database, but why?” And then you kind of is that a useful way to get to these root causes or,</span>
<h2><b>Methods in Eliminating Biases </b></h2>
<b>Emil: </b>S<span style="font-weight: 400;">o that's one of the ways, and there are many ways out there and I'm still going out and like trying to categorize and each one has its own bias. So one, that's one interesting I liked the idea of was a Causal Factor Tree.</span>

<span style="font-weight: 400;">And this is one used by NASA where they'll build out a tree, all the different components involved, different events, and how different components failed, and then each of those events or components will have sort of leaves or nodes and trees under them. Then we'll talk about how they failed or have they gotten to that state and what the RCA is about?</span>

<span style="font-weight: 400;">And I like it because you get to see sort of like the reality is that like an incident very often is multiple things going on in parallel and each thing has its own independent timeline and in a Causal Factor Tree, you can sort of lay all that out. But then another thing that happens with the Causal Factor Tree is that very often when you go far back enough, you'll hit sort of an organizational component, and then that'll be at the bottom of the tree.</span>

<span style="font-weight: 400;">So why someone might be like, they weren't enough engineers to fix the technical debt, let's say in an example and so he could have like a bias in that sense. You'll never find an approach to a problem with or to a post-mortem without any biases. What you should be doing and aiming to do is looking at the different sorts of tools you can use, the biases that will come with those. And then keep an eye on making sure you don't succumb entirely to those or that you're aware of them and making sure that like you're accounting for them and your decisions and your conclusions. </span>

<b>Adam: </b>O<span style="font-weight: 400;">nce you've generated your RCA and you know, try different methods to eliminate biases from it, is there an end result or what's the goal? </span><span style="font-weight: 400;">Well, actually, let me rephrase this whole question, should we as an industry be tracking RCAs and some sort of global cross-industry manner?</span>

<b>Emil: </b><span style="font-weight: 400;">Okay. Yes. 1 million times yes. And in the rest of this podcast is me shouting “Yes”. Then maybe we should do that. </span>
<h2><b>Capitalizing on Lessons Learned</b></h2>
<span style="font-weight: 400;">So another story that I came across in my research and I find it very exciting, is the aviation safety reporting system. The director of the aviation safety board was giving a speech, and you talked about how. The reality is that every single airline has a huge database of all the accidents or near misses they've experienced. So, airlines are legally required to report access that has occurred but if it's a near miss, they don't have to, and he's, the director was saying where we're not capitalizing on these lessons, we're learning because only the lessons are staying silent. They're not being shared across the entire industry. And what came out of that is a data, the database was started where every pilot can submit an anonymous report of an accident that had occurred or a near miss that occurred.</span>

<span style="font-weight: 400;">And the database is managed by a neutral third party. In this case, it was NASA and anybody in the industry, even you can go and look at this and read the reports and you can see. What had happened, What was the sort of environment that had happened? And in addition, the FAA, you actually get legal immunity, I believe, for up to five or 10 years after an accident has occurred, if you submit the report. So if you submitted a report and you did something that was wrong or illegal, but you talked about it and you let other people learn lessons from that mistake. You can't be faulted for that. And that's a really exciting idea because while we have our own different flavors of systems we all build, we're all, they're all very similar.</span>

<span style="font-weight: 400;">If you take a sort of web application that's running rails, it's using MySQL as its main database, choosing elastic search for search. It's using Reddit for its job queue system. I bet there've been numerous incidents in every one of those companies that are very similar and that if the first company had talked about this mistake they made, maybe the replication setup wasn’t optimal.</span>

<span style="font-weight: 400;">Maybe a particular setting has a different sort of symptom that you don't expect as a problem until something else completely different in this architecture breaks. All those other companies wouldn't have had to pay the same price and figure out that lesson on their own. Imagine if there was a third party database or data, a database that didn't have any goals of profit, but just to better our industry where every company can submit their service disruption reports, their retrospectives, talk about the lessons they've learned, and anybody else can go and read about them.</span>

<span style="font-weight: 400;">We'll have to automize maybe some of the specifics, but the ideas are largely the most important part. You can even sort of think that something for us would be in the tech industry. This organization would then go off and be able to develop best practice guides, right?</span>

<span style="font-weight: 400;">If you go and look at all the different failure scenarios say Nginx active production, you can say this is one of the most optimal ways to run Nginx and production. Take into account all these different, very common incidents.</span>

<b>Adam: </b><span style="font-weight: 400;">This is a great idea. I can imagine an Nginx consulting company putting out some sort of white paper where they looked through all the incidents and, you know, they're advising everybody about, you know, best practices. Why anonymous?</span>

<b>Emil: </b><span style="font-weight: 400;">So nobody can go out and get blind, I guess. I know anonymity provides protection where we don't necessarily care who was involved in the accident. We care about what has happened because of the individual. The individual themselves can be like, you can swap out a different person and if the process and systems in place will cause people to create well, to make mistakes, then it doesn't matter who that person was.</span>

<span style="font-weight: 400;">What matters is what happened and what made that happen and what the repercussions of that work so we can go and mitigate them.</span>
<h2><b>SRE Role and Mindset</b></h2>
<b>Adam: </b><span style="font-weight: 400;">That's a great idea. You had mentioned earlier -- SRE. So that's a Google role. I believe how the SRE role influences how you guys do things at Shopify?</span>

<b>Emil: </b><span style="font-weight: 400;">The SRE role is Google's term for it. Production Engineer is really a synonym. It adopts the SRE mindset, but the difference is largely only in the name. Okay.</span>

<b>Adam: </b><span style="font-weight: 400;">Could you expand on that? What does the role encompass?</span>

<b>Emil: </b>T<span style="font-weight: 400;">he idea is traditionally in companies there will be a developer role and an operator role or an operations engineer and developers would write the software of the service that will run in production. </span><span style="font-weight: 400;">I know we'll throw it over a fence to the operation engineers who will deploy that service and manage it, maintain it. So if there's an outage, the operations engineers are going to be the ones who are going to try and fix the service, not the developers who wrote the code. The idea with the SRE role is, instead of having this divide, the operations engineers build the tools and systems that developers can then use to run their own software. So imagine if you had your own internal Hiroko. Developers would write their code and then he pushed to Hiroku and then they can sort of they can monitor their own application, they can figure out if the application needs more resources in a particular type. The SRE’s in an organization would build Heroku almost internally and the actual manifestation of what that looks like in reality is different. But conceptually it's very similar</span>

<b>Adam: </b><span style="font-weight: 400;">And the value of having such a new position is?</span>

<b>Emil: </b><span style="font-weight: 400;">You can, one way to think of it is, as your SIS service scales up, the number of machines you're managing or dealing with also grows the number of operations engineers you need as your service grows, scales linearly with that. Within the SRE type role, since the focus is on, it's, you can always think of it as developers with strong systems understanding who are automating a lot of the manual processes you would have in a traditional operations role. They'll scale logarithmically.</span>

<span style="font-weight: 400;">You need a substantially smaller organization to be able to manage a large service. And it also forces a much healthier sort of idea around interacting with our infrastructure. So there's this idea of pets vs cattle, where before if you're manually managing a system, you would treat each computer or server as a pet, you would manually fix it. You would come in and you try to figure out what the problem is. It's very like one-on-one. With the SRE model it is that you want to automate everything. You want an automated way to do all of this and so you'll treat your computers like cattle where you'll, they'll all be treated the same there won't, there won't be any special stuff like different configurations. If a computer is misbehaving, you can just wipe it and reinstall the same sort of configuration that you had and all the other computers and treat it not as an individual, but as part of a herd.</span>

<b>Adam: </b><span style="font-weight: 400;">The difference is that a pet, you know, each pet has a name and is unique to you, where every cattle is the same?</span>

<b>Emil: </b><span style="font-weight: 400;">An example would be if you have like cache1, cache2 to cache3, cache like that's treating them like cattle, but if you have like rails cache, page cache, whatever your each cache server is like unique and the infrastructure and is it a special and different, and that's not great for longterm manageability.</span>
<h2><b>Move Fast and Break Things Model</b></h2>
<b>Adam: </b><span style="font-weight: 400;">So I want to be conscious of your time before we go. What do you find to be the problem with the, uh, the Facebook model of old “move fast and break things”?</span>

<b>Emil:</b><span style="font-weight: 400;"> I think two things. One, in the tech industry, in the past and when we were younger, the services that we built, their impact on the people around us, and their impact on society was much smaller in scope. People's lives didn't rely on this thing called the internet. Today, when our services fail, there's a problem, the consequences can be terrifying. </span><span style="font-weight: 400;">People can't travel, banking grounds to a halt. Our 911 response services can't work anymore, so on and so on and the list is countless. And the terrifying thing is that it's growing, it's that list is growing by the day. We're constantly modernizing and connecting all these different things that before were analog, and now they're becoming digital.</span>

<span style="font-weight: 400;">And we need to, as an industry, start to appreciate the responsibility we have to people who are technologists. And approach our service of the things we build and the systems we built. Maybe not with the extreme of managing a nuclear reactor, but there's a lot of lessons out there that we can learn to make sure that our systems are more stable and are built with that understanding of their importance of staying up and available and move fast and break thing indicates to me this old idea, it's this time before when if things broke, it's fine, and we need to move to something where we can't just let other people pay the price of our systems breaking.</span>

<b>Adam: </b><span style="font-weight: 400;">I think that's a great thought and that's a great place to leave this with. So Emil. Thanks so much for your time, and all your great insights.</span>

<b>Emil: </b><span style="font-weight: 400;">Thank you, I had a ton of fun.</span>

<span style="font-weight: 400;"> </span>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1529</wp:post_id>
		<wp:post_date><![CDATA[2020-05-31 06:00:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-05-31 10:00:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[002-incident-response-with-emil-stolarsky]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="devops"><![CDATA[DevOps]]></category>
		<category domain="post_tag" nicename="incident-response"><![CDATA[Incident Response]]></category>
		<category domain="post_tag" nicename="ops"><![CDATA[Ops]]></category>
		<category domain="post_tag" nicename="podcasts"><![CDATA[podcasts]]></category>
		<category domain="post_tag" nicename="sre"><![CDATA[SRE]]></category>
		<category domain="post_tag" nicename="technical-preparedness"><![CDATA[technical preparedness]]></category>
		<category domain="category" nicename="transcript"><![CDATA[Transcript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1059]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[157]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1536]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Scala at Duolingo with Andre Kenji Horie</title>
		<link>https://corecursive.com/003-scala-at-duolingo-with-andre-kenji-horie/</link>
		<pubDate>Sun, 07 Jun 2020 10:00:23 +0000</pubDate>
		<dc:creator><![CDATA[webmaster@corecursive.com]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1552</guid>
		<description></description>
		<content:encoded><![CDATA[<h4><b>The Process of Rewriting A Complex System</b></h4>
To produce a faster and reliable system with fewer bugs and a cleaner codebase, time efficiency may be the biggest factor to consider. Rewriting code can be a necessary process to achieve this.

<span style="font-weight: 400;">In this episode, Andre Kenji </span><span style="font-weight: 400;">Horie </span>discusses their motivation, experiences, pain points of rewriting a Duolingo’s engine in Scala.

<iframe style="border: none;" src="//html5-player.libsyn.com/embed/episode/id/6124029/height/90/theme/custom/thumbnail/yes/direction/backward/render-playlist/no/custom-color/87A93A/" width="100%" height="90" scrolling="no" allowfullscreen="allowfullscreen"></iframe>

“So I was actually more fascinated that Scala is like a modern language. It has so many nice things that we don't have in Python and Java that kind of outweighs the pain points. “ - <span style="font-weight: 400;">Andre Kenji </span><span style="font-weight: 400;">Horie </span>

“I mean, it's that sort of thing that after working with a Python a lot of time you just become so used to that, that whenever you have something nice, you're like, “Oh, that's nice.” - <span style="font-weight: 400;">Andre Kenji </span><span style="font-weight: 400;">Horie </span>

<span style="font-weight: 400;">“There are caveats, it's slower to write a piece of code, but then the amount of effort you have to maintain that code in your test code is a lot lower in Scala, so for me, in the long run, Scala is just a faster language than Python.” - Andre Kenji </span><span style="font-weight: 400;">Horie </span>
<h3><strong>Transcript</strong></h3>
<strong>This is a machine-translated transcript. Podcast page for <a href="https://corecursive.com/003-scala-at-duolingo-with-andre-kenji-horie-1/" target="_blank" rel="noopener noreferrer">this episode is here</a></strong>

<b>Adam: </b><span style="font-weight: 400;">Welcome to CoRecursive, where we bring you discussions with thought leaders in the world of software development. I am Adam, your host.</span>

<span style="font-weight: 400;">Duolingo is a language learning platform with over 200 million users. On a daily basis, millions of users receive customized language lessons targeted specifically to them. These lessons are generated by a system called this session generator. Andre Kenji </span><span style="font-weight: 400;">Horie</span><span style="font-weight: 400;"> is a senior engineer at Duolingo. He wrote about the process of rewriting the session generator as well as moving from Python to Scala and changing the architecture all at the same time.</span>

<span style="font-weight: 400;">In this episode, I talk with him about the reasons for the rewrite, what drove them to move to Scala, and the experience of moving from one technology stack to another. It's a great interview and I think you'll enjoy it. Andrea Kenji </span><span style="font-weight: 400;">Horie</span><span style="font-weight: 400;"> is a senior software engineer at Duolingo.</span>

<b>Andre: </b><span style="font-weight: 400;">Hello. Welcome for inviting me.</span>

<b>Adam: </b>Y<span style="font-weight: 400;">ou have great case study about the rewrite work that's been done at Duolingo's book. Before we get into that, I was wondering if you could explain what Duolingo is.</span>
<h2><b>Duolingo as a Language </b><b>Learning </b><b>App</b></h2>
<b>Andre: </b><span style="font-weight: 400;">Duolingo is a language learning app.  We have around 200 million users as of today. In the app, people can learn a new language,  by doing exercises and translating sentences from their language, their native form to the language they want you to learn.</span>

<span style="font-weight: 400;">And then we have other exercises that practice listening skills and some reading skills and grammar skills.</span>

<b>Adam: </b><span style="font-weight: 400;">It tries to make it sort of a game to learn a new language. Is that correct?</span>

<b>Andre: </b><span style="font-weight: 400;">Yes, that's correct. And we have all of the gamification mechanisms, such as levels, experience, all of that to make the language learning experience more engaging because when you're learning a language, that's the sort of process that takes people like several years to become fluent in that language, right? So by gamifying it we make it easier for users to, keep learning and keep engaged. So that they can achieve this very long term goal.</span>

<b>Adam: </b><span style="font-weight: 400;">How big is the engineering team at Duolingo?</span>

<b>Andre: </b><span style="font-weight: 400;">Engineering teams should be around 40 to 50 people.</span>

<b>Adam: </b><span style="font-weight: 400;">And how is that organized?</span>

<b>Andre: </b><span style="font-weight: 400;">So we have several teams, we have some product teams, which we call product teams. For example, we have the learning team, which is the team that focuses on improving our learning metrics and improving the learning experience to users. We have our growth team, which is concerned with expanding our user base and keeping people engaged and we also have some more for the foundational teams, like for example, a Q&amp;A or operations.</span>

<b>Adam: </b><span style="font-weight: 400;">Which team are you on?</span>

<b>Andre: </b><span style="font-weight: 400;">I am in a team called the architecture team. So it's basically, guaranteeing that we have a healthy code base, or a  healthy system in terms of -- at the application level.</span>

<b>Adam: </b><span style="font-weight: 400;">So would your tasks be around sort of setting standards around what languages are used or what frameworks or things like that?</span>

<b>Andre: </b>M<span style="font-weight: 400;">aintaining like common frameworks and libraries for the rest of the company to use, making sure that the architecture as a whole is healthy and each of microservices is doing correct things and not abusing infrastructure.</span>

<b>Adam: </b><span style="font-weight: 400;">You were involved in a rewrite of the session generator? Could you explain what the session generator is?</span>
<h2><b>System Redesign with Session Generator</b></h2>
<b>Andre: </b>Y<span style="font-weight: 400;">es, absolutely. So, well, when a user is learning Duolingo, they will need to, we give the users exercises and we have a pool of exercises which is pretty large.</span>

<span style="font-weight: 400;">So, actually let me take two steps back. We have a product called the incubator and in that product, we have volunteers making the courses, the courses that you'll see. So it's like a crowdsource called approach where they volunteer, you input all of the data and we'll make the course structure and the write, all of the course content and then the session generator is responsible for pulling all of that data and picking the exercises that will be the most interesting for the user at that point and give a session that is bite-size and small for the user to do, let's say in a bus or wherever they are. </span>

<b>Adam: </b><span style="font-weight: 400;">A session is like a unit of learning and that the session generator creates that, that unit?</span>

<b>Andre: </b><span style="font-weight: 400;">Yes, that's correct. </span><span style="font-weight: 400;">A session on these, simply speaking is a collection of exercises.</span>

<b>Adam: </b><span style="font-weight: 400;">Is this session generated on the fly or is it created ahead of time?</span>

<b>Andre: </b><span style="font-weight: 400;">Part of it is on the fly. We have a lot of pre-processing going on because there's so much dating involved in each session that if we do every single step on the fly, and that's very time-consuming.</span>

<b>Adam: </b><span style="font-weight: 400;">Why couldn't all, say Spanish sessions be created ahead of time? Is there info?</span>

<b>Andre: </b><span style="font-weight: 400;">Yes. We also want the sessions to be adaptive for each user, right? So for example,  let's say our user knows 10 words that some or the user knows 50 words. So the sessions for these 2 users will be different and also with the consideration, how likely they are to remember a word and other things like that. So it's very important for these sessions to have these online components.</span>

<b>Adam: </b><span style="font-weight: 400;">How do you figure out when somebody's going to remember a word?</span>

<b>Andre: </b><span style="font-weight: 400;">So we have a model for that, there is this thing called the forgetting curve for a word and it's, basically the probability that a user will forget or will remember a word after a period of time after they've learned, let's say that one day later, they have a probability of remembering that X, 2 days later, the probability will decrease. And so we model that, as in a curve. And then we do some sort of regression to estimate how well the user knows each of the words.</span>

<b>Adam: </b><span style="font-weight: 400;">If I learned that today, then you’ll figure out based on certain probability, as I'll probably know it tomorrow, but not next week. And then you reintroduce</span>

<b>Andre: </b><span style="font-weight: 400;">Yes, that's correct.</span>

<b>Adam: </b><span style="font-weight: 400;">So why did you decide that a rewrite was required? So you have this session generator, it takes into account these kinds of forgetting curve</span><span style="font-weight: 400;">s and builds the lesson on the fly, I guess. So why did you decide you needed to rewrite it?</span>
<h2><b>Move Fast, Ship Quickly Mindset</b></h2>
<b>Andre: </b><span style="font-weight: 400;">Yes. It all starts with the monolith, I guess, and all of the nightmarish stuff started with a monolith. If so, we have the monolith and it's written by them. And the thing is that in the first years of a startup, we are all thinking of, let's move fast, let's ship quickly. And after some years,  we ended up adding a lot of dependencies like data stores and other services and whatnot.</span>

<span style="font-weight: 400;">And in the end, the entire system becomes very, well, the performance is not so great anymore. And also, the site's not as stable so one of the reasons it's true is to re-architect the whole system, so that the system is more robust and the, well, the second reason is that we have the code in Python. Well, Python is a great language for, you know, writing things quickly and having like prototypes ready very fast. But far systems that are very large that have very, complex data structures and complex algorithms, then Python is not so great, because you know, let's give it examples, so something as simple as dynamic typing becomes a nightmare because then you don't have all of the niceties that you have in a, in a strongly typed language because the compiler won't do as many checks, for example. And then the developers lose confidence in writing code and then they have just spent a lot of time testing and testing to see if all of the possible corner cases are being caught and nothing's going to break in production.</span>

<b>Adam: </b><span style="font-weight: 400;">So let's see if I understand it. So we have this giant, Python monoliths. So as you add new features, it keeps on growing and you're saying the problem. The problem with Python is when you want to add, when you want to add something new, like your level of confidence is low because of dynamic typing. Do you have an example to explain? </span>

<b>Andre: </b><span style="font-weight: 400;">Sure. Okay. I'll give a very simple example, which is, let's say we want to,   rename a function. And I mean, you could grab your, your entire code base and start changing stuff, right? But it's also possible that in some part of the code, you pass that function as a Lambda and it has a different name somewhere and then your code breaks into production are, for example, if you want to add another arguments or function, then you have to guarantee that also nothing's going to break. But then it's also very hard to find out that the occurrences are for example even simple things as you don't know what data type you're getting into function. You can assume you're getting something, but the end, you're getting something else and these are all things that a simple compiler check could figure out and say that you're doing it wrong. But since it doesn't have that, then it's very easy to break stuff.</span>

<b>Adam: </b><span style="font-weight: 400;">Did, unit tests help with this process at all, or were there tests?</span>
<h2><b>Testing</b></h2>
<b>Andre: </b><span style="font-weight: 400;">Unit tests definitely help, but in the starting years of a startup, I guess people are more concerned about shipping things than writing unit tests, and it gets just data. Even parts of our codebase are very difficult to mock with a unit test and are part of the monolith because, after a while, we learn from our mistakes and realize that, “Oh, we can architect things in a different way that makes tests easier.” But in the monolith, there are still many places where it's very hard to write unit tests, very hard to mock things.</span>

<b>Adam: </b><span style="font-weight: 400;">Especially, yes. If you didn't have unit testing in mind, sometimes you make decisions that make it hard to add them after the fact.</span>

<b>Andre: </b><span style="font-weight: 400;">Yes, that's very true.</span>

<b>Adam: </b><span style="font-weight: 400;">So when you decided to do this rewrite, what made you choose Scala?</span>

<b>Andre: </b>T<span style="font-weight: 400;">here are some reasons. The first is that our infrastructure is built on top of AWS. We needed to think of the languages that are natively supported by Amazon. Right? And they are, well, Python, Javascript in no-js, a JVM based languages such as Java, closure, and Scala. And I think Go, which is also, one of the supported languages as well.</span>

<span style="font-weight: 400;">JavaScript has the same problem, as Python is weakly typed.  we're in and this is something that we wanted to avoid for the particular case of the session generator. And then Java is, well, it's well known and it's a bit slow and verbose so it's slow to develop and it's very verbose.</span>

<span style="font-weight: 400;">So we wanted a more modern programming language, which is why we thought that Scala was good,  a good might be a good choice. And also because Scala is also very mature in the backend, and it's used by many applications in the big data domain. So, big data is kind of similar to what we're dealing with in the session generator, right? Because it's like, there's also a lot of data,  complex data structures, complex algorithms, it seemed to be a very good fit.</span>

<b>Adam: </b><span style="font-weight: 400;">Is there any concerns about the learning curve of a language like Scala. I mean, it has a reputation for being somewhat complex?</span>

<b>Andre: </b><span style="font-weight: 400;">Yes. So we had concerns. Right now, since our entire engineering team is small, and the number of people dealing with Scala is also small. So, my population of people who learned Scala here in the company is also very small. So I don't know how good we can talk about like how, how easy it is, but,  up to now, I personally thought it would be harder for me and for other engineers to learn Scala and to get going, well, it was a lot easier than we anticipated.</span>

<b>Adam: </b><span style="font-weight: 400;">Let's discuss some of the features of Scala that you found useful in your rewrite. So could you describe referential transparency?</span>
<h2><b>The Method of Referential Transparency</b></h2>
<b>Andre: </b><span style="font-weight: 400;">When we have referential transparency, we have a method that the only thing it does is calculate the output and doesn't change any state anywhere. So it's very easy to unit test and to also to just logically debug what's going on because you know that once you will have that once it has some input, the output will always be what you're expecting.</span>

<span style="font-weight: 400;">It makes things very easy to test, to reason about, and that's one thing that's very good once you have very complex infrastructures.</span>

<b>Adam: </b><span style="font-weight: 400;">So an example, just it's helpful for me if I am probably the listeners if I can tie it, tie it back to an example. So referential transparency means you have a function with some amount of inputs. So let's say like the words that I know in Spanish, and then the output is -- or do you have an example of where that could be used.</span>

<b>Andre: </b><span style="font-weight: 400;">So let's say, in some part of the algorithm we are thinking if we should choose an exercise A or an exercise B and we put both into the function. And so what happens with referential transparency is that first there are not going to be any side effects. So, we won't, you know, write things to the database for example, because that will be adding a side effect. We won't be changing something inside one of the objects, because that doesn't contribute to the output. Right. And then, the idea is that we will just do some calculation and that calculation will be yours only for the output. So let's say if we wanted to pick between two exercises, we will do well, the output is simple. This is one of them, but we can guarantee that nothing else is going on,</span>

<b>Adam: </b><span style="font-weight: 400;">Which is what makes it easy to reason about.</span>

<b>Andre: </b><span style="font-weight: 400;">Yes, you're correct.</span>

<b>Adam: </b><span style="font-weight: 400;">You also mentioned, and I think it ties into that example, about immutability. So how does immutability tie into this?</span>

<b>Andre: </b><span style="font-weight: 400;">When data is immutable. You have some nice properties like you don't need to think about. You don't need to think if something is changing your data from somewhere else. And I think many people have seen, you'll call a function and then you'll pass an object to a function that function calls and that function call another function. And somewhere along the way, someone changes one of the properties. And then you don't know who changed it, what it changed to and you just need to add print statements all over the place to figure out what is going on because something changed part of your data and you don't know why. So when you have immutability, you're guaranteed that things won't change. So all of you, in each step of your algorithm, the state will be very clear to you.</span>

<span style="font-weight: 400;">What this means in the context of Scala, for example, is that in each step of your algorithm, what happens is only data changes. Let's say you have a list and you'll change the elements of a list by let's say adding one to a property, and then you'll know that in your next step that the, your new list will have all of the elements with plus one, and you'll know that you're guaranteed that that's going to be that for so if you use that variable for something else, that value, it will always stay the same.</span>

<b>Adam: </b><span style="font-weight: 400;">But you did say the list, we're adding an element to it. So how, how can something be immutable?</span>

<b>Andre: </b><span style="font-weight: 400;">Yes, that's a good question. What we do is we actually copy the list. We have the original list. We have the new list with plus one in all the elements. And then we keep just transforming data as we go and that's a way functional programming happens is that you will always, generate new stuff but you won't be changing what you had because if you changed what you had done, it's, it becomes hard to, to understand what's going on once you have a giant system.</span>

<b>Adam: </b><span style="font-weight: 400;">So this is like Scala’s immutable collections, and you're saying the immutable, immutable control structures means when you write your session generator, nothing's changed. If a number of lessons come into the input and we need to select one, then that one comes out the other side?</span>

<b>Andre: </b><span style="font-weight: 400;">Yes or another example would be, let's say, if you pass, for example, you have a set of exercises. And in one part of the algorithm, you want your filter and consider, let's say half of these exercises because they're better in that context. So you'll filter your pool to half, and then you'll do whatever you have to process. But then in your next step, you wanted to use the actual like full set of exercises and the data is there because you have not touched it, you created a new smaller set in the previous step which if you want you can use it or not, but the idea is that your variables always stay the same so if you want the entire pool for the next step you're guaranteed that nobody changed it, nobody removed things, without you realizing</span>

<b>Adam: </b><span style="font-weight: 400;">To make this rewrite work. It's quite a different model of operations. So did you have to change the architecture of the session generator so that it could work more as, transforming inputs rather than mutating them?</span>
<h2><b>Transforming vs Mutating Inputs</b></h2>
<b>Andre: </b><span style="font-weight: 400;">Yes. So we did change, so many of the algorithms as we had to just rewrite them in an immutable way. Sometimes when the algorithm was way too hard to rewrite and it was risky to introduce errors in those cases, so Scala has this nice thing that it's, I don't know if it's nice or not, people might disagree, but you can port Java code into Scala, and just run Java libraries in Scala because both of them run on top of the JVM. And what this means is that Scala also supports things from the Java world. So like mutable types and some, for loops, while loops that are not very functional -- functional programming. So. If you're rewriting something and then you realize that, Oh, this will be very hard to rewrite without adding complexity or making risky changes, then you can write in Java, like an EDM of Scala.</span>

<b>Adam: </b><span style="font-weight: 400;">What percentage would you say, is more of, you know, Java is written in Scala, and what percentage is, did you kind of go with this functional transformation style?</span>

<b>Andre: </b><span style="font-weight: 400;">So in our codebase, I'd say that more than 99% is functional because we try to do those things in a more -- so when you're using immutable, collections and we are using referential transparency, things are much easier to debug, much easier to maintain. So we try to make things immutable and, or referential transparent and, you know, functional in general, in most of our codebase, most of our code basis, maybe one or two algorithms, we thought it would be better to just use the nonfunctional version.</span>

<b>Adam: </b><span style="font-weight: 400;">Well 99% is very functional. </span>

<b>Andre: </b><span style="font-weight: 400;">Yes. When you're writing a code based on scratch, you can also do unit tests that you couldn't do in your monolith. Things are much easier to just test that your algorithms are working as expected.</span>

<b>Adam: </b><span style="font-weight: 400;">How is unit testing in Scala?</span>

<b>Andre: </b><span style="font-weight: 400;">We use, in Scala, should I say in our whole framework we use Sinatra as our HTTP server. Sinatra is an HTTP server written by Twitter. And we, and they use a Guice, which is the Google library. So unit testing in this context, we have like all dependents out of the box, we have mocking out of the box and it's very easy to do everything.</span>

<span style="font-weight: 400;">And I'd say that it's, well, it was just easy to write unit tests and we ended up writing a lot of them and I think our coverage right now is somewhere along. 70% maybe. </span>

<b>Adam: </b><span style="font-weight: 400;">Nice. In the session generator, you mentioned microservices. Is it something that calls out to a bunch of services and combines them together, or how does it interact with the rest of Duolingo's infrastructure?</span>

<b>Andre: </b><span style="font-weight: 400;">So we have to pull data from a lot of places, and we have a data pipeline for that. So the pipeline is just a task that runs offline so that we don't, you know so that we don't make real online traffic depend on our data stores, right? So we have these tasks that run daily and hit all of these services and whatnot that we need to hit in order to fetch the data. And then this task pre-processes everything and then serializes all of the data into the S3  file server by Amazon -- AWS. And then, when we are online, we are serving actual requests for users. What we do is we just fetch from the file server and catch it in memory and serve it and when we do that, we get, we have an architecture or a system that's very robust to faders because the only, your only real dependency is your file server and network of course. It's also very fast because everything is caching memory.</span>

<b>Adam: </b><span style="font-weight: 400;">So the only real, external dependency you have is S3 and then even that is kind of insulated by your cache?</span>

<b>Andre: </b><span style="font-weight: 400;">Yes.</span>

<b>Adam: </b><span style="font-weight: 400;">With all this functional idiomatic code you're writing. Does that mean the session generator is sort of like, it takes as an input, like a user and then all of the possible lessons ever, and then it spits out what they should learn next?</span>

<b>Andre: </b><span style="font-weight: 400;">A little bit, it actually takes as input, the online part of the session generator takes as input the lesson the user wants to learn and some other user settings and outputs the session to the user -- the collection of exercises. </span>

<b>Adam: </b><span style="font-weight: 400;">There's an idea that statically typed languages are more verbose and dynamic languages are more succinct. So I've actually found, in my experience  that Scala is a very succinct language, maybe even more so than Python in some cases. What did you find in terms of verbosity moving from one language to the other?</span>
<h2><b>The Verbosity of a Language</b></h2>
<b>Andre: </b><span style="font-weight: 400;">Yes. So I think verbosity depends a lot on the language itself. And so if you're familiar with Python or JavaScript as your go-to dynamically type language and Java is your statically typed language, then I would agree that yes, Java is super verbose. We have that Scala is a language that is concerned about a lot of typing. Scala tries to infer types whenever it can.  Sometimes it can't and makes some errors here and there, but usually it's able to infer your types and sometimes infer other things that the decompiler can infer. </span>

<span style="font-weight: 400;">Like Python you can do a list comprehension and write one-liners, instead of writing like in Java, you need to write three or five lines of code just to do a for loop. And Scala is very succinct, and there's not as much typing as a language like Java, and compared to Python I’d say in some cases a Scala it's fewer variables. When you're defining a class, you don't actually need to write, if you don't need a body, you don't need to write a body for a Scala.</span>

<b>Adam: </b><span style="font-weight: 400;">Are you using implicit within your codebase?</span>

<b>Andre: </b><span style="font-weight: 400;">In Scala, there are two kinds of implicit. Implicit parameters and implicit conversions. Implicit parameters basically define some of the parameters of your method as implicit. As long as we think about the scope of the color, a variable of that type that is also an implicit variable. It's declared as implicit then you're able to just not write the code to pass that value into the function. So it's basically to avoid typing and so for those, we do use implicit. We don't use implicit conversions because we usually find that a little bit scary cause you know, you won't see when things are being converted. So generally,  no implicit conversions, but we do use implicit parameters.</span>

<b>Adam: </b><span style="font-weight: 400;">What's an implicit conversion?</span>

<b>Andre: </b><span style="font-weight: 400;">Implicit conversion is when you have an object of type a, and then let's say that you'll want to convert it to an object of type b. There is a mechanism in Scala that you can define your conversion from type A to type B, and if you put that conversion in your scope, you're able to convert it from it for A to B without writing code to convert.</span>

<b>Adam: </b><span style="font-weight: 400;">So it could be very handy and save on typing, but also maybe you don't know. What's changing to what?</span>

<b>Andre: </b><span style="font-weight: 400;">Yes.</span>

<b>Adam: </b><span style="font-weight: 400;">In my experience, Scala can be less prone to runtime bugs. I think you mentioned you had some issues with runtime bugs getting to production in Python. So how did this change now that you've rewritten?</span>

<b>Andre: </b><span style="font-weight: 400;">Yes, so in Scala, we do have a lot fewer runtime bugs, part of it is because your compiler would just get most of the errors. So as long as compilation passes, well, you don't have any programming errors you have like application logic bugs here in there, but that's another problem, right? And so, the compiler does a lot of stuff for you, and the unit testing framework is also very user friendly. So we can write a lot of tests that make sure that your code doesn't have the most common application logic errors that you'll know about. So, in the end, it's very hard to have these runtime bugs going on these Scala</span>

<b>Adam: </b><span style="font-weight: 400;">What, what did you find to be the pain points, of moving to Scala as a language?</span>
<h2><b>Pain Points of Moving to Scala</b></h2>
<b>Andre: </b><span style="font-weight: 400;">So I was actually more fascinated that Scala is like a modern language. It has so many nice things that we don't have in Python and Java that kind of outweighs the pain points. There are some pain points, but I would say that they're not actually the language itself. There are some small things here and there in the language, but those are not a big deal. Most of our pain points where let's say we have a library in Scala that it's like undocumented or we have a function that's available in Python by default are in one of the common libraries and it's not in Scala. So they're like some small things but I guess that that's true. Whenever you change,  a codebase from one language to the other.</span>

<b>Adam: </b><span style="font-weight: 400;">Nice. You mentioned there are some things about the language that fascinated you?</span>

<b>Andre: </b><span style="font-weight: 400;">Okay, let me see -- What are the things?  So yes, I think one of the things is a well functioning, functional programming in general, how readable it makes it your code. Since the language is not too verbose the end result is that a, your code is very explicit on the application logic instead of having like a boilerplate of just like controlling your loops or things like that. I find coding in Scala very readable and that's nice, it's also very easy to just look at the code and see if there is a problem because, you know, it's all immutable and it's just easy to debug even without running any code.</span>

<span style="font-weight: 400;">I originally started my life as a programmer in Java and then you know when you're in Java and you move to Python, the first thing you think to yourself is that “Oh, I love lesser codes. It's much faster to write stuff. And then there's also that difference.”</span>

<span style="font-weight: 400;">Scala is very fast to write code. So in the end, I spend my time not only writing code but all of that extra time that I would either spend you know just typing in Java or testing things in Python. I use that time to write a unit test in Scala and in the end, it's a confidence thing you can write code and be confident that things will work as you expect.</span>

<b>Adam: </b><span style="font-weight: 400;">So you're back on the JVM, so you got tired of the JVM and you left, and now you're back. But the language, the language is more fun. </span>

<b>Andre: </b><span style="font-weight: 400;">Yes, exactly</span>

<b>Adam:</b><span style="font-weight: 400;"> Is it faster to write Scala slower but worth the trade-offs or compared to Python compared to Java?</span>

<b>Andre: </b><span style="font-weight: 400;">I'd say that far it's a bit slower than Python, but there, there are caveats, it's slower to write a piece of code, but then the amount of effort you have to maintain that code in your test code is a lot lower in Scala, so for me, in the long run, Scala is just a faster language than Python.</span>

<b>Adam: </b><span style="font-weight: 400;">So, not faster to initially develop, but faster, like the all-in time.</span>

<b>Andre: </b><span style="font-weight: 400;">Yes.</span>

<b>Adam: </b><span style="font-weight: 400;">So how about maintenance? So maybe you don't know, maybe this is so new that you haven't had to do much maintenance of it?</span>

<b>Andre: </b><span style="font-weight: 400;">We haven't done that much maintenance because the system is very new but whenever we have to like refactor or something it's very easy to, cause, you know, your IDE does, does it fire you basically. So you don't even need to think about it. We just click two buttons and that's it. </span>

<b>Adam: </b><span style="font-weight: 400;">The compiler gives you confidence, I would imagine too, or around these, these refactorings because you know, you get some sort of error checking?</span>

<b>Andre: </b><span style="font-weight: 400;">Yes, exactly. So, I remembered the first time I had to refactor some stuff in Scala. I was just surprised that in fact, it would take me like, I don't know, an hour, maybe not an hour, but you know, a lot of types and in Scala I finished in like less than one minute and I was just so surprised. I mean, it's that sort of thing that after working with a Python a lot of time you just become so used to that, that whenever you have something nice, you're like, “Oh, that's nice.”</span>

<b>Adam: </b><span style="font-weight: 400;">Scala being on the JVM should, in a lot of cases, be much faster than Python.  do, did you have any sort of numbers about that?</span>

<b>Andre: </b><span style="font-weight: 400;">I wouldn't say like, so we haven't actually done any benchmarks that you would be able to trust that compares the exact same code in one environment, R and D out there the one thing that we have going on is that we, well we have rewritten the whole system. The whole session generator in Scala.  we've, we have also rearchitected things and some of the performance gains that we saw were, so from rearchitecting and using the memory cache and, and using a street, we decreased latency from it was maybe 700 - 800 milliseconds to tenths of milliseconds. So it was like more than 10 times. That was very good at the number. Also, the number of servers that we need to show. Just to use to serve the same amount of traffic decreased by -- how much was it? It was like maybe 10 times or so.</span>

<b>Adam: </b><span style="font-weight: 400;">Well. So that's a big savings cost bottom line, I guess.</span>
<h2><b>Scala and Savings Cost</b></h2>
<b>Andre: </b><span style="font-weight: 400;">Yes, and also just the fact that you know, Scala and the JVM general do better in both multithreaded,  environment, and multiprocessing and it's able to, to just run a lot of stuff at the same time. It's nice, so one thing that's color has the Python does, for example, is a, it's called futures.</span>

<span style="font-weight: 400;">So what a future does is basically it's a unit of an asynchronous computation. So whenever you make a request,  you'll get the response in the future, but the value is not there. The value is you're waiting for the value in another thread. So what happens is that you don't block your original thread. And because of that, you're able to do a better job in concurrency, for example. And that's one thing that we see in Scala that our servers are able to handle a lot more concurrent requests than Python? Because in Python whenever you have a request and then you're waiting for I/O, that thread is completely blocked. And if you have, I don't know, let's say 20 threads in your server, then you have one less to serve traffic.</span>

<b>Adam: </b><span style="font-weight: 400;">Is there, is there a Python way to deal with this? Like, or there's just none?</span>

<b>Andre: </b><span style="font-weight: 400;">Not that I know of well, not out of the box. Maybe there might be some libraries that do, for example, the actor model, which is something,  it's, it's the thing that languages like Elixir and Erlang out of the box too, so it just handles concurrency better.</span>

<span style="font-weight: 400;">I think there is something for Python as well, there's Akka, it's a library for our Scala. And if I think if you use that, you might be better off, but not out of the box, not if you're using Pascal’s pyramid.</span>

<b>Adam: </b><span style="font-weight: 400;">Are you using the actor model in your session generator?</span>

<b>Andre: </b><span style="font-weight: 400;">I'm not in the session generator. No, because we wanted to. The interactions with I/O are very simple in our session generator and there's also the overhead, to get it set up first because you know, nobody in the company had that kind of knowhow. So we chose to first do the more common approach but it's something that after you start reading, you become interested in it.</span>

<b>Adam: </b><span style="font-weight: 400;">Are you using actors at all? I'm just curious because you mentioned it.</span>

<b>Andre: </b><span style="font-weight: 400;">So we're thinking of implementing that for the offline part of the session generator because we have a lot of data. And in that situation it wouldn't make more sense to have a data pipeline that uses actors, for now, we still haven't had the opportunity to do it because, you know, we're still working on some other things, and that's not the highest priority yet.</span>

<b>Adam: </b><span style="font-weight: 400;">Makes sense. So now that your rewrite is over.  What were the business benefits of the rewrite? Like was it a success?</span>
<h2><b>The Business Benefit of the Rewrite</b></h2>
<b>Andre: </b><span style="font-weight: 400;">Yes. So far now I think it's a success, it's not completely over yet because we have some, it's just some features to port, but it's mostly done. I would say it's a success because we were able to have like those cost benefits, it's just a lot cheaper to run or to serve traffic with the rewritten code and the rewritten architecture than the original one. Also, in terms of developer productivity, it's also very good because definitely. It's a little bit weird if I say it, but the feedback from the other developers is that it's just less painful and I think it's painful. It was the word they actually used.</span>

<b>Adam: </b><span style="font-weight: 400;">So what makes it weird?</span>

<b>Andre: </b><span style="font-weight: 400;">Well I started the whole process of moving to a Scala so I might be very biased towards the new system.</span>

<b>Adam: </b><span style="font-weight: 400;">So you don't find it weird, but other, other people do? Is that what you're saying?</span>

<b>Andre: </b><span style="font-weight: 400;">No, it would be weird for me to say cause I'm biased, but other people, I also got feedback from other people that it's less painful. It's that thing that I talked about we've like, you can write code, and I think that's very important.</span>

<b>Adam: </b><span style="font-weight: 400;">Okay. I understand. Would the rewrite have been successful or as successful if you had made the architectural changes, but not the language change?</span>

<b>Andre: </b><span style="font-weight: 400;">I think partially, with the architectural change, we would see improvements in latency. I think in Python they wouldn't be as large one reason is that Python is a bit slower than Scala. The other reason is that having a threat-safe caching Python is not as trivial as it should be. So I think that's, that that would be one problem. But also generally, we would lose all of the benefits of developer confidence of not pushing breaking changes,  because you know, it's all dynamically typed and the, it would be much harder to make, like larger changes are just, you know, what the data structures are.</span>
<h2><b>Language Learning Perspective</b></h2>
<b>Adam: </b><span style="font-weight: 400;">What is it like working at a company with such a focus on learning?  Are you a language learner yourself? Does the company have a learning perspective based on what it does?</span>

<b>Andre: </b><span style="font-weight: 400;">Yeah. So I think it's very interesting to work here. So I am a language learner so my native language is actually Portuguese. I was born in Brazil. I'm a Japanese-Brazilian, so my native language is Portuguese second language is English. I've learned Japanese and kind of know Spanish. It's very fun to be surrounded by people who have the same interests in learning. There are some people who are learning like a ton of languages and they know a lot of languages. And even,  with our community.  Sometimes when we meet some members of our community, it's like very interesting because they have all these, a view of worlds that you don't usually see in your daily life and know people who want you to learn new cultures and learn new languages and have a very broad horizon I’d say.</span>

<b>Adam: </b><span style="font-weight: 400;">Yes I could see why that would be refreshing, people, Talking to people who have a global perspective. Well, it's been great to talk to you about this rewrite. I'm glad it's been a success. Thank you so much for your time.</span>

<b>Andre: </b><span style="font-weight: 400;">Yes, thank you for, thank you for inviting me. It was great at talking to you. </span>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1552</wp:post_id>
		<wp:post_date><![CDATA[2020-06-07 06:00:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-07 10:00:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[003-scala-at-duolingo-with-andre-kenji-horie]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="duolingo"><![CDATA[duolingo]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="category" nicename="transcript"><![CDATA[Transcript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1555]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[856]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[157]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>2388</wp:comment_id>
			<wp:comment_author><![CDATA[Elis]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[lishorie@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[74.111.97.14]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-09-16 21:32:39]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-09-17 01:32:39]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I really recommend hearing this interview! #duolingo #phyton #scala #computerengineer]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1600306359.6128919;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>Unproven Tech with Sean Allen</title>
		<link>https://corecursive.com/055-unproven-with-sean-allen/</link>
		<pubDate>Wed, 10 Jun 2020 10:00:31 +0000</pubDate>
		<dc:creator><![CDATA[webmaster@corecursive.com]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1566</guid>
		<description></description>
		<content:encoded><![CDATA[<h4><strong>Choosing The Right Tool For the Job</strong></h4>
<span style="font-weight: 400;">Choosing the right programming language or framework for a project can be key to the success of the project.</span>

<span style="font-weight: 400;">In today’s episode, Sean Allen shares a story of picking the right tool for a job. The tool he ends up picking will surprise you. </span>

<iframe style="border: none;" src="//html5-player.libsyn.com/embed/episode/id/14740817/height/90/theme/custom/thumbnail/yes/direction/backward/render-playlist/no/custom-color/87A93A/" width="100%" height="90" scrolling="no" allowfullscreen="allowfullscreen"></iframe>

<span style="font-weight: 400;">His problem: make a distributed stream processing framework, something that can take a fire hose of events and perform customer's specific calculations on them but the latency needs to be less than a millisecond and the calculations might be CPU intensive. Who would need something like this? The initial use case was risk systems for Wall Street banks. </span>

<span style="font-weight: 400;">“Basically programming languages are tools. It's not about ergonomics, it's not about developer experience, it's not about all the things that we normally talk about, it's about getting the job right. For whatever that means it's a means to an end.” - Sean Allen paraphrasing Sylvan Clebsch</span>
<h3><strong>Transcript</strong></h3>
<strong>This is a machine-translated transcript. Podcast page for <a href="https://corecursive.com/055-unproven-with-sean-allen-1" target="_blank" rel="noopener noreferrer">this episode is here</a></strong>
<h3>Introduction</h3>
<span style="font-weight: 400;"><strong>Adam:</strong> </span><span style="font-weight: 400;">Why don't you like to state your name and what you do.</span>

<b>Sean: </b><span style="font-weight: 400;">I'm Sean Allen, until a couple of months ago, I was the VP of engineering at Wallaroo Labs. There's a standing fan about seven feet away. I assume you're not hearing that?</span>

<b>Adam: </b><span style="font-weight: 400;">I don't hear a standing fan. It does sound echoey.</span>

<b>Sean: </b><span style="font-weight: 400;">I have no non-echoey rooms. It's basically a couple of large open spaces in Brooklyn required by the bridge. </span>

<b>Adam:</b><span style="font-weight: 400;"> Sean held his laptop up to the window and showed me what I assume is the Brooklyn bridge. Sean is also recovering from COVID. </span>

<b>Sean: </b><span style="font-weight: 400;">I had all of the symptoms except for the smell thing but it was relatively mild. The highest my temperature ever got was 99.9. I felt like I had a bad case of the flu for the most part now I feel like I have a mild case of bronchitis.</span>

<b>Adam: </b><span style="font-weight: 400;">Hello, and welcome to CoRecursive. I'm Adam Gordon Bell. Today, Sean shares a story of picking the right tool for a job. The tool he ends up picking will surprise you. </span>

<span style="font-weight: 400;">What happened is Sean wrote a book about real-time data processing. </span>

<span style="font-weight: 400;">The book is called Storm Applied, Strategies for Real-time Event Processing. The details of the storm don't really matter here, except to know it's an Apache big data project. It is written on closure and runs on the JVM. What happened is after he wrote the book, a company called Wallaroo labs hired him to build a system like a storm, but much faster. </span>

<b>Adam:</b><span style="font-weight: 400;"> You started Wallaroo Labs and then what happened next?</span>

<b>Sean: </b><span style="font-weight: 400;">We went through a couple of iterations of stuff with them and then decided that in order to meet the needs we were going to have to build something from scratch, and build a framework which was designed for these, low-latency type use cases whereas part of it as well, you want it to be as efficient as possible.</span>

<b>Adam:</b><span style="font-weight: 400;"> His problem: make a distributed stream processing framework, something that can take a fire hose of events and perform customer's specific calculations on them but the latency needs to be less than a millisecond and the calculations might be CPU intensive. Who would need something like this? The initial use case was risk systems for Wall Street banks. </span>
<h2><b>Building A Risk System</b></h2>
<b>Sean: </b><span style="font-weight: 400;">A risk system could be one which runs alongside automated systems and analyzes the trading output coming out of the automated system to make sure it looks within some realm of reasonable and could then shut down trading, for example, there's a whole bunch of different types of risks things, perhaps like the most famous, are if you ever heard the Knight Capital story.</span>

<b>Adam:</b><span style="font-weight: 400;"> No.</span>

<b>Sean:</b><span style="font-weight: 400;"> So Knight Capital went out of business because, an automated system, started doing trades, that it wasn't supposed to do due to a, a configuration pushed to production that went wrong,</span> <span style="font-weight: 400;">in the space of 45 minutes, and put them out of business.</span>

<b>Adam:</b><span style="font-weight: 400;"> This stream processor needs to answer queries in a millisecond, 99.99% of the time. Median response time in the microseconds and it needs to be able to receive hundreds 0f thousands of requests per second. It needs to be fast enough to pull the </span><span style="font-weight: 400;">plug on a high-frequency trading system that’s gone off the rails so what would you do? What language or framework would you think about using? Let’s play along and see if you end up where Sean and his team did.</span>

<b>Sean:</b><span style="font-weight: 400;"> We spent a good amount of time speaking out. This is what we think needs to be able to do. And looking at what is the language or libraries that we want to build this on top of I mean, the number one way to do low latency is to cut down on network hops that's like one of the first big things. So even though it's a distributed stream processor, we wanted to be able to do as much processing as possible on each machine and cut down on the number of network hops you'd have to have. </span>

<b>Adam:</b><span style="font-weight: 400;"> Never calls are just slow compared to direct memory access or interprocess communication. You can't scale out to speed up latency as you're just adding more network hops. The more you can do on one machine. The faster year distributed processing system is going to be. Maybe this is the reason that storm isn't a fit here.  </span>
<h2><b>Apache Storm</b></h2>
<b>Adam:</b><span style="font-weight: 400;"> How come Storm can't handle this?</span>

<b>Sean: </b><span style="font-weight: 400;">Storm wasn't designed for these systems which basically had to be very efficient. In very low latency Storm and a lot of the other Apache big data projects are designed but particularly storm more as a parallelization engine. Then a low latency like data processing system, if you look at the early things are storing me, be like, here I have some algo, some commutate transformation I need to do and I need to be able to run it on like 50 machines because it won't run fast enough on my machine and in some ways being a bit of a realtime replacement or something like Hadoop, right? Which again is the same type of thing which you build that very differently when you're most concerned about it. I just want to paralyze this so I can get it done as compared to I need to get this done within a couple of milliseconds, right? Like a lot of the things we do for things like bank points and we're looking at 99.99% of requests that have to be processed in one millisecond or less. I mean you're talking about systems like that and that's just not something that a storm was built to do. Storm was built to do stuff where you're talking about, probably depending on your thing, your median latencies are going to be in tens of milliseconds probably if it's a small thing, it might be single-digit milliseconds, but you're not really looking at, Hey, we want to have, you know, like 15 microseconds, be our median latency for a lot of the stuff that we're doing. So it just wasn't designed for that kind of thing. But you know what I mean? If you were designing it for that type of low latency, you wouldn't use closure for example. </span>

<span style="font-weight: 400;">Writing low latency stuff for the JVM, in general, is difficult, and if you write it like a normal Java program which is a lot of ways a Storm was written like a normal Java program. You're going to have a lot of object allocations. It's going to involve a lot of memory pressure.</span>

<span style="font-weight: 400;">You're going to involve a lot of garbage collection, closure for how it does stuff makes that worse and those are going to be problems for our ability. Something like what we built with Wallaroo and a variety of reasons. They didn't set out with the goal of building a system like that, so they made choices, which wouldn't result in a system like that.</span>
<h2><b>High-Performance JVM Applications</b></h2>
<b>Adam:</b><span style="font-weight: 400;"> Yes, I guess, I don't know this area, but like a lot of these projects that are on the JVM, like they all end up kind of manually managing memory with some sort of off heat tricks. I understand.</span>

<b>Sean: </b><span style="font-weight: 400;">If latency is a real concern, you're doing stuff like that. Yes. For a great project if people are interested in high-performance Java stuff and in a codebase, which is pretty easy to follow the era on the Aeron Project which is a message broker which does stuff over its own custom UDP that Martin Thompson is one of the big people behind.</span>

<span style="font-weight: 400;">That's, that's a great project to look at for doing that type of stuff on the JVM. But it's definitely not normal JVM programming at that point.  </span>

<b>Adam:</b><span style="font-weight: 400;"> Let me take the sample of like backend developers out there and I pull one out of the hat and I asked them to build this. I think, depending on the age probably a lot of people would go with C++ to build something like this? </span>

<b>Sean:</b><span style="font-weight: 400;"> We definitely consider it C++.  I've done a lot of C++ programming in my life. I don't think I'm good enough to do it with C++. So when I was really learning and doing a lot of high-performance C++ stuff in the ‘90s and high-performance C++  stuff that is entirely different from what we were doing for hybrid, that we needed high performance with C++. Then you could just write it in plain old Java fashion now and be completely fine. The definition of high performance has definitely changed over the course of time, but doing this stuff in C++ it was all multithreaded and in order to go fast, you need to not copy memory which is also where you get into trouble because you can have data races, et cetera, where you need to be careful about how you're sharing memory and to make sure that you don't corrupt the memory to make sure that thread one over here doesn't free memory that thread too is still using. It is a variety of ways you go about doing this, usually with locks, et cetera, these types of things and still even with doing those, an awful lot of people like the number one way that you see bugs of this usually come about is segmentation faults is what happens from program crashes, segmentation faults and so like a lot of people developed different rules for how you can share a memory or what you can't. I had this all set of rules that were in my head but in the end, you can use tools like disposers and everything to try and find where you violated those rules but in the end, it's on you to carefully follow those rules. And if you don't and you built an awful lot of code and you're not regularly testing it with stuff where it's going to find the one little mistake that you made at some point you know, the further in the past that mistake was, the harder and harder it's probably going to be defined.</span>

<span style="font-weight: 400;">We didn't think that we could hire enough good C++ people to be able to do that and so while we still kept C++ around as an option, we really wanted to have something that had more memory safety like baked into it, where the compiler itself would say, “Hey, that's problematic.” That's something that Rust is definitely in part one particular approach to trying to solve that.</span>
<h2><b>Considering Rust</b></h2>
<b>Adam:</b><span style="font-weight: 400;"> Yes, that's what I was going to say. I think when people start talking about data races, Rust, people talk about this all the time, right? This is a feature they bring to the table. </span>

<span style="font-weight: 400;">Did you consider Rust? </span>

<b>Sean:</b><span style="font-weight: 400;"> We did and Rust was a strong consideration. The issue there was that there was no high-performance runtime to do what we would, what we want to do, and we have to write that runtime, our estimate was, and this is an estimate where we spent probably a week to two weeks trying to spec out roughly in not even t-shirt size, bigger than t-shirt size, how long we thought it would take and we thought it would probably take anywhere from 12 to 18 months to have a really good, solid runtime. </span>

<b>Adam:</b><span style="font-weight: 400;"> What's a runtime? like a scheduler?</span>
<h2><b>What is Runtime?</b></h2>
<b>Sean:</b><span style="font-weight: 400;"> Every language has a runtime, they just don't necessarily know it, I mean, a runtime is a number of things: it's memory management, it's a scheduler. What your particular runtime provides might vary but yes, definitely scheduling and memory management are probably the two biggest ones.</span>

<span style="font-weight: 400;">If you're doing high-performance stuff, then you're probably going to be doing stuff asynchronously in some type of thing or some type of message passing type things so you can hand-off. Maybe you'll be using channels like Go does or something like that, but then, what's the communication mechanism between threads as well and having something for that.</span>

<b>Adam:</b><span style="font-weight: 400;"> Yes, because it seems like you need a runtime for handling concurrency. </span>

<b>Sean:</b><span style="font-weight: 400;"> The thing that people don't think about usually when they're first starting out, with stuff until they've worked in an ecosystem for a language that doesn't have a set concurrency model that comes with it, is what you end up having different communities that develop where they have a concurrency model and there were libraries that work with that concurrency model. So like Rust has </span><span style="font-weight: 400;">Tokyo </span><span style="font-weight: 400;">now, which is a specific concurrent, there's a kind of currency model that's built into that, and libraries that might be written to use an entirely different concurrency model are not going to work with </span><span style="font-weight: 400;">Tokyo </span><span style="font-weight: 400;">probably and vice versa. You see this within C++ where there's a whole bunch of differences, like concurrency libraries, and they just, they don't work well together and if they do, they usually step on each other and that becomes a problem for high performance.</span>

<b>Adam:</b><span style="font-weight: 400;"> Yes. Like I think of like I'm a Scala developer day-to-day, mainly, and there's like Akka people who do kind of actor stuff and then there are other people who do other stuff, and there's, there's a number of communities, I guess. </span>

<b>Sean: </b><span style="font-weight: 400;">So like the JVM is a runtime and it provides a memory model for how memory works and it provides a basic concurrency model, which is you build on top of threads and then you use locking primitives in order to do this and Akka wants to in the end have a different model that they want to build on top of that.</span>

<span style="font-weight: 400;">So one of the things that comes up a lot is aware of this when you're doing all this stuff is make sure that you don't inadvertently capture values or references to objects and send them from one actor and Akka to another because now you can have, two actors that are both able to modify the same data and you now can have data races, et cetera, and everything, which is a problem.</span>

<span style="font-weight: 400;">And there's not a lot that Akka can do about this because, in the end, that is this single global memory space is something which the JVM allows, right? And if you want and you would need a special Akka compiler in order to prevent programs that do that inadvertently from compiling, which if you're building a library, you don't really want to have “here's my compiler for it” and so this is a thing where they're trying to overlay a somewhat different idea of concurrency and a runtime idea on top of different run time and, and running into some issues there, </span>

<b>Adam:</b><span style="font-weight: 400;"> In other words, Akka runs on the JVM, which doesn't have first-class support for actors. You can make it work but the runtime is thread-based rather than actor-based. Rust on the other hand tries to have a very minimal runtime environment. But Sean feels that that means he needs to build these things himself, like a scheduler or error handling, or maybe even garbage collection. Which makes me want to ask about garbage collection itself.</span>
<h2><b>Trash Day</b></h2>
<b>Sean: </b><span style="font-weight: 400;">There's an awesome paper. I was thinking before this -- am I going to get through this without mentioning it? No, I can't get through anything that's on this topic without mentioning it. It's a paper, it's called Trash Day and I don't know if you're familiar with it, but folks who are listening might not be, which is really about how do you get the maximum performance out of a Hadoop cluster?</span>

<b>Adam:</b><span style="font-weight: 400;"> Why is it called Trash Day? </span>

<b>Sean:</b><span style="font-weight: 400;"> Well, because it's about handling garbage, right? When you put out your garbage, that's trash. You know, like when you live in the suburbs and there's like three days a week when you have to put the garbage out trash day, and then it gets taken away.</span>

<b>Adam: </b><span style="font-weight: 400;">In other words, in a distributed system on the JVM, a GC pause causes a slowdown, work piles up or work slows down. The paper makes the dupe faster by having everyone GC at the same time, that's your trash day so you get more throughput. </span>

<span style="font-weight: 400;">But you still have latency issues when that GC happens, the point for us is the JVM and its runtime won't work for this use case even with the performance actors system, like Akka. </span>

<span style="font-weight: 400;">All right so far we've crossed C++ off the list, Rust off the list and now it sounds like anything JVM off the list. Sean did bring us back though which gives me a clue about the direction he's thinking.</span>
<h2><b>Considering Erlang and Beam</b></h2>
<strong>Adam: <span style="font-weight: 400;">I assume your concurrency model is going to involve actors of some concurrency model. </span></strong>

<b>Sean</b><span style="font-weight: 400;">: What I really like is that you have something,  you start with how many CPUs? So you have and you have a single thread that does work per CPU you lock it to those </span><span style="font-weight: 400;">CPS </span><span style="font-weight: 400;">and you don't let anything else use the CPU. And if you want to go really fast you can use something like </span><span style="font-weight: 400;">CSET </span><span style="font-weight: 400;">to actually set those CPS apart so that Linux won't schedule anything on those at all.</span>

<span style="font-weight: 400;">They're purely for your program it can start up and it can have like 12 CPS that are all for itself, and you have one thread per CPU which will be responsible for running work, and you have something, and it could be actors, whatever your abstraction is over the top of it, but you give people some unit of parallelism of concurrency that they can program to and that's the model because I'm particularly interested in making things go fast but yes I happen to like actors. For me, it's a really good conceptual model, although I've seen lots of people definitely struggle with trying to figure out how to model things for actors, which in a lot of ways I think is because actors are really all about doing things asynchronously and the way most folks have been taught to do programming is in a very synchronous fashion and thinking about really thinking about concurrency, where things are happening asynchronously can be really difficult for a lot of folks.</span>

<b>Adam:</b><span style="font-weight: 400;"> All right that comment makes my mind go straight to this runtime that was built from the ground up to use actors for concurrency.  </span>

<span style="font-weight: 400;">I guess if you're going to embrace actors I mean it must've been a consideration?</span>

<b>Sean:</b><span style="font-weight: 400;"> Yes in his consideration, we didn't think that we could get the performance that we needed out of our mind early and was designed more for consistent latencies rather than consistently low latencies with lots of throughputs. Which is a slightly different one of the great things about Erlang is if you graph like what your latencies normally are they're just flat.</span>

<span style="font-weight: 400;">In a way that you don't get from like the JVM in general because of garbage collection strategies that are commonly used like the JVM. Whereas the garbage collection strategy on Erlang is very different, with the message passing and everything, it results in very consistent performance all the time.</span>

<span style="font-weight: 400;">It's just that, Erlang was not designed to be a high-performance language. The throughput isn't there but yes, Irvine was something that we definitely considered more than one person who was on the team had a prior in some cases, large amounts of Erlang experience </span>

<b>Adam:</b><span style="font-weight: 400;"> It just won't hit you like one millisecond?</span>

<b>Sean:</b><span style="font-weight: 400;"> You can but it might not hit your thing where like we were doing one millisecond at the 99.9 percentile while processing 3 million messages a second, in a virtualized environment in AWS. We probably wouldn't be doing that amount of throughput with that late like that was, that wasn't going to happen like the per core amount of computation that you could do with Erlang is, in general, going to be less. Then what you would do with C or C++ because again it had different goals when it was, when it was, when it was designed.</span>

<b>Adam:</b><span style="font-weight: 400;"> So it seems like Erlang might not be a fit, but there is this company called Basho that makes a really fast distributed database, all using Erlang. </span>

<b>Sean:</b><span style="font-weight: 400;"> For us when we were looking at doing stuff for a while, we really liked actors -- actors worked well for us for how we think about things and modeling them. And so Erlang was a natural, like a thing that we were interested in. So it was, let's go talk to the folks that we know in Basho, and go, “here's what we want to do.” Do you think that you think we'll be able to easily get early to do that?</span>

<span style="font-weight: 400;">And the answer that came back was, we love Erlang, but no, we don't think you're going to be able to make Erlang do that easily. </span>
<h2><b>Introduction to Pony</b></h2>
<b>Adam:</b><span style="font-weight: 400;"> So not C++, not Erlang, not Rust, not Java and Scala and the Akka. So I'm running out of guesses, let's just cut to the chase. </span>

<b>Sean:</b><span style="font-weight: 400;"> Very little of interest has ever happened to me on LinkedIn, but Sylvan I've known Sylvan since he was 16, and I was 17 when we met and but we hadn't talked for a number of years, because Sylvan is very bad at email. I sent him an email and he never replied. So I assumed I had done something to irritate him and I didn't hear from him until he sent me a LinkedIn message and said, ”Hey, look what I built.” </span>

<b>Adam:</b><span style="font-weight: 400;"> What have you built?” What Sylvan Clebsch had built was a Pony. The love child of Erlang and Rust, no data races, shared memory without copying and all based around first-class actors and something called reference capabilities. </span>

<span style="font-weight: 400;">The first thing I think of is I've never heard of this language Pony. It cannot be a legit choice to bet accompaniment on, but Sean sees it differently. </span>

<span style="font-weight: 400;">I'm imagining the story and I just imagine you're like, Erlang It's used in production, lots of people use it. The people who really know it say it doesn't fit, but you're like, actually, a guy I knew when I was 16, built something that I've never heard of. Let's use that.</span>

<b>Sean:</b><span style="font-weight: 400;"> If I hadn't known Sylvan right then, I wouldn't have heard of Pony and it wouldn't have been a consideration. But, I mean, like one of the other serious considerations was that we use C++ or we use Rust. And so in a lot of ways, I mean, we were very nervous about picking. We sort of dipped our toes but you know, it was that compared to Rust and writing our own one from scratch. And this is the big thing, the biggest consideration there. But Rust had a bigger community at the time, but Rust was still a very small community that’s really small.</span>

<span style="font-weight: 400;">It's picking up now but even though it's got a huge amount of mindshare on like, you know, things like hacker news or whatever, like the actual community itself is really small when you compare it to a lot of languages. I'm pretty sure that I know way more Scala programmers than I do hacker news programmers. I'm sorry, Rust program is at this point, </span>

<b>Adam:</b><span style="font-weight: 400;"> Hacker news programmer that is for sure a Freudian slip but anyways, Sean chose Pony - language was written by his high school friend. Some might say that is a huge risk, especially since the whole company was this product. I think we need to learn a little bit about Pony to understand this choice, and then we'll come back around to -- “Did this work out for Sean in Wallaroo Labs?”</span>

<span style="font-weight: 400;"><strong>Adam:</strong> So what did you get out of Pony?</span>

<b>Sean:</b><span style="font-weight: 400;"> So we got a compiler which won't let you create data races, will allow you to share a memory in a concurrent system in a way that's safe so that you don't have to do copies, to allow you to go faster and we got a runtime which met our general idea of how we would want to go about writing both the runtime in terms of scheduling and basics for memory allocation so that we didn't have to spend that 12 to 18 months writing our own.</span>
<h2><b>Embracing New Tech </b></h2>
<b>Adam:</b><span style="font-weight: 400;"> So you mentioned fixing compiler bugs. I mean that that would frighten me from wanting to take on a language, I guess.</span>

<b>Sean:</b><span style="font-weight: 400;"> I think that is a thing that should frighten you. You should go into that with eyes wide open. Right? And all of us who worked on Wallaroo in the early days have a bit of scar tissue where even though none of us had hit a compiler bug in forever, we were still like “is that a bug in my code or is that a bug in the compiler?”</span>

<span style="font-weight: 400;">That thought would cross your mind all the time because he'd gotten in there at least part of the way I look at it is yes, Pony was definitely unproven technology and for whatever your definition of unproven is an awful lot of things are still unproven that a lot of people are comfortable with now.</span>

<span style="font-weight: 400;">I think one of the things that people don't think about when deciding like, “Oh, I don't want to use that thing because it's unproven, is that if their alternative is to build it yourself. Right?” Your thing that you're building is also unproven. Right? And it becomes a matter of certainly building it yourself.</span>

<span style="font-weight: 400;">You're going to probably understand the thing much better if you build it yourself. This is why when we took on building Pony we considered that the language, the compiler in the runtime were part of our project. This was code that we were starting from and we were looking at it as, “is this like, Imagine that we're starting our thing right here. Are we comfortable with this being part of our codebase?” Right. And the fact that it was such a really nice, clean C code base for like the core implementation of stuff,  with something that we were, you know, that made us comfortable. There are an awful lot of things that I've worked on in the codebases I've, over the years where I would not be able to make that statement, you know, where it's just like a jumbled mess. And it would be a bad idea to take that thing on a core part of your thing. That's really kind of there, but it's like if part of the choices is we're going to do this in Pony and we're going to potentially have compiler bugs verses we're going to build an entirely new runtime in Rust.</span>

<span style="font-weight: 400;">And who knows how many bugs we're going to have in our runtime, like if the compiler, likelihood and compiler bugs, you know, no longer become as much of an issue when you look at it as a trade-off between those things. yes.</span>

<b>Adam:</b><span style="font-weight: 400;">  It's interesting that you successfully embraced pony because I have to assume that there's limited packaging support. </span>

<b>Sean:</b><span style="font-weight: 400;"> Yes. I mean, it's right there on the website, like “batteries not included.” You're writing almost everything, and if you're concerned with the performance, you're probably going to write almost everything 'anyway, and at least anything that's going to be on a hot path so that becomes much less of an issue but you know, if you just want to get your machine, if you just want your machine learning thing up and running, you know, it would be the wrong thing to use.</span>
<h2><b>Beautiful Code</b></h2>
<b>Adam:</b><span style="font-weight: 400;"> One of the things Pony is famous for is this quote from Sylvan Clebsch - Sean's LinkedIn buddy. Let's paraphrase it. </span>

<b>Sean:</b><span style="font-weight: 400;"> Basically programming languages are tools. It's not about ergonomics, it's not about developer experience, it's not about all the things that we normally talk about, it's about getting the job right. For whatever that means it's a means to an end.</span>

<b>Adam:</b><span style="font-weight: 400;"> Yes. It's an interesting perspective. Right? </span>

<b>Sean:</b><span style="font-weight: 400;"> When we're designing Pony or anything, it's like, Oh, let's make it ugly for whatever we think ugly might be, but whatever it is that gets, I almost made fun of the developer like experience UX people from them, which is bad.</span>

<span style="font-weight: 400;">I would have fallen into making fun of it cause I just don't understand it. There is something that happens for those people when they're using a language that they love in this type of way like Ruby that I just don't understand. In the same way that I have a friend who's really who, like Ruby drives him up the wall and he just can't stand it.</span>

<span style="font-weight: 400;">He finds it horrifying to work with for a reason I also don't understand. To me, it's just like, well, I wish it had more things to tell me upfront that I was making an error, but you know, Yes.   </span>

<b>Adam:</b><span style="font-weight: 400;"> I get it though, like I do get the beauty perspective, right? Like there's like the Haskell, like the definition of it's like quicksort and it's really small and it just looks like a speck. Then they're like, well, this actually doesn't work, at the performance level.</span>

<span style="font-weight: 400;">So then there's an optimized version where they have to like, you know, do a bunch of stuff, and then it becomes much less, perceived as a human, right. I suspect when people talk about beauty, they're talking about something that very concisely reflects what I would like the machine to do.</span>

<b>Sean:</b><span style="font-weight: 400;"> Perhaps, yes, but that's certainly in the eye of the beholder right. Because one person is just, I want it to sort of list the other person is, I want this to be sorted in, is an efficient means possible. Therefore I know I have a pretty good idea that doing it like this, this, and this, rather than letting a compiler decide will result in better stuff.</span>

<span style="font-weight: 400;">And so, I mean, at that point, that could be beauty, you know? I mean It's a matter of context and where you are on a ladder of abstraction or whatever it is, for what you're really interested in. </span>

<b>Adam:</b><span style="font-weight: 400;"> I think that there's even a bigger point of a wider than performance if you have a really hard problem, you have to optimize for solving that hard problem. Does that make any sense?</span>

<b>Sean:</b><span style="font-weight: 400;"> I believe I understand what you're saying. Yes, I mean, your hard problem is your primary thing. You want to solve the hard problem. Ergonomics is going to be somewhere down the line, right? Ergonomics is never the top thing for probably anyone there. There were other things that were first for me. Beautiful is I've written your work.</span>
<h2><b>Who Should Use Pony?</b></h2>
<b>Adam:</b><span style="font-weight: 400;"> Who should use Pony? Like, so you're behind Pony now I believe you are, are you like invested in the language? Who should use it?</span>

<b>Sean: </b><span style="font-weight: 400;">I mean, Pony particularly is good at doing things that are operating over TCP over a network. If you were in a bank and you needed to tap into anything, that card in order to like. Monitor stuff that's flowing by to make sure that there's not something unusual happening on your network. Pony is great for that if you're building like network servers that need to be high performance then Pony is excellent for that. </span>

<span style="font-weight: 400;">The concurrency model and the fact that once you get over the hump that a lot of people have of having to do everything asynchronously. The performance is usually much easier to get in Pony than an awful lot of other languages that I've ever worked with. </span>

<span style="font-weight: 400;">I do also think that from a not-trying-to-get-stuff-done-at-work standpoint, Pony is an excellent language for people who want to learn the language, runtime stuff, or just because. Anybody who comes into the Pony community right now and wants to contribute, we will happily accept them as long as they're not a prick.</span>

<span style="font-weight: 400;">We will help them and we will teach them and get them so that they're productive. I spend most of my time at this point not working on new features and stuff or everything but trying to figure out what I can do to make it easier for people to be able to contribute to politics. Like that's where I spend most of my Pony time these days, is what if I can eventually over the course of a year, make it so that five new people came in and they're contributing stuff eventually that's going to be better than my spending. All that time just being an individual contributor. </span>

<b>Adam:</b><span style="font-weight: 400;"> In other words, Pony is great. Literally, if you want Sean himself mentoring you, I jumped on the Pony chat. Sean is just there answering people's questions, helping them out, along with several others. That's the beauty of a small community. </span>

<span style="font-weight: 400;">It's also great if you want to work on a real, but understandable compiler or runtime. If you've built a toy language in the past, or played around with runtimes and are looking to continue that learning, it seems like honestly, a great fit. </span>

<b>Sean:</b><span style="font-weight: 400;"> It is a really clean code base for implementing compiler features for implementing runtime features. And we have an RFC system where people can like, bring up ideas for changes they would want, and have them discuss. I don't expect, you know, that a lot of people would sit down and be like, Pony is the perfect thing for what I need to do for my job.</span>

<span style="font-weight: 400;">Because it's designed to do things, which the vast majority of programmers are not getting paid to do. They're not getting paid to write reasonably low down on the stack type stuff that needs to be handling a lot of stuff concurrently and do it safely, easily and in an efficient fashion.</span>

<span style="font-weight: 400;">That's just not what most people would pay to do. Like even when people were writing back end system stuff, right? If that's what people were being paid to do, then rails wouldn't have taken off.</span>

<b>Adam:</b><span style="font-weight: 400;"> Yes. But there are some fun problems down there. Low in the stack, I guess.</span>

<b>Sean:</b><span style="font-weight: 400;"> There are a lot of people who really enjoy working on it, but in the end, it is compared to the broader like some of what everybody's doing, it is a niche problem. They will never ever be a Pony community, that's as big as JavaScript, it just won't happen. </span>

<b>Adam: </b><span style="font-weight: 400;">Yes. That makes sense. Like, how do I know if something that seems unproven is worth the risk? </span>
<h2><b>Taking the Risk With An Unproven Language</b></h2>
<b>Sean:</b><span style="font-weight: 400;"> A lot of engineers that I know. I don't think that they follow a very good approach when they're picking tools in general.  I don't think they really stop and think about what their goals are and what they really need in order to accomplish those goals, right? This isn't just in picking tools but it's like I have a feature to implement, right?</span>

<span style="font-weight: 400;">Most people usually don't think through what really are the goals of this feature?</span>

<span style="font-weight: 400;">What are we trying to accomplish? What are we willing to trade-off? What is important to this? </span>

<b>Adam:</b><span style="font-weight: 400;"> So we started with a problem of making something like an order of magnitude faster than the existing solution, then Apache storm. We chose our tech stack and it was built. There's one thing that we're missing to wrap up our case study. </span>

<span style="font-weight: 400;"><strong>Adam:</strong> All right, back to Pony. </span>

<b>Sean:</b><span style="font-weight: 400;"> Tangents, tangents, I like tangents.</span>

<b>Adam:</b><span style="font-weight: 400;"> So did it work? So you guys took Pony, you built, you were going to build a storm,  something better than Storm, right? Lower latencies. How did it go? </span>

<b>Sean:</b><span style="font-weight: 400;"> I don't like to use the word better because we had different goals. Right? For everything I've said earlier about languages, I didn't say, That's a bad language or anything. The goals were different. Right? but for what we were trying to accomplish, it was a much better tool for those types of scenarios that we built it for then, then storm.</span>

<span style="font-weight: 400;">Yes. Going back, to what I find beautiful, right? About a year ago when we were at Wallaroo Labs, we put a system into production for PubMatic. They're an ad tech company. It was the first system to go into production that was going to be taking a ton of data, as lots of data for the system we built.</span>

<span style="font-weight: 400;">And we're all like we are all worried about what's our on-call thing going to be for this, et cetera and everything. Right, it's almost a year later, not a single issue. </span>

<b>Adam:</b><span style="font-weight: 400;"> Oh wow.</span>

<b>Sean:</b><span style="font-weight: 400;"> There was one issue and that was when somebody went to upgrade something and didn't follow the upgrade instructions. But for the stuff that we built, that was processed at the peak, about 80 million calculations second handling hundreds of thousands of incoming requests a second with packed full of data, which would blow up into like 80 million calculations a second run in for a year. Not one teeny tiny little issue that to me that's beautiful. That's beauty to me. Right? </span>

<b>Adam:</b><span style="font-weight: 400;"> So Sean focused on the features of his hard problem that led to a seemingly crazy solution using Pony. But it actually made sense and it worked out. He had to minimize latency and maximize throughput so he needed something very performant. He needed to minimize network hops and copying, and he had to do everything async. </span>

<span style="font-weight: 400;">Maybe you have a use case for Pony?  Maybe not, but I bet you have to make technology decisions that are the right choice and could save or sink a project and that's what the story was all about choosing the right tool for the job. I hope you like this case study. If you have a case study about a project you worked on. Let me know adam@corecursive.com. </span>

<span style="font-weight: 400;">I think we need more of these case studies so that we can all learn from them. </span>

<span style="font-weight: 400;">Until next time. Thank you so much for listening.  </span>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1566</wp:post_id>
		<wp:post_date><![CDATA[2020-06-10 06:00:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-10 10:00:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[055-unproven-with-sean-allen]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="concurrency"><![CDATA[Concurrency]]></category>
		<category domain="post_tag" nicename="pony"><![CDATA[Pony]]></category>
		<category domain="post_tag" nicename="sean-t-allen"><![CDATA[Sean T Allen]]></category>
		<category domain="category" nicename="transcript"><![CDATA[Transcript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[157]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[990]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1570]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Unproven Tech with Sean T Allen</title>
		<link>https://corecursive.com/055-unproven-with-sean-allen-1/</link>
		<pubDate>Wed, 10 Jun 2020 10:00:26 +0000</pubDate>
		<dc:creator><![CDATA[webmaster@corecursive.com]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1571</guid>
		<description></description>
		<content:encoded><![CDATA[<h4><strong>Choosing The Right Tool For the Job</strong></h4>
<span style="font-weight: 400;">Choosing the programming language or framework for a project can be to the success of the project.</span>

<span style="font-weight: 400;">In today’s episode, Sean Allen shares a story of picking the right tool for a job. The tool he ends up picking will surprise you.</span>

<span style="font-weight: 400;">His problem: make a distributed stream processing framework, something that can take a fire hose of events and perform customer's specific calculations on them but the latency needs to be less than a millisecond and the calculations might be CPU intensive. Who would need something like this? The initial use case was risk systems for Wall Street banks. </span>

<a href="https://corecursive.com/055-unproven-with-sean-allen/" target="_blank" rel="noopener noreferrer">Podcast Transcript</a>

<span style="font-weight: 400;">“Basically programming languages are tools. It's not about ergonomics, it's not about developer experience, it's not about all the things that we normally talk about, it's about getting the job right. For whatever that means it's a means to an end.” - Sean Allen</span>

<strong>Links:</strong>

<a href="https://www.youtube.com/watch?v=tM4YskS94b0" target="_blank" rel="noopener noreferrer">Martin Thompson - Low Latency JVM</a>

<a href="https://github.com/basho/riak" target="_blank" rel="noopener noreferrer">Basho - Riak</a>

<a href="https://stackoverflow.com/questions/7717691/why-is-the-minimalist-example-haskell-quicksort-not-a-true-quicksort" target="_blank" rel="noopener noreferrer">Haskell Quicksort</a>

<a href="https://www.youtube.com/watch?v=GigBhej1gfI" target="_blank" rel="noopener noreferrer">Pony Talk</a>

<a href="https://www.ponylang.io/">Pony Lang</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1571</wp:post_id>
		<wp:post_date><![CDATA[2020-06-10 06:00:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-10 10:00:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[055-unproven-with-sean-allen-1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="concurrency"><![CDATA[Concurrency]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="pony"><![CDATA[Pony]]></category>
		<category domain="post_tag" nicename="sean-t-allen"><![CDATA[Sean T Allen]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1582]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:12:{i:0;s:31:"02:17 -- Building a Risk System";i:1;s:21:"04:23 -- Apache Storm";i:2;s:29:"07:09 -- High Performance JVM";i:3;s:25:"11:01 -- Considering Rust";i:4;s:27:"11:57 -- What is a Runtime?";i:5;s:18:"16:06 -- Trash Day";i:6;s:26:"19:15 -- Erlang Considered";i:7;s:25:"21:06 -- Introducing Pony";i:8;s:28:"25:14 -- Embracing New Tech ";i:9;s:23:"28:42 -- Beautiful Code";i:10;s:29:"31:44 -- Who Should Use Pony?";i:11;s:50:"35:24 -- Taking the Risk With An Unproven Language";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1475]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/053-Unproven.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[39:03]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[37.09 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Sean T Allen]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/SeanTAllen">@SeanTAllen</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[1575]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>2079</wp:comment_id>
			<wp:comment_author><![CDATA[George Lippert]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[george@lippertemail.net]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[2605:e000:1c0c:c959:c5be:3c2e:3702:c72b]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-07-04 16:04:07]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-07-04 20:04:07]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Just listened to my first Corecursive, the interview with Sean Allen. Very nicely done. I learned a lot. Your practice of injecting sidebar comments in post to summarize where the conversation is at that point and where it is going next is very effective and well worth it.

I wish you would have asked when Pony 1.0 might be released but otherwise you covered everything I was hoping to hear about.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1593893047.150198;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>Building Subversion</title>
		<link>https://corecursive.com/054-software-that-doesnt-suck/</link>
		<pubDate>Wed, 01 Jul 2020 10:00:15 +0000</pubDate>
		<dc:creator><![CDATA[webmaster@corecursive.com]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1594</guid>
		<description></description>
		<content:encoded><![CDATA[<span style="font-weight: 400;">Software is just the tool and it should get out of your way. In this episode, Jim discusses how to build a great developer tool.  It all started with: “What's the worst software that you use every day?” </span>

<iframe style="border: none;" src="//html5-player.libsyn.com/embed/episode/id/15020282/height/90/theme/custom/thumbnail/yes/direction/backward/render-playlist/no/custom-color/87A93A/" width="100%" height="90" scrolling="no" allowfullscreen="allowfullscreen"></iframe>
<h3><b>Transcript</b></h3>
<em>This is a machine-translated transcript. Podcast page for<a href="https://corecursive.com/software-that-doesnt-suck-with-jim-blandy/" target="_blank" rel="noopener noreferrer"> this episode is here</a></em>
<h3><b>Introduction</b></h3>
<b>Jim:</b><span style="font-weight: 400;"> Basically, there was a coworker of mine who said, CVS’s repositories indexed backward. <strong>CVS is the software equivalent of a telephone book sorted by telephone number.</strong> And that's a funny lunch comment, right? And basically I was just thinking about it myself, you know, doing the dishes every night but the thing is you can't just accept something like that. You have to say, well, wait a second. <strong>If CVS is backward, what would it look like if it were right? </strong></span>

<b>Adam:</b><span style="font-weight: 400;"> Welcome to the CoRecursive, I'm Adam Gordon Bell. Today, our topic is what would it look like if CVS was not backward? CVS is a source control management tool. Think of the early 90’s - Git.</span>

<span style="font-weight: 400;">Jim Blandy is my guest and he brings us the story of making CVS better. </span>

<span style="font-weight: 400;">I would guess that a number of features of your current source control tools that you probably use every day we're influenced by Jim's work. I also think he has some interesting insights on how you build great developer tools and also how to recognize when some improvements to the existing tools will topple the current market leader are something that he's done twice.</span>

<span style="font-weight: 400;">We started the story of the year in 1993. It's the year the Mosaic web browser came out. You know, email has been around for some time, but the web was fairly young and CVS was the most popular open-source source control system. </span>
<h2><b>Network Transparent CVS &amp; The Commune</b></h2>
<b>Jim:</b><span style="font-weight: 400;"> So I went on this trip that I was going to go on in Europe and Japan, and I came back to the US and I had no job. And no apartment. And my friend had gotten a job. My friend Carl Fogel had gotten a job working at the University of Illinois, Urbana Champaign on a gene-editing mode for Emacs. And this is an Emacs, you visit a file that's full of genetic data and Emacs will bring it up and it'll apply colors to it, and you can like select, you know, rectangles and stuff like that.</span>

<span style="font-weight: 400;">But he was living in Illinois at this lab at UIUC, and I was living in Indiana and so we were collaborating across the net and this was 1993. And so the way you collaborated across the net was you shipped people patches, you emailed people patches, you FTP, do your sources,  network, transparent version control was not a thing. But, I had an old friend from college who had gone to work for a Silicon Valley startup, except he didn't want to live in Silicon Valley. He wants to live on a commune in the Hills of Virginia. And so they ran a frame relay line, out to the commune because, you know rural telephone access, right? And there he was on this commune, you and everybody else was making hammocks and nut butter, and he was hacking on code for Silicon Valley and so his income was probably a significant portion of the whole communes income, but, there he was, and he realized that it was kind of lousy doing this collaboration at a distance, his name is Jim Kingdon and he was just an amazing hacker and he sort of disappeared from the world after this and I don't know why, because he is amazingly talented. What he did is he took the CVS version control system, this was like I said, this is ‘90, ‘93.</span>

<span style="font-weight: 400;">It was designed for a situation where you have lots of people using the same computer, right? And so you have your CVS repository in one part of the file system that's shared by all the users. And then people are checking out copies of the tree into their own home directories, making local changes, doing updates, doing commits, right?</span>

<span style="font-weight: 400;">And so they're doing all of this activity but it's all on one machine. It's all one local file system because people would share their computers back then because that was what you have to do.  So what Jim Kingdon did is he took this CVS version control system that was designed to work locally only and basically, by I sheer force of intellectual will, he ripped it apart into a client and server and he invented a protocol to go with it that like and the protocol even like, you know, minimize round trip times to keep latency down and all this just amazing stuff, right? It's a program that wasn't designed to be a network program at all, and he turned it into a network program and then he used Kerberos for authentication and it was real network security back in 1993. He used it for collaboration with his startup that he was working for, which was, Signus Solutions in Silicon Valley. And so, you know, it was this amazing thing but he didn't publish it, he just used it.</span>

<span style="font-weight: 400;">He wrote it for himself and for maybe other people in his company. And then he just used it and so I had heard that he had done this and here I am trying to collaborate with my friend Carl in Illinois and so I wrote him and I said, Hey, you know, do you think I could get a copy of this code?</span>

<span style="font-weight: 400;">And he says, “Oh yeah, sure. But on one condition, you can't ask me any questions.” because basically he doesn't want to get into the support thing. I think this is probably why he didn't publish it in the first place.</span>

<b>Adam:</b><span style="font-weight: 400;"> That makes sense. Yeah.</span>

<b>Jim:</b><span style="font-weight: 400;">  So I said, “Oh yeah, sure, fine.” You know, give me a copy. And so he sends me a tarball of it and other sources and so immediately I asked him a question and he's like, I told you not to ask me any questions.</span>

<span style="font-weight: 400;">Carl and I started using it like, this is amazing! Right? Because you set up a server on some machine somewhere and you do a checkout and you get the sources and then you work locally and nobody gets in your way, and then you just commit and poof! it's there for everybody else to see.</span>

<span style="font-weight: 400;">Right? It's just a whole new world. And so, you know, we were just blown away,  at how much better it was to collaborate. Over the net using the network transparent CVS. </span>

<b>Adam: </b><span style="font-weight: 400;">So since CVS is GPL, Jim takes these improvements and he releases them to the world like a fork.</span>
<h2><b>Waiting Tables &amp; Drug testing</b></h2>
<b>Jim:</b><span style="font-weight: 400;"> At first, the official CVS, the mainstream CVS distribution was like, Oh yeah, interesting work. But you know, we have our own ideas about how we're going to do things because everybody -- nobody likes existing code. Everybody likes imaginary code because imaginary code is always perfect. </span>

<b>Adam:</b><span style="font-weight: 400;"> Yeah. And you're like, we already have this. It's done, you can use it.</span>

<b>Jim:</b><span style="font-weight: 400;"> Yeah, you could use it and then but they didn't want it because they wanted to do their own thing. But you know, after a few months it becomes clear that they don't have network transparency and we do have network transparency and basically everybody is switching over to cyclic CVS, which is what we called it and they capitulate and say, “okay, I guess we'll merge your changes”. And that is how network transparent CVS came to be. And, you know, within a year, all of the open-source worlds were using this. Because when you think about the kind of collaboration that has to happen with open source, you know, it's all distributed teams.</span>

<span style="font-weight: 400;">It's people from everywhere you get volunteers, you have no idea where they're coming from. There's no physical locality to it at all and it took over the open-source world by storm and within a few years, pretty much CVS was the standard.</span>

<b>Adam:</b><span style="font-weight: 400;"> This network transparent CVS became such the standard both in open source and in the corporate world. Jim got some interest in contracting work, just helping people understand how to use it.  </span>

<b>Jim:</b><span style="font-weight: 400;"> One of the biggest thrills I ever got was when I was just going around to different companies and government groups and teaching them how to use CVS.</span>

<span style="font-weight: 400;">And I got an invitation to teach for a few days. I think it was a three-day course at the Goddard space flight center, out on the East coast and so here I was teaching these folks who were doing satellite development and doing weather analysis. And I remember one day over lunch,</span>

<span style="font-weight: 400;">one of them said, you know, we've been having this bug with CVS I wonder if you could help us out with it and so I said, sure. And so we walked down to his cubicle and AEs says, well, okay, here, let's, let's, and so we just check something out. It just checks out a tree with CVS. And I say, well, what is it?</span>

<span style="font-weight: 400;">And he says, Oh, this is the stuff that analyzes satellite data, satellite images,  to analyze,  hurricanes and predict where they're going to go. And there was just something like just seeing that checkout, right? CVS lists each file as it downloads it from the server and checks it out. It's like, Whoa! I'm actually helping people do stuff, you know? Right. Here's this person who is just trying to, you know, track hurricanes. And because we made this thing, they were able to do that  is a really exciting feeling. That they're not really interested in your software they’re just using it to get something done and that because you were there, they were able to do it.</span>
<h2><b>Cyclic Software</b></h2>
<b>Adam:</b><span style="font-weight: 400;"> Jim and his buddy Carl didn't let this good opportunity go to waste. So they start a business cyclic software that offers support for cyclic CVS for network-transparent source control. </span>

<b>Jim:</b><span style="font-weight: 400;"> Our little business failed to die in the first four horrible ways that businesses always die.  We've paid ourselves a salary, we earned back our initial investment and actually made a little bit of money beyond that and we had customers. One of our clients was Goldman Sachs. It turned out the Goldman Sachs was using CVS internally and they really liked network transparent CVS. And so Goldman Sachs wanted us to port it. I think they wanted reserved checkouts or something like that.</span>

<span style="font-weight: 400;">And so here we are, two guys basically we're grad student age and we're like, okay, we're going to write a contract with Goldman Sachs and so we'd go consult a lawyer and stuff like that and we send Goldman Sachs our little contract. You know their full legal department comes to bear on this thing and everything that we wrote them becomes exhibit A and then they have this big, whatever is 15 pages of boilerplate that we have to  </span>

<b>Adam:</b><span style="font-weight: 400;"> They faxed it to your lawyer?</span>

<b>Jim: </b><span style="font-weight: 400;">Well they faxed, I think they emailed it to us, or maybe they, snail-mailed it. They snail-mailed it to us. I think those are the days. But the fax would be reasonable, we might've had a fax machine.</span>

<span style="font-weight: 400;">So I'm reading through this contract and then I get to paragraph 15. And it says “contractors agreed to submit at Goldman Sachs, his request to drug testing.” I don't know where this comes from. So Carl and I are about as square as you could possibly get.</span>

<span style="font-weight: 400;">I mean, we don't, we don't even drink, right? Not because of any moral issue, we just don't. That's just not our style and so we would have completely passed any tests that they'd ever, they could ever get us to take,  but also that's just obnoxious, right?</span>

<span style="font-weight: 400;">What do they care? I go back to Carl, like back into the other room carrying the contract and say, Carl, they want us to take drug tests and Carl says, “Oh, we won't sign that; we can wait for tables” I'm like, “you're the best” and so we write Goldman Sachs and email back and say, this looks great. We're ready to sign it. However, paragraph 15 has got to go. So without any comments at all, we just get back another copy of the contract from Goldman Sachs with that paragraph gone and we sign it and we do the work. And that was that. But we did hear from the hackers at Goldman Sachs later, the people that we ended up doing the work with they said, told us later, it's like, nobody's ever done that before. Nobody ever complained about that. That was cool. So, yeah, that was kinda nice. And that's the kind of thing that you can do when it's just the two of you, right? I mean, if I had had a family at that time or if we'd had employees, then you start to have to worry about other people.</span>

<span style="font-weight: 400;">And it's like, it's not just your choice to do something or walk away, but when it's just the two of you, it's really nice. You can really just do whatever you please and don't have to do anything you don't want. </span>

<b>Adam:</b><span style="font-weight: 400;">  So let's fast forward. The company was a success, but eventually, they move on to other things. And Jim joined Sigma Solutions where he was using CVS every day and he starts to notice certain things about the tool that he does not like.  </span>

<b>Jim:</b><span style="font-weight: 400;"> So this is actually interesting. When you think about it, a repository, like a get repository or something like that, you think about it as a database, right? It's a database where you put in,  you know, commits, right? And you check out trees, right?</span>

<span style="font-weight: 400;">And one of the most common things you're going to want to do in the version control system is you're gonna say, Hey, I have this version of the code and I want to pull all the changes that have happened since then. So please send me the diffs between this prior date and this current date.</span>

<span style="font-weight: 400;">Ideally, if only three files have been touched between this old date and the new date, you should only get data about those three files. And the backing database should be organized in a way,  that makes that efficient because these are very common things. This is a diff query, a diff between two revisions.</span>

<span style="font-weight: 400;">This is a checkout, this is a merge, right? This is a common operation, the way CVS stored its data was as a gigantic directory tree shaped the same way as the sources that you are managing except fit each individual file was an RCS file that held all the different revisions in it, and there was no connection between. The set of revisions stored in one file and the set of revisions stored in another file. If you did a commit that touched two files, there was no indication anywhere in that data that those two files that those two commits had anything to do with it might have the same log message and the dates on them would be about the same.</span>

<span style="font-weight: 400;">But there was no indication that that was a single atomic commit. </span>

<b>Adam:</b><span style="font-weight: 400;"> That is something that we take for granted right now. Atomic commits without atomic commits, you can introduce inconsistency issues. Especially if somebody is doing a slow operation, like creating a branch, which is going file by file and somebody else is pushing changes at the same time. You're not guaranteed that the branch will get all the files from the commit since they're happening in parallel interleaved. Also, in this case, the lack of being structured as an atomic commit actually made the implementation slower.  </span>

<b>Jim:</b><span style="font-weight: 400;"> And so when you did a CVS update, the way CVS decided which changes to shipping to you was it would scan the entire directory tree. It would open up every single file in the directory tree to see whether this might have been changed since the date that you asked.</span>

<span style="font-weight: 400;">And actually, what you had to do when you did an update, you had to ship to the server, the current versions of all of your files. And then it would actually check to see whether any of those files that do versions and then it would ship you the diffs back. </span>

<span style="font-weight: 400;">So that's terrible, right? It supposes you've got 10,000 files, but only three of them have changed.</span>

<span style="font-weight: 400;">Do you have to check every one of those 10,000 file when somebody does a poll because the data is organized in a way that doesn't give you any sort of centralized indication of like, you know, what changed. The performance was so bad that when Sigma solutions when they want to cut a branch, they would announce it ahead of time. They would schedule the branching. Because you didn't want anybody else committing while you were branching, because that would totally screw things up, right? And it was okay, Friday at 2:00 PM, we're going to cut the branch and then all activity would stop, access to the server would be cut off.</span>

<span style="font-weight: 400;">They would start the branch. Now, remember, this branch requires walking through, however, you know, a hundred thousand files. You've got, you know, this, we sickness did GCC, GDB,  canoe assembler, canoe linker, basically the entire new toolchain work and so they had you know, hundreds, thousands of files.</span>

<span style="font-weight: 400;">And so they would walk across these hundreds of thousand files and make a branch and every single one of them, and it would take like, you know, 45 minutes to cut this branch and then you'd say, okay, we've opened up the branch. Everybody can start working again. That's crazy.  </span>

<b>Adam:</b><span style="font-weight: 400;"> That does seem a bit crazy, right? Jim is talking about how in CVS, the performance degraded based on the size of the repository, not based on the size of the changeset. </span>

<span style="font-weight: 400;">This is something we kind of take for granted today but now source control. The performance is related to the size of the changeset. Change one file, that should be cheap, change all of the files that should be expensive and branches you're changing no files. That should be free.  </span>
<h2><b>Enter The Rewrite</b></h2>
<b>Adam:</b><span style="font-weight: 400;"> Jim had been thinking about this design for a better system and his buddy Carl, he got approached by a company looking to shake up corporate development by introducing ideas from open source software development.  </span>

<b>Jim:</b><span style="font-weight: 400;"> This was around the time that the cathedral and the bizarre essay was being written there were a lot of companies that were saying, “Wait for a second, why isn't our internal software development as dynamic as what we see going on there? What is it about that dynamic that makes it work so well out there? And how can we bring that into our own in house development?”</span>

<b>Jim: </b><span style="font-weight: 400;">But CollabNet was interested in doing, they saw CVS and they knew that it sucked and they were willing to fund writing a replacement for it.</span>

<span style="font-weight: 400;">And so they approached Carl or Carl approached them - I don't know exactly how that happened, but anyway, they ended up working with Carl and we started. Carl and I had already started drafting ideas for a replacement for CVS because, there's something that a friend of mine said to me once, “CVS is the worst piece of software I use every day.” That's a very interesting sentence because it's got the word worst in it, right? This is the “worst” piece of software and it's got the word every day in it,  right? It's like if it's so bad, why are you using it every day? The answer is, I need this so badly that I'm willing to put up with the crap when somebody says that about a piece of software that's a good target for a rewrite.</span>

<b>Adam:</b><span style="font-weight: 400;"> This mythical rewrite that Jim started planning. He called it subversion and he started talking about it with everyone. This whole thing predates Git and Mercurial by five or six years, by the way.</span>

<b>Jim:</b><span style="font-weight: 400;"> So when I told the sickness people, Oh yeah, I think the person's going to be able to cut branches pretty much instantaneously and constant time. They didn't believe me.</span>

<span style="font-weight: 400;">They said, “we’ll believe that when we see it.” Cutting a branch is nothing. It's just creating a name for a particular revision, it's a free operation and so that was big, it was a big deal. </span>

<span style="font-weight: 400;">So, yeah, so we, we had already started working on this new design for subversion, and then CollabNet said, “this is great, we'll fund you and we'll get other people to do the network stuff for you.”</span>

<b>Adam:</b><span style="font-weight: 400;"> There's a step missing or something like when did you have come up with this design and did you like what email Carl and say, I have this idea..</span>

<b>Jim:</b><span style="font-weight: 400;"> Yeah, it was the design for the repository. Basically, there was a coworker of mine who said, yeah, CVS has repositories indexed backward. It's the CVS that has a repository. Is the software equivalent of a telephone book sorted by telephone number? It's just exactly the wrong thing. and so that's funny, that's a funny lunch comment, right?</span>

<span style="font-weight: 400;">It was, somebody says it and you're like, Oh, that's funny. That's really true and then, but the thing is you can't just accept something like that. You have to say, well, wait a second, if CVS is backward, what would it look like if it were right? What's the proper organization for a version control repository and basically I was just thinking about it myself, you know, doing the dishes every night and I ended up coming up with a design that's actually other people have come up with. It's not original to me. I hadn't read about the other things but it turns out that, I think Perforce actually has a very similar, repository structure to subversion but basically the idea is that you want to share, whenever you have a commit, right? And the commit changes, say one or two files. You want to recognize that the directory tree before the commit and the directory tree after the commit are almost identical. The only difference between them is that there are these two files that have changed, and so what you actually want to do is you want to share as much of the structure between those two trees as possible. Go ahead and represent both trees, but have them share as much structure as possible. </span>

<b>Adam:</b><span style="font-weight: 400;"> It sounds the same as like a persistent data structure?</span>

<b>Jim:</b><span style="font-weight: 400;"> Yeah. You mean persistence in like the way functional people use that word? This is a persistent, persistent data structure, right. Because </span>

<b>Adam:</b><span style="font-weight: 400;"> The terminology is very confusing, I think.</span>

<b>Jim:</b><span style="font-weight: 400;"> It's persistent in the sense that it's saved to disk. And it's not going to go away when you exit the program, but it's also persistent in the functional programming sense. </span>

<b>Adam: </b><span style="font-weight: 400;">Yeah. If you have like an immutable tree in your, whatever programming language of choice. When you make changes to it cause it's immutable, it will just like, it will make a copy, but only of the elements that you need to change and kind of update the pointers.</span>

<b>Jim:</b><span style="font-weight: 400;"> Exactly. Have you ever heard of Chris's book, Functional Data Structures?</span>

<b>Adam:</b><span style="font-weight: 400;"> I've seen the picture of it and one of my friends bought it and said he couldn't understand it.</span>

<b>Jim:</b><span style="font-weight: 400;"> That's too bad. Because Chris goes into all this stuff and it is hard to understand. But, once you get it, it's, it’s kinda minded blowing., I think it's a good, worthwhile investment because a lot of those algorithms play well with incremental contexts, right? That is, if you're making a series of small incremental changes to a large data structure, then the way that the persistent data structures are trying really hard to share as much data as possible really works in your favor. </span>
<h2><b>Building Subversion</b></h2>
<b>Adam: </b><span style="font-weight: 400;">So, you have this idea, and what happens next?</span>

<b>Jim:</b><span style="font-weight: 400;"> Well, so I had this idea, and Carl and I had started working on it, and then Carl gets this funding from CollabNet. And that's fantastic, suddenly we have a guy who's a web dev expert to do the protocol for us. We ended up getting an office in Chicago, so I'm traveling up from Indiana up to Chicago to meet with Brian Fitzpatrick and Ben Collin Sussman.</span>

<span style="font-weight: 400;">And we agreed early on that we wanted to break it up into a nice reusable set of libraries, right? So there's going to be, if you want to work with subversion working directories, here is the working directory.</span>

<span style="font-weight: 400;">Library that accesses all of our metadata. If you want to speak the protocol, here's a library that does the protocol. If you want to, you know, have different backends for storage --here's the interface to the back ends. </span>

<b>Adam:</b><span style="font-weight: 400;"> So you had your design and then what, there were a couple of you working on it and..</span>

<b>Jim:</b><span style="font-weight: 400;"> Yeah. There were about five of us, I think.</span>

<b>Adam:</b><span style="font-weight: 400;"> Did you split it up into modules and you're like, “I'll work on the working directory part and..”?</span>

<b>Jim:</b><span style="font-weight: 400;"> Yeah. I was working on the server part so other people took sort of the command line part.  There's somebody who took the working directory library and things like that and so I think, I think that you know, for another kind of project, you have to be much more careful because there's drift between one person's understanding of the design and another person's understanding of the design. Because the thing that you're building doesn't exist yet. But in the case of subversion, we had this very clear goal, which was to become a properly designed, modern CVS. </span>

<span style="font-weight: 400;">Net transparent CVS and that the fact that we were imitating or replacing something that already existed, I think created a lot of clarity in people's minds and so I think it actually was a project that could be undertaken with a lot less coordination than you would normally need for something that size</span>

<b>Adam:</b><span style="font-weight: 400;"> Yeah. That makes sense. So you like not only did you have an existence proof of something like this existing as you knew it well, you were using it I assume you were using it for subversion</span>

<b>Jim:</b><span style="font-weight: 400;"> Yeah we had to use CVS at first but then there was the day when, when we started being able to dog food, and that was a really great day. Right?</span>
<h2><b>Celebrating Success</b></h2>
<b>Adam:</b><span style="font-weight: 400;"> How did, how did you guys like to celebrate? Like if you were all distributed?</span>

<b>Jim:</b><span style="font-weight: 400;"> Oh, we would go up to Chicago. We had this great office in, I think it was called printers row in Chicago. It's a whole bunch of old buildings that all used to be full of printing presses for newspapers and stuff and they had this cage elevator, whether you could see the elevator shaft through the iron bars of the cage and if you looked down, you could see these gigantic relays that controlled the elevator. And it was a relay driven elevator and yeah, oh, we partied, I would drive up to, I would drive up to Chicago quite frequently and,  we had a bet that whoever wrote the first security hole had to buy everybody else dinner. And so that was, I don't know whether you want to call that a celebration or you know, losing a bet or something like that. </span>

<span style="font-weight: 400;">So I worked on it for a year but then I actually found it kind of exhausting and so after a year I really wanted to go back to working on GDB I think the subversion started self-hosting within the next year after that.</span>

<b>Adam:</b><span style="font-weight: 400;"> So Jim's designed for a new version control system succeeds. It takes over the world Subversion, atomic commits, free branching, performance proportional to change size. These were all great changes. It quickly replaces CVS. </span>
<h2><b>Becoming the leader</b></h2>
<b>Jim:</b><span style="font-weight: 400;"> And then it rose to its heights over the next, like within three or four years, I think. But it was really nice. We got a recommendation by these consulting newsletters, like the gardener group, gave us,  you know, listed us as an essential tool or the best of the breed or something like that, which was really funny because it's like, you know, we didn't do.</span>

<span style="font-weight: 400;">Marketing research, we don't have any idea. We just know what we want as hackers. And then you have these, you know, very serious businessy industry,  newsletters recommending you, and it's kind of ridiculous.</span>

<b>Adam:</b><span style="font-weight: 400;"> the Gardner quadrant or something? They probably had a graphic that showed..</span>

<b>Jim:</b><span style="font-weight: 400;"> Yeah. It was exactly that, we were in the good quadrant, it was crazy. </span>

<b>Adam</b><span style="font-weight: 400;">: There was probably somewhere there was a meeting of people in suits, figuring out like how far to the left you should be and how far to the right. </span>

<b>Jim:</b><span style="font-weight: 400;"> Yeah. And it's very silly to have those people's attention, you know? but that's the way it works. </span>

<b>Adam:</b><span style="font-weight: 400;"> But within five or so years, it started being replaced by other version control systems by Git by the Mercurial. And although probably some people are still using subversion right now, Jim really doesn't think they should.</span>

<b>Jim:</b><span style="font-weight: 400;"> Yeah. They shouldn't be. I actually had somebody come and try to talk me into consulting about subversion for him because he had this great idea about how, but in the end, I tried to really talk about it that I said, it's not, people aren't developing it anymore. It's not actively supported. When you bring in developers, when you want to hire developers to work on your project, they're not gonna know it, but everybody will know Git.  I was in a funny position of trying to talk somebody out of using something that I was one of the original designers of, but yeah. I don't think anybody should be using it anymore.</span>

<b>Adam:</b><span style="font-weight: 400;"> I mean, are you sad?</span>

<b>Jim:</b><span style="font-weight: 400;"> I have Git, I have mercurial. How can I be sad? I don't know. Yeah. I mean, the nice thing was that it set a standard of usability.</span>

<span style="font-weight: 400;">I think subversion at the time that it became popular, it set a standard of usability below which people just weren't willing to put up with, got started out with a terrible CLI, and now it's only a mildly horrible CLI, right? That the options are the only sort of ferociously confusing and not overwhelmingly confusing. You know, and I think that's our response to pressure from well-designed interfaces, like a mercurial, which has a beautiful CLI and, and subversion, which has a very fine CLI.</span>

<span style="font-weight: 400;">So I think that you know, you, you could have your influence in a lot of different ways, and that influence outlasts the use of the actual code. </span>

<b>Adam:</b><span style="font-weight: 400;">  So subversion is 20 years old this year. And Jim, he doesn't want us to use it, but its influence is still out there. A question I wanted to ask Jim was if subversion was addressing shortcomings in CVS, what were the shortcomings in subversion that Git helped address?  </span>
<h2><b>Subversion Problems</b></h2>
<b>Jim:</b><span style="font-weight: 400;"> You know, how to Git uses, content hashes to identify file contents, and to identify directory contents.</span>

<span style="font-weight: 400;">And it's a very beautiful model and those hashes are really essential to the distributed nature of Git because it means that basically if you've got data, it doesn't matter how you got that data, everybody can tell that you've got this branch and you don't need to be sent that data anymore. Somebody suggested that subversion does this. What we were actually doing is we were just assigning fresh numbers to the nodes as we created them and so somebody basically said, well, you know, we should be using content hashes. And this is the worst decision I've ever made. I think in terms of impact. I said, no, we shouldn't do that because if you do a rename if you modify a file and do a rename, there's no way to tell that the old version of the file and the new version of the file are related at all. The only kind of vindication that I can cite for this is that even now Git doesn't really know about it. It just sorts of looks at the file and says, yeah, they're, they look close. It seems to be right. And it basically, you give it some cheesy parameter that says how hard it will try to look for them.</span>

<span style="font-weight: 400;">And it's such a kluge and it just reconstructs them post facto. So like, you know, it doesn't, it doesn't even know anything about what happened. It just sorts of guesses that this must be a rename of that, even if it's not. It's a total kluge. </span>
<h2><b>The Merge</b></h2>
<b>Adam: </b><span style="font-weight: 400;">You know, when I started using Git, people were talking about this distributed case and I guess it does happen but the big thing that seemed different to me was just like merging was like free all of a sudden like merging and branching and like. So you're the guy to answer this, I think like, like why is that right?</span>

<span style="font-weight: 400;">It doesn't seem like there's some reason that distributed mixed merging better, except you have to do</span>

<b>Jim:</b><span style="font-weight: 400;"> No this is kind of a sad story, the great thing about merging in Git, and I'll just pick that as an example, Mercurial is the same. The great thing about merging and Git is that it's just like what does it merge? Merge is what I say it is, right? I say, I have this parent and I have that parent, and now here's a new chainset that's got both of them as its parents, right?</span>

<span style="font-weight: 400;">There's no restriction on what a merge means. The mistake that we made in subversion, is that we thought merges should actually mean something textually, right? That actually there should be a way to say, here is the reconciliation of these changes with that change,  and I think we really just over-thought it a lot. </span>

<span style="font-weight: 400;">All you need to do is have some good textual merge tools that use whatever heuristics they want, whatever heuristics work well for your project. We'll have some off the shelf mergers that do a great job in most cases. But if you want to have a specialized tool, you just drop yours in and you can do whatever you want and then what you say, it's okay. That's the end of the story. </span>

<b>Adam:</b><span style="font-weight: 400;"> It's interesting, like almost what problems you decide not to take on, can kind of define things where he just gets just punted on this. They're like, let's not worry about it. </span>

<b>Jim:</b><span style="font-weight: 400;"> Absolutely. </span>
<h2><b>Building a Tool to Do Its Job</b></h2>
<b>Adam:</b><span style="font-weight: 400;"> So better merging of branches; Git was distributed, it had content hashes, but better merging was really the big difference. Subversion was huge and it's time though. I imagine being the developer behind the tool that most of their developers are using many times a day must be like being a celebrity. Jim said it wasn't like that at all, though.</span>

<b>Jim:</b><span style="font-weight: 400;"> Although I do remember one time that I had moved on to another company and we were using subversion to hold a copy of, the entire neutral chain, GCC GDB, BFD, the linker, assembler on it, so on and so forth. And I think that is also a copy of the C library. So it was a very large repository. And then we used it every day and it was fine. And the founder of the company said to me one day you know, so you know, “Jim subversion doesn't suck. And he said I hope you understand the way I mean that.” And I said, “Oh no, definitely get what you mean. Thank you very much. I'm proud”</span>

<b>Adam:</b><span style="font-weight: 400;"> The greatest of compliments. </span>

<b>Jim:</b><span style="font-weight: 400;"> It really was though. What more do you want that to have somebody say, I used your stuff every day and it's okay. That's like.</span>

<b>Adam:</b><span style="font-weight: 400;"> I want more. I want more than that. </span>

<b>Jim:</b><span style="font-weight: 400;"> Oh, I don't know. Everybody wants to get five stars, everything like that. I mean, when does anything actually five stars, right?  Like if I go to a bike shop and I'm trading in my bike and they treat me decently, right? I gave them five stars because that was what I wanted from the transaction. But it's not like I'm skipping home, right?</span>

<span style="font-weight: 400;">It's just a transaction. Right? And I think a lot of software, right? It's there to get help. You get your work done. It's heritage. You're here to help you get through the day. </span>

<b>Adam:</b><span style="font-weight: 400;"> Especially developer tools. Right? A tool like just by definition, a tool, like you don't want your hammer to do something crazy. You want it to hammer.</span>

<b>Jim:</b><span style="font-weight: 400;"> You don't want to maximize engagement with your hammer. Right. That's stupid. You don't want to maximize engagement with your version control system. You just want it to do its job and get out of the way. And so basically if somebody says, you know, this doesn't suck. That's actually pretty much exactly the right thing.</span>

<b>Adam:</b><span style="font-weight: 400;"> All right. That was Jim -- the first three-time guest writer of software that doesn't suck. The thing about Jim's story that will stick with me beside the guy at the commune, you know, making nut butter, but also building distributed software. The thing that will stick with me as Jim's question, “what's the worst software that you use every day?” </span>

<span style="font-weight: 400;">Also this idea, that software is just the tool and it should get out of your way. That's interesting. Nobody ever says that right. Everybody wants to change the world. He's like, “I just try to build things that don't suck.” </span>

<span style="font-weight: 400;">If you liked this episode, if you like the podcast, you know, tell your coworkers, I don't really know how podcasts spread people say word of mouth. So, you know, tell your friends. Tell them to open up their podcast app search for CoRecursive or search for Adam Gordon Bell and hit subscribe. Until next time. Thank you so much for listening. </span>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1594</wp:post_id>
		<wp:post_date><![CDATA[2020-07-01 06:00:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-07-01 10:00:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[054-software-that-doesnt-suck]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="jim-blandy"><![CDATA[jim blandy]]></category>
		<category domain="post_tag" nicename="network-transparent-cvs"><![CDATA[Network Transparent CVS]]></category>
		<category domain="post_tag" nicename="source-control"><![CDATA[source control]]></category>
		<category domain="post_tag" nicename="subversion"><![CDATA[Subversion]]></category>
		<category domain="category" nicename="transcript"><![CDATA[Transcript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[6067]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1595]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[157]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020-08-01]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>2095</wp:comment_id>
			<wp:comment_author><![CDATA[Idiakose Sunday]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[2019devacct@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[41.190.2.64]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-07-06 07:03:43]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-07-06 11:03:43]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This was a lovely listen. Thanks]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1594033423.143595;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>Software That Doesn&#039;t Suck With Jim Blandy</title>
		<link>https://corecursive.com/software-that-doesnt-suck-with-jim-blandy/</link>
		<pubDate>Wed, 01 Jul 2020 10:00:22 +0000</pubDate>
		<dc:creator><![CDATA[webmaster@corecursive.com]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1597</guid>
		<description></description>
		<content:encoded><![CDATA[<h4><b>Building Subversion</b></h4>
<span style="font-weight: 400;">Software is just the tool and it should get out of your way. In this episode, Jim discusses how to build a great developer tool.  It all started with: “What's the worst software that you use every day?” </span>

<a href="https://corecursive.com/054-software-that-doesnt-suck/" target="_blank" rel="noopener noreferrer">Podcast Transcript</a>

“Everybody likes imaginary code because imaginary code is always perfect.” -Jim Blandy

“You don’t want to maximize engagement with your version control system. You just want it to do its job and get out of the way. And so basically if somebody says, you know, this doesn’t suck. That’s actually pretty much exactly the right thing.” – Jim Blandy

<strong>Links:</strong>

<a href="http://subversion.apache.org/" target="_blank" rel="noopener noreferrer">Subversion</a>

<a href="https://www.mercurial-scm.org/wiki/" target="_blank" rel="noopener noreferrer">Mercurial </a>

<a href="http://www.gnu.org/software/emacs/" target="_blank" rel="noopener noreferrer">GNU Emacs</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1597</wp:post_id>
		<wp:post_date><![CDATA[2020-07-01 06:00:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-07-01 10:00:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[software-that-doesnt-suck-with-jim-blandy]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="jim-blandy"><![CDATA[jim blandy]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1599]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:11:{i:0;s:42:"01:45 -- Network Transparent CVS - Commune";i:1;s:37:"06:58 -- Cyclic Software & Drug Tests";i:2;s:24:"09:55 -- Cyclic Software";i:3;s:19:"18:06 -- Collab Net";i:4;s:20:"18:37 -- The Rewrite";i:5;s:28:"23:45 -- Building Subversion";i:6;s:28:"26:13 -- Celebrating Success";i:7;s:29:"27:39 -- Replacement for CVS ";i:8;s:28:"30:51 -- Subversion Problems";i:9;s:18:"32:27 -- The Merge";i:10;s:38:"34:10 -- Building a Tool to Do Its Job";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1801]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_22c910fb01d0fa23d1ff4cbec31c036d]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/054-Jim_Blandy.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[37:17]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[35.47 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Jim Blandy]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/jimblandy">@jimblandy</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_date]]></wp:meta_key>
		<wp:meta_value><![CDATA[2020-08-01]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[1602]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Algebraic Domain Modeling using Functions With Debasish Ghosh</title>
		<link>https://corecursive.com/005-algebraic-domain-modeling-using-functions-with-debashish-ghosh/</link>
		<pubDate>Sun, 19 Jul 2020 02:38:53 +0000</pubDate>
		<dc:creator><![CDATA[webmaster@corecursive.com]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1619</guid>
		<description></description>
		<content:encoded><![CDATA[<h3><span style="font-weight: 400">Abstract Algebra Provides Tools for Building Better Software</span></h3>
<span style="font-weight: 400">Domain-driven design pushes software architects to model a solution architecture. An algebraic approach to domain modeling using functions may prove to be the best approach.</span>

<span style="font-weight: 400">In today’s episode, Debasish Ghosh explains how to model a complex problem domain in a functional paradigm. His solution focuses on modeling the behavior of the software system rather than nouns it will contain.</span>

<iframe style="border: none;" src="//html5-player.libsyn.com/embed/episode/id/6147984/height/90/theme/custom/thumbnail/yes/direction/backward/render-playlist/no/custom-color/87A93A/" width="100%" height="90" scrolling="no" allowfullscreen="allowfullscreen"></iframe>

<span style="font-weight: 400">“I first come up with what I call the algebra of the behaviors. The algebra of the behaviors refers to the basic contract, which the behavior is supposed to support, which the behavior is supposed to honor. So that's the algebra.” -Debasish Ghosh</span>

<span style="font-weight: 400">“You can use an applicative in order to execute things in parallel.” -Debasish Ghosh</span>

<span style="font-weight: 400">“The advantage is an abstraction. You need to develop at the proper level of abstraction. Because if you pollute your algebra with implementation constraints, then later it becomes difficult to generalize.” -Debasish Ghosh</span>
<h3><b>Transcript</b></h3>
<em>This is a machine-translated transcript. Podcast page for<a href="https://corecursive.com/005-algebraic-domain-modelling-using-functions-with-debashish-ghosh/" target="_blank" rel="noopener noreferrer"> this episode is here</a></em>
<h3><b>Introduction</b></h3>
<strong>Adam: </strong><span style="font-weight: 400">Welcome to CoRecursive where we bring you discussions with thought leaders in the world of software development. I am Adam, your host. </span><span style="font-weight: 400">In object-oriented languages, modeling a complex problem domain is a well-understood process. Books like Domain Driven Design contain techniques for breaking down a problem domain and earlier books like </span><span style="font-weight: 400">Gang </span><span style="font-weight: 400">of Four catalog design patterns for modeling these domains in an object-oriented way. </span>

<span style="font-weight: 400">In today's interview, Debasish Ghosh explains how to model a complex problem domain in a functional paradigm. His solution focuses on modeling the behavior of the software system rather than the nouns it will contain. He also focuses on an algebraic approach to API design and discusses how abstract algebra provides tools for building better software. </span>

<span style="font-weight: 400">Debasish is the author of </span><a href="https://www.manning.com/books/functional-and-reactive-domain-modeling"><span style="font-weight: 400">Functional and Reactive Domain Modeling book by Manning,</span></a><span style="font-weight: 400"> and also works for Lightbend. Welcome to CoRecursive! Thank you. </span>

<span style="font-weight: 400"><strong>Debasish:</strong> </span><span style="font-weight: 400">Thanks a lot. </span>

<strong>Adam: </strong><span style="font-weight: 400">I have your book in front of me really enjoying it.  it has a lot of terminologies, even just in the title. SI thought maybe we'd start with some definitions. What is domain modeling? </span>
<h2><b>What is domain modeling?</b></h2>
<strong>Debasish: </strong><span style="font-weight: 400">Yeah, that's one of the very common questions which I hear, because domain modeling is not what most people think it is. I would like to emphasize that when we are talking about domain modeling, it's really about the problem domain. All the logic, all the interactions, all the behaviors, all the objects that you find in the problem domain consists of the domain model. It has nothing to do with the solution domain.</span>

<span style="font-weight: 400">So as a software architect it's our job to model the problem domain into a solution architecture. So also, if you look at the definition that Wikipedia has on domain modeling, it refers to the problem domain. It focuses on the problem domain. So that's the moot point of domain modeling.</span>

<span style="font-weight: 400">You need to interact, you need to understand the problem domain and model the behaviors of those domains and how the various actors or various objects, and various entities interact amongst themselves. In order to achieve a specific use case. </span>

<span style="font-weight: 400"><strong>Adam:</strong> </span><span style="font-weight: 400">A lot of this terminology I think comes out of domain-driven design. Could you give a summary of the domain-driven design before we dig into functional aspects of it? </span>

<span style="font-weight: 400"><strong>Debasish: </strong>Yeah. Actually a domain-driven design also focuses mostly on the domain model. It relies on the idea that the domain model is the core thing that you need to abstract well, in order to have your system up and running and ensure that your system is reliable, your system is maintainable, your system is modularized. So what area it focuses on in this entire book on domain-driven design is how to come up with solution architecture for a problem domain that is modularized, that is robust and that's reliable to all the exceptions. </span>

<span style="font-weight: 400">So the core concept is how to abstract the various aspects of the domain model in order to make it more reliable and modularized. </span>

<span style="font-weight: 400"><strong>Adam: </strong>So your book I think is taking where he left off and taking his ideas and applying it to maybe a functional programming paradigm. What made you want to explore that kind of intersection of these concepts?</span>

<span style="font-weight: 400"><strong>Debasish: </strong>Yeah, actually, it was sort of an experiment for me because at one point in time I was working extensively with Java and I was working on a domain model, which was a very complicated domain model for the financial security system. In fact, if you look at my book most of the examples are from that domain only. And when I was really architecting that system as one of the team members, I was trying to modularize the system. I was trying to find out how to come up with the best abstraction for the system. Incidentally, at that point in time, I was using Java and I was not very familiar with the concepts of functional programming.</span>

<span style="font-weight: 400">But ultimately the system got implemented, the system got deployed, and in fact, for the last 10 years or so, it's still running. So from that point of view, you would say that it was a successful deployment, successful endeavor. Later in my life, I found Scala, and I got to know more about the aspects of functional programming. I thought that any domain model, any non-trivial domain model can be modeled in a better way if we applied the principles of functional programming.</span>

<span style="font-weight: 400">This was a passing thought at that point in time. And the more I learned about functional programming, the more I delved into the details of libraries like ScalaZ, Catz, and things like that. I was almost confident that functional programming has some features. It has some of the addresses, some of the core issues of modularity which will ultimately lead to better reliability and better modularization of a nontrivial domain model. So that was really the start.</span>

<span style="font-weight: 400">So after that, I went back to some of the basic papers of functional programming, especially Why Functional Programming Matter by John Hughes and ultimately I thought that I should give it a shot. And then in my next project, I was incidentally working on a similar kind of domain and I tried my experiment, I tried to apply the principles of functional programming and the result was great.</span>

<span style="font-weight: 400">So one thing led to another so here we are, I'm now a most confident guy with functional programming, we'll work on domain models, which are fairly complicated and which are fairly detailed. </span>

<span style="font-weight: 400"><strong>Adam:</strong> </span><span style="font-weight: 400">You mentioned the I, this is just on the aside, Why Functional Programming Matters -- that's the paper that kind of goes through a fold, right, where it does recursion and then it abstracts out the higher-order functions until it has a fold?</span>

<span style="font-weight: 400"><strong>Debasish:</strong> </span><span style="font-weight: 400">Yeah, actually that’s one of the basic papers and functional programming that John Hughes wrote, I think around 1990 and it focuses on the modularity aspect. It focuses on the laziness part of it and how you can compose programs, compose larger programs out of smaller ones. Fold is one of the examples, besides that, what he focuses on is that functional programming is basically programming with pure values and when you have pure values, you don't have assignments and those values really turn into expressions. So functional programming is also known as expression-oriented programming. When you compose smaller expressions, smaller abstractions to build larger ones. And that's one of the foundational principles, which I also followed when I tried to apply the principles of functional programming to domain modeling.</span>

<span style="font-weight: 400"><strong>Adam:</strong> And so, an expression as compared to a statement, I'm assuming, right. Where an expression is like two plus two equals four and a statement is like a print line?</span>

<span style="font-weight: 400"><strong>Debasish: </strong>Exactly and an expression is something that is pure values. It doesn't have any side effects. Whereas a statement or an assignment is one, which has a side effect.</span>

<span style="font-weight: 400"><strong>Adam:</strong> Okay. So, if you're doing classic domain driven design in Java or some object-oriented language, right? I'm going to kind of come up with a list of like nouns and I'm going to make those classes. So, how does that differ if I'm taking this, you know, functional expression oriented path?</span>
<h2><b>Taking the Functional Expression Oriented Path</b></h2>
<span style="font-weight: 400"><strong>Debasish: </strong>Yeah. I actually follow our practice where I start from the start from a specific use case. So you have a specific use case if we were using Java or if you are using object-oriented principles, in that case, you would start with the nouns, right? What I usually do when I,  start with the use cases, I usually start with the domain behaviors.</span>

<span style="font-weight: 400">I first come up with what I call the algebra of the behaviors. The algebra of the behaviors refers to the basic contract, which the behavior is supposed to support, which the behavior is supposed to honor. So that's the algebra. It has nothing to do with the implementation of it.  Once you have the behaviors, the algebra of the behaviors of a specific use case, you can now think of modularizing them.</span>

<span style="font-weight: 400">The related behaviors go into one module and usually every functional programming language has support for modules. For example, in Scala, we have traits, so you can use the traits in order to modularize your behaviors. So the first step is to come up with the algebra of the behaviors. The next step is to refine the algebra if required, and the third step is modularized into modules. And the next step is to think of the compositionality aspects because those behaviors are not standalone ones, right? Those behaviors need to be composed semantically in order to come up with larger behaviors. </span>

<span style="font-weight: 400">And how do you do this composition? There are multiple semantics of compositionality. For example, if you have, if one use case has four steps, you may be able to do all those four steps in parallel, or you may have to do them sequentially. So all of these lead you to different algebras of compositionality in the first case when you can do everything in parallel, you can go for the applicative model of compositionality.</span>

<span style="font-weight: 400">You can use applicatives in order to execute things in parallel. While, if you have a strictly sequential compositionality mode, in that case, you need to go for monads. You need to go to monadic compositionality. So I have given </span><span style="font-weight: 400">several talks</span><span style="font-weight: 400"> and one of my talks is also coming up on, actually, it's on domain-driven design, DDD Europe, which is coming early next month, and I am going to speak about the same thing.  How to start with the algebra for use cases and how to define the compositionality without knowing anything about the implementation of each of these functions, the algebra themselves will define the compositional semantics for you.</span>

<strong>Adam: </strong><span style="font-weight: 400">Going through your book, one of the things I appreciated was how far you take things without actually doing an implementation of the function? But rewinding a little bit, so you use this term algebra, then I think that coming to terms with what that means is, at least for me, it was a little bit tricky and maybe for our listeners, so, let's define an algebra. As an example I think you had was like the natural numbers under an addition operation. Is that an algebra?</span>
<h2><b>Defining an Algebra</b></h2>
<span style="font-weight: 400"><strong>Debasish: </strong>I would go for a slightly more basic one. Suppose I consider a set a set of objects. When I say a set of objects, I don't specify what type of objects that is, and I can actually define an algebraic structure based on a set. But this definition, no hard state what type of objects the set contains, and I can define operations on this set without going into the details of the implementation of the type of object. So this is the definition of the algebra of sets. </span>

<span style="font-weight: 400">So one of the specializations of this definition, one of the specializations of this algebra is to define a set of integers. If I can define my behavior at the abstract level of a set, in that case, I'm doing algebraic programming, it's becoming much more generic. If I take an example, consider the definition of a monoid; if we look at the contract of </span><span style="font-weight: 400">a monoid </span><span style="font-weight: 400">and it's completely generic, it's completely parametric on the type of which it encodes. </span>

<span style="font-weight: 400"><strong>Adam: </strong></span><span style="font-weight: 400">Let's define the Monoid.</span>
<h2><b>What is a Monoid?</b></h2>
<span style="font-weight: 400"><strong>Debasish: </strong>Monoid is an algebra which basically supports two operations -- one is the identity and one is an associative append operation. So any object for which you have support for these two operations for a monoid. And this definition is completely generic, whenever we define a monoid in, say, Haskell or Scala, we define it in terms of a type parameter, we call it parametric polymorphism. The type monoid - the algebra of monoid is defined in terms of a polymorphic type say A. We don't have any constraint on what this A has. </span>

<span style="font-weight: 400">The only thing which we need to look after is that this will support two operations. One is the identity operation and the other is an associative append kind of operation. So we can define a monoid for an integer. Then we're specializing the algebra for the integer type. In that case, suppose we define a monoid for integer addition. In that case, the identity is the number zero. Because adding zero to any number gives you the same number. And then append operation is the operation of addition - you add two numbers to get one more number. So addition is associative, here I have defined a monoid for the class of integers where we derive from the generic algebra. </span>

<span style="font-weight: 400">Not only this, that since I mentioned the term associatively, but this is also one of the laws of the </span><span style="font-weight: 400">monoid</span><span style="font-weight: 400"> operations. Any such generic or parametric algebra usually is governed by a set of laws. For example, in the case of a monoid, we have the laws for identity operation, and for the addition operation or upend operation, which has to be associated, binary associated. So these are the lawful algebras. A monoid is an example of a lawful algebra. So my point is that if we can abstract our domain behaviors in terms of these algebras, in that case, our behaviors become much more reusable. Our methods become much more reusable and we can reason about these in terms of the laws, which these algebras honor.</span>

<span style="font-weight: 400"><strong>Adam:</strong> </span><span style="font-weight: 400">So in some ways, so the algebra of Monoid is, it can be specified by a trait or a type class. And in another way, it's sort of like a design pattern that you might see in the object-oriented world. Do you think it's a pattern you can pull off the shelf, you can see that my, my money class fits this pattern, so I can extend from monoid?</span>
<h2><b>Patterns of Functional Programming</b></h2>
<span style="font-weight: 400"><strong>Debasish: </strong>Yeah. It's interesting that you mentioned the term pattern. In fact,  I call these algebras the patterns of functional programming. So if you go to this canonical definition of a design pattern, which Christopher Alexander points out, you'll see that a pattern is a solution to a problem in context, right?</span>

<span style="font-weight: 400">So when you define a pattern in terms of functional programming, you have a very clear delineation of this -- Pattern thing and the context thing; the pattern is the algebra and the context is one of its implementations. So given you mentioned the money class, a money class provides you the right context to implement a pattern in terms of the two operations, which money supports in order for itself to become a monoid.</span>

<span style="font-weight: 400">So money can be a monoid, but that's an instance of the pattern. The basic pattern is the monoid itself, so I call these lawful algebras the patterns of functional programming. </span>

<span style="font-weight: 400"><strong>Adam:</strong> And the interesting thing is, I mean, to me, design patterns like from the Gang of Four Book, you have to, you have to implement them if you want to use the decorator pattern as you implemented.</span>

<span style="font-weight: 400">Whereas if you want to use a monoid, you don't have to implement it, right? You can, you can use a parametric monoid trait and kind of you get this a behavior for free. Do you agree?</span>

<span style="font-weight: 400"><strong>Debasish: </strong>Exactly. In fact, I gave a talk in December at Scala exchange where this was the theme of the talk. The functional patterns and implementations. Actually I mentioned the patterns which are there which we learned in the Gang of Four Books using Java or C++, you need to write lots of boilerplate. Every time you implement a decorator pattern, you need to write lots of boilerplatey code, which needs to be repeated everywhere if we did it for every context. But here you straight get the algebra as a reusable artifact. So that's the beauty of functional programming patterns. </span>

<span style="font-weight: 400"><strong>Adam:</strong> </span><span style="font-weight: 400">Okay. There's an algebra of the monoid, it has certain things you can call on it:  identity, associative operation, but then you also talk about kind of the algebra of your problem, I guess, or the algebra of your, of your design. How does that differ? </span>
<h2><b>Three Core Things of Algebra</b></h2>
<span style="font-weight: 400"><strong>Debasish: </strong>Yeah. Actually, what I like to say is that, when I define the algebra for monoid, the algebra of any abstraction consists of the data types, the operations it supports, and the laws it honors. These three are the core things of an algebra. And this definition is valid, whether you consider a monoid or a specific abstraction for your domain. For example, if you have a domain-specific abstraction, say you are modeling a trade security trade. An abstraction supports a number of operations and each of those operations that take a set of values to return some values.</span>

<span style="font-weight: 400">And those operations are bound by some laws. For example, when you are doing a trade in the stock market, you are bound by the laws of the market, right? There are various laws that you need to honor in order to execute the trade. There are laws for computing taxes and fees. Then there are geographic-specific laws, et cetera.</span>

<span style="font-weight: 400"><strong>Adam:</strong> So how are laws different than, than a business rule? </span>
<h2><b>Laws are the Business Rules</b></h2>
<span style="font-weight: 400"><strong>Debasish: </strong>Laws are the business rules. The various business rules are laws, and they are part of the algebra of the domain. So when I'm modeling a domain, and when I'm saying that I'm defining the algebra of the domain behaviors, I am defining the types, I'm defining the operation and I'm defining the various laws, which that particular behavior needs to honor. Now the point is, our idea is to make these laws verifiable, right? Make the algebra verifiable. Much of this we can do through types. For example, say,  genericity or parametric polymorphism gives you a tool to make these, make some of these laws verifiable.</span>

<span style="font-weight: 400">For example, you can put constraints on the type parameter. For example, say you are defining behavior that takes a data type, which takes a type of trade, which takes a type of an account, but this account may have some specific constraint associated with it.</span>

<span style="font-weight: 400">For securities trading operations and accounts can be of multiple types. </span><span style="font-weight: 400">It can be a client account, it can be a broker account, it can be a trading account. It can be a settlement account. But the, but this account, which this behavior takes, maybe it has to be a first specific type. So, in that case, we can use type constraints. We can constrain the parametricity of the type and enforce the law there itself.</span>

<span style="font-weight: 400">The advantages that we are having, we are enforcing the laws statically and we don't have to write a single line of test for it because we have encoded the laws as part of the type system. This is one of the reasons why I am much more excited about the dependent types, languages like Idris you can do, you can do a lot more with those, but even with Scala you can, you can go a lot of ways. And for those laws, which you cannot verify with your type system, you can do it through your algebraic properties and plugging in property-based testing suites.</span>

<span style="font-weight: 400"><strong>Adam:</strong> So for, type constraints. What kind of type constraints can you do in Scala? Or do you need dependent types or do you need what? </span>

<span style="font-weight: 400"><strong>Debasish: </strong>No, actually, in Scala, when you are defining an abstraction, which is parametric on a type T, you can specify that this type T needs to satisfy this constant, this type T needs to be, it has to be a subtype of a trading account. So in that case, the compiler will ensure that you cannot pass any of the types of account when you are defining the abstraction and when you are implementing the abstraction. So the compiler acts as your tester. The compiler writes the test for you. You don't have to do anything for it. </span>

<span style="font-weight: 400"><strong>Adam:</strong> It's funny you mentioned Idris. I'm doing an interview with Edwin, later next week actually, so it will be interesting to talk to him about Idris. I think it would be helpful if we dig into a specific example. So I have your book open, and this might be a little challenging over audio, but you have this trait account service. An account service takes three type parameters, account, amount, and balance.</span>

<span style="font-weight: 400">So. I think this is what you're describing, right? The actual account type is actually just a type variable. It's not defined in the implementation of this trait. And then..</span>

<span style="font-weight: 400"><strong>Debasish: </strong>Yeah, this idea actually stems from the same idea that I was talking about the theories of algebraic development. When I'm defining a behavior, when I'm defining a trait, a module, or behavior, I have no idea what my account entity will end up with. Right. I don't have any idea of the implementation. </span>

<span style="font-weight: 400"><strong>Adam: </strong>That makes sense. So, just to summarize, when you're saying “I start my domain modeling by doing the behaviors” what you mean is you're not even writing out what the, what the account type looks like you, you're starting with this trait where it's totally parametric over the type of account?</span>

<span style="font-weight: 400"><strong>Debasish: </strong>Exactly. So I constraint the implementation when I'm going to write the implementation for the trait. But initially, I started with only the algebra. And, as far as the algebra is concerned, I parameterize anything and everything, which comes to mind and which might play a role in the domain model.</span>

<span style="font-weight: 400">Some of them may go away in a when I do refinement of the algebras, but I don't want any of the implementation constraints to creep into my definition of the algebra. </span>

<span style="font-weight: 400"><strong>Adam:</strong> So this makes the trait sound very abstract, but it's interesting in your example. So you do this trait that parameterized over the account. It has a debit and it has a credit, right? And so these are two methods you can call that take an account and an amount, and then return an account. And the interesting thing is there's no implementation for these, but then, you further use that to define a transfer method. </span>

<span style="font-weight: 400"><strong>Debasish: </strong>Right, the transfer method doesn't need the implementation of credit and debit right?</span>

<span style="font-weight: 400"><strong>Adam:</strong> Exactly.</span>

<span style="font-weight: 400"><strong>Debasish:</strong> So that's the point of algebraic development. I have a more meaty example, possibly later in the book. When I talk about trading systems. And I also kind of repeat that same example in most of my talks where it models the use case of the trading system. It models the various steps as security goes through in order to,  starting from the client or the, till the trade is done. So this entire use case can be modeled using pure algebra and without any constraint of implementation on it. So yeah, it makes a good example.</span>

<span style="font-weight: 400"><strong>Adam:</strong> What's the advantage?  I guess. What's the advantage of writing my transfer method without even knowing what an account is? </span>
<h2><b>Developing the Advantage of Abstraction</b></h2>
<span style="font-weight: 400"><strong>Debasish: </strong>Yeah. The advantage is abstraction. You need to develop at the proper level of abstraction. Because if you pollute your algebra with implementation constraints, then later it becomes difficult to generalize. For example, if I have a complete program based on algebra. For some definition of the program. It can be a single-use case also.  In that case, I have lots of flexibility later when they go into the implementation phase. For example, I can define my algebra in the form of a free monad, and then when they have the free monad, it's just a pure data structure. There is no semantics in it. It's a pure data structure, and then when I define the interpreter for the free monad, I have the flexibility of doing all sorts of implementation constraints there. I can even have multiple interpreters. In fact, that's a very common technique when you use one of the interpreters for testing. For example, in my algebra, I return for some of the methods I want to do them non-blocking and the returns the future. </span>

<span style="font-weight: 400"><strong>Adam:</strong> Could you explain what a free monad is? </span>
<h2><b>Free Monad</b></h2>
<span style="font-weight: 400"><strong>Debasish: </strong>Yeah. A free monad is one of the techniques to separate decouple an abstraction from the implementation. So what you do is you define each of your behavior as an algebraic data type. And then by some magic, you can make each of them monadic. It's difficult to do the details over audio, but for the timing, let's say that you have some magic that turns each of those abstract algebraic data types into a monad. So the moment you have the monads, you can compose all of them.</span>

<span style="font-weight: 400">Using a four comprehension kind of syntax because, and this way you could define the exact sequence of the use case. You can define four comprehensions, which will define the sequence of your use case just from the algebraic data type. We don't have any semantics attached to each of them. So when you have the final four comprehensions, you have the full use case, but you have it as a, your data.</span>

<span style="font-weight: 400">It's just another algebraic data type you have. </span>

<span style="font-weight: 400">And now we can write an interpreter or you can write multiple interpreters for this free monad. And in the interpreter, you can come up with all sorts of implementations specific constraints that you wish. For example, I may have a trading process defined as a big monadic structure and I'm going to define an implementation for it. I can choose to base my implementation based on the future, or I can choose to base my implementation based on Catz IO or based on M Task or based on the ScalaZ task. I have this flexibility when they go for my implementation and my algebra is completely unaffected.</span>

<span style="font-weight: 400">I have a generic algebra which models the entire process, and they may have multiple implementations. So this gives the flexibility to decouple the algebra from the implementation, so it makes your code much more modular. </span>

<span style="font-weight: 400"><strong>Adam:</strong> It seems like the free monad is the ultimate example, of what you're saying here, right? Taking the algebra and the actual implementation totally apart, into separate steps. Why doesn't your book just say, always do everything as a DSL written in a free monad style?</span>

<span style="font-weight: 400"><strong>Debasish: </strong>Free monad is one of the techniques. It has its disadvantages also. Another technique is what we call the tagless final approach. If you're Google for the tagless final,  you will find lots of papers on it. That's one other way to decouple your algebra from the implementation. The drawback of the free monad is that it's not easy to compose multiple free monads because, in case of when you have a fairly complex domain model, you have multiple use cases, right? And those use cases may, again, interact with each other. So, in that case, there are situations where you may have to compose multiple free monads, and that's not easy. That at least in Scala, you need to write quite a bit of boilerplate code in order to compose multiple free Monads.</span>

<span style="font-weight: 400"><strong>Adam:</strong> Can you compose them after you interpret them?</span>

<span style="font-weight: 400"><strong>Debasish:</strong> </span><span style="font-weight: 400">But that loses the benefit. You want to compose it before interpretation or you want to build a bigger abstraction out of smaller ones before I interpret the entire thing. So the plus point with free monad is stack safe. You can implement the free monad in a complete stack safe way. Your stack will never blow out and that's all, that's a disadvantage with the tagless final approach. </span><span style="font-weight: 400">Tagless </span><span style="font-weight: 400">final is not stack safe if but the tagless final are easier to compose. So there are trade-offs, these are all trade-offs, and they will need to choose whatever option fits for you. But, personally, in recent times, I'm using more of tagless final approach rather than the free monads because of the compositionality. </span>

<span style="font-weight: 400"><strong>Adam:</strong> OK,  I noticed that you, you, in the past, wrote a book about </span><span style="font-weight: 400">DSL</span><span style="font-weight: 400">. So I was just curious,  how does this relate?  It seems like a free monad or tagless final is a way to write a DSL.</span>

<span style="font-weight: 400"><strong>Debasish: </strong>Yeah, actually true. When I wrote the book on DSL, I was not aware of some of these techniques of free monads and taglines final. Maybe they were also not very commonly used, at least on the JVM. Today, if I want to write a second edition of that book, I will definitely consider using free monads and tagless final approaches to encode the </span><span style="font-weight: 400">DSL</span><span style="font-weight: 400">.</span>

<span style="font-weight: 400">In fact,  there are some examples, there are some examples in the Catz ecosystem where they have developed DSLs based on free monads and based on, </span><span style="font-weight: 400">tagless </span><span style="font-weight: 400">final approach.</span>

<span style="font-weight: 400"><strong>Adam:</strong> Interesting. Yeah. I wondered if there was a connection there. Rewinding back, we have this account service example where we have this trait, and it's parameterized over the account and also the amount and the balance like basically all the nouns are just type parameters in your example. So, we have these methods, let's say we, so far we have debit and credit and transfer and so debit, obviously debit takes money off an account credit,  adds money to the account and then transfers just sort of composes the two of them, right? So if I give you two accounts and I say, “I want to debit this one and credit this one.” So this is our example. Now let's say that we have this, and because of our business requirements, we actually need some sort of a configuration. So before we debit, we need to look up some value in some sort of configuration. How would that change things?</span>
<h2><b>Monad Dependency Injection</b></h2>
<span style="font-weight: 400"><strong>Debasish: </strong>Yeah. Actually there's an algebra for that in order to inject configurations, there's a reader, monad. You can use the algebra of reader monad to do dependency injection in functional programs. I think there are some examples also in this book or if you're a Google for a reader monad dependency injection, you will get lots of examples. You can, you can compose, compose that algebraically to. You can inject your dependencies or inject your configuration parameters completely algebraically as part of your algebra. When you are defining algebra, you can define what to inject and the precise implementation will follow as part of your implementation of the trait.</span>

<span style="font-weight: 400"><strong>Adam:</strong> W</span><span style="font-weight: 400">hat's your opinion on using this kind of reader </span><span style="font-weight: 400">monad </span><span style="font-weight: 400">versus alike using your standard dependency injection? Like, off-the-shelf, wire things up when it builds the object? </span>

<span style="font-weight: 400"><strong>Debasish: </strong>No, actually I prefer to use the power of the language. Whatever comes with the language and reading the monad is one of the nice abstractions, which I find. If my language supports a seamless implementation of a reader monad and if it offers, then I usually prefer that in,  instead of going for some libraries or frameworks. </span>

<span style="font-weight: 400"><strong>Adam:</strong> </span><span style="font-weight: 400">The reader, then you're passing into the, like when you run the function you're passing and things where if you use a more traditional dependency injection style, you usually have some class, right?</span>

<span style="font-weight: 400">And you're doing constructor injection and then calling the methods, right?</span>

<span style="font-weight: 400"><strong>Debasish: </strong>Right, if you are in the functional programming world and using things like reader monad the beauty of this thing is that all of these things compose because all of them are based on functions. So reader monad is a monad, the list is a monad, the option is a monad. So here we have this basic general algebra for monad, which embraces all of these things. So whatever you do,  you have the ability to compose monads in some way or the other. But beware, not all monads are composable. You need monad transformers for those things. But generally, monads compose or applicatives compose or I should say that functions compose. So that's the basic building block, the compositionality.</span>

<span style="font-weight: 400"><strong>Adam:</strong> So if we go back to that example, and now, before we add, we credit an account and the return type is a try of account because the, you know, the account could be closed or something so we returned some sort of error status and now we want to have this reader T. So now we have a reader to try, of account, and now you've mentioned monad transformers. Could you kind of expand on how that works? </span>
<h2><b>Multiple Monads Through Transformers</b></h2>
<span style="font-weight: 400"><strong>Debasish: </strong>Yeah, actually you can compose multiple monads using a transformer. Say you mentioned reader T you can use reader T to compose reader with some other monad and the result is also a monad transformer. So that's the advantage of using monad transformers. You can compose composite monads out of multiple simpler ones. So you can structure your program monadically, and yet you can use the power of both the monads together.</span>

<span style="font-weight: 400"><strong>Adam:</strong> I guess, as, as we add requirements, does that mean, you know, we're gonna end up with like, you know, a stack of transformers that are like a reader, writer, state.</span>

<span style="font-weight: 400"><strong>Debasish: </strong>Exactly, that's the idea. That's like the, in Scala, after a certain time it becomes a little more cumbersome because of some lack of type inferencing. But that's the idea. You can compose multiple monads using monad transformers, and as your requirements increase you can go on adding stuff, elements to the stack. And in the context of this,  I will say that there are some alternative techniques also since using a basic monad transformer, turns out to be a bit of verbose in Scala. There are some additional abstractions that people have come up with. For example, there's this  EFF monad, if you Google it you'll find it. There's this EFF monad, which, which implements one of the recent papers of </span><span style="font-weight: 400">Oleg</span><span style="font-weight: 400">,  where he has, where he's talking about the, freer monads of what he calls them as free or monad. More free monads kind of thing, where you can include all of your monadic stuff inside one monad and then you peel off as you need. So compositionality gets a bit better there, but for all practical purposes, I have found that monad transformers come up as a, as quite handy option.</span>

<span style="font-weight: 400"><strong>Adam:</strong> If we have this big stack of monads,  what does that encode like in our -- I mean, we're talking here about the domain modeling, but what does this represent?</span>
<h2><b>The Monadic Comprehension and Sequence</b></h2>
<span style="font-weight: 400"><strong>Debasish: </strong>Sequenciality, sequential composition. When you have a, when you have a monadic comprehension you can execute the various steps in sequence. So one step completes, and then the other step can begin. So that's the basic principle for monadic composition.</span>

<span style="font-weight: 400">And suppose you have multiple monads stacked together, and when you do the sequentiality, you can directly reach to the innermost with a single step of comprehension. So that way you reduce verb verbosity. And without using monad transformers, you need to peel off each layer successively. One by one, so your code verbosity increases. It becomes much more verbose and after a certain number of elements in the stack, it becomes almost unbearable. </span>

<span style="font-weight: 400"><strong>Adam:</strong> It allows sort of factoring out of certain common things that aren't part of the business domain, I guess. Right? Like, you don't need to have specific exception handling because you have that. That try or that either in there and it will short circuit on its own without having to throw exceptions. </span>

<span style="font-weight: 400"><strong>Debasish: </strong>Exactly, the exception, the happy part, as well as the exceptional part. Both of them are taken care of by these abstractions themselves. You don't have to write specific cases, you don't have to write specialized branches of code in order to encode the exceptions. </span>

<span style="font-weight: 400"><strong>Adam:</strong> So, I guess we have our account service example. It's parametric over these types, and now our debit and credit, you know, they return an account, but it's within this transformer stack. So at what point do we start writing implementations of the account or balance or et cetera?</span>

<span style="font-weight: 400"><strong>Debasish: </strong>Yeah. Once you have the algebra defined, once you have the total abstraction defined, anyone satisfied with the algebra in that, then you can, you can start writing the implementations. The usual technique, which I follow, is that whenever I write an implementation for abstraction, I keep an eye on the testability part of it. So, for example, suppose I want to have, as part of the implementation or suppose,  let me start from earlier. Suppose I have a method. I need a function that needs to return the future. So I can have this future thing as part of my algebra right. The disadvantage is that whenever you have a future if you have an abstraction like the future as part of your algebra, in that case, when you write tests for this abstraction you need to have those execution contexts and you need to define futures, right? Yeah. If you kind of think of the future as a monad, which people tend to think of, then it's better to have your algebra defined in terms of a monad instead of a future. The advantage is that in your implementation, you can specialize the monad to a future, and for the testing part of it, you can specialize in the monad as an identity monad, So in that way, your test code becomes much simpler. It becomes much easier to test without any of the engineering or any of the intricacies of having to deal with execution, context, and futures. </span>

<span style="font-weight: 400"><strong>Adam:</strong> Okay I like this idea because I have this problem and I think I know the answer, but let's say I have some method and right now it does things, it uses tasks, right? Monix task,  It's actually a monix. Inside, it calls a bunch of things, which are all async and return tasks. But let's say it calls a method on task like to say, gather an order. Right? Which kind of does them serially, so you're sorry, it does them. In parallel, so I mean that that seems to limit me, right? I can't just have it over some generic type because I'm actually making some assumptions based on the type it is in the service. </span>

<span style="font-weight: 400"><strong>Debasish: </strong>Exactly. </span>

<span style="font-weight: 400"><strong>Adam:</strong> I'm doing something wrong, I guess is what you're saying? </span>

<span style="font-weight: 400"><strong>Debashish:</strong> </span><span style="font-weight: 400">Yeah. The idea is to keep the algebra as generic as possible because if you have a generic algebra, then it's easier to modularize. It's easier to write tests also</span>

<span style="font-weight: 400"><strong>Adam:</strong> So in this case, I guess because they can be run out of order, they should be like applicatives and something should magically run them out of order?</span>

<span style="font-weight: 400"><strong>Debasish: </strong>Right. And there are API is, if you look at the latest releases, their API is where you can run things in parallel if it's an applicative, they're so kind of a parallel type class, I think, which has essentially been released.</span>

<span style="font-weight: 400"><strong>Adam:</strong> So I should do things in terms of that. And then in my tests, I don't need to actually use an async?</span>

<span style="font-weight: 400"><strong>Debasish: </strong>Using things like monix as part of your unit test doesn't make much sense to me, </span>

<span style="font-weight: 400"><strong>Adam:</strong> So it doesn't make sense to me. It's just where I live. When I opened up my ID.</span>

<span style="font-weight: 400"><strong>Debasish: </strong>Yeah.</span>

<span style="font-weight: 400">Adam  </span><span style="font-weight: 400">Something I really liked in your book,  which I had heard of before but, but hadn't really quite understood is,  Phantom Types. I wonder if you could explain Phantom types. </span>
<h2><b>Phantom Types</b></h2>
<span style="font-weight: 400"><strong>Debashish: </strong>Yeah. Actually,  Phantom types are there to honor some of the constraints. It's not a business type per se, it doesn't have any business connotation, but the trick is that you can, you can use the power of the type system in order to ensure that invalid abstractions are never instantiated.</span>

<span style="font-weight: 400"><strong>Adam:</strong> Okay. Do you have an example?</span>

<span style="font-weight: 400"><strong>Debasish: </strong>It's difficult in the audio, but yeah, there was a very nice paper from Jane Street OCaml -- Make Illegal States Unrepresented on Representable. I think the title of the article was written by an OCaml person from Jane, I forgot his name. So, yeah that has a nice example and I think in my book also, there's an example where I talk about how it was a use case for loan approval or something like that. Where it was not possible to pass an illegal state as part of the API. </span>

<span style="font-weight: 400">Adam  </span><span style="font-weight: 400">Yeah, I think that's exactly the example. So if you have like a loan application process and you have some sort of loan object. And then the key thing, I think you're introducing a type that doesn't do anything except it, you know, enforce the type system something like implied. </span>

<span style="font-weight: 400"><strong>Debasish: </strong>That's what I was telling, that it doesn't have any business connotation. The types don't have any business implications. It's there in order just in order to ensure that the user cannot pass anything to the abstraction, which is illegal, so the illegal states are by definition inadmissible. So that's the basic spirit of Phantom types, making illegal states unrepresented. </span>

<span style="font-weight: 400"><strong>Adam:</strong> So let's say you have a loan. And it has to go through like, two phases of approval so this loan object goes into approval stage one, and it comes out with something like this approved, you know, bit flipped, right? And then it goes into the second approval stage. You know, there, it gets this bit flip, but the problem, with that, right, is like, you never want it to go to stage two. If it hasn't first hit stage one I may be butchering, well, from the book, the idea is we add a type parameter and the type parameter just says like stage one, stage two, for instance. It's like a sealed trait of two different stages. And then you make this loan have this type parameter, stage one, and then when you return it from stage one, you actually just return a new object, which has the type parameters stage two it, it's actually the exact same object, right? </span>

<span style="font-weight: 400"><strong>Debasish: </strong>Right. </span>

<span style="font-weight: 400"><strong>Adam:</strong> </span><span style="font-weight: 400">But it means that you can never write code. Like it's almost like a developer ergonomics thing, right? A developer can never code the calls, the second stage, if they have an object that's in the first stage. </span>

<span style="font-weight: 400"><strong>Debasish: </strong>Yes. Alternatively, you could do this validation in runtime,  in the, in the, in the, as part of the business logic. But I thought that doing it through the type system was kind of neat because first, it enforces these constraints during compile time. You don't need to write any tests for this. So I kind of need a part, this technique of using fandom types to enforce constraints.</span>

<span style="font-weight: 400"><strong>Adam:</strong> </span><span style="font-weight: 400">Yeah. That's very true. Right? So you could have your stage two just check a flag and say like, “Oh, stage one wasn't passed.” Let return..</span>

<span style="font-weight: 400"><strong>Debasish: </strong>Right. </span>

<span style="font-weight: 400"><strong>Adam:</strong> </span><span style="font-weight: 400">Yeah. That's very true. Phantom type makes that impossible. Right. You are encoding that if statement actually into the type system. </span>

<span style="font-weight: 400"><strong>Debasish: </strong>Yeah. Once again, that philosophy that the compiler will be your test the company that can test your code. You don’t need to write anything.</span>

<span style="font-weight: 400"><strong>Adam:</strong> </span><span style="font-weight: 400">I thought it was a great example and a great phrase, make illegal states unrepresentable. </span>

<span style="font-weight: 400"><strong>Debasish: </strong>Yes. Yeah. Actually, this phrase was first used by </span><span style="font-weight: 400">Yarin Minsky of Jane</span><span style="font-weight: 400"> Street. I think I acknowledged it also in the book that it's. It's not my terminology, it was first used by </span><span style="font-weight: 400">Yarin Minsky</span><span style="font-weight: 400"> in a blog post on Phantom types OCaml. </span>

<span style="font-weight: 400"><strong>Adam:</strong> Yeah, </span><span style="font-weight: 400">It's a quote, how about the smart constructor? What's a smart constructor? </span>
<h2><b>Smart Constructor</b></h2>
<span style="font-weight: 400"><strong>Debasish: </strong>Yeah. Smart construction is supposed to abstract you from some of them, once again, it enforces the construct,  enforces the construct when you are constructing an object, one of the core ideas of domain-driven design is that when you have a domain object, it cannot be an invalid one.</span>

<span style="font-weight: 400">The constructor should ultimately spit out a completely validated object. And the idea of smart constructors is to act as a layer on top of the basic constructor to enforce these constraints. So, yeah. In one sense,  if you have an object, the constructor always gives you an instance of A but the smart constructor can give you an instance of an option A or an either or something like that, indicating that the construction process may fail also. Because not always, you can get a fully validated, fully constructed object, fully valid object out of your construction process.</span>

<span style="font-weight: 400">So instead of throwing exceptions, which are not referentially transparent, a better idea will be to indicate once again as part of the type system that I am returning an option A which means that it may have failed. So the idea of smart constructor is to make this claim that, “If I hand you over a fully constructed domain object, then it will be a valid one.”</span>

<span style="font-weight: 400"><strong>Adam:</strong> So,  an example maybe. So how would you do this? Let's say that you have your, your account and you want to create an account and you pass in,  money, which is your starting balance, but you want to enforce that that amount can't be negative. How would you do that?</span>

<span style="font-weight: 400"><strong>Debasish: </strong>Yeah. So that's part of the validation. All these validations will go in the smart constructor, and if any of these validations fail, then you return a different data type means you return a disjunction like either or you return an option or some, something like that, or a try also. So, the idea is that once again, you cannot, you cannot publish a domain object, which is not valid, and you cannot throw an exception.</span>

<span style="font-weight: 400">Because,  exceptions are not good citizens of functional programming. So the basic idea is this in force, to publish only valid domain objects or indicate to the user that I couldn't construct a domain object out of this and do this in a referentially transparent way through pure values and not to be an exception.</span>

<span style="font-weight: 400"><strong>Adam:</strong> In your constructor, if you checked the balance and it was negative,  like all you could do is say, throw an exception.  and that's not referentially transparent. But if we, if we can return a noun, which we can't from, from just standard construction, but in our smart constructor, we could have whatever type, right?</span>

<span style="font-weight: 400"><strong>Debasish: </strong>Right? So the standard technique is to make your constructors inaccessible to the general user instead, publish smart constructors.</span>

<span style="font-weight: 400"><strong>Adam:</strong> </span><span style="font-weight: 400">And this is, this is sort of like a factory, I guess, in a sense?</span>

<span style="font-weight: 400"><strong>Debashish: </strong> </span><span style="font-weight: 400">Oh, yeah.</span>

<span style="font-weight: 400"><strong>Adam:</strong>  </span><span style="font-weight: 400">So what is a Kleisli?</span>

<span style="font-weight: 400"><strong>Debasish: </strong>Kleisli is one encoding of the reader, monad. It's basically a function application. But the abstraction Kleisli gives you a, it gives you a number of combinators which you can compose, compose together. So that's the advantage of using Kleisli, our native function application. So when I say Kleisli, option a, B, it actually means that a to option B or some, some, something like that if I forgot the order of this. But it takes an option, it takes an E and gives you an option to be.</span>

<span style="font-weight: 400">So it's basically a function which takes an option and A and gives you an option B. But the moment you declare it as a Kleisli, in that case, you, you,  you have at your disposal, lots of competitors that Kleisli obstruct. So in the book, there are, there are, there are, I think there are some examples where you use combinators to design some DSL kind of thing, which makes the code much more readable a</span><span style="font-weight: 400">nd composable </span>

<span style="font-weight: 400"><strong>Adam:</strong> Yeah. Cause Kleisli gives you the a and then, right, you can kind of, you can kind of chain these things. And then,</span>

<span style="font-weight: 400"><strong>Debasish:</strong> </span><span style="font-weight: 400">Yes</span>

<span style="font-weight: 400"><strong>Adam:</strong> </span><span style="font-weight: 400">I mean, I guess like circling back to the, to the whole main topic, I guess, you know, that's one of the key points is I think if you're using these, these algebras like a Kleisli or a monoid there exists like combinators and higher-order functions that give you the functionality that you don't have to write.</span>

<span style="font-weight: 400">Is that one of the advantages of this approach? </span>

<span style="font-weight: 400"><strong>Debasish: </strong>Yeah, that's one of the advantages. And the other advantage is that using algebra-based programming, there is a clear separation between the construction of your abstraction and the execution of your abstraction. For example, if you use a monix task, or if you use Cats IO you can build your entire abstraction before you can execute it. So there's a clear separation between the two phases  which is not so straight forward. If you use abstractions like the future, you don't have this delineation. </span>

<span style="font-weight: 400"><strong>Adam:</strong> </span><span style="font-weight: 400">Yeah. It's that separation. I think that makes a lot of sense.</span>

<span style="font-weight: 400"><strong>Debasish: </strong>Yeah, that's true. </span>

<span style="font-weight: 400"><strong>Adam:</strong> So</span><span style="font-weight: 400"> You work at Lightbend,  what, what is it like to work there? What, what are you working on?</span>

<span style="font-weight: 400"><strong>Debasish: </strong>Yeah, actually, I'm working on a, working on a, on a team called fast data team where we are developing,  a toolset for a streaming platform. And very recently, over the last three or four weeks, I was working on a library on CAFCA streams and last week we opened-source it also. So CAFCA streams have a Java API, but those APIs are very painful to work with if you're, if you're working with Scala.</span>

<span style="font-weight: 400">So we wrote a couple of libraries for Scala libraries and open-source state. And we are planning to have them integrated with the CAFCA community also. So I was mostly working on this over the last three, four weeks. But generally, I'm working on this streaming platform toolset, which we call the fast data platform of which for which  the general level a GA is out and  yeah, looks quite interesting and looks really exciting </span>

<span style="font-weight: 400"><strong>Adam:</strong> </span><span style="font-weight: 400">To me. So, what is the fast data? </span>
<h2><b>Fast Data as a Platform</b></h2>
<span style="font-weight: 400"><strong>Debasish: </strong>Fast data is a platform where you get things like,  spark, Flink, CAFCA, et cetera. Built on top of DCOs. You're looking at adding the Kubernetes to the equation, and you can deploy your applications and the entire management of the resources and the monitoring part will be taken cared of by the platform.</span>

<span style="font-weight: 400"><strong>Adam:</strong> </span><span style="font-weight: 400">I think this has been a great talk. Thank you so much for coming here. I really enjoyed your book. It took many, there were a lot of concepts that took me a little while to understand, but I think it's a great book about the design patterns of functional programming. Thank you so much for your time.</span>

<span style="font-weight: 400"><strong>Debasish: </strong>Yeah. I loved talking to you as well. </span>

<span style="font-weight: 400"><strong>Adam: </strong></span><span style="font-weight: 400">Yeah, we could do another one sometime. I thought you had a number of talks. I'd like to hear your thoughts about the ACA at some point. It sounds like a, maybe. </span>

<span style="font-weight: 400"><strong>Debasish: </strong> </span><span style="font-weight: 400">Sure. All right. </span>

<span style="font-weight: 400"><strong>Adam: </strong>Alright. Take care. </span>

Thank you to Craig Treptow for podcast transcript help. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1619</wp:post_id>
		<wp:post_date><![CDATA[2020-07-18 22:38:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-07-19 02:38:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[005-algebraic-domain-modeling-using-functions-with-debashish-ghosh]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="algebraic-domain-modeling"><![CDATA[Algebraic Domain Modeling]]></category>
		<category domain="post_tag" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="transcript"><![CDATA[Transcript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[399]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1621]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[157]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_archive__thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1621]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Erlang and Distributed Systems With Steven Proctor</title>
		<link>https://corecursive.com/012_erlang-and-distributed-systems-with-steven-proctor/</link>
		<pubDate>Tue, 21 Jul 2020 10:00:30 +0000</pubDate>
		<dc:creator><![CDATA[webmaster@corecursive.com]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1636</guid>
		<description></description>
		<content:encoded><![CDATA[Erlang evolved to support distributed computing.   It<span style="font-weight: 400"> became functional because of the need to limit side effects. </span> In this episode, Steven Proctor discusses what he’s learned about functional programming and applying FP principles to various non-FP contexts.
<h3></h3>
"So there's, some management around that as well that allows me to essentially do my database migration on the fly because my database is just the state that the process holds and not an outside database." - Steven Proctor

<span style="font-weight: 400">"If you're in a team where a bunch of people may or may not be familiar with the functional programming ideas, you start introducing immutability everywhere. That might be a harder push. As opposed to just saying, "Okay, well let's think about how we're changing the data."  - Steven Proctor</span>

<span style="font-weight: 400">"Essentially Erlang was a language that they evolved and what sounds like a very agile way of sitting with the people who are actually going to be writing the software and building a tool for them that solves their problems. And so early on it became out of the necessity of the problems they were solving." - Steven Proctor</span>
<h3><b>Transcript</b></h3>
<em>This is a machine-translated transcript. Podcast page for<a href="https://corecursive.com/012-erlang-and-distributed-systems-with-steven-proctor/" target="_blank" rel="noopener noreferrer"> this episode is here</a></em>
<h3><b>Introduction:</b></h3>
<b>Stephen: </b><span style="font-weight: 400">Let's do this. Let's do the object-oriented idea, which is a good idea. And we're just gonna turn it up to 11.</span>

<b>Adam: </b><span style="font-weight: 400">Hey, today's interview, we talk about distributed systems and functional programming, specifically a lot about Erlang. And also we touch a little bit on my favorite topic, which is building your own mechanical keyboard. Proctor is the host of the functional geekery podcast, and also runs an Erlang meetup. Proctor, welcome to the podcast.</span>

<b>Stephen: </b><span style="font-weight: 400">Thanks for having me.</span>

<b>Adam: </b><span style="font-weight: 400">So I'm a longtime fan of your podcast and I have some questions for you. What is functional programming?</span>
<h3><b>Functional Programming</b></h3>
<b>Stephen: </b><span style="font-weight: 400">What is functional programming? I'm not really sure, that's one of those things that I've heard a bunch of other people get frightened, say their definitions, and I've heard the quote, I think you ask a thousand people what functional programming is. You'll get at least 1,001 different answers. So I think at this point, the basis for what appeals to me at least of functional programming is limiting side effects, and by limiting those side effects, you drive towards what people commonly think of as functional programming solutions. It comes down to limiting, in my view, where the side effects in your system happen.</span>

<b>Adam: </b><span style="font-weight: 400">So you try to limit the proportion of your codebase that does side effects to the minimum part that you can. So what's the advantage of that?</span>

<b>Stephen: </b><span style="font-weight: 400">So for me, that gets back down to having worked on an app at one point for 10 years, there were a lot of innocuous decisions or decisions that seemed innocuous at the time that five, seven, ten years later, it was like, “Oh, this is real pain”. And so I started feeling these pain points and it was trying to figure out what these things are and some of that came from the test-driven design side and making contracts and kind of sending me the hint of pure functions. It's easier to test if the data coming out is dependent on data coming in and doing and getting rid of mocks.</span>

<span style="font-weight: 400">So if you have to mock it, you realize it's harder and these ideas were kind of setting the foundation that when I saw functional programming, I was like, “Oh, okay. I see where this, like this thing, is going even further, a single responsibility principle and object-oriented says it has one reason to change.</span>

<span style="font-weight: 400">Well, if you take that to the extreme, at a certain point, that's just an interface with one method on it, and that method is really almost a function because you don't change the data underneath it, you just change the behavior or you have interface segregation principle and object-oriented side, which are things that don't change together, get separated out.</span>

<span style="font-weight: 400">And so if you take that to the extreme, well, every interface is just one function. “Can I push something? I have something that's pushable”. I can push something onto a stack. But I can push something onto a list, or I can push something on to do this. And so the interface is really pushable, which is just a push method, things like mappable, or I have things that are poppable, or I have things that are innumerate where I just iterate over the next and I can just call “next” and that becomes like a string. So some of these ideas, we're kind of setting that thing. And I saw functional programming and realized that some of these things are functions.</span>

<span style="font-weight: 400">And I kind of realized that if I want to limit these changes, I can start doing this. And that's kind of where the appeal for functional programming came from me, was all these principles that yet are object-oriented or procedural, they're the same principles on functional programming -- they're just looked at from a different side and almost taken to the extreme because data is one reason you need to behave another reason to change. So maybe your data and your behavior don't necessarily belong together. And so it was a lot to know all these things that kind of pushed me down that track and seeing what are those things that go and what are the common principles, whether or not it's from functional or from OO and so there were a lot of these ideas that formed that I think functional programming to me is just a lot of these ideas about, how do we control what goes on in our system? And by pushing to these bounds, you wind up in a more functional programming oriented mindset.</span>

<b>Adam: </b><span style="font-weight: 400">So you're saying functional programming is sort of best practices from the OO world, you know, taken to a more extreme stance. </span><span style="font-weight: 400">So do you find OO and an FPE like in conflict with each other or do they sit well together?</span>

<b>Stephen: </b><span style="font-weight: 400">I think they sit well because there are points at which you need to actually modify stuff. And I think in that case of modifying stuff, the object-oriented side can fit together. And some of this object-oriented side is more of the Allen case, Smalltalk vision of message passing between things.</span>

<span style="font-weight: 400">So this is where people who are familiar with Erlang, say Erlang is actually both functional programming and it's object-oriented and it's probably one of the more object-oriented languages besides Smalltalk that you actually find, maybe Eiffel's up there as well. But I think there's a lot of the sense that they live well together to a certain extent, now again, I haven't gotten into monads and free monads and a lot of these other side effects capturing concepts. So I'm not quite sure how well that fits in, but I've heard other people, Michael Feathers, I believe Gary Bernhardt, I believe in a couple of other people talking about functional core, imperative shell and some of this stuff is Allister Coburn's architecture. The outside of your system, you push everything that does side effects as far out of your system as you can. And you keep the pure stuff and you keep the center, you keep the core domain stuff as pure as you can. So I think there is a place where both of these fit in because eventually, as a lot of people, that if you didn't have side effects, you wouldn't be doing anything.</span>

<span style="font-weight: 400">Because even at the purest level, running this computation is going to eventually make your fan run hot. So there are some side effects there. On our current architecture, it's controlling those and pushing to the outer bounds of the system. So in a lot of cases, for anybody who's doing object-oriented programming, people talk about checking your data at the perimeter and assuming once it gets inside your system, all the data's good.</span>

<span style="font-weight: 400">So do all your null checks at the very edge of your system. Assume once you're in your domain logic, you'd never have any nulls if they take that idea and you just treat that with side effects as well. Put all the side effects at the outer boundaries of your system, and then anything that needs to happen already has its data, and then you can just do data transformations and modifications through the rest of your system, and it starts being easy, and then you build immutability on top of that as another way of limiting your side effects and the way you interact with things and change things.</span>

<span style="font-weight: 400">Then you know that, okay, this thing is this. It's always that. And in other languages like Erlang and Haskell and certain other languages you only have binding. So you can only set up once in that scope too. So you know, if X is Y, X is always Y for that scope, and it's never going to change, and all of a sudden X becomes Z so that's the view that I found and suddenly I don't get to do functional programming day-to-day. As a lot of people would say, Oh, you're working in a Haskell, or you're working in an Erlang or Elm or CuraScript or Scala, or pick your closure or pick the functional language of your choice.</span>

<span style="font-weight: 400">A lot of this is still, okay, I'm in JavaScript, or I'm in Ruby, or I'm in Bash programming, or I'm in whatever it is that requires me to do it. How can I essentially bring the most sanity to what I'm doing?</span>

<b>Adam: </b><span style="font-weight: 400">So that's a good question. So you're saying day to day you're working in Bash, in Ruby, in JavaScript, so how do these principles influence what you do in those languages?</span>
<h3><b>Principles that Influence Languages</b></h3>
<b>Stephen: </b><span style="font-weight: 400">Some of that is like all good answers. It depends if there are certain areas I try and think of data transformations first, which becomes easier in certain languages. Potentially, JavaScript might be a little bit easier to pull that off if you fold in underscore or low dash or potentially you can sneak in some Miranda because people understand underscore, and you can just kind of say, well, here's underscore, like improved and evolved. So pretty much everything you know about underscore, here's a few things and you can use it pretty much the same, but if you need to and you can do this other stuff. </span>

<span style="font-weight: 400">If you're doing Ruby's, sometimes you can find off the place that, okay, well what if we copied this? Or what if we just took this object and returned a new object can, didn't really modify this or at least what if we think of a transformation, even if we are modifying it because of the constraints wonder, but think of this as, as a series of maps and reduce and folds in any other operations, and we can kind of just chain these things and think of it as that pipeline operator that certain functional programming languages have where you can say, here's the series of transformations instead of, okay, well it's a series of a bunch of these other calls.</span>

<b>Adam: </b><span style="font-weight: 400">And when you say, to make sure I understand this when you say a data transformation, you're saying immutability is like a functional programming principle, and so in Ruby or wherever I am, rather than, you know, changing the value of the user, my function can create a new user with that value change. So what do you mean by transformation?</span>
<h3><b>Data Transformation</b></h3>
<b>Stephen: </b><span style="font-weight: 400">Sometimes, if I can get away with that. Sometimes in Ruby, sometimes in JavaScript or in these other languages to do that becomes hard or it becomes hard,  A - because that's not how that language is necessarily shaped. So sometimes there are things where you're like, okay, let's just take the hit, we can take this hit. At other times you're on an existing codebase you can't all of a sudden just go make this object immutable. That's going to break too many other things. So at least with data transformation, maybe we can outline it as a series of steps that this data goes through. So this thing happens, and then this thing happens and then this thing happens.</span>

<span style="font-weight: 400">So yes, I may modify it again in place, which is kind of cringe-worthy, but at least. I outlined the discrete steps of how this data gets transformed and thinking about it in a pipeline or composition of these things together. Even if it is mutating the state, I can at least start to shift that mindset of it's a series of steps that we're going to do.</span>

<span style="font-weight: 400">This is, we're thinking in an algorithm, so let's actually think in the steps and outline those steps that the data goes through, even if it is being transformed on the same objects.</span>

<b>Adam: </b><span style="font-weight: 400">Yeah, because there is a cost to immutability, especially depending on the language, right, of actually making copies of things.</span>

<b>Stephen: </b><span style="font-weight: 400">And it's not just that cost. It's the cost of the introduction to teammates potentially. If you're in a team where a bunch of people may or may not be familiar with the functional programming ideas, you start introducing immutability everywhere. That might be a harder push. As opposed to just saying, okay, well let's think about how we're changing the data.</span>

<span style="font-weight: 400">And then maybe once we get that, we can show that, Oh, do we need to change the data? Or can we create a copy? And it's that slow evolution of some of these ideas.</span>

<b>Adam: </b><span style="font-weight: 400">So it's a culture war within your workplace where you have to convince them that you're not crazy, that there's, that there's some idea behind what you're doing.</span>

<b>Stephen: </b><span style="font-weight: 400">Well, it's not that it's a culture war, it's just like anything when you introduce new ideas. A - if people aren't bought in, to begin with, just to essentially make it a sink or swim idea in something that is an existing context becomes something you want to watch out for because then you don't want to start that culture war. Right? </span>

<span style="font-weight: 400">If you're going into, if you're taking Ruby in saying, rewriting high Haskell, then you're thinking in hassle. If you're saying Ruby and think in terms of more functional styles in a more object-oriented language, then it may just be how do we start to think about these things? Because even then these are still potential object-oriented things.</span>

<span style="font-weight: 400">We think of workflows. We think of pipelines, we think of potentially state machines. Even if that state machine or the pipeline is modifying the same data, can you take these ideas and introduce them? So it's not one of those things that's completely unfamiliar and you lose the battle. You lose the war before the first battle is even finished in the fact of just trying to get exposure to these things. Right? </span>

<span style="font-weight: 400">So there's a thing, there's the idea that more of a pragmatist that says, yes, I love functional programming. Yes. I wish I could write every code functionally, even though I'm bad at that and nonfunctional languages that don't keep me strict. So how can I, knowing my limitations, how can I make this easier for someone instead of making them swallow everything at the same time and slowly expose these ideas and build upon ideas little by little and exposure by exposure and saying, okay what if we did it this way? How do we think about this? Like instead of redoing and re-introducing someone and making them feel like they don't know anything about coding.</span>

<span style="font-weight: 400">Or challenging and saying, “you don't know anything about coding. Here's how you do this and this is the much better way. Even though what you're doing has worked for you and you've been successful with it and your career, I'm going to completely invalidate it”. It's more about how we approach these things? How do we make this more familiar instead of, and therefore easier to grasp onto because that familiarity is there, instead of saying no now for something completely different, and I expect you to learn this in response to my will, even if the language is not even wanting to cater to my will?</span>

<b>Adam: </b><span style="font-weight: 400">Yeah. I can understand that. That battle can be hard to fight. But a pragmatic approach, I think always makes sense. You mentioned Erlang so for anyone who's not familiar,  what is Erlang?</span>
<h3><b>Erlang as a Solution</b></h3>
<b>Stephen: </b><span style="font-weight: 400">So Erlang was the solution to the software crisis that Ericsson was identifying in the 80s they had Joe Armstrong, Robert Rooney, and Mike Williams as part of this lab that was, their goal was to, people are expensive software, expensive to write how do we do this? We need to solve this problem of making our telephones switches and doing the software for this and making it reasonable to write can you go off and solve this problem, cause we need constraints of high availability because we get fined if the phone lines are down. You don't want the phone lines cut out when you have to make a 911 call.</span>

<span style="font-weight: 400">You don't want phone lines to go down because my call with you is ruining someone else's call because our call goes bad. So they had a bunch of these constraints, and so Joe, Mike, and Robert went off and started looking at a bunch of different solutions and essentially Erlang was a language that they evolved and what sounds like a very agile way of sitting with the people who are actually going to be writing the software and building a tool for them that solves their problems. And so early on it became out of the necessity of the problems they were solving. It became functional because they need to limit their side effects. It became functional because they kind of enhance your estate. So if things are running on five switches. If one switch goes down, you can't share that state, it's gotta be isolated. So you kind of start being functional in that way. It became a message-passing because of the way that they were dealing with concurrency. And these things can happen in whatever order they can happen, and a lot of these constraints kind of led them to invent, reinventing an actor-model, as they say. They didn't know they were doing an actor-model with message passing. They didn't realize that they had functional programming experience, but a lot of that functional programming stuff became implicit because of the problem they were trying to solve.</span>

<span style="font-weight: 400">If we take down one computer, we take down one switch in the network. We can't crash the whole network. We need to be able to move things around. And so Erlang became this functional message passing system that was designed for high throughput, high availability, had things to schedule, so it was near real-time requirements, not absolute real-time, but very near real-time. So they couldn't start any piece of work for too long. </span>

<span style="font-weight: 400">There were all these other constraints that made them wind up with Erlang as it is, and it became a very interesting language and it made me, one of the things that I appreciated about Erlang was it made me rethink how some of these systems work. There's a lot of distributed systems stuff that gets tied into the Erlang ecosystem.</span>

<b>Adam: </b><span style="font-weight: 400">Like they were doing distributed cloud programming. I mean, it wasn't called that but it was definitely distributed programming like way before everybody else.</span>

<b>Stephen: </b><span style="font-weight: 400">Yeah. Because all these switches were everywhere. And one of the things that Erlang did was because it was isolated because they had the code across the switches.</span>

<span style="font-weight: 400">If a switch crashed, they needed to be able to recover from that crash. And some of that is their way of supervisors and management of applications of what they call applications, which are like micro apps,  with supervisors and workers. And then they, because of the distributed sense, and if this thing happens, we don't know where which switch it's going to be on. And so they had an idea of location transparency. They have this process identifier and that is encoded where this is running, which no, this is running on, but for all intents and purposes, you as the client don't really know and can't really be involved about which node this is running other than a few constraints about, -- you can't manage as you can't supervise something that's on the other note on another node.</span>

<span style="font-weight: 400">But if you're just sending a message to something, you don't care if that's your local machine, you don't care if that's a different machine. So all these things that they were doing were this simply distributed cloud in the sense because if we're going to put this on however many switches, we don't know at any given point, which switch is going to be running, which piece of code and it could be running on a bunch of different stuff. It can be running in one place and we don't know, and we add a certain point, don't care. And so yeah, in the case it was essentially a managed cloud in away. These switches were servers that were managed by this, but when it came down to running it, which piece of code is running on which server?</span>

<span style="font-weight: 400">Well, who knows? Maybe this code, just something else from down in. Then we start up another instance on this thing because we can't communicate that. So we've got a process that just spins up a new application here and starts managing that life cycle here, and we can broadcast that, “Hey, we've got the service running”, and so there was some stuff around that are very much the problems that we're hitting today with my understanding of Kubernetes and some of these Docker orchestration levels and microservices and all this other stuff about making what's running where invisible and not really caring about it, and having these small things that if they crash, how do we monitor that crash? How do we restart it back up? “Okay, good. We got it. Did we start-up in this area? Maybe not.”</span>

<b>Adam: </b><span style="font-weight: 400">I never thought of this Kubernetes connection, but yeah, I guess for anyone who's not familiar, like my understanding may be wrong, so just jump in there. But like the message passing actor system in an airline is like each, each function has a mailbox, right?</span>

<span style="font-weight: 400">Which is basically a queue. So messages are considered in front of it and pile up and, and it runs within a cluster. So it could be running on one machine or another. Right? And I guess, yeah, I can see what you're saying. This is very similar to sort of a microservices architecture except for a lot more lightweight. Right? Because you talked about today, like, you know, I have a Docker container with a JVM instance running in it, and that's being distributed by Kubernetes and there's a whole bunch of other things. But in Erlang this is just actually a function, right? Like it's a much, much smaller unit of distribution.</span>
<h3><b>Distinction Between Function and Processes</b></h3>
<b>Stephen: </b><span style="font-weight: 400">Yeah. And there's a little bit of a distinction, just to be clear is between functions and processes. So processes, run functions, so you can actually call a function without having to go across that mailbox boundary. And depending on how you define it, I know I've done early days where it's like, okay, well everything is concurrent, so let's round up a whole bunch of these things and like every module is now its own process. </span>

<span style="font-weight: 400">Well, sometimes I get you a bottleneck. If you've got a hot code path, now you're going through a mailbox. When that could just be I can invoke it as a function or I can start it up as a process. And that was one of the questions that I kind of was talking to, with Martin Logan on one of the early podcasts, is how do you define that boundary of what's the function, what's just the function in the module, and what's the process that you spawn up to handle something.</span>

<span style="font-weight: 400">And so that's kind of the same in the microservices world of at what point do I start-up service and on focused service to do something versus at what point do I just call a function and even Lambda on AWS, another function as service things are more than just a function, right? Those are still super small services because if you need to calculate a min and max value, you're not calling up a Lambda to invoke max to give 2 numbers. Right? So there are certain things you start to think about. This is a functional unit, but maybe there's still functions here. But when I need to do side effects or I need to go to outside stuff, that's when I start to figure out where those boundaries are, when it gets elevated from a function to a process.</span>

<span style="font-weight: 400">And the confusion, I think where I've seen people get confused about the process and function. And I think where I started was to start a process you just essentially give it a function. So if you just have one function that runs, that can be a process. You can start up a process that just invokes this function and if it just does something and immediately returns, that process spawns up quickly, does its work, and dies. And sometimes when you're first learning this, I mean. I know I fell into it. A couple of other people I know have stolen into it like cause everything, and that is one of those things that you have to figure out where does it make sense to have a process that's the equivalent of a max function or a streamlined function? Or do I just call that as a function with a module namespace?</span>

<b>Adam: </b><span style="font-weight: 400">How do you decide where to draw these lines?</span>
<h3><b>Process Boundaries</b></h3>
<b>Stephen: </b><span style="font-weight: 400">One of the good ideas was after I asked Martin Logan, I asked that question on that when I was still trying to process it myself, his answer was “what are the concurrent operations?”</span>

<span style="font-weight: 400">So that was one of the things that informed it. He gave an example, I think it was Lambda Dam up in Chicago a number of years ago that was talking about this, and he outlined a vending machine. And he said, here are the parts that are concurring, like if this thing goes down, what parts of the vending machine could still operate?</span>

<span style="font-weight: 400">What parts of the things are concurrent in isolated factors? So some of that is what's concurrent, what can be run whenever and in whatever order. Some of that is back to supervision. The supervisor has a restart strategy, so it can monitor the work of processes. And some of those can be other supervisors, but it can know when that process terminates.</span>

<span style="font-weight: 400">Some of that boundary is if this thing terminates, what goes along with it? What has to, if I have to terminate and restart this, what kind of failures cascade, and how do they cascade? Well, I think one of his examples of the vending machine was if my money, the part that takes in the coins, takes in dollars and dispenses change in accumulates change fails, when that dies and when that error is out, does that fuel the cooling system that keeps the drinks cold? Well, if the refrigeration of the cans and the vending machine die when the coins become inoperable, or there's a jam or it's out of money and you can't take money. Well, that there's a resiliency boundary there. So maybe those are different processes.</span>

<b>Adam: </b><span style="font-weight: 400">Isn't it true that the cooling system doesn't even interact with the change system? </span>

<b>Stephen: </b><span style="font-weight: 400"> Yeah. And so, therefore, if the change system dies, why do you take down the cooling system, Right? So those become two different domains in your system that become obvious process boundaries.</span>

<b>Adam: </b><span style="font-weight: 400">Because just because things interact doesn't mean they have to be in the same process, I'm assuming.</span>

<b>Stephen: </b><span style="font-weight: 400">Correct, and some of that's the concur. So the first thing was what are the concurrent pieces of the system? Right? So the cooling thing can operate independently of the change. So once you start to realize that, you start to see, Oh yeah, maybe it is taking a step back, “do I really want to kill my cooling when my change goes or vice versa?” Okay. There's a boundary of some processes. The other part is some of that state management and which processes hold which parts of the state. So once you get the dividing line of some of those concurrent activities and failure modes in which things are actually related to each other, you say, “Do I have an individual processor each rack of drinks potentially in that vending machine? Maybe I have something there and if I'm empty in one, do I or if that one, huh? Spinner or release or whatever dispenser is broken for that spot in the vending machine. And that has the state of its own sodas or its own beers, whatever you put whatever you're stocking in that vending machine. So if A3 breaks, does that break A2? Does that break A6?” So that one can break so that that has its own state. It has its own level of how full that thing is. So the full row of maybe the same drink, cause that's a very popular drink. What if one of those lots in that row, do I want to have everything else right? So if that state gets messed up, if that thing's empty, can I not dispense any other things? So there's a little bit of isolation there. And the fact that it's got its own state, it's state mirrors other states.</span>

<b>Adam: </b><span style="font-weight: 400">I think one of the important things about the data is that, because each process is single-threaded, it's a good way to prevent concurrency issues with data, right? If you're like this very small process, this very small instance of whatever, of a thing that's running is the only thing that can touch this state and it has a message queue. So, like work, it needs to compile up, but only ever one, you know, the mutation will happen at a time.</span>

<b>Stephen: </b><span style="font-weight: 400">Yeah, absolutely and in that process, that process is single-threaded, but you extract the concurrency out and that gets one of those things back to the object-oriented side is decided concurrency side effects. Well, now I'm single-threaded. I don't have to worry about concurrency at this small level.</span>

<span style="font-weight: 400">I've pushed that out and there is concurrency. Well, the concurrency is different things being concurrent, not, I have three different things modifying the same state at the same time.</span>

<b>Adam: </b><span style="font-weight: 400">Yeah. The way I think about the actor, you know, the model of concurrency is like an actor, as a person, right? It's like the concurrency model is like, you have like a guy or like a gal, like a process that's sitting there and only it can manage this data that's it's in charge of, so like there can be as many things in parallel telling it to make various updates, but they just get put in its mailbox and it processes them one at a time and that's kind of, that's the way that they kind of cut that, not have concurrent data.</span>

<b>Stephen: </b><span style="font-weight: 400">That was one of the metaphors, I think Alan Kay said as long as cells were isolated. But if you take it out and it's an actor, yeah, “you, I send you a message. If I'm going to, I might send you an email and someone else might send you an email and someone else might send you an email” and you're only ever going to work one of those emails at a time.</span>

<span style="font-weight: 400">We don't communicate, we're all locked in rooms and all we have is that little Dropbox of an inbox and an outbox that we can communicate through. So whenever I do, you don't know.</span>

<b>Adam: </b><span style="font-weight: 400">Yeah. And I mean, that's quite functional, right? I'll use your only inputs are,  the smell box and your only outputs are. Also the mailbox, and it ties back to your, single responsibility principle, I guess, right? Because you're like, this process is in charge of the, A1 row of this vending machine and that's it.</span>

<b>Stephen: </b><span style="font-weight: 400">Yeah, exactly. And my responsibility is either to supervise things that are doing jobs or do a job. </span>

<b>Adam: </b><span style="font-weight: 400">So what does the supervisor do? I know you, you've mentioned supervisor a couple of times, but,  what is the role?</span>
<h3><b>Role of Supervisor</b></h3>
<b>Stephen: </b><span style="font-weight: 400">So a supervisor essentially as a process that monitors other processes. So it has children processes in the supervisor, and you can either have workers or can have other supervisors. So you can get this nice nested hierarchy of supervision.</span>

<span style="font-weight: 400">You can think of it like, the company you're in, right? Hopefully, it's the same company and you're not reporting to multiple supervisors, but you've got a supervisor at the top level, so maybe you've got the CEO, CEO has its own set of supervisors that’s the CIO, the CTO, the CEO, all of these other whatever levels that organization has, they have their supervisors, but they also have people who don't supervise and do stuff. So they may have administrative assistants, they may have some other people who do research for them gathering data, go to meetings for them, but they don't report, they may have consulted, uh. Not consultants as in contractors, but people that they go through and say, okay, you're my sounding board, so I'm going to bounce ideas off of you. You're a domain expert, so you've got this thing, you've got these, you might have this whole hierarchy of an organization and you have a hierarchy of an organization in your code.</span>

<span style="font-weight: 400">You have a web server that handles multiple web requests. So every time you get a web request coming in. And a lot of applications, you have something that says how many, what requests can I have at a time? Okay, this web request goes off and does some work. It may have its own set of the hierarchy of things to do.</span>

<span style="font-weight: 400">And so all these processes are isolated and you get down to the things that are actually doing the work. And so when this thing does work, It does his job. Supervisor, you can have long-lived workers or you can have just dynamic workers, but when a supervisor detects that the workers are not working, so the supervisor thinks it died, it's not responding to any messages.</span>

<span style="font-weight: 400">It gets a message that this process is terminated. It can take that and it can act on that and say, okay, well, this process has died. What do I need to do? Can I restart that? How do I restart that? And how many restarts can I do in a given period of time? So the supervisor has different, they call supervision strategies and thresholds.</span>

<span style="font-weight: 400">So if this thing keeps crashing and crashing and crashing, well maybe it's time for me to just die myself and let someone else higher handle this error. So it's part of an error propagation strategy too. Dave, Joe, and Mike and Robert have joked about this, have you tried turning it off and on again, that's applied to processes via the supervision strategy.</span>

<span style="font-weight: 400">If you've used Word or Excel or Outlook and something's acting up, sometimes you might have multiple Word documents and this thing is acting up. Okay, well let me close that one Word document. Reopen it, restart it, reopen it. See if it's still acting. If that's acting up, maybe I close out all my instances of all my work documents that I have open because I have 10 different word documents that I'm working on now.</span>

<span style="font-weight: 400">Okay, well, does that work? Okay, cool. Now I'm back and I'm in a known good state, If not, okay. Well, now I close every office program because there's some shared library code and office and maybe something and some sort of shared state got affected. So maybe I close all of the offices down, close my PowerPoints, close outlook, close Excel, and reopen it and restart Word.</span>

<span style="font-weight: 400">Okay, cool. Now that's working. If that didn't, well maybe it's time to go nuclear and restart the whole computer. Right. So you've got the supervision strategy, which kind of is levels of escalation of, can I handle this air? Yes. okay, let me try, okay, cool, or if I keep getting repeated failures, it's like, I can't handle this. Let's escalate it to the supervisor above me.</span>

<b>Adam: </b><span style="font-weight: 400">It definitely mirrors the way that, like debugging works. I think that also, isn't there an Erlang phrase about to fail fast or I don't know. If you don't know what you're doing, kill yourself. I'm not sure.</span>

<b>Stephen: </b><span style="font-weight: 400"> they talk about failing fast. Let it crash.</span>

<span style="font-weight: 400">Okay. So. Some of that is, again, back to the separation of concerns and do one thing and do one thing well. If your code crashes, there are some things that you might know about like, Oh, okay, I got a file. That file is not there. I expect it to be there, so if I'm writing, I just typed that file and reopened it.</span>

<span style="font-weight: 400">But if there are things that I don't know how to handle, don't litter your stuff with the try-catch in error handling clauses and if checks and all this stuff essentially code for the half your path. And then if you, there's something that you can't do, your code is not responsible. Your process, your code is not responsible for handling that.</span>

<span style="font-weight: 400">Escalate that up. Let the parent, let the supervisor know how to try and handle these failures because then you isolate your error handling from your work and a lot of cases you get some of these languages. Where are some of these, some of this code where? You've got all these guard conditions and you're like, what part is the error handling and error checking and making sure that the contract's good and what part is the actual work?</span>

<span style="font-weight: 400">“And I know I've been in places where I've even written code that was probably 75% error handling and 25% work. And maybe that's a good ratio for that piece of code. Now it's like, okay, how can I actually understand what this is trying to do? And I can look at the error handling as a separate concern, this is okay, here's the case when it crashes, how do I handle that? And so I'm going to let it crash and I'm going to restart from a clean state cause maybe I'm assuming that something got corrupted again.” Okay. The joke of “have you tried turning it on and off again? It goes to your processes.”</span>
<h3><b>Restart from a Known-Good State</b></h3>
<b>Adam: </b><span style="font-weight: 400">So do you still have the 75% of the code that's air handling, it's in a different place or, or is it not needed anymore or</span>

<b>Stephen: </b>Y<span style="font-weight: 400">ou still have some of it?</span>

<span style="font-weight: 400">It gets moved to a different place. So then it gets condensed because now you're handling a set of classes of errors. Instead of every potential different permutation of it. And then the other side is maybe it just goes away in some cases because it gets reduced because you're like, “I don't really care about that class of error. Let me just retry this process. Let me turn it off and turn it back on again. I got into a bad state.” I don't, now I'm like at a certain point, and some of those things are like, well, if I've got my state. And it's not necessarily for your function because I've got an internal state. Let me just retry this and just restart from a clean known state.</span>

<span style="font-weight: 400">That's well, and maybe something because these processes hold their own state. Maybe some message came in that eventually caused it to corrupt its own state and get into a bad state. So you just say, instead of me trying to figure out all those error conditions. How can they get into a bad state? We just say like, “kill and restart it with with a fresh state”</span>

<b>Adam: </b>S<span style="font-weight: 400">o it can be simplifying. That's good. One thing about Erlang and I guess maybe about the actor model in general like it doesn't seem to work terribly well with types. Like, I mean Erlang itself is a dynamical type language, to my understanding. And then like there are other implementations of actors like I know ACA on the JVM, but also it tends to be untyped as well, just because these messages coming into these mailboxes can be anything I guess.</span>

<b>Stephen: </b><span style="font-weight: 400">Erlang is a weird mix because it’s typed. I think it's got eight or 10 types that it can be, and then you just build out more complex types, in a sense that everything is either a tuple, a list, or hash kind of thing, or an atom, which is just something that refers to itself.</span>

<span style="font-weight: 400">So the types of error, the ways more dynamically leading, at least for Erlang and some of this is, I don't think it's impossible to do because they have dialyzer which you can give type specs and document this stuff and it's for outside. Some of the catch is you can be running these systems and running these nodes and the messages might change and evolve.</span>

<span style="font-weight: 400">So the message becomes a little bit more dynamic because you could be dealing with different versions of the code writing because this thing got upgraded and this, this node got upgraded, this node didn't, this process is still running version one of the API where this version is running node three the API, and it tries to send a node, one to node three messages.</span>

<span style="font-weight: 400">So you might have a little bit more dynamic side there with that because you don't necessarily know which code is running and there are upgrade paths that it can go through so you can do some matching and pattern matching, all this stuff. But my understanding was there was more about the dynamic and long lift code because one thing we didn't touch on earlier is it's got code upgrades, which means you can keep your app running and it can hold two versions of your code in memory at the same time. And once it crosses a fully qualified function call, it will upgrade you in the new version of the code. And so sometimes if you say, this function takes this type of a, and now it's type of a prime, well some of that could be due to “How do you compile that when you can be running multiple versions of your code at the same time, and how do you manage those types?” And so I think some of those were just kind of,</span>

<b>Adam:</b><span style="font-weight: 400"> It's a constraint</span>

<b>Stephen: </b><span style="font-weight: 400">That's a little bit of constraint and pragmatic solution that says, sure, I can compile all this and again, it's like if you think of microservices right. I can determine a contract, but that contract is an HDP request or a message and a message to you or something else. If I'm going to communicate across these boundaries, I don't know who, I may not know who is calling me, so I just have to essentially match on these things, handle those messages I can, because it could be any one of these messages and how do I do what type system like that when the types can evolve in the code can evolve and I can have three different versions of my services running at the same time, the kind of thing in which services are going to hit.</span>

<b>Adam: </b><span style="font-weight: 400">So how does it work with the hot code reloading? Like, okay, if I update this, this, a receiver of this, of this, a queue of this message, a mailbox, that's the word I'm looking for, so I update it but now it's expecting like a new field. but then, you know, the old messages are still in the mailbox,  too. So do I explicitly handle that case?</span>

<b>Stephen: </b><span style="font-weight: 400">So each process has its own state and its own message. So when you get different versions of the messages. You can, you have to be responsible for how to match on those different versions of the messages you get in. But you also have versions of your state. So maybe I have a user and instead of having an email address associated with that user in this process manages the state for a user. The state now went from a record or a map of name to string an email to string two and that's version one and version two. It might be the name of string, and Emails instead of email, which is a list of strings. So now you have to say, this state that this process holds onto while it's running, how do I upgrade that internal state of what this user represents?</span>

<span style="font-weight: 400">And so there's a code change callback that gets invoked when it says, “Oh, I see you've got a new piece of code here. We're loading a new piece of code. We're going to take that state. I'm going to give you that old state. Here's the version, and go from version one to version two, and then your code and say, okay, well from version wants to version two I have an email that needs to go to the emails and I put that single email in a list and now I have other things I can do by appending in my new code.”</span>

<span style="font-weight: 400">So there's, some management around that as well that allows me to essentially do my database migration on the fly because my database is just the state that the process holds and not an outside database. It has its own private variable. That's its internal state. That is Database non-persistent holds in memory that it holds onto, but how do I do migrations of that data? That state between version is the code while keeping that code where the</span>

<b>Adam: </b><span style="font-weight: 400">Migrations are per actor and that makes sense. I think you helped to help me to understand that. I have a kind of a general question for you.so how, how do you learn. It seems to me you've used a lot of languages in your time.</span>
<h3><b>Learning Process</b></h3>
<b>Adam: </b><span style="font-weight: 400">You've played around with a lot of new technologies, so how did you learn about Erlang and other things? What's your learning process?</span>

<b>Stephen: </b><span style="font-weight: 400">Yes. Reading a bunch of technical books, trying to find things just across a bunch of different topics, and eventually got me into picking up SSEP, picking up closure, closure evolved into hearing some podcasts about .Net Rocks! with Brian Hunter. Talking about Erlang hearing some other people talk about the Facebook messenger and Erlang and rabbit and Q and Erlang and couple of these things that were kind of getting popular at the time somewhere around the 2010 areas are putting me on my radar, more moved into a job where they had somewhere Lang as well.</span>

<span style="font-weight: 400">So work to pick that up and start putting it on the user group. So the user group became one of those tools for forcing me to learn because now I have to explain to other people. So essentially, I don't have to run the bear. I just have to run. becomes I have to ask you your question. I can answer it. I don't know at this meeting, but now it's something on my list. You understand well enough to explain the answer back at the next meeting in the early days. So essentially the best place to teach from is the person who just learned it. So putting myself in that route, and then the podcast, I find these languages and I hear something else and that works in an interest.</span>

<span style="font-weight: 400">It's like, well, okay. A lot of these podcasts episodes that I do become curious about, okay, let me ask questions. Let me see what kind of high-level concepts I can start to put together and get a very high level, but a very incomplete picture and see how some of these things fit together. What are the common patterns across languages?</span>

<span style="font-weight: 400">What are the common patterns across paradigms as well, as I mentioned, where there seems to be a lot of ideas and functional programming seem to be? Let's do the functional programming idea, which is a good idea. Or let's do the object-oriented idea, which is a good idea. And we're just gonna turn it up to 11 and then what's common between Haskell? What's common between Erlang in what’s common between Elm or Closure and the dynamic versus static languages in the strongly typed languages and what are these things? And like if you listen to me talking to Edwin Braidy about interest is like, I've just heard about this. I still really don't understand this.</span>

<span style="font-weight: 400">Help me explain it. Then eventually I get enough people where I can start to ask more and more intelligent questions, but I also go in knowing that, well, if I'm asking this, I'm sure I'm not the only one, so maybe someone else who doesn't know this can be able to piggyback off my learning.</span>

<b>Adam:</b><span style="font-weight: 400"> I interviewed Edwin Brady too and I have an interesting book and I've been working my way through it, and I found him to be super modest like I was kind of blown away by all the things that this language presented and he was kind of like, go, yeah. This is what it does. A lot of these ideas just came from other places and I'm just polishing them up and presenting them for programmers to use, and he was so modest.</span>

<span style="font-weight: 400">It was a bit surprising. I guess I'm used to people kind of wanting to push their technology. So, speaking of technology and your learnings, what are you excited about right now with all your interviews and your reading? What technologies are on your radar?</span>

<b>Stephen: </b><span style="font-weight: 400">Idris is still one. I want to get deeper in understanding dependent types. Haskell is still a bit on my radar and trying to take some peeks in trying to understand some of the concepts better than enforced purity and say, okay, well I know I get impure. The lists are interesting because of all the meta-programming stuff and creating that codeless data and macros and how do you actually design a real DSL and essentially designed from the outside in and say, well, this is what I want this to be, let me write this and then I'll figure out how to transform this either via macros into something that's actually usable then you get things like reason, which is appealing from a different perspective of how do I take this? This is OCaml made friendly to JavaScript, so it's not quite okay. OCaml syntax, but maybe I could do Ocaml and use their compiler or buckle script, compile OCaml down to JavaScript. But even shorter is if this is designed by the intent that we want to make this bring all these ideas from functional programming and OCaml and make them more easily accessible to the JavaScript community and make it more familiar instead of being looked at and saying like, “this feels like a far stretch because now I've got to learn A a syntax that's completely different along with completely different ideas. Ocaml seems appealing and our Reason seems appealing in the fact that we're taking this and will this be coming up soon enough that it might actually be reasonable that where people talk about coffee-script or TypeScript.</span>

<span style="font-weight: 400">Now probably TypeScript more than coffee-script, but coffee-script a number of years ago or any of these babbles and taking some of these other JavaScript, even if it's future JavaScripts, are finding these functionalities of is Reason close to being something that could be more mainstream, more and more introduced into a workplace environment with people who aren't necessarily the functional mindset co converts, but be able to start introducing this and say, look,” here's the way to do this. You've seen coffee-script, you've seen TypeScript, you've seen some of these other things. How much of this stuff, they thought that far of a leap and now we can start taking advantage of some of these ideas. Elm interesting for the react to stuff.</span>

<b>Adam: </b><span style="font-weight: 400">I think ahead JavaScript is really an interesting space now, isn't it? With all, I mean it's just become the assembly language for a bunch of other languages.</span>

<b>Stephen: </b><span style="font-weight: 400">Yeah, and the closures again, closure script is appealing on a personal level. Elm and pure script are appealing on a personal level. I think. Reason why might have a chance of being one of those nice introductions to getting more functional JavaScript without feeling like the burden of having to learn a new syntax with Elm or pure script or going full-on closure script of parentheses everywhere.  Again, I like Elm. It actually pointed to a couple of coworkers to Elm when we were doing a react project using Redux.</span>

<span style="font-weight: 400">I said “play with this. Look through the Elm architecture. That's an interesting idea that we've had back and forth between these things. So some of that stuff is looking at what are the concepts and what's appealing. That means I can bring that back easier. So in the Elm perspective is how I can understand Elm and the Elm architecture play with that a little bit.</span>

<span style="font-weight: 400">And then bring it back in. Now when we start doing React and Redux, I've got a head start because I've understood the Elm architecture, which is what Redux was kind of ripped off of and exchanged their ideas from. So that's kind of the perspective I take in a lot of this stuff of learning. What are those principles that can come out and what can I learn from the principles that I can then apply, even if I don't get to do them?</span>

<span style="font-weight: 400">Functional programming directly in this thing. I understand those principles and practices that can help make some of the stuff I'm doing more sane than if I were to just go off and not even think about some of the stuff.</span>

<b>Adam:</b><span style="font-weight: 400"> I can understand that, and it's interesting to see these concepts move around from language to language or framework to framework.</span>

<span style="font-weight: 400">Totally unrelated question.  I was kind of stocking you, looking at your blog and I saw that yeah. Are you into, like custom keyboards? Is that true?</span>
<h3><b>Building Your Own Mechanical Keyboard</b></h3>
<b>Stephen: </b><span style="font-weight: 400">Yeah. I got into mechanical keyboards a number of years ago, and then. I haven't gotten in via another co- coworker. I got hooked on mechanical keyboards. He reinforced the ability to do custom keyboards.</span>

<b>Adam: </b><span style="font-weight: 400">Very cool. I have a plank keyboard here and I have my customized firmware. I think it's pretty cool stuff. I actually have a couple of commits and the QMK a keyboard firmware?</span>

<b>Stephen: </b><span style="font-weight: 400">Yeah, my coworker got me hooked on some of this stuff. So I had found Steve washes a modern space next to the keyboard. Post a couple of years ago, and I started following his advice. So I kind of mud on my laptops like, I use them and we'll get them, we'll get the Holy Wars going on a little bit, but because then we use the escape key, and I never used the caps lock key.</span>

<span style="font-weight: 400">I turned the caps lock into control on escape, and then that software was carabiner or it stopped working with high Sierra. So based on my coworker who. Created essentially mini dongles. I went off that route and started doing me USB adapters, so I could actually put the firmware as essentially a keylogger slash translator from what's the song, will keyboard key into what I want, and it kind of just went down the rabbit hole and did a couple of adapters for a coding keyboard that I had, a Doss keyboard that I had.</span>

<span style="font-weight: 400">And then found an old Apple and 0110 from 1984 and 1985 that takes the phone Jack connector and actually created an end adapter. That's a phone Jack connector on one side and RJ 22 and USB on the other side. I started going down that path and within the past year, or actually, within the couple months, I just finished an ergo dose and then started to love them.</span>

<span style="font-weight: 400">So kind of went down a little bit of the hardware hacking route as well. So that's one of the other things that sounded interesting as far as upcoming topics. There's some flex about functional languages running on hardware.</span>

<b>Adam: </b><span style="font-weight: 400">Yeah. The one I've been interested in is because like the QMK firmware that my keyboard runs, and I think ergo docs can run it as well. I have an old ergo doc somewhere like it, it appears to be mainly composed of C macros. It seems hard to understand. So I want to look like a rust version.  because you know, Rust is supposed to compile down to, you know, a very small runtime and C equivalent. So I'd love to see some of these more modern languages. Taking a stab at keywords, keyboard firmware, it will be awesome.</span>

<b>Stephen: </b><span style="font-weight: 400">Yeah. And I've seen some, again, closure with a macro system or some of the Haskell with the types. Do you know that? Yeah, when you did this, you didn't screw up this thing. Some of that stuff, and being able to put that on some of these smaller windows or change other microcontroller boards is something I'm anxiously looking forward to.</span>

<b>Adam: </b><span style="font-weight: 400">Well, I think we went over. But,  thanks so much for your time. Proctor, it's been great talking to you.</span>

<b>Stephen:</b><span style="font-weight: 400"> Thank you for your time. Thanks for having me. </span>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1636</wp:post_id>
		<wp:post_date><![CDATA[2020-07-21 06:00:30]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-07-21 10:00:30]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[012_erlang-and-distributed-systems-with-steven-proctor]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="distributed-systems"><![CDATA[Distributed Systems]]></category>
		<category domain="post_tag" nicename="erlang-language"><![CDATA[Erlang Language]]></category>
		<category domain="post_tag" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="category" nicename="transcript"><![CDATA[Transcript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1638]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[157]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[347]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_archive__thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1638]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>We are teaching functional programming wrong</title>
		<link>https://corecursive.com/055-teaching-fp-with-richard-feldman/</link>
		<pubDate>Mon, 03 Aug 2020 10:00:25 +0000</pubDate>
		<dc:creator><![CDATA[webmaster@corecursive.com]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1665</guid>
		<description></description>
		<content:encoded><![CDATA[Today Richard Feldman shares his story of going from javascript developer to elm developer to functional programming teacher.  Along the way, Richard finds that people are teaching functional programming wrong.  We are teaching it in a way that misses how most industrial software developers learn best.

In this episode, Richard Feldman delves into Elm, his approach, and how to make teaching delightful.

<iframe style="border: none;" src="//html5-player.libsyn.com/embed/episode/id/15453467/height/90/theme/custom/thumbnail/yes/direction/backward/render-playlist/no/custom-color/87A93A/" width="100%" height="90" scrolling="no" allowfullscreen="allowfullscreen"></iframe>

"<span style="font-weight: 400;">If you want to get a different outcome than what previous teaching methods have done. I think you need to try to do things differently.</span>" Richard Feldman

<span style="font-weight: 400;">"If someone says like, “Hey, can you recommend a really good book to get into Haskell?” And if they're not a grad student, I'm like, “I really don't have any strong recommendations for you". If you want to use it at work or you want to use it to build stuff like there is not a single book on Haskell that I'm aware of [...] where like, Hello World is like earlier than a</span><span style="font-weight: 400;"> chapter three." </span>Richard Feldman

"I felt like I knew everything about programming or like I knew close to enough that I was getting diminishing returns and all of a sudden I used Elm and I was like, I know nothing." Richard Feldman

"This is so much better than what I thought was available. I didn't know anything like this could exist and then that's what I wanted to do. I just wanted to build more stuff in Elm. That's kind of what I've been doing ever since." Richard Feldman
<h3><b>Transcript</b></h3>
<em>This is a machine-translated transcript. Podcast page for<a href="https://corecursive.com/teaching-fp-with-richard-feldman/" target="_blank" rel="noopener noreferrer"> this episode is here</a></em>
<h3><b>Introduction</b></h3>
<span style="font-weight: 400;"><strong>Adam:</strong> </span><span style="font-weight: 400;">Could you state your name and what you do?</span>

<span style="font-weight: 400;"><strong>Richard:</strong> </span><span style="font-weight: 400;">Sure. I'm Richard Feldman. I'm head of technology at NoRedInk. We make software for English teachers and I've been a web developer for more than a decade now, almost a decade and a half.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> </span><span style="font-weight: 400;">How would you describe yourself to somebody who can't see you right now?</span>

<strong>Richard:</strong><span style="font-weight: 400;"> I have red hair and a red beard and I don't know I guess those are my most notable distinguishing features.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> </span><span style="font-weight: 400;">Hello and welcome to CoRecursive, I am Adam Gordon Bell. Today, we have a fun story from Richard. It starts off when he is a Javascript developer and he starts learning about functional programming and a language called Elm. </span><span style="font-weight: 400;">Part two though is my favorite, that's where he tries to teach the world about Elm and about functional programming and he hits some interesting problems. In fact, he thinks that people are teaching these things wrong and he has a strategy for teaching things better. </span><span style="font-weight: 400;">Elm, by the way, is a Haskell dialect that compiles to JavaScript, but that is not how Richard would explain it. He'd explained it like this. </span>

<span style="font-weight: 400;"><strong>Richard:</strong> </span><span style="font-weight: 400;">So I'd say, yeah, it's the delightful language for making reliable web apps?</span>

<strong>Adam: </strong><span style="font-weight: 400;">Why does he explain it that way? Well, we will get to that, but let's start back when he was having lunch with one of his colleagues back when he thought CoffeeScript was the coolest programming language ever.    </span>
<h2><strong>Lunch with Deech</strong></h2>
<strong>Richard: </strong><span style="font-weight: 400;">So his name's Deech (that's his nickname). I think Aditya Siram is his full name, so he gives talks about functional programming and stuff, and we happened to be coworkers at the time. I didn't know him before that, but we both lived in St.Louis. So, I kind of knew of him cause we went to the same meetups and stuff. But yeah, I mean, we were working on the same project. I was working on the front end. He was working on the backend, and we both used to go to lunch together and we talked about programming and at the time I was kind of like of the opinion. I was like, man, CoffeeScript is such a game-changer for the front end web development world because the syntax is different, you know, like, you have like, everything's an expression. Can you imagine that? so my sort of worldview is relatively small compared to what it has become since then and he really expanded my sort of horizons. Like he would talk to me about Lisp and about, like my only static typing exposure at that point had been like Java C++ and I guess that's about it, to be honest, but yeah, like Deech and I would go touch and we talk about programming and he's sort of a connoisseur of programming languages. I mean, to this day, like, I don't know anybody who has a more like encyclopedic knowledge of not just mainstream popular languages, but obscure ones too l</span><span style="font-weight: 400;">ike he's given talks about, like ATS and Shen and like languages where it's not just that almost no one's heard of them, but like, he's actually like built non-trivial applications in him. He's not just, you know, talking about it. Like, he read a paper about it or something he's like actually used it and they got a building on his computer and stuff like that b</span><span style="font-weight: 400;">ut, yeah, I mean, he really expanded my horizons and, and sort of convinced me that, it would be worth my time to try one of these languages out. And I really underestimated how right he was about that. I mean, it really completely changed the course of my career and my relationship with programming like </span>

<span style="font-weight: 400;"><strong>Adam:</strong> what did he say that like, he's like, you got to check out ATS and you're like rolled your eyes or no? </span>

<span style="font-weight: 400;"><strong>Richard:</strong> No. I mean, actually ATS talk is called not a taste of ATS, but a tase of ATS because it's pretty painful. He has two different talks he's given on ATS and they're both pretty funny. </span><span style="font-weight: 400;">The strangely one, in particular, I really was in the audience, I was laughing my head off because I mean, he pokes fun at like all of the sharp edges in the language of which there are many.</span>
<h2><strong>Maybe You Should Look at Haskell</strong></h2>
<strong>Adam: </strong><span style="font-weight: 400;">So your friend Deech, he got you excited about, about I guess like Haskelly type languages. It sounds like that was that.</span>

<span style="font-weight: 400;"><strong>Richard:</strong> </span><span style="font-weight: 400;">Well, there were two categories of things that he really kind of opened my eyes to. And they're arguably two different extremes although I think he would be quick to point out that these are neither of them is that extreme, he would give off a few examples of things that are more extreme in either direction but in the popular discourse, the two extremes would be Lisp on one side and Haskell on the other, Haskell being very much about doing things at compile-time and Lisp being very much about doing things at runtime, I guess, other than macros, those are the things that Lisp does it compile time.</span>

<span style="font-weight: 400;">But yeah, he opened my eyes to sort of both of those and like the idea that you could have languages that were a lot simpler than like, at the time I'd done like Java, Javascript, C, C++, Pearl and CoffeeScript and like way back in the day, like Basic and Visual Basic. So those, whatever that is half dozen or so languages were sort of my main exposure to like the range of programming languages like Lisp is just a way simpler language then. I mean, like fundamentally more than any of those languages and half is a way more complicated language than all of those except maybe C++.</span>
<h2><strong>Writing a Novel</strong></h2>
<strong>Adam: </strong><span style="font-weight: 400;">In this time period, when Richard was working with Deech and talking to them about programming languages, he was also working on writing his own fantasy novel. </span>

<strong>Richard: </strong><span style="font-weight: 400;">So I've been kind of casually into fiction writing for a long time, probably since before high school even and at some point, I decided that I was going to write a novel. And so I went out and looked at all the different novel writing software out there and I tried a few different things and none of them really fit with the way that I wanted to do it, which was kind of like I wanted to write one long continuous document, but I also wanted it to be structured in a sort of chapter centric way like there were certain things I wanted to know about each chapter, like how many words per chapter and like which characters appear to which chapters and things like that and I couldn't find something that was all of those.</span>

<span style="font-weight: 400;">Everything was either too structured, you had to edit only one chapter at a time and you couldn't see the flow of how things transitioned between chapters or they weren't chapter-centric enough and so, being a program right. Decided to scratch my own itch. Being a web developer I naturally gravitated towards building it in the browser and I made the first version in JavaScript and used it and I wrote quite a lot of words in it, tens of thousands of words and I kept adding features and tweaking it and eventually it got to the point where it was unmaintainable anymore. The straw that broke the camel's back, as I recall, was that I broke paste somehow, paste wasn't working anymore, just copying and pasting and the way that I would work around this was if I wanted to copy and paste something, I would just go to go into inspect element and like copy out of the Dom and then paste it somewhere else in the Dom or chunks of HTML, move them around, inside the content editable, which, you know, was no way to live.</span>

<span style="font-weight: 400;">I couldn't figure it out, I didn't want to go back to before. I chose the regression because I couldn't, I also didn't want to live without the features that I built that caused their regression. So I know at some point I'm going to have to rewrite this thing because it just became too much of a disaster.</span>
<h2><strong>Thinking About The Rewrite</strong></h2>
<span style="font-weight: 400;"><strong>Adam:</strong> </span><span style="font-weight: 400;">Do you see where this is going? So Deech is telling (Richard). Haskell is awesome. Lisp is awesome. ATS is crazy. I don't know, Deech is just selling him all the beauty of these different programming languages and then Richard is working on his writing app and it's just falling apart. So obviously he decides, “Hey, maybe I should try something Haskell-y for every right?”</span>

<strong>Richard: </strong><span style="font-weight: 400;">I was convinced that I wanted to try it, but I didn't want to literally try Haskell because you can't really build UIs with Haskell proper, and building UIs is what I really like to do. So, I was really hoping for a language that I could use in the browser to build UIs, but still those like a pure functional language with type inference and all that.</span>

<span style="font-weight: 400;">So, at first, I thought that language was a way to be Roy, which was the language that Brian McKenna made but he got stuck partway through making the compiler and he ended up not finishing it. I was sad about that because who knows when something else is going to come along, so I actually got really excited about the pure script because pure script also checked all those boxes. </span>

<span style="font-weight: 400;">The one thing that it didn't have that kind of kept me from trying it out was, it didn't have a virtual dom. So, between when Roy came out and when I was looking to rewrite, the dream writer React came out and I started using it and I got really into it and really liked it and I really was like this</span><span style="font-weight: 400;"> is a deal-breaker for me. I got to have a virtual dom and at the time Pure Script didn't yet have one. There was one project, people were working on React bindings, and I was cheerleading in the comments. So I don't know anything about this language, but I really hope to get these bindings working so I can use them.</span>

<span style="font-weight: 400;">And I've learned the language and while waiting for that this blog post came out, that was a blazing, fast HTML in Elm. And it was basically announcing not only does Elm now have a virtual Dom, meaning it checked absolutely all my boxes, but also there were benchmarks showing it's actually quite a bit faster than most of the leading alternatives at the time, like React, Angular and Amber and all that.</span>

<span style="font-weight: 400;">So, I just sort of was like, “Wow! this is everything that I was looking for. I guess now I'm going to learn this and try to figure it out.” So what I did was I started my rewrite of a dream writer. Then I took the MBC example for Elm, and I just tried to figure out how to use the language and build it up from scratch a</span><span style="font-weight: 400;">nd so I ended up rebuilding a dream writer to do MBC basically from scratch and I never quite got it to feature parody, but I got to the point where I switched over to using it because it was so much less buggy and actually it wasn't buggy at all at the new version, just everything kind of worked and it was great. And I wrote probably around 60,000 words in that before my novel ended up getting derailed by just getting so into Elm, I started spending all my free time doing Elm things instead of writing fiction.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> </span><span style="font-weight: 400;">Did you finish your book?</span>

<span style="font-weight: 400;"><strong>Richard:</strong> </span><span style="font-weight: 400;">No, I still have it and one of my friends is still waiting for it. He's like, “Hey, yeah, you're finishing it?” I'm like, “No, no” because I've been sending him chapters along the way and he really liked the story. But, it's hard. I mean, I just fell so fully in love with Elm that I just started spending absolutely all of my free time just doing Elm things and never looked back.</span>
<h2><strong>The Elm Rewrite of Dream Writer</strong></h2>
<span style="font-weight: 400;"><strong>Adam:</strong> </span><span style="font-weight: 400;">So what happened? You have your dream writer and you start rewriting it. Did you just take a weekend and you started just trying to pull out parts and try them out and Elm or what was the experience like?</span>

<span style="font-weight: 400;"><strong>Richard:</strong> </span><span style="font-weight: 400;">That would have been smarter. The smart way to do it is incremental. But that was not what I did. What I did was I just started with ToDoMVC and just started adding onto it, to add a text, editing and add this and that until it and add CSS.</span>

<span style="font-weight: 400;">I did keep my style sheets because I had them all in a separate style sheet. So I ported that over directly but all of the logic and all the rendering, I just rewrote from scratch, from the ground up and didn't keep any of the old stuff. So at first, it was, it was not just one week, it took a while before it was back up to the point where I could use it as my primary fiction writing thing again.</span>

<span style="font-weight: 400;">It was really nice, it was a good experience, although it definitely would have been faster and I would have been able to have something usable sooner if I'd done it more incrementally. I just, “Hey, that didn't occur to me at the time.” I didn't really know that it was going to be faster because I hadn't had any experience with Elm yet.</span>

<span style="font-weight: 400;">I mean, not there weren't many people using it back then. Like in those days there was one Elm meetup, which was the San Francisco Elm meetup and by sheer coincidence, I happened to be living in San Francisco at the time. and I went to it, and there were like 15 people there and so </span><span style="font-weight: 400;">very small community at the time. Wasn't a lot of like, -- Hey, how do you know, get advice on how to use element work? Whereas now you just hop on Elvis Slack. It's like, you know, 20 people immediately respond like, “Oh, here's how to use element work” And the advice they'll probably give you is to introduce it incrementally.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> </span><span style="font-weight: 400;">Yeah, I can see why that would be more palatable. I imagine like because I've taken a side project and tried to redo it before and gotten like partway through, any other regretted my decisions or abandoned things like, did you have moments of questioning your decision?</span>

<strong>Richard: </strong><span style="font-weight: 400;">I have on other projects, but not on this one. I mean, I was just having so much fun. I didn't. I mean, as I said, I just stopped wanting to do other things because it was just so much fun to build more stuff in Elm. I've been programming since I was nine and it just never, nothing has felt like this since like, when I was 10, I got Visual Basic and I could make UIs a</span><span style="font-weight: 400;">nd I was like, “Whoa! this is such a game-changer.” Then it was like another, you know, almost two decades of C++ and Java and whatnot and everything. I felt like I knew everything about programming or as I knew close to enough that I was getting diminishing returns and all of a sudden I used Elm and I was like, I know nothing. </span><span style="font-weight: 400;">This is so much better than what I thought was available. I didn't know anything like this could exist and then that's what I wanted to do. I just wanted to build more stuff in Elm. That's kind of what I've been doing ever since. </span>
<h2><strong>Everything was Different</strong></h2>
<span style="font-weight: 400;"><strong>Richard:</strong> I can tell you, the confidence I had in changing my Java codebase compared to my old codebase, it's almost like Java might as well dynamically typed. I mean, for the amount of help that I'm getting relative to what I experienced at Elm.</span>

<span style="font-weight: 400;">I mean, it was just totally night and day different. I completely and I thought going in, that the type inference was going to be a big difference. I thought that it was going to be like, “Oh, this will be like Java, but without all the ceremony” And it was, but it turned out that that was such a small benefit compared to the real big benefit, which was -- what if the APIs and the compiler are in cahoots to make an amazing refactoring and maintenance experience, like nothing you've ever had before. That was the real benefit, but I had no idea that's what it was going to be coming in. I mean, other than hints I got from talking to Deech like, I didn't know what that was like until I had sort of felt it and then everything was different.</span>
<h2><strong>Elm At Work</strong></h2>
<span style="font-weight: 400;"><strong>Adam:</strong> </span><span style="font-weight: 400;">Did you like to go into work and find a Deechor start telling people about how great this was?</span>

<strong>Richard:</strong><span style="font-weight: 400;"> So at that point, I actually worked at a different company. I worked with Deech in St. Louis, but this was in San Francisco. I had a new set of coworkers and I did talk to them about it, but it was quite a while before I actually introduced myself to it at work, because I felt that, I just thought it was too risky. We were a small startup and I was like, well, this is an unproven technology, you know? I mean, I've sort of proven that it's great for my side project, but that's not the same thing as, you know, being usable at work but, eventually we got to a point where, there was one particular project that we worked on at work where it took several months to complete and a large part of that was because we kept having to make major design changes to it based on user feedback.</span>

<span style="font-weight: 400;">Like we make a version, take it out, test it out on it. These were students -- we were trying to teach middle schoolers how to do active voice and passive voice was a hard concept, even for adults and so we kept taking it out a prototype and trying it out on them and then just watching a total flop and they weren't getting it.</span>

<span style="font-weight: 400;">And then we'd go back, it's like, we care about efficacy and actually like teaching kids concepts. These days it's a lot more writing concepts than grammar like that one was. But, is like, getting real feedback is important to us. I basically had the experience of, this is like, you know, react to at the time of, I would come back and be okay, we need to make these major design decisions.</span>

<span style="font-weight: 400;">All of my tests are invalidated by the new design. What can I do to get it back in a working state? And after having gone through a couple of these, I was like, - Wow! you know, when I would make major changes to dream writer, like even bigger ones than this, I would just change, change, change, change, and then just follow the compiler error messages until everything worked again.</span>

<span style="font-weight: 400;">And then as soon as it compiled it pretty much always just, immediately worked and so like comparing those two experiences at some point, I was like, you know, if I could go back in time and like to introduce element work, it would have paid for itself on this project alone t</span><span style="font-weight: 400;">hen like all future projects would be easier to maintain. So I was like, I think I was just too risk-averse. I think I missed an opportunity to use something that I knew was better, because I was like, afraid to commit, I guess so I was like, let's not do that again and let's actually use it on our next project.</span>
<h2><strong>Doubts About Elm</strong></h2>
<strong>Adam: </strong><span style="font-weight: 400;">I like what Richard said  “Hey, let's use this on our next project.” Richard is certain, that Elm is revolutionary and it's going to change the world and it's since become popular. But at that time, basically, nobody was using it and he was going to use it for their front end of their commercial startup project. I guess I would always be worried. Like if I championed something and it seems a little obscure that we'll hit some limitation I wasn't aware of and we'll be like, “Oh God, what did I do?”</span>

<span style="font-weight: 400;"><strong>Richard:</strong> </span><span style="font-weight: 400;">Yeah. I mean, that's definitely a valid concern. Elm has JavaScript to interrupt so there's always that sort of fallback if something's really not working, it's not like, “well, there goes the whole project.” It's like, well, okay, we'd have to introduce a little workaround here in JavaScript. But it has occasionally happened that we like needing to dip into JavaScript for one thing or another. Actually rich text editing is a good example of that. We use Quill.js or something, which is like a really, fully-featured rich text editor for some stuff at work. I was a little bit worried about that, but I kind of figured worst comes to worst,  we can interrupt like the old way of doing things and that'll be fine.</span>
<h2><strong>Advocating For Elm</strong></h2>
<span style="font-weight: 400;"><strong>Adam:</strong> </span><span style="font-weight: 400;">Richard's committed to bringing Elm to work, but like JavaScript is JavaScript and everybody knows it where Elm is like a purely functional programming language that's case sensitive. And you know, it's based on high school, which is famously confusing to learn. Unless my front end developers were also like PL post-grads. I don't think I would just assume that they would jump in and be fine and you know, even be faster than they were one of his JavaScript. </span>

<span style="font-weight: 400;">So you were motivated to learn this, but once you like to get people at your company on board, was that more of a challenge?</span>

<span style="font-weight: 400;"><strong>Richard:</strong> </span><span style="font-weight: 400;">At the time, there were two things that I had going for me that made it easier to adopt Elm. And by the way, like most people, today have an easier time adopting Elm than I did back then because the community is much bigger. It's way more battle-tested, it's actually pretty stable at this point, too. So you can just look around at all the existing success stories and be like, well, let's just do what they did. But back then, there was like one company that I knew of that was using it in a production Circuit Hub and Prezi was thinking about it, the team was pretty small. That was one thing I had going for me. There were only two people who are working on the front end and I was one of them and the other one was, it was his first programming job, out of a boot camp so he wasn't really gonna push back on my front end architectural decisions.</span>

<span style="font-weight: 400;">The other people at the company knew like they understood that this was kind of a risk, but, you know, I was obviously going to be sort of taking responsibility for it so if it didn't work out, you know, they kind of trusted me to, you know, deal with the consequences of that. But the other thing was that I had a lot of credibility because, the only other one time that I'd really strongly recommended and advocated for our front end technology.</span>

<span style="font-weight: 400;">It was React because React came out while I was working at that company and I tried it out and I was like, this is great. This is going to be really big, we should start using this and even this is, I don't know, maybe a year and change after React come out soon, less than two years after React came out, that I was advocating for Elm. But it was pretty clear that React was a good choice. It had moved the needle positively for us. This was way before React sort of took over the front end world. To this day, I maintain that for me personally, I think there were three big milestones in the frontend, web development number one was jQuery. Number two was React and number three was Elm and I think everything else in between is just almost, it's just, it's kind of noise compared to those, at least for me and I think those three are not the same in magnitude, because I think the gap between jQuery and React is smaller than the gap between React and Elm.</span>
<h2><strong>Teaching Haskell Wrong</strong></h2>
<strong>Adam: </strong><span style="font-weight: 400;">So pure functional programming according to Richard -- it's revolutionary. Elm, is the biggest breakthrough in front end programming since ever if I understand him, if this pure functional programming style is so powerful. Why isn't it more popular? The reason Richard says is people are just teaching it wrong. </span>

<span style="font-weight: 400;"><strong>Richard:</strong> </span><span style="font-weight: 400;">I think there's a really big gap in how effectively Haskell is taught versus how Java is taught and to be on the nose about it. I think that the way that people teach Haskell is, basically, extremely focused on being able to teach like very motivated graduate students and if you're not a very motivated graduate student, you have basically no one who is interested in teaching you a Haskell, or at least there, there is no material out there. And when I say no, I mean, like we started using it at work and we looked for it and we couldn't really find any like really commendable material that's like for the audience of someone who wants to use Haskell at work, I mean, none and at least from my perspective as like someone who's spent probably over a thousand hours at this point, like teaching specifically pure functional programming in the form of Elm granted. There's a lot of overlap in the concepts that I know like I've tried different ways of teaching that I've learned some that have worked and have not worked,</span>

<span style="font-weight: 400;"><strong>Adam:</strong> </span><span style="font-weight: 400;">Like there are Haskell books, I know, there are lots of Haskell books.</span>

<span style="font-weight: 400;"><strong>Richard:</strong> </span><span style="font-weight: 400;">There are, yeah and yet when people ask me for haskell book recommendations, I have like, basically I say like, if someone says like, “Hey, can you recommend a really good book to get into Haskell?” And if they're not a grad student, I'm like, “I really don't have any strong recommendations for you". If you want to use it at work or you want to use it to build stuff like there is not a single book on Haskell that I'm aware of and again, as I said, I've looked, and I know people who have looked, that's like build a thing in Haskell where like, Hello World is like earlier than a chapter, </span><span style="font-weight: 400;">I'm going to say chapter three, but I usually like Hello Worlds around like chapter seven. Like that's the norm, you know? Because printing to the console is IO and the way that the Haskell books are laid out is, you talk about monads and monologues and Funkster's before you get into IO and you don't have to, but that's how they're all taught.</span>

<span style="font-weight: 400;">Like Elm has exactly the same restrictions where it's a pure language. There's, you know, the side effects are managed, and yet chapter two of <em>Elm In Action</em> is to build an entire working page, like build a whole interactive website, because you can do that. You can teach it that way. There's absolutely like chapter one is basic syntax and chapter two is like building a whole working interactive thing and then I teach the rest of the language from there is no reason whatsoever that you could not teach Haskell exactly the same way. Chapter one: basic syntax, chapter two: build an interactive thing that works and uses effects but again, it's culturally just not done that way and in my mind, I think that's a major part of the reason that specifically pure functional programming is not as popular as it is today is that it's just inaccessible to a lot of people. I mean I personally tried to get into it - Haskell that way and ultimately the way that I got into Haskell was just, I mastered Elm first. And then after I had already mastered Elm, Haskell was, you know, there was like, just a Delta of like things I didn't know. And I was able to learn those, having already learned sort of the fundamentals of pure functional programming, the easy way through Elm and then not as intimidating.</span>
<h2><strong>Talks Can Lead You Astray</strong></h2>
<span style="font-weight: 400;"><strong>Adam:</strong> </span><span style="font-weight: 400;">Tell me why you think that people are teaching these concepts, like pure functional programming wrong.</span>

<span style="font-weight: 400;"><strong>Richard: </strong></span><span style="font-weight: 400;">So I don't want to say that they're teaching it wrong. I think it's more that they're reaching for a particular audience. And I don't know if that's intentional, but I think that I mean when I look at who we're the people who tend to be successful at learning and trying out Haskell and they pretty much fall into two groups. </span><span style="font-weight: 400;">One group is people who are unbelievably determined and they just keep banging their head against the wall and making a little bit of progress and then eventually they grind it out and they are able to build something, really without a whole lot of help from teachers or from books. I mean like, yes, definitely some like introductory material, but like, there's very few people who are like, "Oh yeah, I just, I read about I'm going to have transformers and I got it a</span><span style="font-weight: 400;">nd then I just used them" you know, like you don't hear that it's really, they just like, there was a long grind and then eventually they got there but the other group of people is like I said, graduate students. I mean, people who are used to reading academic papers and, like a lot of papers and, you know, understanding them and are familiar with a lot of terminologies that people who primarily do programming work in the industry are not familiar with and a</span><span style="font-weight: 400;">lso, there's a particular way of instruction. The way I like to think of it is like, let's say I give a talk to a room full of people at a conference and at the end of the talk, I mean, I've done this many times. I've lost count of how many conference talks I've given at this point. At the end of the talk, some numbers, some small percentage of the audience will come up to me and say, “Oh, thanks, I really liked your talk.” And, and I'll say, “Oh, thank you.” And I really appreciate it when people do that and then they'll maybe ask me some questions about it and everybody else in the room will walk out of the room because they're done with the talk they're moving on to the next talk. So I don't get any feedback about what percentage of the audience understood anything. </span><span style="font-weight: 400;">I just said. I mean, I have no idea if, if it just bounced off of everyone, all I hear is, “Hey, nice talk.” So, based on that as a teacher. If I'm teaching a workshop, it's different. If I'm teaching a workshop, I like going around and seeing what questions people have as they go through the exercises. There are certain questions I'm like, “Oh, you're really stuck. you’re not getting this at all.” versus other questions where it's like, “Oh, you, the fact that you're asking this question means that you understood it at an even deeper level because I didn't tell you the thing that would lead you to, you know, know the answer to that.” </span><span style="font-weight: 400;">By the fact that you're asking means that you absorbed what I've talked about so far. So I don't know how someone writing a book about Haskell would like to get that feedback. So when I say, like, I think there are two groups, it's based on I'm filtering for the success stories. I hear, like, I look at like, who's in the Haskell community, who are the people who said I learned Haskell and how did they say they learned it? And one group is the people who went through a grind and just like push through it a</span><span style="font-weight: 400;">nd the other group is people who had a background in like, graduate-level, computer science. and there is not really a third group. That's like, I used Python before this, and then I learned Haskell and it was fine. You know, I learned, I knew JavaScript. I went to Haskell went to Java which was no big deal. </span><span style="font-weight: 400;">It's always a big deal and so, my sort of like proof of like this being the de facto audience for the instruction is just, that's the group that successfully learns from that instruction period. That's, that's the whole, that's the entirety of that group everybody else struggles through it, on their own somehow. And it sounds like that's how you did, like, it sounds like you're in the nongraduate student group. That sounds like your story.</span>

<span style="font-weight: 400;"><strong>Adam: </strong></span><span style="font-weight: 400;">Yeah, well, I mean, and also I'm not programming Haskell for my day job. Like that was just an experience I had where I grounded out. Yeah. Probably bounced out around somewhere around monad transformers and which was the corrector in fashion way to do it. </span>
<h2><strong>Types and Stuff</strong></h2>
<span style="font-weight: 400;"><strong>Richard:</strong> B</span><span style="font-weight: 400;">ringing it back to your original question. I don't want to like point fingers and say that it's being taught wrong. I think that's like the natural way that it would be taught because that's, that's it's the origin story. That's where it comes from. It was, it was built by academics for academics. So why, how could it not have an academic focus and like the culture and how it's taught? Really the kind of weird thing is that it's being used in the industry despite that very intentional academic focus and so when I say that, I can't find materials that are geared towards learning it as a, as someone who is a professional programmer and not with no academic interests. Really. I don't mean to say that I, like Haskell, should feel bad about that. Or like the Haskell community is like, you know, wrong for not having produced this magical book that would be convenient for me at work but rather to say that, you know, just to make an observation that like, that's what the status quo is. And I think that when people express, like ask the question, why isn't Haskell used by more people, even though it has all these benefits? I think that's probably the biggest reason honestly, is just that the teaching materials are all historically so geared toward an academic audience, even if they don't say they are like, I mean, if you look at who succeeds in getting through them, it's an academic audience primarily and people in industries tend to struggle through it at best.</span>

<strong>Adam: </strong><span style="font-weight: 400;">I mean, I would characterize things stronger than what you said. I mean like, cause people to learn the language and they get excited about it. They immediately move to step two, which is like advocating for it and right. Writing tutorials and whatever. And if people are bouncing off of those, I mean, they've failed to a certain extent.</span>

<span style="font-weight: 400;"><strong>Richard</strong>: </span><span style="font-weight: 400;">I think, teaching is hard. I mean, at least that's been my experience with it. I had a lot of hypotheses about the best way to teach Elm. I mean, I was very surprised when I started teaching workshops at what things people got stuck on. and I had to like, just learn differently and experiment with different ways of teaching it before I found out what stuck and if I hadn't had that feedback loop of actually being able to try stuff out on real students and then see how it worked for them, and then iterate with a fresh batch of students who were also coming in from scratch. The reason I was able to do that was, so, I agreed to do a workshop on Elm for front end masters and Mark who runs in front of masters recommended -- we've seen people who do this work, do these workshops. you can really tell the level of like polished and quality, the difference between people who have done like only. One run through versus upwards of five, run-throughs like ahead of time of like doing the whole course. </span><span style="font-weight: 400;">This is going to be a two-day course, like eight hours each day. And so, what I did was I went to local boot camps and I said, “Hey, I will teach your students a free learn Elm workshop, you know, over this weekend, if you want, just, just give me a room at a projector and I'll just do that.” And they can just have that. If anyone wants and I did this, I think I did it six times, actually, six or seven, before in front of masters, then I did frontend masters, and then I revised the material and then did front end masters again, two years later, after doing more dry runs of the new material a</span><span style="font-weight: 400;">nd I did an advanced course and did the workshop at other conferences as well and so at this point, I mean I've revised the material a lot and learned a lot about a lot of those things. And if I were to imagine like, knowing what I know about. And again, this is like pure functional programming, which is not, what's taught in schools and it's not what sort of boot camp.</span>

<span style="font-weight: 400;">So it's not like you can just, there's not a playbook for how to do that. So I, as I said, I mean, I want to be very careful to not say like people in the Haskell community are messing up or like, or, or are, doing a bad job. But I, do think, I mean I agree with you that there's a gap between m</span><span style="font-weight: 400;">aybe like expectations, in reality, they're like, I think people say, look, what, how many Haskell look at the number of Haskell books? There are, clearly the problem is not education, but I would say like, I mean, yes, look at the number of high school books there are, but they're all written in like variations on the same way, which is, you know, I mean, like one of the really popular ones, chapter one is not like, like Elm In Action.</span>

<span style="font-weight: 400;">Chapter one: syntax chapters do build a whole interactive application chapter. One of those books is Lambda Calculus and that's like, one of the most recommended Haskell books so, I mean, You can say like, that's, you know you can say whatever you want about that b</span><span style="font-weight: 400;">ut like if chapter one is Lambda calculus then, and do you think that your audience is industrial programmers? I mean, something has gone wrong so clearly the audience is intentionally going to be people who are academic or at least academically-minded and how they're going to approach learning the language.</span>

<span style="font-weight: 400;">There are lots of success stories with Haskell. I mean, like it, there are lots of people who learn it and use it in grad school or even in undergrad or even who don't have a computer science degree and just like learned it because they were interested in it. but I bet you, if you try to find people who successfully learn Haskell and, read fewer than one academic paper per month on average, it's, it's not going to be people who just like read a book and learn it that way, is going to be a lot more struggling and trying to build things and having a tough time of it but being determined to persevere through that anyway,</span>

<span style="font-weight: 400;"><strong>Adam: </strong></span><span style="font-weight: 400;">No, I think it's a great point and it feels like the meta lesson that I take away is like, “Hey, like test your stuff.” Right? Like, get out there, get exposure, to like your learning approach.</span>

<strong>Richard: </strong><span style="font-weight: 400;">I honestly feel pretty lucky that I happened to be living in San Francisco and there were these boot camps and there was an interest on the part of their students to learn Elm on the weekends, you know, for free, I honestly don't know. </span><span style="font-weight: 400;">Like I want to know that I say that I bet that would work for Haskell too. Like if you were in a city with a lot of boot camps, so like San Francisco, New York, that probably works fine. I mean, not right now during the pandemic, but you know, in a normal year, I bet that that could possibly work but definitely, iteration, is important I think, to be able to improve it that and I think also recognizing that, If you want to get a different outcome than what previous teaching methods have done. I think you need to try to do things differently.</span>
<h2><strong>How Do You Teach Differently</strong></h2>
<span style="font-weight: 400;"><strong>Adam:</strong> </span><span style="font-weight: 400;">If the rule, so the meta-rule is like to test out your, your learnings, but like we like, what did you actually learn in teaching these thin, how did that change -- how you teach?</span>

<span style="font-weight: 400;"><strong>Richard:</strong> </span><span style="font-weight: 400;">Yeah, totally. Also, the most surprising thing was actually around syntax so Elm syntax is overall pretty similar to Python syntax. It's almost identical to Haskell syntax actually but the big difference is that when you call a function, like in C for example, you say function, name, ( arguments, separated by commas ). I'm very familiar with that with a lot of people in Elm, it's actually more like a CoffeeScript in that you. It's function name, space arguments, and the arguments are not separated by commas. so there's strictly less than texts there in the sense of it's just like spaces. Everything's separated by white space, it's kind of like enlist the difference is, that if you do a nested function call, in like, for example, JavaScript you don't learn any new rules. The rule that you just learned is like, you know, just do the same thing, just call the function.. but, because an Elm and Haskell that would be ambiguous, like since they're all spaced separated, you wouldn't be able to tell where one function called began and the next one ended or vice versa. So what you do is you, you introduce parentheses kind of the same way that you would in like a nested, math expression, or you put parentheses around the entire nested function call. people aren't used to that in a lot of cases if they come from like a C syntax language.</span>

<span style="font-weight: 400;">What I would see is that students would attempt to put the parentheses where they are used to them going like. Touching the function, like immediately after the function name, but that's actually a different grouping than what you want. So they get compiler errors and they wouldn't understand why they were seeing it, because they'd be like, "wait, why is this so off?" Because usually, the only thing that I've found in teaching elements that the compiler helps out a lot and like, cause it gives very even spent a lot of time like making the error message is really helpful. and so a lot of my revisions to the course material were like, I actually don't need to spend time teaching this because if I don't mention it, the subset of the class, that's going to stumble over that the compiler will tell them exactly what the problem is and explain what they should have done and then they'll just learn it that way, so trying to condense the material and like, there was a lot of time that I spent trying to eliminate things that I was saying out loud. So that, basically students could have, like less mental bandwidth thinking about edge cases and more just like letting the big concepts sink in so I guess that was, that was kind of maybe my biggest macro-level takeaway. Like the parentheses is maybe the most micro one, but the biggest macro one I think was, was trying to intentionally remove things from the curriculum and like, not to mention edge cases out loud, if they weren't important to what they were going to learn to just basically like have faith in that what I'm teaching them, whatever the scope of that is, whether it's a workshop or a blog post or a book, this is not going to be the end of their learning journey and just have faith that like they're going to, they don't need to learn about every single detail right now, quite the opposite.</span>

<span style="font-weight: 400;">They mainly need to learn enough to make it through there, what they're learning right now so that they don't get blocked and are able to move on to sort of the next phase of their learning and realizing that it's totally fine. If some, and in fact, a lot of their learning happens outside of the scope of what I'm doing and trying to like manage my scope accordingly.</span>
<h2><strong>Sequence and Scope</strong></h2>
<span style="font-weight: 400;"><strong>Richard:</strong> And all of the learning stuff I've taught I've, I've tried to pair down the scope to like say, okay, what's the goal? There's a term I learned at work because we make software for teachers, a <strong>scope</strong> and <strong>sequence</strong>. It's like what is the set of things that you want the student to be able to walk away knowing like what they should be able to do? Like we say, finish the sentence, like after this book or after this workshop, students will be able to... and then work backward from there to figure out, okay, what is the list of things they need to learn?</span>

<span style="font-weight: 400;">And in what order should I teach them so that they're learning things that build on what they just learned rather than. You're like, okay, you're going to learn this and then we're not going to use it for another three chapters, but, you know, remember it for them because of course, they won't remember. I try to teach it like right before they're about to use it.</span>
<h2><strong>The Book</strong></h2>
<span style="font-weight: 400;"><strong>Adam: </strong> </span><span style="font-weight: 400;">So you do this workshop, teach people Elm, you have this new pedagogical approach. That's kind of crazy, like build things, which doesn't sound crazy.</span>

<span style="font-weight: 400;"><strong>Richard:</strong> </span><span style="font-weight: 400;">I wouldn't call it crazy. I mean, it's unusual within the realm of pure functional programming, but it's the norm everywhere else.</span>

<strong>Adam:  </strong><span style="font-weight: 400;">So how did you get into writing a book? I have your book here by the way.</span>

<strong>Richard: </strong>Nice! <span style="font-weight: 400;">There it is. I mean, someone at Manning reached out to me, so I was at that point, one of the few members of the elder community who had given any talks about it, I think I had given a talk at a strange loop at that point. Although I forget that may have been before the strange we've talked to be honest, when they reached out, I gave a talk at a meetup about a dream writer.</span>

<span style="font-weight: 400;">That was the first talk I ever gave and it was recorded and it was on YouTube and it got shared around a little bit. so I don't remember what the exact chronology when they reached out, but basically they were like, Hey, we've decided we're gonna do a book on Elm. and we're looking for authors. So, it wasn't so much that I had decided I wanted to write a book, but rather, I mean, I obviously like with fiction writing, I had done a lot of writing in the past. I have done a lot of nonfiction writing too. I actually used to write, I had a weekly column for Magic the Gathering strategy website back in the day, back in college I had some experience. I knew that I was capable, of writing both long-form stuff from, you know, writing all this, all the novels at that point. and writing nonfiction from these strategy articles but I'd never tried, you know, writing a whole book about programming. I'd only at most written blog posts.</span>

<span style="font-weight: 400;">But basically what happened was, when this guy, Mike, it was like, “Hey, I want to do a book about Elm. Can you hop on a call?” and we'll talk about it. You know, potential authors. I was like, “Sure.” So here are the people in the Elm community I could recommend and at some point, I was like, I don't remember if he asked me, I think I just started volunteering this, but I was like, by the way, I think if you're going to do a book on the element's really important that... </span>

<span style="font-weight: 400;">I basically said a lot of the stuff we just talked about, like it should be, you know, about building stuff. It should not be about theory. There are a million books on pure FP that are theory, there is basically none that are focused on building stuff you know, and I also, I had some other opinions about like in particular, this may be culturally changing, but at the time.</span>

<span style="font-weight: 400;">Everybody in the front end community was doing JavaScript and was doing it dynamically typed. TypeScript was, I mean, this was 2015, so TypeScript was, it existed? but it was just, it was nothing. I mean it was probably about the sciences at Elm to be perfectly honest at that time d</span><span style="font-weight: 400;">espite the fact that the learning curve was basically zero, it was backed by Microsoft, but at that time, Microsoft primarily VS code didn't exist yet either. I don't think at that time, Microsoft was primarily known as the Internet Explorer company. So the idea of like, you know,</span>

<span style="font-weight: 400;"><strong>Adam:</strong> </span><span style="font-weight: 400;">Front end devs weren't signing up...</span>

<span style="font-weight: 400;"><strong>Richard:</strong>...</span><span style="font-weight: 400;">Which is a wild idea like if you, I mean, over the course of five years, they went from being the Internet Explorer company, just reviled by front end developers everywhere because they have to do all the most painful cross-browser testing on their platform to the company that owns GitHub and provides VS codes and TypeScripts. </span><span style="font-weight: 400;">Like, wow, what are the odds that those that are quite 180. but, so at the time, basically like part of teaching Elm was reassuring people that doing type checking was going to be okay and it wasn't going to be like Java. so I very intentionally, like I don't introduce types until chapter three, like chapter one, you learn the syntax and, you know, basic constructs, if and whatnot chapter two, you build a thing and then chapter three, you add types, you learn about types and you add the type annotations to certain parts of what you built in chapter two. So actually the type inference turned out to be very useful from an educational perspective because it let me get through chapter two where you, you build a thing from start to finish without even mentioning types, let alone writing any, like, you don't even have the syntax for them at that point.</span>

<strong>Adam: </strong><span style="font-weight: 400;">Yeah, I think I actually noted this down. So I feel like you tried to sneak it in like it was tables or something because when you introduce types you introduce it as a form of documentation. You're like, “Oh maybe, maybe we should just say what type this is so that we know when we look back.”</span>

<strong>Richard: </strong><span style="font-weight: 400;">Yeah. Exactly. I was kind of pitching it as like, you know, here's the advantage that type annotations have over comments. Like they don't get stale, like comments can, you know, document and lie. I was basically trying to motivate, why are we going to go through and bother adding typing annotations to code that already works?</span>
<h2><strong>Teaching Motivations</strong></h2>
<strong>Adam: </strong><span style="font-weight: 400;">This term motivate it kind of made a light bulb go off for me. Like maybe that's, what's lacking from some approach to teaching things. We kinda throw concepts that people. And we don't spend time explaining to them, like why they should care. I think it also kind of explains how Richard described Elm. Right? He didn't categorize it as saying it was a functional programming language or blah blah blah...</span>

<span style="font-weight: 400;">He said something like it's a delightful language for building web apps. He was kind of describing why you would want to use it, you'd want to use it cause it's delightful. Rather than because it's a Haskell dialect.</span>

<span style="font-weight: 400;">And I think also his project-based approach where you're like trying to build something and then you encounter a problem. And then, you know, that is used to motivate the next concept you have to learn, its also part of the secret of his approach. I still, okay. I still feel like, like you skipped this part and maybe cause it's, maybe I'm just projecting this onto you. Maybe it's not the case but, as you said, there were these Haskell resources, which you found not helpful and then you, like, they didn't fit who you are or however you want to characterize it, but then your book is all about building something and like, I don't think that's the case, necessarily of like other like pedagogical approaches to functional programming. So, like, is that the key here? Is that the key to your teaching experience? Or could you have done this just as well with doing small examples that never really build?</span>

<strong>Richard:</strong><span style="font-weight: 400;"> One of the things that were similarly important to me about this book was that, so the title of the book is <em>Elm in Action</em> and it's Manning and Manning does a lot of inaction books. That's like one of their series is, they also have books like, in practice, which is sort of like, Oh, this is a thing that's like, you know, and actually like you hear about like, real-world Haskell or real-world OCaml, books where the title itself implies that. You know what, this is not normal, what you're doing, like using Haskell in the real world. T</span><span style="font-weight: 400;">hat's not the norm. This is a book for the weird subset of people who are using Haskell for real things. Right. I mean,, that is kind of the implication of the title. Like, imagine a book with Real-World JavaScript, like what?!</span><span style="font-weight: 400;"> I mean, that's, you know, of course, that's the default, you use it in the real world to build stuff and so I really wanted to make sure that like, it was clear right from the title. Like this is a book for building stuff I'll put it this way. I think if someone were to write a book about Haskell where the way that they taught Haskell was step one, here's how to build a thing. And then I'm going to fill in the gaps in the theory after you've built a thing.</span>

<span style="font-weight: 400;">I think there would be a lot of interest in a lot of demand for a book like that. I think there's a lot of people who learn effectively that way, who are not being served right now in the world of like, they have an interest in learning Haskell. They've heard a lot of things about Haskell they're motivated to try learning that way and they would be able to learn effectively that way, but that book doesn't  exist as far as I know,</span>

<span style="font-weight: 400;"><strong>Adam:</strong> </span><span style="font-weight: 400;">All right. That was the show. If you agree with Richard's approach to teaching, let me know on Twitter. If you disagree, you know, let me know on Twitter as well, or however, you communicate. I have a couple of ebook copies of his book to give away to people, who engage with me. So I'll probably do some sort of raffle.</span>

<span style="font-weight: 400;">Until next time. Thank you so much for listening. </span>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1665</wp:post_id>
		<wp:post_date><![CDATA[2020-08-03 06:00:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-08-03 10:00:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[055-teaching-fp-with-richard-feldman]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="elm"><![CDATA[Elm]]></category>
		<category domain="post_tag" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="post_tag" nicename="haskell"><![CDATA[Haskell]]></category>
		<category domain="post_tag" nicename="podcasts"><![CDATA[podcasts]]></category>
		<category domain="post_tag" nicename="richard-feldman"><![CDATA[Richard Feldman]]></category>
		<category domain="category" nicename="transcript"><![CDATA[Transcript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1666]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[157]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[924]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>We are teaching Functional Programming Wrong</title>
		<link>https://corecursive.com/teaching-fp-with-richard-feldman/</link>
		<pubDate>Mon, 03 Aug 2020 10:00:48 +0000</pubDate>
		<dc:creator><![CDATA[webmaster@corecursive.com]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1668</guid>
		<description></description>
		<content:encoded><![CDATA[Today Richard Feldman shares his story of going from javascript developer to elm developer to functional programming teacher.  Along the way, Richard finds that people are teaching functional programming wrong.  We are teaching it in a way that misses how most industrial software developers learn best.

In this episode, Richard Feldman delves into Elm, his approach, and how to make teaching delightful.

<a href="https://corecursive.com/055-teaching-fp-with-richard-feldman/" target="_blank" rel="noopener noreferrer">Podcast Transcript</a>

"<span style="font-weight: 400;">If you want to get a different outcome than what previous teaching methods have done. I think you need to try to do things differently.</span>" Richard Feldman

<span style="font-weight: 400;">"If someone says like, “Hey, can you recommend a really good book to get into Haskell?” And if they're not a grad student, I'm like, “I really don't have any strong recommendations for you". If you want to use it at work or you want to use it to build stuff like there is not a single book on Haskell that I'm aware of [...] where like, Hello World is like earlier than a</span><span style="font-weight: 400;"> chapter three." </span>Richard Feldman

"I felt like I knew everything about programming or like I knew close to enough that I was getting diminishing returns and all of a sudden I used Elm and I was like, I know nothing." Richard Feldman

"This is so much better than what I thought was available. I didn't know anything like this could exist and then that's what I wanted to do. I just wanted to build more stuff in Elm. That's kind of what I've been doing ever since." Richard Feldman

<strong>Links:</strong>

<a href="https://www.manning.com/books/elm-in-action" target="_blank" rel="noopener noreferrer"><span style="font-weight: 400;">Book: Elm in Action</span></a>

<a href="https://www.youtube.com/watch?v=zt0OQb1DBko">A Taze of ATS</a>

<a href="https://elm-lang.org/">Elm Language</a>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1668</wp:post_id>
		<wp:post_date><![CDATA[2020-08-03 06:00:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-08-03 10:00:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[teaching-fp-with-richard-feldman]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="elm"><![CDATA[Elm]]></category>
		<category domain="post_tag" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
		<category domain="post_tag" nicename="haskell"><![CDATA[Haskell]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
		<category domain="post_tag" nicename="podcasts"><![CDATA[podcasts]]></category>
		<category domain="post_tag" nicename="richard-feldman"><![CDATA[Richard Feldman]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:16:{i:0;s:25:"01:28 -- Lunch with Deech";i:1;s:41:"03:51 -- Maybe You Should Look at Haskell";i:2;s:24:"05:07 -- Writing a Novel";i:3;s:35:"07:08 -- Thinking About The Rewrite";i:4;s:39:"10:26 --The Elm Rewrite of Dream Writer";i:5;s:33:"13:24 -- Everything was Different";i:6;s:20:"14:18 -- Elm At Work";i:7;s:25:"16:38 -- Doubts About Elm";i:8;s:27:"17:47 -- Advocating For Elm";i:9;s:31:"20:41 -- Teaching Haskell Wrong";i:10;s:34:"24:17 -- Talks Can Lead You Astray";i:11;s:24:"28:03 -- Types and Stuff";i:12;s:37:"34:35 -- How Do You Teach Differently";i:13;s:27:"38:06 -- Sequence and Scope";i:14;s:17:"38:49 -- The Book";i:15;s:29:"43:17 -- Teaching Motivations";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1575]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1671]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/055_-_Teaching_FP_With_Richard_Feldman.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[46:40]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[44.06 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Richard Feldman]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/rtfeldman">@rtfeldman</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[1672]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>2207</wp:comment_id>
			<wp:comment_author><![CDATA[Usein]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[useinm@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>https://github.com/usemam</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[73.151.121.78]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-08-03 23:46:22]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-08-04 03:46:22]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for a great episode! 
At this point tried a bunch of functional languages - Scala, Haskell, F#. So far only F# stuck with me, but I think I'm definitely going to learn Elm after this :)]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1596512782.1930051;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>2211</wp:comment_id>
			<wp:comment_author><![CDATA[Martin Cones]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[masc@uni-bonn.de]]></wp:comment_author_email>
			<wp:comment_author_url>http://mcon.es</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[2a02:908:5d3:3080:75ac:7ad0:3b1:3c98]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-08-04 08:53:37]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-08-04 12:53:37]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I always enjoy your podcast but this one was especially delightful. I'm totally on the theory end when it comes to functional programming so the way Haskell or ML books are structured always felt natural to me, but I can totally see how this would bore a practical programmer to death. It's a valuable perspective to keep in mind. Even for me, my first experience with FP was learning the big three (map, filter, reduce) in JS, because that's what I actually used to build things.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1596545617.168396;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>2322</wp:comment_id>
			<wp:comment_author><![CDATA[Adam Gordon Bell]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[adam@corecursive.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[65.95.218.93]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-09-01 20:00:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-09-02 00:00:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks!  Let us know how it goes.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>2207</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1599004853.2281611;s:5:"event";s:9:"check-ham";s:4:"user";s:4:"adam";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>Dependant Haskell</title>
		<link>https://corecursive.com/015-dependant-types-in-haskell-with-stephanie-weirich/</link>
		<pubDate>Fri, 07 Aug 2020 10:00:24 +0000</pubDate>
		<dc:creator><![CDATA[webmaster@corecursive.com]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1686</guid>
		<description></description>
		<content:encoded><![CDATA[At Strange Loop 2017, I wandered into a talk where I saw some code that deeply surprised me. The code could have been python if you squinted, passing dictionaries around, no type annotations anywhere.

Yet, key lookup in the dictionary was validated at compile time. It was a compile-time error to access elements that didn’t exist. Also, the dictionary was heterogeneous, the elements had different types, and it was all inferred and validated at compile time.

What I was seeing was Dependent types in Haskell. In today’s interview, Stephanie Weirich explains her efforts to add dependent types to Haskell and how that example worked.

<iframe style="border: none;" src="//html5-player.libsyn.com/embed/episode/id/6632816/height/90/theme/custom/thumbnail/yes/direction/backward/render-playlist/no/custom-color/87A93A/" width="100%" height="90" scrolling="no" allowfullscreen="allowfullscreen"></iframe>
<h3><b>Transcript</b></h3>
<em>This is a machine-translated transcript. Podcast page for<a href="https://corecursive.com/015-dependant-types-in-haskell-with-stephanie-weirich_" target="_blank" rel="noopener noreferrer"> this episode is here</a></em>
<h3><b>Introduction</b></h3>
<b>Adam: </b><span style="font-weight: 400;">Welcome to CoRecursive, where we bring you discussions with thought leaders in the world of software development. I am Adam, your host.</span>

<b>Stephanie: </b><span style="font-weight: 400;">Now, you called it magic, I call it programming.</span>

<b>Adam: </b><span style="font-weight: 400;">That's strangely 2017 I wandered into a talk where I saw some code that deeply surprised me. The code could have been Python. If you squinted it was passing dictionaries around, no type annotation anywhere yet the key lookup in the dictionary, it was validated at compile time. </span>

<span style="font-weight: 400;">It was a compile-time error to access elements that didn't exist. Also, the dictionary was heterogeneous. The elements had different types, and it was all inferred at compile time. What I was seeing was dependent types in Haskell. In today's interview, I tried to understand what was happening in that talk.</span>

<span style="font-weight: 400;">Stephanie Weirich is a professor at the University of Pennsylvania and works on extending the type system of GHC among many other things. </span>

<b>Adam:</b><span style="font-weight: 400;"> Stephanie, welcome. Thank you for talking to me</span>

<b>Stephanie: </b><span style="font-weight: 400;">Thank you for inviting me. I'm happy to be here.</span>
<h2>What are Dependent Types?</h2>
<b>Adam: </b><span style="font-weight: 400;">I saw a talk that you did a Strange Loop, I think last year and it kind of blew my mind. and, and it was about kind of extending the type system of Haskell to support dependent types. So, what are the dependent types?</span>

<b>Stephanie: </b><span style="font-weight: 400;">That's a tricky question and it's a tricky question because there are lots of answers to that question. I, in some way, I created that talk just to answer that question because there are lots of definitions of what dependent types are, and those definitions can be technical where they classify some things as definitely being dependent types and some things are definitely not being the dependent types based on mechanism. But I prefer to think more about applications -- can you get your language and your type system in your language to do particular applications and use that kind of definition?</span>

<span style="font-weight: 400;">So in that talk, I walked through how Haskell, even though under some of the technical definitions, doesn't have dependent types yet. I walked through how it could already do quite a number of the activities that we want from dependent types and at the end kind of pointed out what still needs to go into Haskell to make it a full spectrum dependently typed language. Now that's, I guess that's not really asking, answering your question about what dependent types are but just to briefly summarize, dependent types are a way of having some kind of computation in your type system so you can use your types to express t</span><span style="font-weight: 400;">he main specific invariants about your program that the type checker uses to check your code, there's a lot of the inspiration that I get for extensions for Haskell's type system comes from Martin Lof Type Theory. So, this is a specific mathematical formalism that is used in the foundations of logic to create formal systems to describe what is provable and what is true.</span>

<b>Adam: </b><span style="font-weight: 400;">I did an interview with Edwin Brady, who created Idris and he said he likes this term, I'm not sure if it just applied to Idris or in general, but he likes the term first-class types. He said you can think of dependent types as just like a programming language where you can manipulate types just like their values. How do you feel about that?</span>

<b>Stephanie: </b><span style="font-weight: 400;">That captures quite a bit of what you get from dependently type languages. And this is one of my goals and Haskell is, it's very similar to what Idris provides, giving you, and this is what I mean, a bit in having your type system be as programmable as the rest of the language this lets you, again, let's you express why you think, your program has particular properties using the same language that you do to implement your system. So your logic and your programming languages have a really nice uniformity to them.</span>

<b>Adam: </b><span style="font-weight: 400;">So, what makes dependent types useful?</span>
<h2><b>What Makes Dependent Types Useful?</b></h2>
<b>Stephanie: </b><span style="font-weight: 400;">So there are many levels to answer that question, right? Of course, type checking is useful because we want to use it to both identify bugs in our programs, but also to capture some structure while we are programming to be able to think about our programs, both in terms of what they do at run time, but also at a more abstract level.</span>

<span style="font-weight: 400;">What do we know is always true about our code versus what is true at this particular moment or what is true about this entire class of values versus, what is true about this particular value? So type systems naturally give us this form of abstraction and without dependent types, t</span><span style="font-weight: 400;">his kind of abstraction is limited in that you can only talk about it at the abstract level. You can't really go back and forth between, at this point, I kind of know this, but, I depend, but what I get from dependent types is the ability to be able to say, "based on this run time test, I know this about my, I know this about my compile-time value" So it lets you kind of gives you much more flexibility about the interaction between sort of your context-sensitive tests and what your type checker knows at compile time.</span>

<b>Adam: </b><span style="font-weight: 400;">So I find that it is a tricky subject to grasp, the advantages, but you had this example that I really liked, so it was regular expressions, right? Could you describe the example you had of using dependent types?</span>
<h2><strong>Dependently Typed Regex</strong></h2>
<b>Stephanie: </b><span style="font-weight: 400;">Sure, so I use this example in the Strange Loop talk because I really could have captured what dependent types can give you in lots of different ways. So in the example, the nice thing about our regular expression is that most of the time you use very concrete, regular expressions, right? </span><span style="font-weight: 400;">We're trying to, and I was using the example not just for matching regular expressions, but for doing something that's called Capture Groups, where you could take a regular expression and name specific parts of it and pull out parts of the texts, like a very primitive form of parsing and if you have a concrete, regular expression, you should be able to look at that regular expression and know exactly, what parts of the regular expression are gonna get captured, how many groups are going to get captured? Regular expressions allow you to name those groups. So what are the names of the subparts of the regular expression that can form a capture group and also because regular expressions allow you to alternate or have optional components, s</span><span style="font-weight: 400;">ometimes the capture groups will definitely give you an answer, and sometimes they might give you an optional answer, and sometimes they might give you several different answers, like for example if you're under the star</span><span style="font-weight: 400;"> and the type of the capture group might depend on where it appears inside that regular expression.</span>

<span style="font-weight: 400;">So in the Strange Loop talk, I go over designing a library for regular expression capture groups where the type checker can look at the regular expression and figure out what kind of result you're going to get from that particular regular expression. So when you get them, it's essentially a dictionary, but that dictionary sometimes it's going to match the name of a capture group to a string. Sometimes it's going to match it to an optional value. Sometimes it's going to match it to a list, but we know this at compile time. And so the type checker should help you, use this correctly because all the information is there when you type check your program.</span>

<b>Adam: </b><span style="font-weight: 400;">I think it makes a lot of sense, but it's not something I've thought about before. So if you have a regular expression string and it has, like if it has something that ends in a question mark. Then that means that you may or may not get value. So if the type system could get hold of that information, it could be a maybe or an option, or if you have a few of a star then you might be matching actually maybe a star. </span><span style="font-weight: 400;">If you have a capture group of the star, then you could get multiple matches, I guess. Right? So this information is embedded in this string, but it's without dependent types, you're not getting it in the type system, right?</span>

<b>Stephanie: </b><span style="font-weight: 400;">Exactly. And the connection between how you interpret that string to, what the types of the system should think about that's not something, any language like should have built-in. This is something that the irregular expression library should be able to express via some kind of programming. This is, should be part of the design of the library that supports these regular expressions.</span>

<b>Adam: </b><span style="font-weight: 400;">And so, the thing that really blew my mind, I guess. So, I take this regular expression. Your example was a matching, like Unix paths, so, you give it a path and, there could be multiple, like sub-directories and then a file name and an extension and you were giving these names, so you can get back, a match for the directories, a match for the base name and a match for the extension. You run your regex and you get back this dictionary and then you show. I think part of the magic is, you see, so you call into the dictionary, you say, get me the base name, and it comes back, but then you try to get back some other elements from the dictionary that wasn't part of your capture group a</span><span style="font-weight: 400;">nd it's a compile-time exception. And I think that that's kind of when the light bulb went off for me, I was like there's something magic here well because I know that. I mean, that's not how I expect dictionaries to work, I guess and I know there's a whole class of languages where they spend a whole bunch of time throwing dictionaries around, and it's hard to validate, say, like in JavaScript, if you access some elements in this dictionary, and then it's like a runtime error if you make a spelling mistake, and pushing all that system, to the compiler, I guess. So how does this work?</span>
<h2><strong>Dictionaries </strong></h2>
<b>Stephanie: </b><span style="font-weight: 400;">And I think that's kinda what I like about the example is that it very much does relate to dictionaries and kind of shows you that even in Javascript and a lot of these dynamic languages, right? Parts of our dictionary when we create it are very dynamic, right? We don't know at compile-time, as like when I say compile time, I mean we don't know so much development time what we're going to get, but maybe, maybe we do. And if we do, we should be able to tell that to our compiler so that the compiler can help us out. Because once we've created this, this dictionary, if we know what its structural compile time, we should be able to have the compiler help us out, help us use it correctly.</span>

<span style="font-weight: 400;">Now, you called it magic, and I call it programming, right? So the talk kind of walks through how it works step by step, but sort of the, like, some of the key ideas are constructing the regular expressions with types that are rich enough to calculate and express what the capture groups are so that when you construct the regular expression, you know, just from its type, how those capture groups interact with each other, but the types themselves, they're a little more expressive than we usually see in programming languages because of the types of the regular expression operators like, for example, concatenation, where you do one regular expression and then another one right after it, right? You're combining two together, the type of that operator says, well, the capture group from this entire regular expression is going to be some merging of the capture groups that we get from the first regular expression and the capture groups that we get from the second regular expression and then we can write that merging as a functional program that takes this compile-time data, the capture group data and combines it together.</span>

<b>Adam: </b><span style="font-weight: 400;">The part that's a little confusing about that, I guess is that we're providing a string.</span>
<h2><strong>Parsing a String to a Type</strong></h2>
<b>Stephanie: </b><span style="font-weight: 400;">Yes.</span>

<b>Adam: </b><span style="font-weight: 400;">I think in this case, the magic is, I should stop saying the word magic, so we have a regular expression string. And you're saying we're going to turn this into a more, complex type. Now I'm not really familiar in my programming experience with taking a string and turning it into a type.</span>

<b>Stephanie: </b><span style="font-weight: 400;">So part of the magic was using a feature of Haskell. And one of the great things about working in Haskell is it's a rich language, so it has a lot to draw on. So I can put many features together. So one of the features I was using was a feature that's called template Haskell, which is a way of doing it's another way of doing compile-time programming in Haskell. So it allows you to take things like a string and just run Haskell code on that string to produce Haskell abstract syntax, which then is type-checked and inserted into your program at that point. And so the very first step of that example was taking the regular expression string and creating a parser for that regular expression string that would replace the string with some regular expression constructors that I had developed from my library. So the parsing part is not so much dependent as being able to use this template Haskell feature.</span>

<b>Adam: </b><span style="font-weight: 400;">So you are writing a parser as you would have to do, to write your normal regular expression library. Yes. The trick is, It's being called sort of like a macro at a..</span>

<b>Stephanie:</b><span style="font-weight: 400;">..compile time, macro at compile time.</span>

<b>Adam: </b><span style="font-weight: 400;">And then, somehow when this dictionary is returned, when I apply a match that the dictionary needs to know, all this type of information so that when I. When I ask for, Oh, I didn't even describe this one. I asked for the directories. Actually, you're coming back as a list because your red X knows that there could be multiple directories just based on its parsing and is, and is returning the type of the match. So how does it know how the dictionary type constraints, in that way?</span>
<h2><strong>Indexed Types</strong></h2>
<b>Stephanie: </b><span style="font-weight: 400;">Yeah. An important feature of dependent type systems is this idea of an indexed type. So this is a data structure that is indexed by some compile-time data and that compile-time data enforces constraints on that data structure. </span><span style="font-weight: 400;">So you can imagine just a simple dictionary. The data structure is an association list where I can say I can map any string to any value, but the constraints might, we might want to say is not any association list association lists where the first association is between this string and this type of value and the second association is between this string and this type of value and there isn't any other anything else? Right? So we can go from a very, very general type arbitrary association list to a very, very specific dictionary type association list that has exactly this form. And the mechanism that we're doing there is the index type that the index on the dictionary constrains what the association list has to look like.</span>

<b>Adam: </b><span style="font-weight: 400;">Why is it called an indexed type?</span>

<b>Stephanie: </b><span style="font-weight: 400;">This is a terminology that it's adopting from dependent type theory. So if you think about it, you can think about it as the dictionary type is actually a function from its type argument to many, many different types, and the type argument as serving as an index to which particular type you actually mean.</span>

<b>Adam: </b><span style="font-weight: 400;">So there is a function that takes a type, like a type of based directory, and then returns a dictionary that has a base directory. Am I on the right track?</span>

<b>Stephanie: </b><span style="font-weight: 400;">I'm thinking of it. Is it a slightly different level? Right. So here's a very, very simple, example of an index type. It's very simple, it's indexed by a Boolean value. And if the Boolean is true, then our type is an integer. And if it's </span><span style="font-weight: 400;">false, then our type is a character, right? And so we can have a general type that if we don't know what the Boolean is, we know it's either an integer or a character, but if we do know what the Boolean is, we know precisely which one it is.</span>

<b>Adam: </b><span style="font-weight: 400;">I follow. So that is an index type actually I thought that was, type computation where you're taking an argument and computing a type or these related concepts?</span>

<b>Stephanie: </b>T<span style="font-weight: 400;">hey are related. what makes it an index type is that we actually are making a decision based on this, static information.</span>

<b>Adam: </b><span style="font-weight: 400;">Okay.</span>

<b>Stephanie: </b><span style="font-weight: 400;">This is just a distinguished thing like type parameters where we might take one type and give another type, but treat that type argument parametrically like for example, a list data type has a parameter for the elements in the list and so the list type constructor takes</span><span style="font-weight: 400;"> types and gives us new types from it. So that is still type that's still a type function, but it's a parametric type function. And so the type theory for working with a parametric type function, it works out fairly differently than if we can actually if the system allows you to make distinctions on what those arguments are.</span>

<b>Adam: </b><span style="font-weight: 400;">And so there might be a theme of this interview of me asking you questions. However, a type function is, that's just a function that returns a type as it's output. There we go, so does this relate to a generalized algebraic data types?</span>
<h2><strong>Generalized Algebraic Data Types</strong></h2>
<b>Stephanie: </b><span style="font-weight: 400;">Yes. So the mechanism that we can use for index types and Haskell, so it's a way to so in Haskell you could express a standard Haskell, you have parametric data types, like list. Right? And each constructor treats that type argument to list parametrically. Right. you know, N is going to give you a list of that type and, cons also going to give you a list of whatever the type argument is and there's not that much interaction between your data constructors and that type argument because of this restriction to the parametricity with getting it You can have interaction between your type arguments and your data constructors. So when I get it, a very simple example of a GAT, it might be you have some type that takes in a Boolean, right?</span>

<span style="font-weight: 400;">And then this is going back making that earlier example, I gave you a little more precise, right? So our type of, let's call it T, takes in a Boolean as its index, and it has two constructors, one that takes in a char and another that takes in an int. And we know that based on, and we can reflect that in our Boolean to say that if we are using the constructor that takes on a char, we'll say, we don't create just T with an arbitrary Boolean. </span><span style="font-weight: 400;">We'll take it as a T where the Boolean has to be true. And if we're going to do one with the constructor that takes an int, then that's going to force the Boolean to be false. And so what that means is elsewhere in our program, if we have T where we know that index is true, we know exactly what constructor made that value because one of the constructors gives us a type where the Boolean is true and the other constructor gives us a type or the Boolean is false.</span>

<span style="font-weight: 400;">And so it wouldn't even type check if we had used the other constructor. We know exactly which constructor we have, so we know exactly what the type of the argument should be. And we know we don't really have to, if we do a case analysis, we know we only ever need to do one brat. We don't have to do that other branch.</span>

<b>Adam: </b><span style="font-weight: 400;">This is the, seems like the baby steps into crossing over these, these data and types are no, depending upon each other.</span>

<b>Stephanie: </b><span style="font-weight: 400;">Exactly. Right. So this is capturing a connection between what's going on at compile time and what's going on at runtime?</span>
<h2><strong>Runtime vs Compile Time Data</strong></h2>
<b>Adam: </b><span style="font-weight: 400;">So back to this dictionary. We get this dictionary back after I run my regular expression match, and in it, I can look up by, I can say, give me the directories. So I pass this dictionary, the string directories, what's happening at compile time and what runtime? Where are we storing those strings, the lookup keys?</span>

<b>Stephanie: </b><span style="font-weight: 400;">Yeah. So one neat thing about this example is because the type system keeps track of all the keys. We don't need to store them at runtime, right? So the way, the example, the way we had implemented that example, For a given regular expression, you knew what all the lookup keys are going to be. And so the type system would sort those keys into alphabetical order so it would know exactly where and the result dictionary, a particular lookup key had to be, right.</span>

<span style="font-weight: 400;">So from this particular record, regular expression, Well, like we were getting the directories and the extensions and the file names. So we knew the directories would be the first part of that dictionary. Because D comes before E and comes before F, right? So we don't need to actually go and look at any keys because we know, wherein the data structure we're going to store the values already. So, we're looking at via with this compile-time string and that's taking us to, it's accessing the part of the dictionary right of way.</span>

<b>Adam: </b><span style="font-weight: 400;">It's pretty cool. And so not only do we have this dictionary in, which if we try to access it. an element that's not there. No. We get a compile-time exception, but also at runtime, like whatever the overhead of actually using a dictionary is gone because like the dictionary doesn't actually exist at runtime. It's just an array.</span>
<h2><strong>Dependent Types can be Faster</strong></h2>
<b>Stephanie: </b><span style="font-weight: 400;">It is a linked list and we do know where it is, which index in the linked list we want to access at compile time. I'm not quite sure how much enlightening goes on when the compiler when JFC compiles it to know whether it will specialize it to actually go right to that spot or whether you will have to actually go down to that point in the dictionary.</span>

<b>Adam: </b><span style="font-weight: 400;">Okay. In a theoretical sense, I mean, dependent types could, in theory, make things faster at runtime because, or is there overhead to having this extra information?</span>

<b>Stephanie: </b><span style="font-weight: 400;">So if they're radical sense, we have more information at compile time. So very much the compiler could take advantage of this information to make things faster and there are examples of people using dependent types to speed up their code to eliminate runtime pattern matching that they would have to do because they don't need it. Yeah. Like if you know, a check will always succeed, you can eliminate, the compiler, can eliminate, eliminate that check safely. So I'm thinking of, I don't know if you read Yara and Minsky's blog. He is, CTO of Jane Street and the, so the OCaml language also has GADTs, and about a year or two ago, he wrote a blog article about how they were able to use GADTs too, not just for the safety, but also to speed up part of their code by eliminating these redundant checks.</span>

<b>Adam: </b><span style="font-weight: 400;">Oh, well, we're just giving more information so it can be used to optimize?</span>
<h2><strong>On Not Throwing Away Values</strong></h2>
<b>Stephanie: </b><span style="font-weight: 400;">Exactly.</span>

<b>Adam: </b><span style="font-weight: 400;">So what happens if I'm throwing away these keys, what happens if I want to print out this dictionary like I want a nice, you know, key = value, key = value = value.</span>

<b>Stephanie: </b><span style="font-weight: 400;">Yeah. So we're not throwing them away because the compiler still knows about them when it compiles the program. Right? Do it, the type checker. The key that we have is in the type and for printing. Right. In that part of the strange loop talk, I demonstrated how we could print out these dictionaries, and there I was taking advantage of Haskell's type classes, which are ways that. This is a mechanism Haskell allows you to use compile-time information to insert run-time values the equivalent in Scala I think are implicit arguments where you're using type information to control what argument you supply at run time. In this case, our implicit information is the name of the key, right? That's part of the type. And so, and the runtime information that we're going to insert with the, with the type class is the actual string that we're going to print out.</span>

<span style="font-weight: 400;">So, again, like part of a high-level theme is having a lot of flexibility between storing your information and the type at compile-time and having it available to you at run time. And when you're working in an expressive language like Haskell, you can go back and forth very easily where you can use the indices too, kind of capture the connection between the run time and the compile-time data. And you can use type classes to have your compile-time data control, what run time data is inserted by the compiler. and this works together very neatly. So, the programmer doesn't need to add a lot of annotations or a lot of duplications, even though, you know, some parts of the program are at one level and other parts of the program at a different level.</span>

<b>Adam: </b><span style="font-weight: 400;">I think you called this double-duty data. That's a little hard to say.</span>
<h2><b>Double Duty Data</b></h2>
<b>Stephanie: </b><span style="font-weight: 400;">Yeah, it was kind of a tongue twister. So that's exactly what I mean in terms of having a compile-time view of your program and a run time view of your program, being able to use the same data to capture and variants about your code to med to as indices on your type.</span>

<span style="font-weight: 400;">Right. So we know that we have to have this key in our dictionary, so we're gonna. Use that key as part of our index. That's one way we're using that data and another way we're using that data is we need to have it at run time, so we need to use it to control what gets printed when we print out that dictionary and having the flexibility to be able to use that data in both ways is sort of, is what I meant by the double duty nature of it.</span>

<b>Adam: </b><span style="font-weight: 400;">One thing. I think that is probably obvious to Haskell programmers, but maybe not others. Like there's no reflection. because I think it seems to me that the different run time versus compile time might break down if you were able to somehow inspect things like you can do in the JVM with reflection. Is that true?</span>

<b>Stephanie: </b>I<span style="font-weight: 400;">t's very related but in perhaps nonobvious ways. Right. So one, and the reason I'm pausing is that one thing that dependent types allow you to do is. To encode a very principled form of reflection into your language. So Haskell actually does have some kind of reflection. It using a library called data.typable.</span>

<span style="font-weight: 400;">So this little library allows you to have runtime witnesses to types that usually are erased when you, when you run your Haskell program. So how could this be? Well, it's under. in terms of the type system, it's using several different mechanisms. So it's using type classes to keep track of which types have runtime evidence and which types do not.</span>

<span style="font-weight: 400;">And then it's using some of the same mechanisms that we use to implement GADTs to connect that runtime type information to the compile-time types so that as you use it, as you look at that run-time type information, you can do it safely. So, Haskell does have a form of reflection and that form of reflection is actually implemented using the same mechanism.</span>

<span style="font-weight: 400;">So instead of reflection getting in the way of dependent types, we have. Dependent types, allowing us to have a very safe form of reflection</span>
<h2><strong>On Reflection</strong></h2>
<b>Adam: </b>A<span style="font-weight: 400;">nd data to a type of bullet. Is that related to like, like generic deriving and</span>
<h2><strong>Generic Deriving</strong></h2>
<b>Stephanie: </b><span style="font-weight: 400;">Generic</span>

<b>Adam: </b><span style="font-weight: 400;">Scrap your boilerplate type stuff?</span>

<b>Stephanie: </b><span style="font-weight: 400;">So no, that's a different feature. So generic deriving that's also, typable is mainly concerned with, runtime information about types based on their names, right? So whenever you create a data type in Haskell, you have a new name for a type, and the runtime information that it's storing, it doesn't. Remember, like what the structure of that data type definition is, it just remembers I have a type that's called this name and maybe it's applied to these arguments. for generic programming, you need that extra structure information. So generic programming in Haskell, especially generic derive in, it allows you to take the structure of a type and, and. Express, how you might drive particular operations that are dependent on that structure.</span>

<span style="font-weight: 400;">So, for example, if you are thinking about a show function for a type, for, for a particular data type, how you, you could. Get kind of far by just saying, well, I know it has these constructors and these constructors take these arguments and I know how to show all the arguments. So to show it, we could have a generic version of the show that just sort of looks at that structure information and figures out how to crawl over that tree and construct a string out of that data type. Right? But in order to do that, you need to know what that structure looks like. You need to know how many constructors there are for each of those constructors, what the arguments to the constructors are.</span>

<b>Adam: </b><span style="font-weight: 400;">So, I guess the question that we haven't really touched on is, how are we adding features to Haskell? Haskell exists, but how are you making it dependent or pushing in that direction?</span>
<h2><strong>Extending GHC</strong></h2>
<b>Stephanie: </b><span style="font-weight: 400;">So Haskell is a research language, and so it has been very open to experimentation with new features. So, I have in the past and, and continue to collaborate with the Haskell developers with new ideas for type system features.</span>

<span style="font-weight: 400;">So, Haskell, the Glasgow Haskell compiler has the ability to introduce new features protected by language pragmatists. So these language pragmas they Mark, which. Source files adopt new features so that it gives a little bit more flexibility so that we can look at features that are quite, completely backward compatible.</span>

<span style="font-weight: 400;">So, to enable a new feature on your Haskell program, you have to specifically ask for it. But in turn, that means that the new feature doesn't have to behave exactly the same on the old source code. So as we're extending the father, we don't have to worry so much about breaking old programs as much as we're providing access to new programs now, of course, as a research project, Haskell has been going for many, many years, so there's quite a number of language features now and, and it can get a little bit ridiculous about. The number of language features that you might want to enable, especially since they are a nice thing about it as they are defined at a very small level of granularity.</span>

<span style="font-weight: 400;">This is good for research into programming languages because if we have small. Language features. we can think about how they interact in lots of different combinations as opposed to just throwing in every new feature that we want into one sort of monolithic, you know, enabled a pen of types that does everything.</span>

<span style="font-weight: 400;">We can kind of look and see that “Okay, this feature is good for dependent types”, but we also see people using scope type variables just for lots of other applications that perhaps we had not even thought about. And we can tease that apart from the sort of, our initial ideas about how new language features might be used.</span>
<h2><strong>Interacting Extensions</strong></h2>
<b>Adam: </b><span style="font-weight: 400;">Yeah. In your talk, I'll put a link in the show notes. I recall like one of the first slides is basically just entirely full of extensions that you're enabling. And, I mean that begs the question, “How do we do these things not interact negatively? How do we have all these language extensions?” It seems like there's an exponential amount of combinations of them. How do we have them cleanly sitting together? Or are there combinations that are verboten?</span>

<b>Stephanie: </b><span style="font-weight: 400;">Usually they don't interact too much. I mean, that's a hard problem in general in language design, right? Generally, when we're looking at languages and we're thinking about new features, we may think about that new feature extended on a small core, but it's very, very difficult to think about how it interacts with every possible other combination.</span>

<span style="font-weight: 400;">Now, the compiler does have to answer that question on how do all these language features interact? Because it has to implement every single one of them at the same time. So there is that. But in terms of, “Will this feature interacts with that feature?” It has been the case in some compilers that two different features enabled at the same time could expose a whole in the type system one in this kind of gets me to some a recent research project that I'm looking at, is being able to use proof assistance to do some of the type safety proofs for our programming languages. Right? If you look at, so I'm specifically talking about type system extensions, right? Type system extensions.</span>

<span style="font-weight: 400;">We develop them by making a mathematical model of the type system, extending it, extending that model, and improving that. Whatever theorems we want to hold about our language still hold. Usually, its Serum that's called type soundness, that says that if your program type checks, we have captured all the behaviors, your program is not going to crash and we don't do, we do that feature by feature, but we don't typically define a model that has all of the features and I don't want and prove our type system sound for that really big model. And the reason is it's really big. That's a lot of, that's very. Detailed heavy-proof too and it's very easy to kind of miss all the cases. And so what I've been, one line of research that I have is let's do all those proofs in a proof assistant.</span>
<h2><strong>Proving Type Soundness of Type System Extensions</strong></h2>
<span style="font-weight: 400;">So there are tools. So I use one that's called the Coq Proof Assistant that allows you to explain these mathematical models as programs in type theory in a logical system, and then write down a theorem in that system and then use programming to help develop those proofs. And so what that does, the benefit of that is you have the proof is a tint, checking your proofs and then you also, since it's since your proofs are kind of developed programmatically, you can automate a lot of the sort of boilerplate aspects of your proof. And I think that's going to allow us to look at our features and combinations, at a scale that we haven't been able to do in the past.</span>
<h2><strong>Haskell vs. Coq</strong></h2>
<b>Adam: </b><span style="font-weight: 400;">Interesting. An interesting thing I just thought of is, Coq is also a caucus dependently type language, right? And so I'm assuming that you kind of admit that maybe Haskell is not, it's not up to the burden of doing this proof within Haskell that the dependent type system isn't as, as feature-rich as, as, a proof assistant because you're going out to another language to prove these. Is that a true,</span>

<b>Stephanie: </b><span style="font-weight: 400;">Yeah, so I'm using Coq there. It's definitely. The definite similarity here, right? Because they're both, Coq is an implementation of the dependent type theory that is an inspiration for Haskell's type system, or at least some of the extensions that I've made for it but there's one very big difference between, Coq type theory and Haskell's type theory. And the big difference is that in Coq, there's this in addition to having this type soundness property to know that because things type check, they don't crash. We also have a much stronger property, which says that this type of theory is consistent when we're looking at it as a logic, right?</span>

<span style="font-weight: 400;">And this is kind of looking at your programs and in a different way where you're looking at programs as if they were proofs, and then the types are the propositions that they're proving. So a proof on Coq is really saying, here is this type. I'm using the type to talk about something that I think should be true and I know it's true because I'm giving you this proof. But that proof is just a functional program that has that type. and to know things are consistent. Well, you have to be able to know that false propositions don't have proof. So in Coq, there's a, there's a particular proposition, it's just called false and there's no program that can have that type. So we have types that are empty and Haskell. Every single one of the types that we have in Haskell, there are functional programs that have that type. And the reason is we have, we have things like infinite loops in Haskell. You can write an infinite loop and you can give it whatever type you want.</span>

<span style="font-weight: 400;">And that 's the reason we can't use Haskell as the logical foundation in the same way that we can use Coq type theory because we don't have the termination analysis and Haskell that Coq does. And the type system hasn't made the decisions that Coq does to ensure this consistency of the language when we view it as logic.</span>
<h2><strong>Totality Checking</strong></h2>
<b>Adam: </b><span style="font-weight: 400;">This relates I think right to a totality, checking like, I know an address you can turn on or off totality checking.</span>

<b>Stephanie: </b><span style="font-weight: 400;">Yeah. Yeah. This is exactly what I'm talking about. So an address, when you turn on the totality checking, you can use that part of the program to represent proofs but if you don't have the totality. Checker turned on then the programs that you write in that part of the system can only be interpreted as programs, so you can't treat them as proofs. And Haskell, we don't have a totality checker anywhere, so we can't really use it, in the same way, to encode proofs as we do in Coq dependently typed functional programming languages.</span>
<h2><strong>Equality Proofs</strong></h2>
<b>Adam: </b><span style="font-weight: 400;">No. In your talk, you, you did talk about, writing, I think a quality proof, in Haskell.</span>

<b>Quality Proofs</b>

<b>Stephanie: </b><span style="font-weight: 400;">So in Haskell, there's actually another language embedded inside of Haskell that is the witness language for quality proofs. And users don't use that explicitly. But that language is manipulated by the Haskell type checker.</span>

<span style="font-weight: 400;">And that language actually, it turns out, is consistent. It's as odd as expressive as Coq, dependently typed language, but it has that same consistency property that Coq language has. And, when you're writing Haskell code, you can, you can use the Haskell type checker to encode specific equality proofs that you need to be able to, provide the, to provide the evidence that two types are equal, which is a lot of what you need to do when you're type checking, right?</span>

<span style="font-weight: 400;">So when you're type checking code, like the main question that you're asking when your type checking is, is this, you know, is the type of this functional approach. This argument appropriate to the type that this function expects. It's a lot of equality checking questions. And so being able to justify to the type checker why two types are equal, that does require work sometimes and some of the work that you can do is, controlling how these equality proofs are generated.</span>

<b>Adam: </b><span style="font-weight: 400;">And to me, like I didn't really understand this, why this would be an important or hard thing until I started working through the interesting book. And as you start exposing this kind of, I guess, data at the type system, things get a little tricky. So like the easiest example that I hit was just like, you have like a vector. You know, and it has the length and code in the type, right? So, then you have a function that adds two vectors, right? And it's like vector N + M. but you want to pass it where it's like a vector-like just the arguments are reversed.</span>

<span style="font-weight: 400;">It's very simple to see, like for me, that these are the same, but I have to somehow tell the type system that. The endless m and m +, you know that this equivalence holds</span>

<b>Stephanie: </b><span style="font-weight: 400;">Exactly. And that is what I mean, that where I say quality proofs are a very essential part of type checking, right? Because you end up with a lot of questions like this is this expression that I'm using as a type index equal to this other expression that I'm using as a type index. And, the type system itself is going to have a definition of when two things are equal. But that's not going to cover all of the cases when two types are equal.</span>

<span style="font-weight: 400;">Just like for example, the type system doesn't define this associativity of addition. This is something it doesn't know intrinsically. It's something that you have to justify to it via some kind of proof.</span>
<h2><strong>How is Extending GHC?</strong></h2>
<b>Adam: </b><span style="font-weight: 400;">So you have worked on a whole lot of extensions to the type system of Haskell. The one that I've actually used is the generalized algebraic data types. So how is it, what's the process of working on that? Was it a challenge? Fun?</span>

<b>Stephanie: </b><span style="font-weight: 400;">Certainly fun. Yeah. so. So my role has been mostly on the theory side. So looking at the mathematical models and making sure that things work well with how tight Haskell does type in. And also, Haskell has this, statically typed core language that after type inference, it elaborates to this statically type core language. And that's where we want to make sure that it has this type soundness property. So, my role has been to work with Haskell developers like Simon Peyton Jones, just one of the main developers of the Haskell language, collaborating with him about nailing down precisely what these extensions look like and doing proofs to make sure that they have the properties that they have. And also working with some of my Ph.D. students who also assist him in extending the Glasgow Haskell compiler THC with these new capabilities.</span>
<h2><strong>Writing Papers About GHC</strong></h2>
<b>Adam: </b><span style="font-weight: 400;">And as an academic, how does it work? Like, do you see, so you're writing a paper about some extension? Is the extension written, along with that, after that, before that, the paper discusses it in retrospect?</span>

<b>Stephanie: </b><span style="font-weight: 400;">Usually we work on implementation at the same time as we work on the theory, right? Because we want to have a complete view of what's going on with this extension. So the T theory kind of tells us what guarantees we can get from this extension, but it doesn't tell us that the Ascension is actually useful. So for that, it's good to have an implementation where you can try out examples and make sure that there are things that you want to use the extension for actually work.</span>

<b>Adam: </b><span style="font-weight: 400;">In terms of usefulness, do you collaborate with the industry at all or, or how do you determine usefulness? Is it purely theoretical or is it looking at code?</span>
<h2><strong>Industry Usage of Singleton Types</strong></h2>
<b>Stephanie: </b><span style="font-weight: 400;">So we look at a lot of code -- a lot. There's a lot of open-source Haskell code out there. And, in particular, so there was a package that I developed with my former Ph.D. student, Richard Eisenberg, who's now an assistant professor at Bryn Mawr College, and we developed one package that's called the singletons package. And it was a way of encoding dependent types and Haskell using GADTs, without having actual dependent types. It was a way for us to kind of judge the youthfulness of dependent types before actually doing the full extension.</span>
<h2><strong>Dependent Types in Industrial Usage</strong></h2>
<span style="font-weight: 400;">And the nice thing is that we can go to the Haskell package repositories and look for. All their packages that depend on this particular library. So we can see what people are using a dependent type like features for in practice. What kinds of code, how are they taking advantage of it? So that might be people in the industry that might be other research projects that are not about dependent types, but they want to take advantage of these Haskell features to do their particular application or it might be people who just want to code up. Interesting problems.</span>

<b>Adam: </b><span style="font-weight: 400;">Do you see dependent types filtering out outside of Haskell, outside of this very research type industry into mainstream programming languages?</span>

<b>Stephanie: </b><span style="font-weight: 400;">I hope so. I mean, so already things like get it right. So, OCaml also supports GADTs. If you look at Scala, actually Scala has its own mechanisms for encoding dependent types that take advantage of some of the features of Scala that are different from Haskell and Scala type system itself has already had to adopt a little bit of dependent type theory just to describe the interactions between the subtyping and objects and functional programming that happens in Scala.</span>

<span style="font-weight: 400;">And I've seen some really rate libraries that take advantage of that, to push that to have more dependent types like features and Scala itself. So, I would love to see more of that in Scala. I would love to see more of that in all sorts of languages with static type systems.</span>

<b>Adam: </b><span style="font-weight: 400;">Yeah, I think your example, I mean, chose how it could be quite useful in an interesting way, which is your red X library as a user of it, you don't really need to know much about dependent types. The implementation uses them. Right. But the actual user, they just use it and get this extra feature added.</span>

<b>Stephanie: </b><span style="font-weight: 400;">Yeah. And I think that's. Part of that is careful library design, right? Certainly, dependent types are our powerful tool that if, if you're not careful, you can put heavy requirements on your users where they could end up with error messages that are not very obvious about how to fix it or how do you use your library correctly. So just like anything else, thinking about what your interface is and how people will interact with the functionality that you provide is an important part of programming. And I think it's doubly so when you're working with the rich type systems of dependent type theory</span>

<b>Adam: </b><span style="font-weight: 400;">I know, yeah. In Scala, like there is the shapeless library, which does a lot of dependently type looking things, if you look at it correctly and, it's quite complex to use. However, it's used all over the place in a number of libraries. And I think that what ends up happening is, it seems like every large Scala project has shapelessly included as some transitive dependency, right? So these features are being used just not just more by library creators than, the day to day users so I think that could be a vision for how this could work.</span>
<h2><strong>What Are You Working On?</strong></h2>
<b>Stephanie: </b><span style="font-weight: 400;">Yeah. I think I think that's completely appropriate, right? I mean, we kind of view programming as this monolithic thing, but it's not, we have many different types of users come into our languages and at many different levels and coming up with, you know, simple interfaces that newcomers can, can jump into to be able to do certain things quickly and easily is an important job that we have. But at the same time, we would need to make sure that we have, the. Powerful features that library designers need to be able to develop, expressive, and efficient libraries.</span>

<b>Adam: </b><span style="font-weight: 400;">So we're running a little, we're running out of time. I wanted to ask you. What, what's new and exciting in the world of a programming language theory or type systems?</span>

<b>Stephanie: </b><span style="font-weight: 400;">Oh, that's always a hard question.</span>

<b>Adam: </b>W<span style="font-weight: 400;">hat, what are you working on? What are you excited about?</span>

<b>Stephanie: </b><span style="font-weight: 400;">Okay, so, one thing that I'm working on that's, that's new for me is, at  Penn we're collaborating with some other researchers at Princeton and Yale at MIT on a project that we call the science of deep specification. And the goal of this project is to bring verification that is provided by a system like the Coq Proof Assistant. To software systems at a very large scale, right? Not just proving individual little programs. Correct. But, actually verifying a large part of your system from the hardware to your operating system to the compilers, to the high-level languages that you use. So in my part of it, I am looking at how I can apply the Coq Proof Assistant to verify and reason about the implementation of Haskell itself, or GHC.</span>

<span style="font-weight: 400;">Can I use Coq to show that some of the optimizations and some of the transformations in the type system that GHC uses are correct? And we're just starting this out. So we're just starting to be able to model Haskell code inside of Coq so that we can, not just test the Haskell compiler to know that compilation is correct, but also have some much more formal guarantees,</span>

<b>Adam: </b><span style="font-weight: 400;">As you were saying before, this may make it easier for future extensions because you'll have this proof to lean on.</span>

<b>Stephanie: </b><span style="font-weight: 400;">Yeah. So hopefully this, so have a proof to lean on. And hopefully, this can also be a platform for being able to reason about the combination of the extensions. So not just an individual knowing that an individual extension is a sound with respect to a small core language, but if we have a large proof of the entire system, we can think about how that extension interacts with everything else.</span>

<b>Adam: </b><span style="font-weight: 400;">Well. Thank you so much for your time, Stephanie. It's been great to talk to you.</span>

<b>Stephanie:</b><span style="font-weight: 400;"> Thank you. I've enjoyed it.</span>

<span style="font-weight: 400;"> </span>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1686</wp:post_id>
		<wp:post_date><![CDATA[2020-08-07 06:00:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-08-07 10:00:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[015-dependant-types-in-haskell-with-stephanie-weirich]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="dependent-types"><![CDATA[Dependent Types]]></category>
		<category domain="post_tag" nicename="haskell"><![CDATA[Haskell]]></category>
		<category domain="post_tag" nicename="strange-loop"><![CDATA[Strange Loop]]></category>
		<category domain="category" nicename="transcript"><![CDATA[Transcript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[303]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[157]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1690]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Memento Mori</title>
		<link>https://corecursive.com/056-memento-mori-with-kate-gregory/</link>
		<pubDate>Tue, 01 Sep 2020 10:00:42 +0000</pubDate>
		<dc:creator><![CDATA[webmaster@corecursive.com]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1705</guid>
		<description></description>
		<content:encoded><![CDATA[<span style="font-weight: 400;">Preparing our minds for the inevitable - death is hard. After facing terminal cancer, Kate Gregory reminded herself that this event can still become inspiring by focusing on the positive. </span>

<span style="font-weight: 400;">In this episode,  Kate is going to share her success and explain how you could apply her 5 pieces of advice to your career as a software developer to help you to build a remarkable life for yourself.</span>

<iframe style="border: none;" src="//html5-player.libsyn.com/embed/episode/id/15806042/height/90/theme/custom/thumbnail/yes/direction/backward/render-playlist/no/custom-color/87A93A/" width="100%" height="90" scrolling="no" allowfullscreen="allowfullscreen"></iframe>

"One of the great ways to get a lot done is to do a lot." -<span style="font-weight: 400;">Kate Gregory</span>

"They're like forces of nature, the things that are just happening, it's up to you to notice them or not. If you notice the good ones you have a better day. If you sit around noticing all the bad ones, you have a crummy day." -<span style="font-weight: 400;">Kate Gregory</span>

"If the constraints are imaginary, you don't have to respect them if, especially if you're the one who made them up, if the constraints are real, then you do respect them." -<span style="font-weight: 400;">Kate Gregory</span>
<h3><b>Transcript</b></h3>
<em>Note:  This podcast is designed to be heard. If you are able, we strongly encourage you to listen to the audio, which includes emphasis that's not on the page. This is a machine-translated transcript and may have errors, <a href="mailto:adam@corecursive.com">you can help correct them</a>.  Podcast page for<a href="https://corecursive.com/memento-mori-with-kate-gregory/" target="_blank" rel="noopener noreferrer"> this episode is here</a></em>
<h3><b>Introduction</b></h3>
<span style="font-weight: 400;"><strong>Adam:</strong> Yeah, let's see. I have the checklist and I didn't even do a good job here.</span>

<span style="font-weight: 400;"><strong>Kate:</strong> Press record. It's one of the big ones.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> All right. Can you state your name and what you do?</span>

<span style="font-weight: 400;"><strong>Kate:</strong> My name is Kate Gregory and I have a little consulting company and we do various things for people needing help, usually C++. </span>

<span style="font-weight: 400;"><strong>Adam:</strong> Hello and welcome to CoRecursive. I'm Adam Gordon Bell. Kate, I think is underselling herself there. She's more like a famous C++ guru. </span>

<span style="font-weight: 400;"><strong>Kate:</strong> Nobody wants to be a commodity -- cog in a wheel. I have a very particular set of skills as they say and not everybody needs them and that's fine, but if you need what I can do, then we're going to talk.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> Kate usually goes on podcasts or to conferences to talk about C++ standards or resource acquisition mistakes, or various minutia of C++. I don't really know, I don't really understand modern C++. I took a class in C++ once and I did fairly well, but I remember thinking like, this is really complicated and I hope I never hear about deconstructors again. </span>

<span style="font-weight: 400;">Anyways, today she's going to share some high-level advice. For most of her career giving advice like this would make her kind of nervous.  </span>

<span style="font-weight: 400;"><strong>Kate:</strong> Yes, I don't have any numbers. I don't have any research. And maybe everyone knows this. And I'm just, wasting their time saying, if you wear shoes, they protect your feet from sharp stones. Yeah. So it does take a little bravery to say, I think I got something off or here that the people would like.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> Kate is not wasting our time today. I promise you that, but I get why she has that fear that if she's not talking about like the minutia of the new module system and C ++, or how to code routines are going to work or whatever. That's there's less value in that. I don't think that's the case though. The source of her bravery, today is sadly not a pleasant one. </span>

<span style="font-weight: 400;"><strong>Kate:</strong> I was sick. I was really sick and for a long time, I didn't realize how sick I was. And, by the time we figured it out, they told me I had stage four melanoma. And so the surgeon had nothing to do because there was, there were tumors all through my lungs and all through my liver in two different places in my spine. So surgery doesn't work for that. Radiation doesn't work for that chemo doesn't work for melanoma. So chemo wasn't a choice. And I told my family not to Google it. Because it's awful, it's like a 5% survival. It's really awful. </span>
<h2><b>Parting Tips For My Children</b></h2>
<span style="font-weight: 400;"><strong>Kate:</strong> One of the things I was doing, when I was deteriorating was I was writing down everything I could think of. And I was writing down advice for the kids. I mean they were young adults, and I hadn't told them everything on. I started writing it down.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> So today Kate is going to share with us some of the things that she wrote down. And she was facing her terminal diagnosis. I'm not Barbara Walters, I don't really have the skillset for interviewing somebody about facing terminal cancer. But, Kate's going to make it pretty easy. She has five pieces of advice, each one as a pithy catchphrase. And then she's going to explain how you would apply that advice to your career as a software developer. And I think her advice all combined together will help you to build a remarkable career for yourself, which I think Kate has definitely done. We start with our first piece of advice which is, use the scented soaps.  </span>
<h2><b>Use The Scented Soaps</b></h2>
<span style="font-weight: 400;"><strong>Adam:</strong> If I have this right, when you got cancer, you were really mad about scented soaps.</span>

<span style="font-weight: 400;"><strong>Kate:</strong> This is true, people give you soaps, right? And I like, scented soaps and bubble bath and all those things. Everybody I think does. But if you have a brand new unopened scented soap and there's an open bar of regular soap, you don't open the scented soap, you got to use up the regular soap. Okay, and there was never a good time to open it. So I was always just using regular soap while they were like five bars of scented soap in my drawer. And then, so that one day that was like, I'm never gonna use this soap. That I've been saving for a better time. And then, I realized that there's no like, soap police to come to your house. If you have two bars of soap open at once and say, what are you doing using the grapefruit when there's perfectly good ivory right there. So I opened the soap, and it was a little thing, but it was a nice thing. Every time I washed my hands, it was a nice smell and a little joy on a tough day.</span>

<span style="font-weight: 400;">And I thought there's a lot of things in this world that there's no good reason why you're not doing them. People say, “Oh man, I wish I had a blog”. Like, you go to this website and you click here, here, here, and here and you have a blog, like there's no, again, there's no test. There are no log authorities who say, well, your topic isn't serious enough. Or your entries are too long or whatever the complaint might be like if you want to have a blog, have a blog. And, there's a lot of things like that where we just don't let ourselves do things and wander around wishing we could do them, for no good reason. So I wanted to tell people, use the scented soap,   </span>

<span style="font-weight: 400;"><strong>Adam:</strong> Outside of the washing your hands, like, what else did you feel constrained by? Is there professional constraints that were pretend.</span>

<span style="font-weight: 400;"><strong>Kate:</strong> Certainly I have in the past, felt like I can't have a blog or I can't submit to that conference or I can't go learn this other thing. Why not? If there are only so many hours in a day and you can deliberately choose and say, I would rather spend my evenings with my family, or I'd rather spend my weekends working on my house. That's cool. But if you really, really want to do a thing, you don't need anybody's permission, to learn most things, to try most things.</span>

<span style="font-weight: 400;">There are lots of conference talks you can watch or online material you can consume. So decide that you're a doctor. Right? But you can decide that you're a Ruby programmer if that's important to you. So why not? Why not start doing the things that it's making if it's upsetting you that you're not doing it. If it isn't like, if you hate scented soap and you wish no one ever gave you any, throw it all out and stop calling it an obligation. That's,  I also threw a lot of stuff out there. I was like, I'm never using this. I don't know why I kept it. And I was throwing it out to someone else. Wouldn't have to send paper. This meant a lot to mum. She's kept it for 20 years. I threw it out and so same thing like if it, if you don't know how to, I don't know, be a C ++ programmer and you think I'm never gonna, that's fine too. But don't carry around the wish that you could do a thing that no one is actually stopping you from doing, make a choice.</span>
<h2><b>Breathe Under Water</b></h2>
<span style="font-weight: 400;"><strong>Adam:</strong> Alright. So the first piece of advice, use the scented soaps. Don't be constrained by constraints that don't actually exist. The second tip/life lesson learned to breathe underwater.  </span>

<span style="font-weight: 400;"><strong>Kate:</strong> You can't breathe underwater. I'm not superhuman at all, but if you breathe out underwater, which you probably know if you took swimming lessons when you were five, but I didn't, if you breathe out underwater, then you only have to live your head, lift your head up out of the water long enough to get air in. And so that minimizes, the amount of time you have to hold your head up out of the water. This saves you from having a sore neck, but I mean, also metaphorically, you get the maximum value out of a little window when you're able to do a thing.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> It ties into your constraints. Like maybe I can't record a video on the plane, but I can write on the plane. Yeah, exactly.</span>

<span style="font-weight: 400;"><strong>Kate:</strong> Some lesser thing. It's not your top priority but it's a thing that needs to be done. And if you do it now, then when you have your clear time, you'll be able to work on your top priority. </span>

<span style="font-weight: 400;"><strong>Adam:</strong> Like, I assume, cause this is a lesson that this is something that you struggled with. </span>

<span style="font-weight: 400;"><strong>Kate:</strong> I think of an awful lot of conversations were conversations that should have happened, that took literally days extra to happen. Because I had enough because I had an opportunity that I let go by and then the window closed unexpectedly or say get stuck on a phone call or something else happens. And the situation gets worse because you let it get worse. And then, so now you really don't want to have the conversation and all of those things, but the problem doesn't go away. Right? So I would say probably 30 some years ago when I had a baby to worry about sleeping, that's when I learned this and, and it's stood me in good stead ever since.</span>

<span style="font-weight: 400;">So when I think about 30 plus years younger, me, that person missed a lot of opportunities because while I'll do it in an hour and in an hour, you, the conditions may not be there for you to do it. So do it while you can.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> Another way to frame this piece of advice is to sleep while the baby's asleep, which is some advice that Kate wrote down to share with her daughter. </span>

<span style="font-weight: 400;"><strong>Kate:</strong> There are certain things you can only do at a certain time. So sleeping, if there are no other adults in your house and there's a small baby in your house, you can only do it if the baby is asleep. Other things are more difficult with the baby, but they're not impossible. And sleeping is impossible. You either need another adult or the baby needs to be asleep. And so if the baby goes to sleep, drop everything, go to sleep, you can do all that other stuff. Don't waste a whole nap, like catching up on Twitter. That's very foolish. </span>
<h2><b>Focus on the Positive</b></h2>
<span style="font-weight: 400;"><strong>Adam:</strong> Nice. Let's see. What is the next, what's the next of your chips? Focus on the positive?</span>

<span style="font-weight: 400;"><strong>Kate:</strong> Yes, this one, I think I learned more on a professional level before I learned it personally,  just some people complain a lot and, and think that life is unfair and stacked against them. And some people are happier and they seem to have the same situations, you know? And so it started for me with things like, well, you can choose who to go to lunch with. You can choose who to walk down for coffee with. And if you're going to walk down for coffee with someone who the whole way down is going to be like, “oh, I can't believe this project. These people are morons. They don't know what they want. We shouldn't even be doing this for them. They don't deserve our time.” It doesn’t have as good a, a coffee break. Cause if you walk down with someone who's like, I'm glad we finally got them to understand what we need for this. And we can make some progress now and have a happier day.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> So, I mean, some people enjoy the process of reflecting on how other people are morons though. </span>

<span style="font-weight: 400;"><strong>Kate:</strong> They do. And it's like, you're welcome to do, you get a whole internet for that? </span>
<h2><b>Celebrate Life</b></h2>
<span style="font-weight: 400;"><strong>Adam:</strong> What is focused on the positive mean to you?</span>

<span style="font-weight: 400;"><strong>Kate:</strong> Even on a really horrible day, little things happen you fix a bug. Your code compiled, you get an email that says, yes, you're right. You get an email that says, thank you. Remember to send an email that says, “thank you”. Like there's, there's probably 50 nice things. Even on a really awful day, there were five or six nice things, even in a day when I was lying in a hospital that, nice things happen whether you notice them or not. And a lot of them, they don't change like the sunset is no different. Whether one person is looking at it or a million or none, it’s still just doing its thing. And the case with most of these nice things. Like if someone sends you an email that says you were right and you just sort of angrily saying, well, of course, it took you long enough, to yourself, but don't answer them like that has no impact on them at all.</span>

<span style="font-weight: 400;">Right. It's only on your, on you, but if you just kind of stopped for a minute and go, “yeah, that's me. I'm right. I knew it”. That can take you a long way. And so I just look for things like that are, they're like forces of nature, the things that are just happening, it's up to you to notice them or not. If you notice the good ones you have a better day. If you sit around noticing all the bad ones, you have a crummy day.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> Yeah, I like the sentiment. I think like sometimes I have to give myself a mental, like Woohoo. And sometimes it's like an air punch or something if it's like, y</span><span style="font-weight: 400;">eah. It can be for something stupid but yeah like something wasn't working and I figured out what the problem was. It's just like, yes, like you gotta.</span>

<span style="font-weight: 400;"><strong>Kate:</strong> Just like, like 30 seconds of, I am not completely incompetent. I actually do know how to do some of this and, and that's good. I'm doing, I'm doing stuff I'm good at. So that's nice because you can't miss the parts where you're not doing it well,  you make stupid, stupid mistakes and, and you'll waste an hour on something that. Any beginner would've seen you, you don't forget those in a hurry. They'll stick with you. So focusing on the good ones too, kind of balances it out.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> It helps that I work here though. Maybe it makes it worse, but if I jump up in the air and like, get excited about something, nobody notices. Right?</span>

<span style="font-weight: 400;"><strong>Kate:</strong> Yeah. That's, that's the work from the home trick. You can actually get up and like do a happy, complete, happy dance if you want,</span>

<span style="font-weight: 400;"><strong>Adam:</strong> Yeah. At work, in the office, people would have to ask me what, and I'd have to admit that it was just some missing semi-colon or something that I found.  </span>

<span style="font-weight: 400;"><strong>Kate:</strong> Exactly Right.</span>
<h2><b>These Are The Good Old Days</b></h2>
<span style="font-weight: 400;"><strong>Adam:</strong> To say, focus on the positive, celebrate your wins. It can sound a little trite. That doesn't mean it's not true, but another way Kate says to think about this tip is to recognize that these might be the good old days.   </span>

<span style="font-weight: 400;"><strong>Kate:</strong> So it's a line from a song, maybe Carly Simon? I can’t be sure, but whatever you're living right now is a time that you or someone else will look back on and say, “Oh man, remember that? The negative version of it is you never know when you're living in a golden age”. I joined the conference speaker circuit at a time when money was. Just flowing like wine when had fly places to do like a one hour talk and of course, it will send you a business class. No problem. Do you like to stay an extra four days so you can, enjoy some sightseeing, we'll take care of it all and literally, people's assistants were, were also being flown with them. And I had all these friends who I only saw if we both got on planes, it was fantastic. It didn't last, that the tech wreck came along on the conference budgets and marketing budgets went down dramatically, but it sure was fun. And there you don't know what it is about right now that you'll look back on. Even this crazy pandemic work from home locked down thing. There's a lot of negatives, but I bet you have five, 10, 20 years from now. They'll be someone going, “Oh man, remember 2020?” And they'll be positive about maybe something that you don't even know what it is yet, but this is someone's good old days.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> No. Very true. Yeah. You never think of it at the time. It's always like, in retrospect, you're like, “Oh, that was good, that was a good experience”. Probably like, I don't know that you've probably had frustrations in the heyday of conference speaking. Like you probably didn't look at it as this is the. The golden times of speaking.</span>

<span style="font-weight: 400;"><strong>Kate:</strong> No, we didn't. It would be, we'd be in a restaurant somewhere and just, I don't know, be complaining that it was crowded and noisy instead of going, can you believe we're all in Barcelona? Like this is so nice.</span>
<h2><b>Build a Support System</b></h2>
<span style="font-weight: 400;"><strong>Adam:</strong> All right. So remember that these might be the good old days. The next tip that Kate has for us is to build yourself a support system and use it. </span>

<span style="font-weight: 400;"><strong>Kate:</strong> Especially in programming and especially in C++ programming, we're kind of an old community. We have this kind of robot persona, we don't do feelings. We don't need help. We're all, I don't know, like, not just tough guys, but like, Clint Eastwood in a cowboy movie, tough guy, and we don't need people and we don't need friends and we don't need cheerleaders. That's not sense. Right? Like we're people we're technical people. We know stuff we love to show off and we love to help. And that's the truth about everybody technically. So if you have a technical problem, you don't have to lock yourself in a room for 12 hours until you solve it. You may be embarrassed to ask a coworker, but if you give the coworker that gift of asking them, and then they help you in 30 seconds like they feel fantastic. They're having their punch the air moment. Like, I got asked and I knew, and meanwhile, you've saved all those hours of time and you're productive and amazing. Yeah. You hit your deadlines and all the things that bosses care about and if it's just too awful to give that gift to a coworker, then you can ask on stack overflow, or you can join a specialized Slack or discord.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> Yeah. Do you, personally feel like you're afraid to like reach out to people for support as a professional developer?</span>

<span style="font-weight: 400;"><strong>Kate:</strong> No, I've asked questions on stack overflow, especially if it's something that it's not my thing, it'd be difficult for me to ask a C++ question. I actually wrote a course on stack overflow when I set up a second account with almost no reputation so that I could record the process of asking a question. And I asked a C++ question and like 50 people commented. Kate Gregory would never ask this question. They're generally like report the imposter. It was quite funny. But I'll, but I'll ask, like, when I started using discord, the default emojis were all nasty. They're all like poop and vomit, and just dead face and all that. And like I'm on discord and I'm all hearts and cake and, sunshine, literally fireworks, parties. And I wanted all this yuck out of my face. ‘Cause this is what I mean about focusing on the positive, right? If every time you type a colon, you get offered poop and dead face that's not a nice moment in your day. And so I asked on, I think superuser and someone told me that it's an electron app hit F12 at the JSON, which I could do and tile, all the gross stuff is gone and then, the question has got a lot of users. A lot of people want to do that. So I will absolutely ask for support. If I have a tricky C++ question. Yeah. I'll come to include because I know that no one is gonna mock me for not knowing. </span>
<h2><b>Stack Overflow</b></h2>
<span style="font-weight: 400;"><strong>Adam:</strong> Yeah. I feel like, I guess Stack Overflow is working to get better. I found like it's a, it's a harsh environment. Especially if you have a new account and you like to ask something and then...</span>

<span style="font-weight: 400;"><strong>Kate:</strong> So it is first of all, harsh. Someone asks a question and they got all this ramble-y stuff l</span><span style="font-weight: 400;">ike it's an internet recipe. <strong>“I remember the first time I visited my aunt in France and we were trying to compile a simple program”</strong>. And so you delete all that and you just like, here's the actual question. </span>

<span style="font-weight: 400;">And people are like, who did that? Well, especially if they say thanks, the culture of stack overflow is no high. No, thanks. No, I would really appreciate rip it all out. I feel like you made me a robot and that again, we're back to that program or culture thing. So there's a lot of things that stack overflow is deliberately being mean. They want you to feel hurt and they want to hurt your feelings.</span>

<span style="font-weight: 400;"> Then there's another whole category of things where they don't think they're being mean. But they're hurting your feelings anyways. And so yeah, it can add up to a tough place. </span>

<span style="font-weight: 400;"><strong>Adam:</strong> Yeah. I mean, it makes me think of what you were saying about like the curmudgeon C++ developer stereotype, right? It's like, Don't say hi like this is a permanent document. Nobody wants to see your “hi” in the future, right? </span>
<h2><b>Working on Inclusivity</b></h2>
<span style="font-weight: 400;"><strong>Adam:</strong> So stack overflow is maybe not the support system that you want. One way, Kate. Look to build a support system for herself is her involvement in the include CPP community, which is a global, inclusive, diverse community for</span> <span style="font-weight: 400;">developers interested in C++. After she got rid of some of her clients because of her diagnosis, it freed up some of your time to dedicate to this community and other clients.</span>

<span style="font-weight: 400;"><strong>Kate:</strong> To be fair, I hadn't fired them I had just told them I can't work on your stuff for at least six months. And maybe never if I die. So you should really find someone who can work on your stuff. So I had more free time and that let me kind of throw myself into it. And then we had a very virtuous cycle where as soon as anybody heard about us, they're like, “yeah, that's a great idea C ++ has this problem and I'd like to fix it. I'm not like that. I'm not the curmudgeon in the corner.”  </span>

<span style="font-weight: 400;"><strong>Adam:</strong> The people who join include CBP, they primarily hang out on a discord channel, chatting with each other.  </span>

<span style="font-weight: 400;"><strong>Kate:</strong> So for example, someone asks a question and they can be confident, they won't be called names or told they should have Googled it or there's a nice atmosphere and there's a lot of moderators behind that nice atmosphere that makes sure of it but yeah, most of the people who joined the server, they're not trying to make C++ community any different than it is. They've just happy to have found a nice corner of it. And that's great we made a thing, the group does other things as well, that I'm really proud of. We send people to conferences if you've never been to a technical conference in your field, of changing, especially if there are some folks to take you under their wing, make sure you get a ticket to the speaker dinner, introduce you to.</span>

<span style="font-weight: 400;">“Oh, I don't know the guy who invented the language”,  little things like that. And, we're up, above two dozen now, people who we've covered their travel, their hotel, their conference admission is usually donated by the conference we fundraise for the rest and we send them to a conference and give them a huge career boost.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> Oh, that's awesome like you must have recognized the problem or something to create this.</span>

<span style="font-weight: 400;"><strong>Kate:</strong> Well, the problem has been around forever we have young people really, truly, but many of them are learning from that curmudgeon at the next desk. So we have, a culture that is noticeably different from some other languages cultures. And it's a shame. It's not a great culture. It doesn't bring out the best in the people who are in it some of it is that culture of like,  we don't show emotions, we don't get happy, we don't get mad. we don't trust each other we are objective and It's all about the code, which is like just not true. But some of it is about a culture of where would you choose? If when you're angry at the compiler, you, you call it increasingly rude versions of woman. The woman next to you does not really enjoy that moment very much. Right? If your swear words are all about rude words for gay men, the closeted gay man next to you is never going to a closet around you and we pass all that on, the 20-year-old with green hair in the corner is learning how we express ourselves in this group. And, sometimes it's really completely blatant. I mean, I've watched any number of twenty-something earnest men. Tell me why women don't like programming. Just, they just don't like it. And I'm like, really? That's a fascinating observation based on your many years of being a woman and knowing what we like.  And they have this lovely circular argument where there's like, well, there aren't very many women programmers because women don't like programming, which you can tell because how few of them are programmers didn't actually prove anything. </span>

<span style="font-weight: 400;"><strong>Adam:</strong> Yeah. And it's tricky. Like, I don't know, like, obviously I'm not a woman, but, if you're, It's hard to be the only woman on the team I imagine, or the only man on the team or the only</span>

<span style="font-weight: 400;">visible </span>

<span style="font-weight: 400;"><strong>Kate:</strong> Only anything, the only one in the room. Yep.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> It's constraining, right?   </span>

<span style="font-weight: 400;"><strong>Kate:</strong> And you're sort of representing the team. So someone would be like, “Oh, black people don't like writing documentation, because while we had this black guy work for us once, and he didn't like writing documentation” well, okay. So you kind of feel like you have to like everything. You have to, you have to join everything because otherwise, someone's going to go, well, we hired a woman once, but they just don't do testing.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> Yeah, right. But for me, there'll be just like, Adam, doesn't write good tests.</span>

<span style="font-weight: 400;"><strong>Kate:</strong> Yeah, exactly. Or you're not representing, your whole group.  </span>
<h2><b>Do the Work</b></h2>
<span style="font-weight: 400;"><strong>Adam:</strong> Another thing, you said was about doing the work that was one of your life lessons.</span>

<span style="font-weight: 400;"><strong>Kate:</strong> Yep. I'm a person who is very spiky and very streaky. And when I'm hot, I can do it in half a day. What no one else could do in a week. And that's amazing. That's taken me a lot of places, but it means that there are some weeks when I spent four and a half days not doing anything and that's kind of a waste. Right? And you can tell yourself, like, I need to get ramped up and I need to get like emotionally ready to tackle this thing. Or I can't talk to X until they come into the office, but sooner or later you have to actually do whatever it is you're supposed to do. And, I remember getting really behind on a project and I had to just come clean to the client on it. And I said it's just amazing how long something takes to get finished when you're not working on it.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> You said that to a client?</span>

<span style="font-weight: 400;"><strong>Kate:</strong> I did. I told him the truth, which allows is not working on your stuff. And, is if you want me to finish it all out, I will. But this is where we are. And they said, yeah, because no one else in the world can do this and we really need it. And it would have been nice if we could have had it a couple of weeks ago, but we really need it. So I did it, but I had to be honest with myself too. Right? I just, wasn't doing it a, because that's the downside. If you're not careful, instead of having a week where you have a half a day of amazing and four and a half days of nothing, what if you had five days of nothing, then that's a very bad place so there are lots of ways to be happier and to get help and to get support and to be productive about not wasting windows and all that kind of stuff. But that doesn't take away from the fact that sometimes you need to put your fingers on the keyboard and press until the appropriate pixels appear on the screen.</span>
<h2><b>Even Super Heroes Toil</b></h2>
<span style="font-weight: 400;"><strong>Adam:</strong> that makes a lot of sense. So another thing you said was that you thought, the people just aren't, people are afraid to admit when they work hard at things.</span>

<span style="font-weight: 400;"><strong>Kate:</strong> Yes, we want to teach our kids to work hard and get stuff done. And we want to teach that 20-year-old in the same offices as to work hard and get stuff done. And yet, if you look at heroes like someone's doing a conference talk or whatever they're all like, “Oh yeah, I just threw this demo together on the plane” or they pretend they're making the demo up on the spot. I work really hard as a conference speaker. I rehearse my talks. I write my demos very carefully. I run them over and over and over until I know they will absolutely positively work and I know all the ways they can break and what to do about it. And, everybody works and sometimes things are hard. And yet the only solution is to roll your sleeves up and work on it. And so, there's a real trend. There's a couple of people who are being really open about it. How much time they're putting into this open-source library? Not just all I flung this together because I was frustrated because there was no decent, I don't know Jason parser, cause there are only 4 million Json parsers on the planet. So I flung together this Jason parser and I stuck it up here and you guys can have it if you want. And that that's becoming less of the norm now. And there are more people saying. I put in a lot of time looking for something and I tried this and it didn't work. And I tried that it didn't work. So I decided to write my own and it's still not perfect. It'd be great. If you could join me, I got a bunch of open issues and less of the sort of superhero who just tossed it together in five minutes.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> Why do people want the superhero persona? </span>

<span style="font-weight: 400;"><strong>Kate:</strong> How smart must you be? Right. You're not some like a peasant who just toils, like the million monkeys could type Shakespeare if you gave them long enough, and that there's something, yeah. Plotting and every day about, yeah, I wrote this talk, and the first time I gave it, it was 90 minutes. So I took some stuff out and then it was too short, so I put some stuff back in now, that sounds boring. That sounds like you're an accountant or something, people talk about talent and about someone's a natural, and that somehow is better than being someone who just practiced a lot maybe some people do think a certain way. But maybe that's not because of how they're born, but because of how they were raised and maybe you could learn to think that way. And I love C++ Twitter. I'm a super happy member of C++ Twitter, but we do play that from time to time, you know? Here's some really cursed C++ what does it do? And especially things involving the comma operator, the comma operator in simplest pluses don't get me started it creates very deceptive code, and. I do sometimes say like if there's like a 19-year-old reading this, they're going to think this is a difficult language and it doesn't have to be a difficult language at all. In fact, my teaching or my online teaching, especially cause I reach more people there is all about like, please do not listen to the people who told you this was difficult. C++ doesn't have to be difficult. And I actually can teach it as a first language to people who know no other programming language. </span>

<span style="font-weight: 400;"><strong>Adam:</strong> Yeah. I feel like, I'm a Scala developer and people criticize it for being a complex language, but I feel like I can always point to C++ and be like...</span>

<span style="font-weight: 400;"><strong>Kate: </strong> I did a keynote called it's complicated because C ++ is complicated and we write complicated code in it sometimes and for a variety of reasons, I mean I've got codebases that are, 25 years old. And certain things that are wonderful, that I use every day today were added to the language in those 25 years. So some parts of the codebase are struggling by, to get a job done. There were written at a time when a particular keyword didn't exist. So they’re doing it a hard way. They're doing it a long way, and then nobody wants to fix it. It's not ProCon. It's just ugly or if it is broken after 25 years, the broken is now the good, right. So you read this, this variety of code styles every day. If you're in my corner of the world where you're at some stuff's almost Pearcey and some stuff is much much more modern, It's got templates, It's const. Correct. It's great. And then you turn the page or open the next file and then, Oh, we're in this land again. Okay.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> I think like large enough and old enough codebase is just like a city. There's like </span><span style="font-weight: 400;">here’s like old Montreal and there's no plumbing here and whatever, and Oh, here's the more modern area. </span>

<span style="font-weight: 400;"><strong>Kate:</strong> Right. That's a really good analogy. That's all right, there are the places where the ceilings are too low and you can't get through the doors. And then there are the places where everything's all chrome and glass and yeah.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> Yeah. And then like weird in between, like in this place they thought like art deco was the future. Like there's this C++ is just all template meta-programming and there's nothing else. </span>

<span style="font-weight: 400;"><strong>Kate:</strong> Or, someone just learned this technique and just had to use it everywhere, whether it fit or not.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> I forget where we were at Kate. I gotta be honest.</span>

<span style="font-weight: 400;"><strong>Kate:</strong> I think, I think we did all five to tell you the truth. Let me just, yeah. we did it. We did all five. If the constraints are imaginary, you don't have to respect them if, especially if you're the one who made them up, if the constraints are real, then you do respect them.</span>

<span style="font-weight: 400;">And you, you arrange things so that when you have your window of freedom, you use it. It'd be happy, happiest, good. Let people help you and roll your sleeves up. One of the great ways to get a lot done is to do a lot.</span>
<h2><b>On Not Dieing</b></h2>
<span style="font-weight: 400;"><strong>Adam:</strong> So use the scented soaps, learn to breathe underwater, focus on the positive have, and use your support system. And last, but probably most I do the work. There's one other tip that Kate has actually, it's a funny story of coding while angry. We'll end with that. But first I wanted to ask her, about her cancer diagnosis.</span>

<span style="font-weight: 400;"><strong>Kate:</strong> Yeah that was the thing we live in the future. I went to Princess Margaret, and I went to, a specialist there in immunotherapy, which is a relatively new thing. And, he gave me a pair of drugs that at the time were not approved as a treatment. So it was a study and they worked. I was actually admitted to the hospital in October. They got me stable and they got me my first treatment. And within two weeks, all my pain was gone and my symptoms were gone. I ended up on the treatment for a year to make sure that everything really was gone, but the general consensus is, yeah, it's all gone. And so I say, we live in the future.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> I didn't actually know that there was like miracle cures for cancer out there. Like, I didn't know.</span>

<span style="font-weight: 400;"><strong>Kate:</strong> So, melanomas, you get on with all the time on your skin, you get a funny mole and by the time you remembered to talk to the doctor about it, it disappeared and you say, Oh well, and in fact, they never found what they call my primary tumor on the surface of my skin because your immune system knows how to clean them up. And it does, the problem is when you get 'em at a statis, if it gets big enough, it develops a way to hide from your immune system. And so sorry about that. And so, what the drugs do is they interfere with this sort of cloaking mechanism and they ramp up your immune system in between them. Your immune system destroys all the tumors. I was also lucky because I had, tumors in my leg just don’t sound lucky. but they irradiated those. They were very, very worried that I was going to have my hip shatter. Because all the bone was going to be dissolved by tumors. So I got radiation in my leg and that has been shown to improve. The success of the immunotherapy by blasting apart the tumor and basically priming your immune system to recognize it. So that's possibly one of the reasons why I ended up with a complete response. So, we, they don't say cured in cancer and in melanoma they don't say remission, but they do say complete response, which means all your tumors are gone and durable complete response, which means even though you're not being treated, your tumors have not come back, which is where I appear to be. Yeah.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> Wow. That's crazy, why don't they say that you're cured?</span>

<span style="font-weight: 400;"><strong>Kate:</strong> So the day I met this doctor, he said to me, “Oh, we're going to do this treatment and that treatment”. And I've been spending a lot of time crying and he said, “a lot of my patients respond well to this treatment.” And I said something fairly bitter, “like yeah, for a while”. And he said, not only he said, “I got a lot of patients who I'm waiting for them to die of old age because only then can I record that they were in fact cured and he said, that's my plan for you”. So I liked that plan and that's the deal. I know if I managed to be 90 and he died, my sleeper gets hit by a car or something. At that point, they will finally put, a one in the wind column but not until then.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> Well, I hope they get to do that. So did you, did you share all of these lessons with your children? That was the goal, wasn't it? </span>

<span style="font-weight: 400;"><strong>Kate:</strong> So I didn't have to because of the whole not dying thing. I figured I've got 30 years to continue to deal them out certainly my daughter has a child and I certainly told her to sleep when the baby sleeps. Yeah, and I have told both of them, to take advantage of support networks, both technically and personally, some of the other stuff, yeah, we'll get there.</span>
<h2><b>Angry Code and Steve's Nonsense</b></h2>
<span style="font-weight: 400;"><strong>Adam:</strong> So after Kate's miracle cure, she starts feeling like she can give more keynote, more high-level idea talks kind of like the talk we've been having here today. </span>

<span style="font-weight: 400;"><strong>Kate:</strong> I was actually invited to keynote meetings C++, before I got sick, Yensi who runs meetings, syphilis pluses, super organized guy. And, and he approached me and said two years from now, will you keynote for me? And, enough time went by that I could get sick, get my miracle treatment, get better, be free. Be cleared to travel, compose a keynote, fly to Germany and deliver the keynote and it was pretty technical. But, but it had this sort of germ of philosophy and it was, people liked it. People said, will you come and keynote ours? And so I spent about a year talking about simplicity. What does it mean if your code is simple?</span>

<span style="font-weight: 400;">Why is that a goal that you might want to aspire for? </span>

<span style="font-weight: 400;"><strong>Kate:</strong> And so I did a talk called emotional coat, which I often tell people is subtitle is I can tell you were angry when you wrote this. The example that I used in the talk, it says, undo Steve's nonsense as the name of the function. And I did see this in production. It wasn't Steve, and it also didn't say nonsense. But to some words, you can't put in, in slides and someone checked that in, right? With their actual coworker's name and a swear word. So like, I don't know, let's say it was copying a file over to the archive directory under Steve's nonsense, moves the file back out of the archive directory, back to where it was before. And then later,  it ends up in the archive. So it gets done three times. And this system does a bunch of steps and does all those steps. And then later at what the second program thought was the right time. It does all the steps again, think of the CPU cycles being wasted because two people couldn't agree on what order to do something in. which to a C++ person is just the worst.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> Yeah. There's a team issue there, for sure, right? Yeah.</span>

<span style="font-weight: 400;"><strong>Kate:</strong> Yeah. And, and probably both Steve who isn't really Steve and whoever wrote the function are long gone and it's only when someone like me comes in and says, what is happening here?</span>

<span style="font-weight: 400;">That sort of, it all comes to light. And so, yeah, these are kind of soft skills in a way and managing and building a strong team that can count on each other, but they're very technical and that we're talking about, I'll make you, I'll make your application run faster or use less memory or blow up less often.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> I feel like the idea talk or whatever you want to call it. Like that was one of your scented soap. You were afraid to do one, and then you were like, </span>

<span style="font-weight: 400;"><strong>Kate:</strong> No one said that to me before. And I think you're right. That's that's interesting. Thank you. </span>
<h2><b>Facing Death</b></h2>
<span style="font-weight: 400;"><strong>Adam:</strong> If all developers were more like cognizant of their mortality, would that be useful? I don't know, how would the world be different? </span>

<span style="font-weight: 400;"><strong>Kate:</strong> Certain apps would not get built. Just what are you leaving behind as your legacy? Certain apps would not get built. Certain companies I think would also lose all their stuff. I mean, imagine you work for a game company and they're crunching and, you're crunching in March so that the product can sell well at Christmas, but you're, you're going to die in June.</span>

<span style="font-weight: 400;">You're going to crunch in March. You're not going to crunch in March. So yeah, some things would change cause people, we put up with stuff because we believe there will be time later when we won't be putting up with that. And that's really what happens when you stare mortality in the face, as you realize, there will not be time later without that. So if you would like some time without that, you need to cause that to happen right now. And that, that brings bravery that is not there. And day to day life.</span>

<span style="font-weight: 400;"><strong>Adam:</strong> All right. That was the show. I hope you liked Kate's story. Oh, Kate wants to give a shout out for IncludeCPP. It's includecpp.org and a CPPCon, which is happening in September. I believe, and probably include CBP will be giving away some scholarships to remotely attended. so check out both of those and if you liked the episode if you like the podcast, tell your friends who you think might also like it. Supposedly podcasts spread through word of mouth. That is what I've been told. All right and until next time, Thank you so much for listening.  </span>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1705</wp:post_id>
		<wp:post_date><![CDATA[2020-09-01 06:00:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-09-01 10:00:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[056-memento-mori-with-kate-gregory]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="c"><![CDATA[C++]]></category>
		<category domain="post_tag" nicename="kate-gregory"><![CDATA[Kate Gregory]]></category>
		<category domain="category" nicename="transcript"><![CDATA[Transcript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1709]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[157]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[580]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>Memento Mori</title>
		<link>https://corecursive.com/memento-mori-with-kate-gregory/</link>
		<pubDate>Tue, 01 Sep 2020 10:00:18 +0000</pubDate>
		<dc:creator><![CDATA[webmaster@corecursive.com]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1707</guid>
		<description></description>
		<content:encoded><![CDATA[<span style="font-weight: 400;">Preparing our minds for the inevitable - death is hard. After facing terminal cancer, Kate Gregory reminded herself that this event can still become inspiring by focusing on the positive. </span>

<span style="font-weight: 400;">In this episode,  Kate is going to share her success and explain how you could apply her 5 pieces of advice to your career as a software developer to help you to build a remarkable life for yourself.</span>

<a href="https://corecursive.com/056-memento-mori-with-kate-gregory/" target="_blank" rel="noopener noreferrer">Podcast Transcript</a>

"One of the great ways to get a lot done is to do a lot." -<span style="font-weight: 400;">Kate Gregory</span>

"They're like forces of nature, the things that are just happening, it's up to you to notice them or not. If you notice the good ones you have a better day. If you sit around noticing all the bad ones, you have a crummy day." -<span style="font-weight: 400;">Kate Gregory</span>

"If the constraints are imaginary, you don't have to respect them if, especially if you're the one who made them up, if the constraints are real, then you do respect them." -<span style="font-weight: 400;">Kate Gregory</span>

<strong>Links:</strong>

<a href="http://www.gregcons.com/" target="_blank" rel="noopener noreferrer">Gregory Consulting Limited</a>

<a href="https://app.pluralsight.com/profile/author/kate-gregory" target="_blank" rel="noopener noreferrer">Kate's Classes in Pluralsight</a>

<a href="https://www.includecpp.org/" target="_blank" rel="noopener noreferrer">Include CPP</a>

<a href="http://www.gregcons.com/kateblog/" target="_blank" rel="noopener noreferrer">Kate's Blog</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1707</wp:post_id>
		<wp:post_date><![CDATA[2020-09-01 06:00:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-09-01 10:00:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[memento-mori-with-kate-gregory]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="c"><![CDATA[C++]]></category>
		<category domain="post_tag" nicename="kate-gregory"><![CDATA[Kate Gregory]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1711]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:15:{i:0;s:26:"02:34 -- Tips For The Kids";i:1;s:22:"03:30 -- Scented Soaps";i:2;s:27:"6:52 -- Breathe Under Water";i:3;s:30:"09:27 -- Focus on the Positive";i:4;s:23:"10:04 -- Celebrate Life";i:5;s:26:"13:08 -- The Good Old Days";i:6;s:35:"15:19 -- Build a "Support System”";i:7;s:23:"18:17 -- Stack Overflow";i:8;s:20:"19:26 -- Inclusivity";i:9;s:20:"24:20 -- Do the Work";i:10;s:26:"27:31 -- Super Heroes Toil";i:11;s:26:"31:46 -- Complete Response";i:12;s:19:"35:56 -- Soft Talks";i:13;s:19:"36:49 -- Angry Code";i:14;s:21:"38:41 -- Facing Death";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1029]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/056-Memento_Mori_with_Kate_Gregory.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[00:40:33]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[38.46 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Kate Gregory]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/gregcons">@gregcons</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[1714]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>2320</wp:comment_id>
			<wp:comment_author><![CDATA[David Morash]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[davidmorash@runbox.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[159.2.254.97]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-09-01 11:07:33]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-09-01 15:07:33]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I really enjoyed this.  As a 50ish developer I've got quite a different perspective to my younger peers.  A lot of what Kate said resonated with me. Enjoying the work I'm doing, helping the team succeed, and leaving at the end of the day knowing I did good work are the forces that drive me on. 

And maybe it's time to look at C++ again, I haven't touched it in years.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1598972853.78262;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>2321</wp:comment_id>
			<wp:comment_author><![CDATA[Adam Gordon Bell]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[adam@corecursive.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[65.95.218.93]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-09-01 20:00:03]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-09-02 00:00:03]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks! I'm glad you liked it.  Kate is excellent.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>2320</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1599004834.4639311;s:5:"event";s:9:"check-ham";s:4:"user";s:4:"adam";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>To The Assembly</title>
		<link>https://corecursive.com/057-assembly-wth-matt-godbolt/</link>
		<pubDate>Thu, 01 Oct 2020 10:00:08 +0000</pubDate>
		<dc:creator><![CDATA[webmaster@corecursive.com]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1724</guid>
		<description></description>
		<content:encoded><![CDATA[How do CPUs work? How do compilers work? How does high-level code get translated into machine code? Today's guest is Matt Godbolt and he knows the answers to these questions.

How he became an expert in bare metal programming is an interesting story. Matt shares his origin story and the creation of compiler explorer in today's interview.

<iframe style="border: none;" src="//html5-player.libsyn.com/embed/episode/id/16214276/height/90/theme/custom/thumbnail/yes/direction/backward/render-playlist/no/custom-color/87A93A/" width="100%" height="90" scrolling="no" allowfullscreen="allowfullscreen"></iframe>

<span style="font-weight: 400;">"I want to engender, hopefully, excitement in other people that I feel when I start taking the lid off  of the computer and pulling out bits further and further down the stack until you get to the CPU and then go like, Oh my gosh, I've got all the way to the bottom. And then someone taps you on the shoulder, says, no, you can go deeper than this.  And you are like like deeper, this is amazing and keep on going. ." - Matt Godbolt</span>

"I think it does inform the way that you write software. Just knowing how the ground works. I think there are some things that, that there's nothing that can save you from yourself if you don't do it. If you don't know a few things about how everything's working at the bottom" <span style="font-weight: 400;">- Matt Godbolt</span>
<h3><b>Transcript</b></h3>
<em>Note:  This podcast is designed to be heard. If you are able, we strongly encourage you to listen to the audio, which includes emphasis that's not on the page. This is a machine-translated transcript and may have errors, <a href="mailto:adam@corecursive.com">you can help correct them</a>.  The podcast page for<a href="https://corecursive.com/to-the-assembly/" target="_blank" rel="noopener noreferrer"> this episode is here</a></em>

<strong>Matt:</strong>
I think that's probably the thing that I want to get out of this conversation with you, is that I want to engender hopefully the excitement in other people that I feel when I start taking the lid off and pulling out bits further and further down the stack until you get to the CPU and then go "Oh my gosh, I've got all the way to the bottom" and then someone taps you on the shoulder and says, "No you can go deeper than this," and you're like, "Deeper? This is amazing," and keep on going.

<strong>Adam:</strong>
That's Matt Godbolt. He's an expert in low level computing, he's going to teach us some lessons about why it's important to understand what happens between your high level language and when things get executed down at the level of the CPU. For instance, what does a for-loop in your high level language actually turn into when it's executed by the CPU and does that have performance implications?

<strong>Adam:</strong>
Matt's an important speaker because he has all this knowledge and how he came by it is a pretty interesting story.

<strong>Matt:</strong>
It all came out of a lucky break, where an afternoon's work with a friend and a bit of JavaScript and a memorable last name, and here I am.

<strong>Matt:</strong>
I carry a certain amount of guilt for that, but that's also just being British.
<h1>Welcome to Corecursive</h1>
<strong>Adam:</strong>
Hello and welcome to Corecursive, where I bring you interesting stories about software development. Before we get into the episode with Matt, I have a brief plug, I started a new job, I now work at Earthly, we're building an open source build tool. You can find it on GitHub, search for Earthly. Builds are always a big mess and we're trying to make that situation a bit nicer.

<strong>Adam:</strong>
Back to Matt. Matt's fame is not all luck as he describes it, we're going to walk though his story a little bit and I think you'll see that he's been on a trajectory to be the expert in what happens when you get down to the metal, for some time.

<strong>Matt:</strong>
I was about seven and I went round to a friend's house and they had a very, very, very primitive flight simulator that he was flying around, and I was apparently uninterested in that, but when he then showed that you could type in stuff and make stuff scroll up the screen, apparently that was what enthralled me, and so I was very, very lucky to get one of them for myself for my eighth birthday.

<strong>Matt:</strong>
That was yeah, 1984, so I've been hacking on computers for a long time now, 36 years.

<strong>Adam:</strong>
That computer as the ZX-Spectrum an 8-bit computer with 48K memory and a 16K ROM. Also it had a tape drive, because we were in the era before discs were very common. What did this computer look like? Did it look like computers as we picture them today, or?

<strong>Matt:</strong>
If you have any kind of reference point, maybe in the US in particular, things like the Apple II, IIE, that kind of era, that kind of thing. The Spectrum was relatively small, so the keyboard was probably smaller than an average laptop keyboard area, and the keyboard was the computer.

<strong>Matt:</strong>
The keys themselves were like rubber, they were like a rubbery mat with indentations in them, which underneath there was a very simple, literally just a thin ... Oh gosh, what are they called? Membrane, which made contact or not. It was a very horrible feeling thing, it was very wooly, very bleeh.

<strong>Matt:</strong>
The whole thing was the computer, you plugged it into a television and you tuned the television into the right channel and it was blurry of course, because it wasn't very good, and yeah, and it was tiny really, you could hold it in your hand and wave it around type of thing. It was notoriously prone to overheating in some cases and there as an expansion port in the back.

<strong>Matt:</strong>
It was a fun little computer to play around with. You would buy games from the local newsagent, for £2.99, which is about five bucks-ish I guess, and you'd put them in and it was just like listening to an old modem sound, the screeching or whatever. You'd wait four or five minutes to get the 40-odd K of data in and then you'd play your game and you'd have to hope as well that there wasn't a corruption on the tape, that it would then crash and you'd have to start again.

<strong>Matt:</strong>
There was a lot of fun about that and you knew, you were very much exposed to how the computer worked when you just turned it on, because you'd get a blank screen with a, "Okay, what do you want to do?" Obviously as a game player you would just say, "Load the thing I'm about to put in, the cassette tape.

<strong>Matt:</strong>
If you don't have many games, another alternative would be to buy magazines from the same newsagents you were getting the games, and they would have type-in listings at the back, and that's how I got started in programing, would be to, the enthralling picture on the cover the magazine of course would never actually meet the quality of the type-in listing that you spent four or five hours typing in.

<strong>Adam:</strong>
This is crazy, right? Instead of buying the game on a cassette tape, you could buy a magazine and then in the back 20 pages was just all the source code, printed out in Basic. You would type it in and hopefully you didn't make any mistakes.

<strong>Matt:</strong>
Then of course, once you've typed this thing in, you have to save it to the same unreliable cassette tape that you were loading the games off of, so you had to hope that you A, got it right, B, you were able to save it so you could recover it. Of course, you would make typos, you would make typos all over the place and that would introduce one to the process of what a program was.

<strong>Matt:</strong>
Even if you weren't a programmer and even if you didn't understand what you were typing in, you would get the gist of what it was. Certainly if you were then curious about it, it was a definite leg in to discovering how one might make one's own. That was how I started, was starting to write little Basic programs, literally as in basically the programming language.

<strong>Matt:</strong>
Then latterly you would start typing in these giant, instead of Basic that you could understand, there would start to be more and more of these, just data statements after data statements. Of course if you then look into it, you realize that what you're typing in is the Machine Code of an Assembly based game.

<strong>Matt:</strong>
Unfortunately this computer, the Spectrum, did not have a built-in assembler, you actually had to go and buy an assembler, but you could of course do it by hand or if the person who had authored it, and sent off their program to the newsagent, had essentially compiled, compiled, assembled their code and then dumped it out as hex, and then just said, "Well, type that all in and then you get a game." Obviously that's much more intractable to a user.
<h1>What Assemblers Do</h1>
<strong>Adam:</strong>
All right, I'm going to get some of this wrong, but bear with me. Basic is a basic programing language, 10 printing hello, 20 go to 10, it just keeps printing hello, right. To do more advanced things in these games that were in the back of the book, they would drop down to Machine Code. Machine Code is a level below Assembly code, it's really just raw binary or hexadecimal. It's the actual instructions the CPU can execute. Matt couldn't really understand this Machine Code, but he wanted to understand it and he wanted to understand what Assembly was.

<strong>Adam:</strong>
Assembly is one level above Machine Code. Where Machine Code might just have a binary representation for a jump instruction, Assembly has mnemonics, so it would have JMP for jump. Assembly also has labels, just like in Basic, so that you can jump to certain locations, like go to 10, in my example. Matt didn't have any of this, but he didn't want to program his Spectrum in Machine Code, so he persisted.

<strong>Matt:</strong>
My very first working Assembly program, I remember vividly, I was at a swimming gala, waiting for my turn to swim, and so I must have been 13-ish, 12, no, maybe younger than that, because yeah, there's the part of the story we'll get to, but around 11 I would say, 11 or 12. I'd written out very carefully, by hand, all of the Assembly instructions for just something which scrolled a piece of text at the bottom of the screen.

<strong>Matt:</strong>
Then I had to obviously hand assemble it, that is take the fact that this one is an LDA,62 with the equivalent bytes and then when I got home I would type in the sequence of bytes, run it with my fingers crossed, and of course no debuggers, no feedback other than it either worked or it went horribly wrong. I was very, very fortunate that probably for the first and only time in my career, a program I wrote on paper worked first time.

<strong>Adam:</strong>
It's almost just like a simple look-up table, right? You're, I want to add, but then for that it's this hexadecimal code or something.

<strong>Matt:</strong>
Exactly right. The assembler's job is pretty straightforward, it gets a little bit more complicated because there are often opcodes or the primitive instructions that you want the computer to run for you, have different ways of phrasing them. The word is the same that the human writes, but depending on the context it's used in, you want to use a different, an actual number.

<strong>Adam:</strong>
It's like '80s Sudoku, instead of sitting by the pool figuring out numbers, you're looking at new codes.

<strong>Matt:</strong>
You're looking at the charts, right, right, right. I mean probably the most important that an assembler is able to do is to allow the programmer to define labels and essential goto statements, so I know everyone hates goto and no-one should be using goto in any modern programming language, but when you get right down to the metal, that's pretty much all you actually have. All the CPU has is arithmetic instructions, comparison instructions, multiply, divide, loads and stores and things, compares and gotos or jumps or branches, they're all basically the same thing.

<strong>Matt:</strong>
Now, the branch location has to go to essentially a label, so you're going to say, "Hey, come back to this location." Your average loop would be, "Here's the top of the loop, do some stuff, decrement the counter. If the counter is not yet zero then go back to the top of the loop."

<strong>Matt:</strong>
Those addresses obviously change, because depending on the amount of work that you've done between the start of the loop and the end of the loop, the number of bytes of actual instructions may change, the address of where the label is may change, and so there's this huge rippling effect where, if the assembler wasn't tracking this for you, you would be on your poor handwritten stuff, scratching out everything that was an address and adding one to it, because you just had to insert an instruction right at the very whole top of the program, and of course that's a huge pain.
<h1>Enter A Friend</h1>
Adam:
Yeah, no, definitely. When you were writing out all these programs, hand-assembling it and stuff, I don't know, what did your family think or your friends? Did they think it was cool or that you'd gone bonkers, or?

Matt:
I think probably the latter. In fairness, the hand-assembling stage didn't last very long, but yeah, my family I think, always thought I was a little unusual in this. I was very fortunate that on the first day of my secondary school, so that would have been high school, just before high school age, I bumped into a good friend, well, someone who became a very good friend, who was also very much into computing and the same level that I'm in.

Matt:
I'm still in touch with him and still great mates, and that allowed us to form a nucleation point for a bunch of similarly-minded geeky kids, when nerdiness and geekiness was not cool. I'm not sure it is cool now, but maybe it's different than it was, especially in my, the late '80s, early '90s Britain.

Adam:
Matt's school had a computer lab full of these computers, the BBC Micro and he ends up getting a BBC Micro at home as well.

Matt:
At lunchtimes, people were allowed to go in and obviously use the computers to play games of course, which was what everyone was going to do, once you have a roomful. From that point of view the computers were cool and if you knew how they worked and could the latest games or whatever, then you were only cool to the people who wouldn't otherwise have thought you were cool, in that room, in that context. I mean you got at little bit of cache there, but it didn't necessarily flow outside into the PE lesson, not quite the same level of cool there, for your average scrawny, British, nerdy, kid.

Adam:
Matt and his friends start making little demo applications for the BBC Micro.

Matt:
We were writing little demos, little examples of how cool you could make the computer run. At the time, the same magazines that I used to buy in the newsagents, were always looking for new submissions, and so he and I would send our submissions off to Acorn User, BBC Acorn User. If we were very lucky they would print them and they would send us £10, £20, £50 with a star rating.

Matt:
Then in, oh gosh, where were we? In the 1989 or 1990 era, 50 quid for two 14 year olds was a lot of money, thank you very much, so the pair of us did very well out of those. The kind of things that we were doing there would be, Mandlebrot generators, Julia Set generators, just funny little programs that made nice pictures happen on the screen.
<h1>To University</h1>
Matt:
Around the time that I was talking about, those mid-teen years when we were writing our stuff and sending to Acorn User, the Atari ST was out, the Amiga was out, and they had vastly, vastly superior sound and graphics and everything, but we were doggedly hanging on to our old ways. When I did make the leap, I made the leap to the 32-bit era.

Matt:
An interesting point actually, so Acorn, that was the company behind the BBC Micro, they knew also that the writing was on the wall for their 8-bit era, and they thought to leapfrog 16-bit too. Some of the engineers that were working at Acorn at the time, looked around for a CPU that could take them to the 32-bit era. They couldn't find something they liked, they designed something and they rather hubristically called it the Acorn Risc Machine.

Matt:
This was the name for the CPU, the first revision of that chip was never actually placed into a real computer, but the computer that I had had the second revision of that chip, and I've been talking about that chip all that time, because he big reveal at the end of this is that the Acorn Risc Machine became the Advanced Risc Machine, which became the ARM chip. The ARM chip was designed by the team that built the BBC Micro, based off of their experiences working with the 6502 in the late '80s, or mid '80s I should say.

Matt:
Anyway, so nowadays, they're ubiquitous, there's about, probably half a dozen of the damn things in my cell phone here, they're everywhere, but they had their roots back in the era that I grew up in.

Adam:
Matt heads off to university, and he spends most of his time there not going to classes, but writing games for his new ARM Machine.

Matt:
Mostly, this was before virtual memory, before process separation really, it was an interesting operating system. I mostly wrote little games, I tried to write some games, there's a game called Blur, that there's a video around somewhere, that Richard, who I was still I contact with, and I wrote together. Probably the most important thing that I wrote on the Acorn Archimedes, as it was called, was an internet relay plan, an internet relay chat plan, so if people remember, back in the days before InstaMessaging and things like that, there was IRC.

Matt:
IRC was essentially a federated network of messaging between hubs and you could send messages to each other, and it was sort of interactive, there were channels, a bit like slack groups these days. At the time there wasn't a client for the Archimedes, so I wrote my own. Being the person that I was and the experience that I had had, and not really having a C compiler, there wasn't C compilers ... There were C compilers, but again, like the assemblers of yesteryear, you had to go an buy them, there was no GCC that was available.

Matt:
I took the very sensible approach of writing an internet relay chat client in straight Assembly. This is a fully windowed system, right, you've got drag and drop windows, there's an operating system you're interacting with, there's clipboards, you're doing TCP/IP conversations and stuff, of course Assembly is the right thing.

Adam:
I know how this goes, I get out my pad and paper and start writing. I guess you had an assembler.

Matt:
Thankfully the Archimedes also had a built-in assembler, so that was not a big deal, but yeah, the whole thing was written in Assembly. In the middle of that, the thing that was de rigueur for the day was that your IRC client, so at the computer lab we were using whatever, IRICS or some systems that the computer had, sorry, the computer department had available to us.

Matt:
They were all UNIX C based and their UNIX things all had, sorry, all their UNIX IRC clients all had scripting languages built into them, so that you could have things that greeted people when you joined the channel, you could protect the channel, you could set the topic and all the rubbishy things that people love to do in those kinds of environments.

Matt:
I decided I also wanted to have a scripting language in my IRC client. I added an object-oriented BASIC into my IRC client, which taught me two things. One, the people who had written BASIC the first time round on the Archimedes, were amazing at what they were doing. Sophia Wilson is the person I know who was most involved with it. It's just amazing, the speed of it was phenomenal, my interpreter was staggeringly slow in comparison. I learnt how bad I was at doing it. Even though I'm writing it in straight Assembly, it's not a patch on what they had done.

Matt:
The second thing was that once you do this, it was a shareware program, so people were paying me 10 quid to register it, although it was freely available on download sites, and that kept me in beers at university, so I've been very fortunate that I've had a couple of things along the way that have kept me in decent ... Yeah, decent ... I can't think what the right word is, so yeah, kept me going.

Adam:
You had financial assistance.

Matt:
I did, I did. Yes, I did, exactly. Once it was released, somebody smart realized that the scripting language, which I had started to write more and more of the system, bootstrapping wise, well, why would I write this thing in my horrific Assembly code, now I've got this language I can write, so I would write it in that. Then things got out of hand and before I knew it I got a patch sent to me, or rather an email saying, "Hey, do you know you can take your scripting language and do this?" Someone had written a web browser, a primitive web browser, a news reader and an email client in IR BASIC, in IR client and I'm like, "Oh my God, what's ..."

Matt:
I can't remember which rule it is now, there's, all programs expand until they can either produce or consume email, I think is the rule. It was definitely the case for me. That was my first interaction with somebody who I didn't know well, coming out of the blue and saying, "Your code's cool, but it can do this as well," and showing me the way. It was a really interesting moment.

Matt:
Yeah, that was what I did with that. The source code to that is actually on GitHub now, I found it on an old hard drive and I was like, "Oh, gosh, now everyone can see how dreadful this stuff was." Because it's 3:00 in the morning, you're writing, you've got to think of another label name for your Assembly loop, the same as all the other loops that you've written, except slightly different, and so it's called, Womble loop Jedi three. Yeah, that makes sense. It makes no sense, no sense, unless you're high on caffeine.

Adam:
Matt spends his university writing games and on IRC, and eventually he gets to the last year of school.

Matt:
In about the last year of university I'd gotten chatting, over IRC pleasingly enough, with somebody who worked for a games company. When I was starting to look for a job he suggested applying to them. I did and went along and they ... The interview went very, very well, they said, "When can you start?" I'm like, "Well, you realize I'm still at university." They were like, "Oh, well, do you have to finish it?" I thought, "My parents would crucify me if I didn't actually complete my degree."

Matt:
They agreed to let me come back as an intern during the summer holidays and things, but yeah, so I ended up working for a games company called Argonaut Games, and they're, the amazing people I met and things I learnt there were just quite something, and I had a great time. It was also a lot of long days, into nights, weekends, all the bad things you've heard about the games industry crunch, it was too.
<h1><strong>High Level Langauges</strong></h1>
Matt:
Looking back now, with my more open eyes, I can also see that it was not a very good environment, it was a lot more toxic than it had any right to be. There were a lot of things that weren't good about it, but it was of it's time, is probably the most charitable thing I can say about it. By this point I'd learnt C begrudgingly, and the had graduated on to C++.

Adam:
Let's not skip over that, so look, there must have been some point where you were like, "Hey, I can use a high level language like C instead of Assembler."

Matt:
That's true, so I was definitely put off for the longest time because of the lack of a C compiler. I came across a hooky copy of the C compiler for the Acorn Archimedes, and at that time, and I'm not proud to say it, but I was very snooty about the code generator. I'd spent my life writing Assembly, like it was a fluid language, and I mean I look back and I can look back thankfully, because of this hard disc image I found. The code's terrible, I can believe that I thought I was good at it.

Matt:
The compiler code probably was about the same level of quality, but of course I didn't understand C very well, so I sneered down at it as like, this is a macro assembler gone bad. Now look, I feel, that's actually probably a great way in, for an Assembly programmer who was using macros, to just say, "Well, call this a function instead, and now I've got a thing, or I can use a hash to find something, and now I actually have got a macro, a real macro that works better."
<h1>Market Making</h1>
Adam:
I feel like this is a big moment for Matt. He finally admitted that a high level language might be useful, that it might be able to write Assembly better than he does. He's not no longer interested in Assembly, he's still going to look at the generated Assembly, but he's willing to let the compiler write it. I think this foreshadows where he ends up.

Adam:
Matt leave the game industry. He moves over to the United States, to Chicago, and he gets a job at a trading firm, doing market making.

Matt:
The best analogy I have for a market maker, which is not a very flattering one, is like a used car salesman. "I will buy your car for this price." Then the guy who walks in immediately after you, wants to buy the car from me, and I'm going to sell it to him for a lot more money than you sold it to me. Because my job is to warehouse the cars and provide ballast for both sellers and buyers.

Matt:
That's what a market maker is doing, they are someone who is in the market and that's how you can buy Google shares at any price, because somebody somewhere has got a big stock of them and is prepared to sell them, but also to buy more of them at a seemingly fairish price. That's what I spent the first few years doing, was doing market making for particular types of US stocks.

Matt:
Of course, everybody is playing a game where they're looking at the world and actually going, "Well, actually maybe I'm prepared to pay a penny more or a penny less." The thing is changing at a staggering rate, we're talking saturating a 10 gigabit ethernet line with the changes, just the change information about exchange, and there are 14 in mainland US. It's a lot of data you're processing, at essentially line rate, or getting on towards line rate.

Matt:
Though the barrier to entry is, you have to be able to consume this amount of data, make an intelligent decision about what you're going to do in amongst all of that, so obviously what you need to be able to do is react very quickly.

Adam:
Yeah.

Matt:
Whenever you want to react to stuff quickly, and you want to deal with floods of packets, you turn to a compiled language, and in our case we turned to C and C++. Yes, I inherited a code base that was predominantly C++ 98, so that's the original-ish C++ era. A couple of years in we were looking at whether or not it would be okay to start adopting some of the new features that were coming in C++ 11.

Adam:
All right, so here we have Matt who was begrudgingly dragged into C and C++ from Assembly, and he works at a place where they struggle just to keep up with the market flow. There are new convenience features coming to this language, Matt is now primed to become an expert on how the sausage is made. What happens inside a giant optimizing compiler like GCC and how does that affect his ability to write programs that can keep up with the market flow?

Matt:
C++ 11 gave us two things, and many other things, huge amounts of other things, so I'm glossing over those, but it gave us the auto keyword which says, "Yeah, just, the type of the variable is, whatever I'm equaling it to," so if you did auto I = 0 you're getting an N.

Adam:
Type inference.

Matt:
Exactly, yeah. I know other languages have much more sophisticated systems for doing this, RUST in particular is even more sophisticated, but C++ is pretty much like, whatever is on the other side of the equals determines what you are. With some of course, wonderful C++ strange caveats and asterisks and footnotes about the weird edge cases, but it wouldn't be fun if it was easy.

Matt:
We got auto and we also got the range for, and so now I could do, for auto I:vec and now I'm getting all the integers of I in the vector and that's great. Obviously, well, not obviously at all, we had been burned previously in other languages, so there was a mixture of languages that were used in the desks, some of it was written in Java, and Java is an excellent language, but we had been bitten in Java with iterators.

Matt:
Because if you iterate over a range of things in Java, a new object is created, every time you do that you get a new iterator that goes over the object. The one thing that we, the Achilles heel of the systems that we had before, was that we just basically couldn't afford to let them garbage collect.

Matt:
We had so much junk in there that it couldn't be done quick enough for our systems to be, to remain on and in fact the GC thing, the first it would do is try and turn off the system so that we could spend hundreds of milliseconds churning through, and then deal with the fallout of everything going wrong, because we'd missed maybe some packet off of the wire, while we were, anyway, all those things.

Matt:
We were avoiding it by trying to not create garbage, and so this iteration idiom that we would have liked to have used in Java was off limits, we had to just, for NI=law, I is less than vector or size equivalent in Java. When we've said, "Let's use the new cool features in C++," quite rightly the lead programmer was like, "Are you sure that's the same?"

Matt:
A pal and I sat down and we, this is going into lore slightly now, so the tale has grown somewhat in the telling, but my memory is that we wrote a very simple function in C++ and compiled it and just dumped the output with objdump and the disassembler and the demangler and whatever. We did that a couple of times as we fiddled with stuff, and then I had the idea to use the UNIX watch command, and what watch does is it runs the rest of the command over and over again, highlighting the differences.

Matt:
I was able to take the compiler and sorry, I was going to say, like watch, run the compiler on temp test.C, pipe it through all these things to demangle it, get rid of some of the stuff that the compiler generates that I don't care about, and then show me that please. Then I split the terminal in half and I had VI on one side and I had the results of this on the other. I was able to make changes, and every two seconds it would immediately show me the Assembly output.

Adam:
Can you picture it? Basically we have a split screen, on one side you have your text editor with a single file code, and on the other side you have your generated Assembly, which the compiler emits. It's basically nonsense to me, but not to Matt. Even to me, if I change the idiom, it shouldn't produce a whole much more Assembly. It shouldn't have new, extra allocations.

Adam:
If something like that happens, then I know something's up and that I should look into it.

Matt:
Of course, naturally, that was a very valuable and useful thing to be able to do, to just experiment interactively. I think, even I at the time, C++ compilation is such a heavyweight activity, that until my friend Jordan had showed me how quickly he could just knock up a thing in a temp directory, it was a log, three lines and run the compiler on it. I was like, "Well, yeah, actually that's not too bad is it, it doesn't take too long." Of course it's quite fast, it compiles four lines of code.

Matt:
Until that had happened, I just would never have done it, I'd never have experimented in this way.
<h1>Bit Shifting</h1>
Adam:
Once you have this tool, one performance question you might want to ask it, is when are bitshifts a worthwhile optimization? Bitshifting is, instead of multiplying a number, you shift it. Shift an integer left is equivalent to multiplying it by two, but it can be faster in certain circumstances.

Matt:
If you look at the Doom source code or the Wolfenstein 3D source code, you'll see that it's covered with things like, A equals A shifted up by eight plus A shifted up by two. You're like, "What?" A shifted up by eight, that's 256, A shifted up by two, that's four, oh you're multiplying it by 260. I see what you're doing there. You're using shifts, because shifts are faster." All right, and then you can say, "Well, okay, that's cool.

Matt:
Obviously the compiler nodes are strict too, and the thing about the compiler, it's much more consistent about applying that trick than you are, and so any time you're multiplying by 260, it says, "I've got you, I know what you're doing here." At the risk of revealing one of the big spoilers in one of my talks, where I talk about this particular thing, what you can do is, you can take a particular number, I forget which one it is, it's got a certain number of set bits, and you throw it in a compiler and instead of using the shifts and adds that you see if you do a multiply by 10, it just goes back to using a multiplier.

Matt:
"Oh compiler, you gave up, you gave up didn't you? You decided that my number wasn't worthy, you're just going to use a multiply instruction." If you sit and pick it apart, and go, "Well this is, A shifted up by 10 plus A shifted up by four plus A shifted up by two, minus A, because it's one less than all of that, okay right." You put that into the compiler and you see, "Oh and it still doesn't multiply. I wrote it out as shifts and adds, because that would be faster and you turned it back into the multiplier again."

Matt:
It's like, "No, you're stupid, because those shifts and adds are no longer cheaper than the multiply. The multiply is five cycles and you've just generated seven cycle worth of shifts and adds." Even though you phrase the multiplier as a bunch of shifts and adds, it was able to again, unpick it and say, "What are you actually doing? You're multiplying by 16972, I'm just going to multiply by 16972."

Matt:
The cool thing about that is that you can then go and say, well, I read this out of some Doom source code, which of course is 386 or 286 error, if I tell it to target a 32-bit system and say, "The architecture is that CPU," it does indeed do the shifts and adds. It goes, "No, I've got you. I know the multiplier was far too slow, I will use the shifts and adds." Now, you look at the shifts and adds, it's actually been cleverer than my example.

Matt:
It was able to unpick my shifts and adds, determine is was a multiply by some high constant, and then it had a much better way of doing that, that was still shifts and adds, than my original way. It's just, this is why you trust the compiler.
<h1>Vectorization</h1>
Adam:
Another optimization that Matt can see in action using this tool is vectorization.

Matt:
Vectorization specifically is an interesting technique where the compiler is able to see that it might be worthwhile doing multiple iterations of a loop at the same time. CPU's have a number of instructions that treat a register, which is maybe 64, 128, 256 bits wide, and instead of just treating it as a giant, giant number, it treats it as a structure containing a number of 32-bit values or 16-bit values or 8-bit values or a number of double precision numbers or single precision numbers.

Adam:
That's crazy. I write a for-loop, and I say, "Out of all these things," and it's like, "Yeah, I'll just add them up four at a time, because I can do that."

Matt:
It's so cool, and yeah, exactly, and it does this for every loop, every loop that it thinks is profitable. Whereas as an engineer, if you were actually having to write this out longhand, like old Matt would have done, you'd have to be really quite devoted to this, to always use the magic structures that do this this way and deal with all the edge cases. The compiler will happily spit that out every time it sees a loop that it thinks it's worthwhile too, which is just another reason, right.

Matt:
Rather than being smart individually every time, be smart once and teach the compiler to do it, and then everyone benefits from it all the time.

Adam:
In other words, if there's some trick that you think can your code faster, probably the compilers out there have already put that trick into the optimization part of the compiler.

Matt:
I have all the time by the way, I know you've scheduled it out to now, but I can keep talking until you're bored of listening to me, which is, already you've shown remarkable fortitude.

Adam:
No, no, it's super interesting.
<h1>Count Set Bits</h1>
Matt:
My favorite example is, counting the number of set bits. If you have a number, a 32-bit integer, I'm saying a 32-bit integer, and you want to know how many 1-bits there are in that 32-bit value. It sounds like a pointless thing, it sounds like an interview question, which I think it probably is, but there are some genuine reasons for doing it. They're used in ... Packed matrices that are, very, very sparse matrices that have lots of zeros in them. Instead of storing all those zeros, you store a mask that says, "Well, which of the following values are populated?" Then it just has the populate values immediately after it.

Matt:
You need to sometimes say, "Well, how many are there to get to the next row?" Yeah, I don't need to justify it really, it's just a thing that you might want to do, reasonably.

Adam:
There's a bunch of ways you might solve this, the easiest way is you have a 32-bit integer, you're just going to check if the first bit is one, and then drop if off, and keep checking it 32 times. Then there's some optimizations you can make on that. If the whole thing's zero, you're done, you can exit early, you could do some sort of bit twiddling hacks, etc.

Matt:
Anyway, you're right, any of those ways, and a modern computer, a modern compiler, and you turn the optimizer on to full, and you tell it that the architecture is like a modern PC, as opposed to the default, which is the oldest thing it possibly supports, and it doesn't matter, pretty much any way you wrote that, it will take the whole thing and replace it with the popcount instruction, which is the, how many bits are set in that register instruction?

Matt:
That's just mind-boggling to think of what's gone on there. You've taken essentially an order N or an order, and set bits of N, any number of ways you could write it, and the compiler authors are like, "We got you, we know what you're doing, even if you've phrased it in all these different ways." There's a normalization pass inside the compiler, there's then tricks for noticing what you're doing, idiom detection, and then it's like, "No, this is counting the number of set bits, we're going to replace it with that one instruction." That's amazing.

Adam:
I totally agree. It is amazing. I means that this interview question is easier to answer in Assembly than in a high level language, because in Assembly it's just a single instruction.

Adam:
What does all this knowledge about compiler optimization tell us about writing high level code though?

Matt:
It's the one thing that I want people to take away from all of this conversation, is that compilers have moved onto the point now where even though it's so useful for you to understand what's going on right at the bottom and understand what the CPU is doing, what the RAM is doing, what the caches are doing, what the branch predictors doing, that's great, it's wonderful, it's exciting, it's interesting. Don't necessarily think that you can't trust the compiler to know those things, or some of them at least, and take them into account.

Matt:
Trust the compiler, always trust the compiler. Write code that's easy to read, because the human is more important than the compiler now. The compiler has your back whatever you wrote, so don't trick yourself and write some nasty little thing because you think it will be a cycle faster than that. It won't be, the compiler honestly will beat you in almost everything that you can care to do.

Matt:
Write the code so that your colleague, or you tomorrow morning, when you haven't got coffee, can understand and trust the compiler to just generate the right code.

Adam:
In a sense, you're admitting defeat from your old days of ...

Matt:
In a sense, yes, but in another sense, it's as if the scales have fallen from my eyes now, and there are just so many more smart people that work on compilers, that have the time and the energy and the will and the clever ideas to add in these [inaudible 00:36:34], these tricks, this knowledge of the ISA that's deeper than anything I would have these days.

Matt:
Am I saying that you can't beat the compiler any more? No, of course not. There's always a case where you know more information than the compiler, but the compiler is very, very good under almost all circumstances you care to do.
<h1>Godbolt.org</h1>
Adam:
Matt's a change man, right. I mean he had already moved on to using high level language, but now with this tool, he can really see the Assembly that's being generated and all the optimizations that are happening, and this is clearly something valuable.

Adam:
He puts this up on a website, on his own personal website, godbolt.org, basically unchanged. You put your C++ code on one side and you see the result on the other, and this starts to spread inside of the C++ community.

Matt:
I tell, my favorite story for the whole of this is, that we were lucky enough to have Andrei Alexandrescu, who was the father of some of the template meta-programming tricks that we'll see. There's a number of books he's written. He came and gave some talks at DRW about performance. He was then working for Facebook and they were dealing with large matrix scale and there was all these things.

Matt:
It was fun for me, because I spent the whole time heckling him on the Assembly code he was showing just generally, and so I kept pulling him up on that. It was good banter, back and forth, and eventually at the end, he said something along the lines of, "I think, somebody told me there's a website that you can just put your code into, and it shows you what the Assembly looks like."

Matt:
At that point I blushed bright red, as everyone else looked at me and pointed and said, "Yeah, it's his." I felt like an absolute dreadful person for not mentioning it earlier.

Adam:
I feel sorry for this guy. Yeah, he came to give a talk and you were poking at him, and then he's like, "I think I have a solution," and you're like, "Yeah, that's mine."

Matt:
Yeah, so he and I have become friends now, so I think he's forgiven me for being quite so dreadful. I think we're all right on that front.
<h1>On being a Verb</h1>
Matt:
Yeah, so it grew and grew and it probably took a couple of years before it became more well known.

Adam:
Godbolt.org now supports many, many languages, 21 as I look right now, maybe more by the time this comes out. I first came across it on Hacker News, when somebody was posting a link about the Zig language, Z-I-G, and how well it optimizes down to X86 Assembly. If you can read Assembly and you have small examples, godbolt.org has become a Rosetta Stone for code performance.

Adam:
One thing Matt doesn't like about the tool though, is it's name. Yeah, I mean I think, people say, to Godbolt something, right.

Matt:
Yes, yes, they do. It's something that yeah, it's ... I've been in C++ committee meetings where somebody has said, "Why don't we just put this in Godbolt and see what happens?" I'm like, "I'm in the room, you can't say that with me here, it sounds weird." I don't know.

Adam:
It's fitting though, right? Because here's your story of all these, it seems like the punchline to each of your anecdotes is, "To the Assembly, let's see what it's doing."

Matt:
Yes, I think, there is a reason why it was me, or rather that I was in the right place at the right time, with all the right background for this to happen, right. You're right, it is the punchline. I guess in that way, yeah, but I mean it's luck, it's luck. I mean that's the thing, people, I get invited to things like this, now, this, an enjoyable time talking to you, and I've been able to talk at various conferences that I would never have dreamt to, as just some rando who writes C++ for a living.

Matt:
It all came out of a lucky break, where an afternoon's work with a friend and a bit of JavaScript and a memorable last name.

Adam:
That was the shows. Matt, he recommends that nobody write Assembly now, but that everybody should be able to read it. Because of his interest in Assembly and reading the Assembly generated by compilers, he's become famous in this world of very performance-critical code.

Adam:
Check out godbolt.org where you can play around with the tool that he built, that he likes to call Compiler Explorer, but everybody else calls Godbolt.

Adam:
As I mentioned at the beginning, I got a new job at Earthly. If you go to earthly.dev or check it out on GitHub you can see what we're building. We just want to make builds better and builds faster and builds more reproducible. It's just an ugly, complicated area, so we have an open-source tool and we're trying to make the build experience better.

Adam:
Until next time, thank you so much for listening.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1724</wp:post_id>
		<wp:post_date><![CDATA[2020-10-01 06:00:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-10-01 10:00:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[057-assembly-wth-matt-godbolt]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="assembly-language"><![CDATA[Assembly Language]]></category>
		<category domain="post_tag" nicename="c"><![CDATA[C++]]></category>
		<category domain="post_tag" nicename="irc"><![CDATA[IRC]]></category>
		<category domain="category" nicename="transcript"><![CDATA[Transcript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1728]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[157]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[766]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>2437</wp:comment_id>
			<wp:comment_author><![CDATA[Lawrence]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[lawrencegbell@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[135.0.104.3]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2020-10-03 12:21:43]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2020-10-03 16:21:43]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Proud father]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1601742103.4614739;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title>To The Assembly</title>
		<link>https://corecursive.com/to-the-assembly/</link>
		<pubDate>Thu, 01 Oct 2020 10:00:24 +0000</pubDate>
		<dc:creator><![CDATA[webmaster@corecursive.com]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1730</guid>
		<description></description>
		<content:encoded><![CDATA[How do CPUs work? How do compilers work? How does high-level code get translated into machine code? Today's guest is Matt Godbolt and he knows the answers to these questions.

How he became an expert in bare metal programming is an interesting story. Matt shares his origin story and the creation of compiler explorer in today's interview.

<a href="https://corecursive.com/057-assembly-wth-matt-godbolt/" target="_blank" rel="noopener noreferrer">Podcast Transcript</a>

<span style="font-weight: 400;">"I want to engender, hopefully, excitement in other people that I feel when I start taking the lid off  of the computer and pulling out bits further and further down the stack until you get to the CPU and then go like, Oh my gosh, I've got all the way to the bottom. And then someone taps you on the shoulder, says, no, you can go deeper than this.  And you are like like deeper, this is amazing and keep on going. ." - Matt Godbolt</span>

"I think it does inform the way that you write software. Just knowing how the ground works. I think there are some things that, that there's nothing that can save you from yourself if you don't do it. If you don't know a few things about how everything's working at the bottom" <span style="font-weight: 400;">- Matt Godbolt</span>

&nbsp;

<span style="font-weight: 400;"><strong>Links:</strong></span>

<a href="https://godbolt.org" target="_blank" rel="noopener noreferrer">Compiler Explorer</a>

<a href="https://github.com/mattgodbolt" target="_blank" rel="noopener noreferrer">Matt's Github</a>

<a href="https://xania.org/" target="_blank" rel="noopener noreferrer">Matt's Blog</a>

<a href="https://www.youtube.com/channel/UCC3kVzi4cWpLl16KmzsEtiQ" target="_blank" rel="noopener noreferrer">Matt's YouTube</a>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1730</wp:post_id>
		<wp:post_date><![CDATA[2020-10-01 06:00:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-10-01 10:00:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[to-the-assembly]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="post_tag" nicename="assembly-language"><![CDATA[Assembly Language]]></category>
		<category domain="post_tag" nicename="c"><![CDATA[C++]]></category>
		<category domain="post_tag" nicename="performance"><![CDATA[Performance]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[5213]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[60]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:13:{i:0;s:16:"01:09 -- Welcome";i:1;s:27:"08:51 -- What Assemblers Do";i:2;s:23:"10:15 -- Enter a Friend";i:3;s:18:"12:03 -- Magazines";i:4;s:27:"12:56 -- University (ARM) ";i:5;s:21:"14:26 -- Building IRC";i:6;s:35:"16:00 -- Lessons for the IRC Client";i:7;s:40:"20:59 -- High Level Programming Language";i:8;s:27:"22:10 -- On Market Making ";i:9;s:26:"28:59 -- Shifts and Adds ";i:10;s:23:"33:03 -- Count Set Bits";i:11;s:26:"36:55 -- Heckling the Guru";i:12;s:20:"38:29 -- Godbolt.org";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1734]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/057-Assembly.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[47:43]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[45.01 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Matt Godbolt]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://twitter.com/mattgodbolt">@mattgodbolt</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[1733]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>The Birth of UNIX with Brian Kernighan</title>
		<link>https://corecursive.com/058-brian-kernighan-unix-bell-labs/</link>
		<pubDate>Sun, 01 Nov 2020 11:00:44 +0000</pubDate>
		<dc:creator><![CDATA[webmaster@corecursive.com]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1754</guid>
		<description></description>
		<content:encoded><![CDATA[<span style="font-weight: 400;">When you work on your computer, there are so many things you take for granted: operating systems, programming languages, they all have to come from somewhere. </span>

<span style="font-weight: 400;">In the late 1960s and 1970s, that somewhere was Bell Labs, and the operating system they were building was UNIX. </span>

<span style="font-weight: 400;">They were building more than just an operating system though. They were building a way to work with computers that had never existed before.  </span>

<span style="font-weight: 400;">In today's episode I talk to Brian Kernighan about the history of Unix.</span>

<iframe style="border: none;" src="//html5-player.libsyn.com/embed/episode/id/16624724/height/90/theme/custom/thumbnail/yes/direction/backward/render-playlist/no/custom-color/87A93A/" width="100%" height="90" scrolling="no" allowfullscreen="allowfullscreen"></iframe>

<span style="font-weight: 400;">“If you wanted, you could go sit in your office and think deep thoughts or program, or write on your own blackboard or whatever, but then come back to the common space when you wanted to.“ - Brian Kernighan </span>

<span style="font-weight: 400;">“I found it easier to program when I was trying to figure out the logic for myself rather than trying to figure out where in the infinite stack of documentation was the function I needed. So for me, programming is more like creating something rather than looking it up, and too much of today's programming is more like looking it up.” - Brian Kernighan </span>

<span style="font-weight: 400;">“If what I find challenging or hard or whatever is also something that other people find hard or challenging or whatever, then if I do something that will improve my lot, I'm perhaps improving their lot at the same time.” - Brian Kernighan </span>
<h3><b>Transcript</b></h3>
<i><span style="font-weight: 400;">Note:  This podcast is designed to be heard. If you are able, we strongly encourage you to listen to the audio, which includes emphasis that's not on the page.  The podcast page for</span></i><a href="https://corecursive.com/brian-kernighan-unix-bell-labs/" target="_blank" rel="noopener noreferrer"><i><span style="font-weight: 400;"> this episode is here</span></i></a>

<strong>Adam: </strong>

<span style="font-weight: 400;">When you work on your computer, there are so many things you take for granted: operating systems, programming languages, they all have to come from somewhere. In the 1960s, that somewhere was Bell Labs, and the operating system they were building was Unix. They were building more than just an operating system though. They were building a way to work with computers that had never existed before. To find out more, I reached out to this guy.</span>

<strong>Brian: </strong>

<span style="font-weight: 400;">I'm Brian Kernighan, and at the moment, I teach computer science at Princeton University.</span>

<strong>Adam: </strong>

<span style="font-weight: 400;">Brian coins from Unix. He's the K in K&amp;R, the famous book about C that still tops most recommended book lists. He was part of this computer science research group at Bell Labs for 30 years. He's going to share the story of the creation of Unix, and hopefully, I'm going to try to figure out some of their secrets to being so impactful. Along the way, we're going to have to learn about the Unix philosophy and printing patent applications, but we're also going to have to learn about 10-kilo chocolate bars and fake demos to the CIA, and of course, British satirical magazines.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">The story of Unix is a story about Bell Labs, so let's start at the beginning when Brian is a grad student and he gets an internship to work there for the summer.</span>
<h1><b>My First Day at Bell Labs</b></h1>
<strong>Brian:</strong>

<span style="font-weight: 400;">Bell Labs is a very big building, a sequence of connected buildings, and probably 3,000 people working over these long multi-story buildings. The thing that I remember most clearly about the first day, and I think it was the first day of the first internship, so call it the summer of 1967, and I got an office, and if I recall correctly, I had an office to myself. So this is something that's unheard of in the modern era.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">But I had an office to myself, and I was sitting there in my office at probably 11:00 or something like that in my first morning, I wondered, "What the heck do I do? I have no idea what's going on." And this older gentleman came past my office and he said, "Hi, I'm Dick... Let's go to lunch." I thought, "Well, okay." I went off to lunch with Dick..., whose name I hadn't caught. We had a good lunch, he was an interesting kind of curmudgeonly, but intriguing guy. Then after lunch, he went off somewhere else.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">I snuck past my office to his office on the same corridor to see who the heck he was because everybody had name tags on the doors. It turns out it was Dick Hamming, the inventor of error-correcting codes.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">Dick Hamming is aka Richard Hamming. His Wikipedia page is huge. He worked on the Manhattan project programming computers to calculate the equations needed to develop nuclear weapons. One year after this lunch with Brian, he would win the Turing Award, the so-called Nobel Prize of Computing for his work on error-correcting codes. Hamming is also famous for this talk he gave on the secret to having impact in your professional life.</span>
<h1><b>Thinking Great Thoughts with Richard Hamming</b></h1>
<strong>Brian:</strong>

<span style="font-weight: 400;">The talk was called You and Your Research, and it was basically a retrospective on his career, thinking whether there were general lessons that would help other people in some way to have a better career. He was very, very interesting, and I think a good example of somebody with clearly lots of talent, but not a super genius type, who made the most of what he had. Who in every way, amplified so that he compounded his effect on the world. The other thing that's maybe is appropriate for today, he used to say that he would reserve Friday afternoons for thinking great thoughts.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">He would sit in his office, he would put his feet on the desk, and he would think great thoughts, whatever that might be. It was usually introspection on himself or on where was the field going, or what might happen in the future? What might you do to take advantage of that or deal with it in some way or other? This is Friday morning when we're talking, and I don't get that luxury on Friday afternoons very often, but it's a useful way to think of it. You say, "I'm going to stop and do it regularly to take stock of what's going on, and in some way, think about, 'What could I be doing that in some way would be better, that would be more useful for me or my family or the world or whatever?'"</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">He did that quite religiously, you went in after lunch on Friday, you'd find him sitting in his office thinking great thoughts. So he's fun.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">I love this advice, it presupposes that if I just had my Fridays free, and I wrote thinking great thoughts on my calendar, I would upgrade thoughts. I mean, maybe that's the case, I'll give it a try. There's one concept though that Hamming is most famous for, and that is about how you choose what to work on.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">The way he told it to me and probably lots of others was that he used to eat with some group of people like chemists, I think the specific thing was, and he would eat at their table at lunchtime, big cafeteria setting. He would sit down with chemists and talk to them and he would ask them what they were working on, and whether what they're working on could possibly lead to a Nobel Prize. The answer was often no, not a chance, and that was the point where he'd say, "Well, then why are you working on it? Because if it couldn't at least potentially lead to a Nobel Prize, it isn't important. Why are you wasting your time on something that isn't important?"</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">Whether intentionally or not, Brian followed this advice. When he returned to Princeton to work on his thesis, he was working on graph partitioning, which we now know is in some sense, equivalent to the traveling salesman problem. You have to find an optimum route that the salesman would travel from city to city minimizing travel distance. To complete his thesis, Brian had to work on the computers of Princeton at the time. Computers today are a lot different than they were in 1967 and '68 at Princeton. At the time, computers were all about Fortran and punch cards.</span>
<h1><b>Fortran and Punch Cards</b></h1>
<strong>Brian:</strong>

<span style="font-weight: 400;">Fortran was designed in a card environment very definitely, and I assume the cards came before Fortran, but in my mind, they're very strongly linked. And so yes, it was basically one statement per line, which was, therefore, one physical card. And so, when you wrote a program, you had to punch it on these punch cards, and then make sure you kept them in order and things like that and then you handed them to somebody who operated a very big, expensive machine. And a while later, back would come to your results, very often where it's just something like there was a syntax error somewhere, and you had to find the cards that were wrong, replace them with new cards that were right and repeat the process, but with a very, very long latency that could be often measured in hours or sometimes even days.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">It's not exactly like an instant compilation. And Fortran itself is a kind of clunky language as well in part reflecting those early days in computing, and partly just the fact that we didn't understand a lot, and the computers themselves were not particularly sophisticated. Then finally, Fortran was intended for scientific computing. It was not intended for, let's say, general-purpose system programming or anything like that. All of those things meant that although the program was a lot of fun, it's not the same as it became five or 10 years later, and it has continued to evolve.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">I had to watch a couple of YouTube videos to get a sense of this punch card world. A punch card is like an index card, but it's wider because it has 80 columns. And each of these columns corresponds to a single character. You punch holes in that column to indicate what letters should go there, and so each punch card represents one line of Fortran code. People build the programs this way, punching these cards, putting them into big boxes in order that they would carry around, then you take someplace to give them to a computer operator who would give them to the computer that would read all this in and run the program.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">So if you had a 1,000-line program, you would have 1,000 cards. There were no screens, no interactive output. You gave your cards to the computer operator and waited for your printout that was the result of your program. Computers were expensive and giant, so they wanted to maximize the throughput. Your program might be doing expensive mathematical calculations, but you could also just be doing word processing. One card might say, "In bold, print my thesis," and the next would say, "Print, by Brian Kernighan," and so on. It's like a verbose way of using a typewriter, except the advantage is you could change the cards around and have it reprinted.</span>
<h1><b>Time Sharing and Text Formatting</b></h1>
<strong>Brian:</strong>

<span style="font-weight: 400;">There was a lot of interest in text formatting at that time. When I was at MIT in '66, I used a program called RUNOFF, which was written by Jerry Saltzer. I learned only very recently that Jerry actually wrote that for doing his Ph.D. thesis, which is kind of neat, but I didn't have that, so I was at a position of having to get my thesis into printed form. I decided, what the heck? And so I wrote a very, very cheesy little formatting program, it was about 1,000 lines of Fortran that did straightforward stuff like make sure the lines were all the same length and even justified the right margin, which I think in retrospect was dumb.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">And the one other thing it did... punch cards were unfortunately only upper case. I mean, you five finger salutes that you could do that would get a lowercase, but nobody ever did them. So it was uppercase. So part of my little format or was just thing that did automatic capitalization. So it would find the beginning of the sentence and make sure that was uppercase, convert everything else to lowercase, and so on. I could in that way print something that looked like a thesis.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">And of course, you needed escape characters to defeat the automatic capitalization in the places where it wasn't appropriate. Fortran didn't handle characters very well at all, so there was a lot of faking to make that part work, but it was fine. And so thesis was basically three boxes of cards, 6,000 cards in each box, probably weighed 10, 12 pounds, five kilograms. And so you'd take these three boxes, 1,000 cards of which the first half of the first box was the program and then the remaining 5,000 cards was the thesis. And you would take those three boxes and you'd hand them to the operator. And an hour or two or three later back would come a printed version of thesis again. And you'd just keep iterating until it was good enough.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">I think this is a foreshadowing or something. Part of your thesis was writing a program to do your thesis. So the front part of your cards for your thesis where the implementation for a small language that would let you format your thesis, and then the thesis.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">Yeah, it's exactly right. It's entirely accidental, but in a sense, yeah. It's building tools that let you do things, and the tools that are often some kind of specialized language.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">While Brian was working on his thesis, back at Bell Labs, Ken Thompson and Dennis Ritchie were working on a project to bring more interactive computing to the world. The project was called Multics. Multics was a time-sharing operating system. The insight of time was that although a single person couldn't effectively use up the clock time of a computer if you could hook up a number of people to the computer, that maybe they could. And you could do this via time-sharing, basically giving each person a slice of each second so that it felt like they had full access to the computer while really the computer was switching around among them.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">If you had full access to a computer during your time slice, you didn't need a punch card system, you could use a teletype terminal. Teletype terminals looked like large typewriters combined with printers and maybe a phone line, and they were originally used for sending telegraphs, I think. You could type in commands and send it directly to the computer using the telephone line and then have the results printed out right away right above you. And with a timeshare system, you could hook up a number of these to a single computer and split time between them.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">Teletype terminals communicated over telnet, a protocol that's still in use to this day, although I guess SSH has largely replaced it. The ASCII format of text documents was created for these teletype machines, and that's why it has weird control characters like the end of the transmission. This was such an interesting time. It was the birth of these interactive computers. Anyways, back to the Multics project</span>
<h1><b>The Multics Project</b></h1>
<strong>Brian:</strong>

<span style="font-weight: 400;">Multics system was that joint venture of MIT and Bell Labs and actually General Electric, which made the hardware. And so the people doing the software were at MIT and at Bell Labs, and that got people used to a very nice computing environment, not a batch environment with cards, but an interactive environment, which is of course today.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">Multics was not a success. Bell Labs pulled out of the project, no more operating system work at Bell Labs. It was a waste of time, that became the sentiment of management. Ken in particular thought the system was too complex, but it was interactive and it was far ahead of this batch processing punch card world.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">And so that left the people, Ken in particular, but also Dennis Ritchie and a handful of others, with a taste for real nice computing environments, but not having one. And so they did a variety of things. They lobbied management to get a high-end machine so they could build their own operating system, and that went nowhere. And they spent a lot of time thinking about design, what would go into a time-sharing system, sort of like Multics but presumably not so complicated, but certainly stealing good ideas from Multics. Multics had many good ideas. I mean, that's the place where in parallel, I guess Ken was exploring this PDP-7 environment.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">A PDP-7 was mini computer produced by Digital Equipment Corporation in 1964. Sounds like a misnomer to me because when I Google it, it looks like a series of giant cabinets with a small desk attached to it and some computery looking parts. Anyhow, this PDP-7 at Bell Labs, it was obsolete, it had been produced in the early '60s and nobody was using it, but it did have a graphics display, basically a very early computer monitor. Computer monitors didn't exist much at that time. So Brian is awarded his PhD, and he starts working at Bell Labs full time. He has some early memories of this graphics display.</span>
<h1><b>Early Video Gaming</b></h1>
<strong>Brian:</strong>

<span style="font-weight: 400;">The graphical display was then used for some of the games that Ken, and not long after Dennis Richie, did, which were things like Space Travel, where you had a complete, accurate model of the solar system and you could navigate your little rocket around the solar system and land on various things, so you can land on one of the moons of Jupiter or something like that. And there was also this Space War game, which was you and me shooting each other up, like the two-person version of the asteroid games that you sometimes see. And I wasted a lot of time on that. I think that game may have come from MIT and just been transplanted, but I don't actually know. It was a lot of fun. And what little I know about orbital dynamics comes from playing that because he learned how to deal with gravity.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">The other interesting thing about the PDP-7 was the secondary storage. It basically had this giant disc drive, and Ken was interested in the best way to use it</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">He had been working on file system, experimenting with file system stuff on this PDP-7, just experiments to see how you could manage information on some giant secondary storage device. They had physically giant, not very much capacity. And so you had, I think, the rudiments of file system in mind if not actually implemented.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">So Ken has these ideas of a better, simpler Multics in mind. And coincidentally, around this time, his wife went off on vacation, leaving Ken with more spare time than he was generally used to.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">Bonnie went off to California bearing their son who at the time, I think was a year old or something like that. And was there for three weeks. And so Ken figured that he was close and so he built himself basically a working operating system in three weeks. And I think you could argue that's serious soccer productivity in some sense.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">I think that's serious productivity by any measure. So that was the first version of Unix. They had an old computer, often a room to the side, with a teletype terminal. And from there, no more punch cards. Things started to pick up speed. This first operating system was written in PDP-7 assembly, but this is the bones of the Unix-like operating systems that are now everywhere. I mean, that's crazy. Maybe that was the secret of this computer science research group, just have a Ken Thompson. I mean, how good of a programmer was he?</span>
<h1><b>Ken Thompson is Good</b></h1>
<strong>Brian:</strong>

<span style="font-weight: 400;">It's one of those realizations that it probably dawned on me at some point just how astonishing he is as a programmer. We were interested in a document preparation software, going back to the text formatting for my thesis, and so on, and there are other people there as well. And so we had bought a typesetter that is a device... think of it as like a laser printer, but before laser printers were around, so it printed on photographic paper which you then had to develop, but it was the thing for doing high quality printed material. And we got it from a company and it turned out that the machine itself came with software that the software was just so buggered and it was completely useless. And so the question is, can we figure out, reverse engineer this machine so that we can create our own software to run it. And the device, in addition to its physical things for manipulating photographic film or paper had a mini-computer in it, it was called Computer Automation Naked Mini, something like that. It was basically another one of these wimpy, little 16 bit computers at this point. And all we had for that was a manual and that we knew the fact that the typesetter had one of these things in it. So it was the controller inside the typesetter.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">And what are you going to do with that? Well, what you need to do is you've got a bit of code that comes from the manufacturer, but it's binary, what do you do with that? And so we're sitting there late afternoon thinking, "Well, something's got to be done." And we as Ken Thompson, Joe Condon and myself.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">Yeah, well, so if you just have ones and zeros, somehow you have to get like the instruction set or something, right?</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">Yeah. Well, you had a manual for it, so you knew normally if their assembler corresponded to what bit patterns for the instructions. But we didn't have any of the software itself for the Naked Mini, we just had some code that had been written in assembly language and then compiled down to bits, so we only had the bits. So you have to make some assumptions about what's going on there. Part of that was that a lot of this stuff was stored in basically EPROM, things that are the equivalent of today's flash memory, and so you had to figure out what was going on there as well. And that means extracting the bit patterns and then mutating them, is it big-endian or little-endian and things like that to figure out what is the code there that's in those things.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">I said, "Geez, I don't know," and I went home for dinner, but this was interesting stuff. So I came back after dinner and in the interval, Ken had written the disassembler for this thing so that he could now see what the code was in the Naked Mini. And then at that point, he could write an assembler for it and then start writing his own code for it. And then over the next day, or so, he also wrote a version of an interpreter for the B language, which we then put on the typesetter as well.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">All of this is measuring hours to a day or two to get all this stuff up and running on a totally unfamiliar machine. It's kind of the thing that you could do, I could do, but we wouldn't be very fast at it probably. And for Ken, it was just like breathing. Oh, okay, done. Next.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">When Brian says he, or I could do this given enough time, I think he's giving me far too much credit. This is astounding. I wouldn't know where to start from having like a pamphlet on a CPU and some binary software and go to a working high level language interpreter, I wouldn't even know how to get things onto this machine. What was your reaction? You come back from having dinner with your wife, and he's like, "Oh, I've just assembled this."</span>
<h1><b>The Patent Application Gambit</b></h1>
<strong>Brian:</strong>

<span style="font-weight: 400;">Yeah. I was just like, "Okay." It was really fun. With typesetter was I think that the time that I worked closest with Ken, and work with is too strong, I was just mostly standing there watching him do it, but just seeing how effective he was as a programmer in there and figuring out how things had to work.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">You're a professor now, you work with a lot of young students, I assume. How would you build a new Ken? Is that a thing where you could...</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">Geez, it'd be nice to know. That'd be quite a growth industry. I don't know whether they are grown or whether they're just born that way and the ones who are lucky or were lucky find the outlet for it early on in something that then pays off for everybody. I suspect it's more the latter.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">So we can't create a Ken, but I guess if you get a chance to work with Ken or somebody like Ken, you should do it. Did you notice also how much Brian downplayed his own contribution? I think this is going to be an ongoing trend. Brian is very modest. I don't know if that's just because he's Canadian or what, but I think probably he had a larger role than he would ever let on. But back to Unix V1. So this PDP-7 is working well, but the computer is obsolete. How can get a proper machine to run this on?</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">So Bell Labs, a scientific research place produced lots and lots of patent applications, typically one or two a day at that point. And those had to be formatted in a very specific way for the patent office, weird stuff, including things like numbering the lines. And at the time there was no commercial word processing systems that could handle numbering the lines, and so people in the Unix group at this point promised that they could deliver such a system so that the patent office could develop their prepare patent applications in the appropriate format, and that this would be delivered well before any commercial operation could provide the same thing.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">And the quid pro quo was that some part of the company, related to parts, I guess, would provide some of the money for acquiring the machine. And so this all came to pass. And so development went on at night when the patent typists were at home, and then in the daytime, just no software development because the typist for typing patent applications.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">That's awesome. Yeah, that's truly time-sharing. So the computer science research group at Bell Labs, it's a pretty elite group, agrees to build a patent application system for the patent typists. This is strange. I've actually played similar games myself before where you know the company wants X and I want to use technology Y. And so I say, "Hey, Y is the perfect thing for X?" And you can sort get some legs for your side project if you try to tie it to something important. I'm not totally sure how ethical it is, but in this case, it worked for the Unix group. I think for them, it meant that the operating system had real users and very practical use cases to hit. And this constraint of being this patent document rendering machine was actually very helpful for the early development.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">You notice there's this text formatting thread that goes through all of this stuff?</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">Yeah, totally.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">It's kind of weird, but it was in some ways a focus and something that kept things together in a way.</span>
<h1><b>The Unix Room</b></h1>
<strong>Adam:</strong>

<span style="font-weight: 400;">Once they had their PDP-11 and they ported Unix to it, they needed somewhere to put it. And that place became The Unix room.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">There's a classic picture, it may be the one in Wikipedia or something, that shows Ken Thompson and Dennis Ritchie at presumably age late 20s, early 30s, or something like that in a room. And there's a PDP-11 behind them. It was on the sixth floor of Bell Labs. That was the top floor, and that's one of those things like if you live in a garret you have these sloping walls and you store old stuff that gets dusty. And so this was the sixth floor of Building Two where this was going on. It was a big plain room and nothing there. And the corridor wasn't well lit and there was old junky equipment from World War II left alone behind a chain-link fence which was just not very nice.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">But the room itself was perfectly fine. You had a PDP-11 in there and some of these model 33, and maybe I guess ultimately 37 teletypes, and a few tables and chairs, and people would hang out there and do things. And some of it would be working on the operating system or some of the supporting software, or some of it was just drop in and it was kind of a social center as well. So it was there for a while and then it moved into slightly nicer quarters, one floor down. And so it was more a place where people could hang out and work and also have a coffee machine rather than going to the horrible vending machines down the hall.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">But in all cases, it was a place where people could hang out, socialize. So it was like the open work environment that you see in many places today, except... It's probably just as noisy, but it was people all working on the same thing, or very strongly related. And I think that made it work out.</span>
<h1><b>Building The Hierarchical File System</b></h1>
<strong>Adam:</strong>

<span style="font-weight: 400;">Eventually, the teletype terminals were replaced by computer terminals with proper monitors, and these computer terminals start spreading all over Bell Labs, everyone's got one. But The Unix room remains important. Several important innovations came out of that room. One of these is the hierarchical file system.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">Early computers, like if you used big IBM computers in roughly 1960 or something like that, they didn't really have a file system. There were ways to store information, but they were incredibly clunky and they were very device-specific. When you talked about accessing information from secondary storage, you had to know all the weird properties like the number of cylinders on the disc to be able to do it. And so the idea that, gee, you could have directories within directories, kind of obvious in retrospect, but doing it that was, if I recall correctly, absolutely part of Multics or it was variations. And what Ken did in Unix was to make that very clean and simple.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">So the actual interface to the file system was remarkably small, half a dozen system calls gives you pretty much everything you need to manipulate the information. And the actual implementation itself, once you've seen the system call interface, you think, "I could actually build that." And so it's neat in that respect. And now you look at it and you say, "Well, of course, that's obvious. What else would you do?" Because what you want is the file system to provide some abstraction hierarchy as a nice abstraction, you want it to be independent of the specific kinds of devices down there, and it certainly does that. It hides things like how many blocks there are, or whatever else.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">Maybe it's because I don't have any experience of computers from this era, but I didn't know the insulating computer programs from the specifics of various hard-drive layouts was an innovation. Another thing that was innovative about the Unix system was the interactive shell, the command line that we all know and love.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">I think, again, that was Multics idea, and then it was cleanly implemented in Unix. Again, the original shells were not super good for programming, but that got better as people realized, Jake, it's just another program you could write programs in it. And that had the good points, if you didn't like the show, you could replace it. And it had bad points that meant there were a lot of shelves and there still are. And I just discovered one of my new Macs has switched to Zsh. I'm sure it's an absolutely fine shell, it was actually done by an undergrad at Princeton long ago, but I've never used it.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">And so now, my startup reverts to Bash, not because it's necessarily better, but because they know it.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">I think it's backwards compatible.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">It may be, and it probably is, but it's one of these things where I don't care enough at this point. So I temporarily at least stick my head in the sand and go with the one I know.</span>
<h1><b>Shells and Pipes</b></h1>
<strong>Adam:</strong>

<span style="font-weight: 400;">This has come up quite a few times, I guess, like texts and text formatting. One of the things about the shell, I guess, is input and output streams of text, where did that idea come from? Why is it powerful?</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">The original idea of the standard input and the standard output that you could redirect those to files? I think that was fairly early on. That was probably in almost the first version that let's say, the first version that had a manual. Oh, that was probably there at that point. And so that's pretty neat, the idea that I can run the program and, oh, rather than seeing it could come out on paper, I can stick it in a file easily, and the program itself doesn't know that has happened because the service of redirection is done by the shell, the program just knows that you're writing someplace.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">That's probably quite early the idea of pipes, where you could take the output of one program and run it into the input of another program without an intermediate file, that appeared almost out of nowhere, somewhere, and I will guess, call it 1973 or something like that. The idea had been in the air for a while, Doug McIlroy was particularly very interested in being able to connect programs together like garden hose, connect another couple of programs in to get some job done. And he'd been talking up then for a long time.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">Doug had wanted annotation for being able to describe entire graphs of computations and then execute them. I'm not even sure we have an easy way to do that now.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">And that's a nice idea in theory, but it's much harder to figure out how to do that in practice. And so I think, and I don't know where that was, can, or what's the saying, wait a minute, linear is good enough, let's see what we can do with that, and not worry about the other stuff. But nobody figured out quite how to do it nor a sensible syntax. And then at some point, I'm pretty sure it was Ken, figured out how to do it, it wasn't very hard. And there was very, very briefly a bad notation for it. And that probably didn't last more than a few days. And then somebody, and I don't know whether it was Ken or Doug, came up with the vertical bar, the pipe symbol these days.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">And that happened, and that was one of those things that just clicked instantly. Everybody looked at it and said, "Oh, wow, of course." And then there was this frenzy of going in and fixing up programs so that they would work properly in pipelines. So that error messages didn't clutter up a pipeline, programs didn't put out or hid files that they would if there were no file names, they would read from the standard input and they would write to the standard output no matter what. And a lot of programs worked that way anyway, so it wasn't a problem, but there were others where it wasn't so obvious.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">Think about sort, you can produce any output from asserting program until you've seen all the input. So putting a sort in the middle of a pipeline is a fraud in a sense, because it's a dead stop and all this stuff piles up until it's sorted and then it goes out again, but it didn't matter. So sort was repackaged so that it read from its standard input and wrote to its standard output so that you could stick a sort in a pipeline. And of course, that's something, I don't know about you, but I do that almost every day in some way or others, I'm fiddling around with something.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">And so that's the kind of unification and that happened in an incredibly short period of time. Literally, it measured probably days where people start to realize, "Wow, you can do things like that." And then, of course, that led to these lots of ideas of screwball connections.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">Yeah. It seems obvious in retrospect, but I guess there are lots of ways where it could go wrong. You could have come up with a system where each program had to have some parameter where it took the next thing to call or something, you could have conceivably pushed it down into the individual programs to handle this composition, that probably wouldn't have been as compositional or something, I don't know.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">There's an early example of that. When MS-DOS came along, it had file named Wildcards, stars for file names, and so on, but that was implemented not at a shell level, but at each individual program implemented that. And that meant that some programs had it and some didn't and the ones that had it, who might be irregular. And so that was a right idea, but totally botched implementation. So putting it all in the Schellman, it was unified,</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">It's hard to overstate pipes, I get why they lead to a Cambrian explosion of little programs being developed and glued together in this Unix room because they give you a composition. No matter how you write your program, you can glue it together with other programs and you can use shell scripts as first-class programs. To me, this makes me think of like early functional programming. It's just inputs and outputs and composing things together, gluing them together. </span>
<h1><b>The Unix Room Culture</b></h1>
<strong>Adam:</strong>

<span style="font-weight: 400;">Part of what made all this innovation happen was the community and the culture that was born out of this Unix room.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">If you wanted, you could go sit in your office and think deep thoughts or program, or write on your own blackboard or whatever, but then come back to the common space when you wanted to. And some people just lived in the common space, Ken did, for example, he was rarely in this office. I was mostly in my office, but I would go get coffee every hour or two and talk to people and sit down in a chair and read whatever random thing had come by and so on. This was all of course, before laptop computers, so you were pretty much wired to some particular place if you wanted to talk to a computer,</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">You could be in your office working on something and then once it's working, you head in for coffee and you're like, "Check out this it's... "</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">Yeah. That kind of thing. It was very much. And the whole building was, I think, geared up rather well for people to interact with each other. There was very, very long corridors within a long corridor, but then things sticking off the sides. And so the people in the computing science research operation were fundamentally in two of those little side corridors, and you'd go like this to go back and forth. And the Unix room was back on one end of the main corridor, at least at one point, or it was up on the sixth floor, between the two little side corridors. So it was relatively compact, but the whole operation did seem to encourage people to run into each other in the hall.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">I work from my home office, I guess now many people do, but it's interesting to hear Brian talk about this community that was built around a physical space around this Unix room. I wonder how much of what they built relates to the fact that they were just sharing a single machine, they were also sharing a common room, and a common table, and a common espresso machine.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">I just remember it as being a nice place that you could sit and listen to the ambient conversation, which was often interesting or people would bring in things.</span>
<h1><b>The 10-Kilo Chocolate Bars</b></h1>
<strong>Adam:</strong>

<span style="font-weight: 400;">One thing they would bring in is 10-kilo chocolate bars, a 10-kilogram chocolate bar is massive. If it was shaped like a Hershey bar, it would be roughly the size of a coffee table.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">they would put a 10-kilogram chocolate bar in the middle of this table, and of course, it wasn't long before you had little chocolate fragments all over the place. It was just an unbelievable mess, but it was good chocolate. So people would come in and they would go take a knife and go pump and carve off an ounce or two of chocolate and leave a lot of fragments. And I'm sure that whoever hit that terrible job of cleaning up this place must've been really irritated. So I remember that kind of thing.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">And another thing that I remember, a rather odd thing, Dennis Ritchie, who sometimes was there, but I think more often in his office, his sister who had lived in England gave him a subscription to this English satire publication called Private Eye. And so Dennis would bring that in and stick it on the table, presumably beside the chocolate bar. And I found it funny to read this stuff. They had interesting cartoons, but it was very British. And I think if you weren't in the UK, a lot of this stuff would just go right over your head.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">And I'm sure an enormous amount of it went over my head, but Dennis would bring it in and I'd go in and I'd pick up Private Eye and I would read it for 10, 20 minutes and get some chuckle out of it or something like that. So fairly trivial memory, but there was just lots of little things like that that were fun.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">Unix doesn't stay limited to the Unix room in the computer science research group in the patent typists, it starts spreading around Bell Labs. People would hear about it and they'd want to find out more.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">Occasionally, you would come into the unit room and you would discover that one of the places off to the side of it, because there was a bigger room and a couple of smaller rooms this side, you would discover some august who was being shown the wonders of Unix or whatever else we were doing. And so you would see people that were in some way, well known, coming through, "Oh, who's that" Whatever. Carly Fiorina is one I remember distantly, she was at that time working at AT&amp;T and then she went on to a variety of things, including HP. And I have no idea where she is now, but people like that well-known people.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">Oh, nice.</span>
<h1><b>Demo Engineering The CIA</b></h1>
<strong>Brian:</strong>

<span style="font-weight: 400;">There was also a period when we did demos of Unix, and this was probably a little earlier, the maybe mid to late '70s. We would do demos for distinguished visitors who were coming through and they would be accompanied by distinguished upper management from Bell Labs and dog and pony shows. And so I met a number of interesting people that way. Perhaps the most interesting was William Colby, who at the time was head of the CIA.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">What did you show him?</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">This is one of these things, an interesting story, I guess. The idea of Unix and I don't know whether this ever resonated with people who weren't programmers, but the idea was that you could build things very quickly by combining stuff that already existed. And so you could do shell pipelines, for example, so you could take two or three or four programs that did interesting independent things, and then glue them together into some sequence that did a specific task. And it was easier to do that, at least to prove feasibility or explore it of read and write a special program.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">And the specific one that we often used was a spellchecker, one that would basically take a document, split it up into words, canonicalize it in lower case or something. And then compare that to a dictionary and spit out the words that were in the document, but not in the dictionary. So those are plausible contenders for spelling detection. And you could write that pipeline practically, just type it because it wasn't very complicated. And so you would demonstrate that, for example, because this is a time when word processing didn't really exist in any sense. And so, "Gee, computers can check your spelling, what a neat idea." And so we were choosing-</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">It's like even putting line numbers on pages was a bridge too far, right?</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">Yeah, exactly. Whereas of course, that's a one-liner etc. So I would demonstrate that. The problem was that that pipeline and these were days when the machines were exceptionally slow, that pipeline took too long to check the spelling of a reasonable document. Well, it might take 30, 40 seconds to check the spelling of a document, and you don't want to keep a distinguished visitor waiting 30 or 40 seconds while this thing runs. So knowing that Colby was going to show up, what I did of course, was run the program the day before, collect the output in a file. And then what I showed Colby was actually something that basically said sleep for two seconds, and then print the result I had done the day before. And so this is a classic example of demo engineering.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">That's hilarious. Yeah. And he went back to the CIA and he's like, "These computers they have are super fast at Bell Labs." I'm thinking of computing today, we each have our own computers. You guys there, you were all on the same machine in the same like the hierarchical file system. So I don't know, I'm wondering, was that part of the magic that you could write something and then somebody else could use it?</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">Yeah, I think it was. Having everybody in the same file system made it actually quite easy to share whatever you were doing, probably in retrospect, too easy to share because most people didn't bother with permission. So everything was written by everybody, and that could lead to potential issues. I could read your email or I could fiddle your program or whatever. But since it was a small group of very definitely cooperating people, that wasn't an issue at the time. But just the fact that all of the, for example, the source code of everything was there, and so you could look at something, anything from the operating system through to any of the programs that ran on it and see what they did.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">And then if you had an idea, you could make a new version of it that improved it in some way or other. And in fact, the only real rule there was, you changed it last, it's yours. At one point, I had an idea for improving the text editor, ed at the time. And so I went in and added some things to ed, very small stuff, but in that sense. And I was just perfectly fine, but I guess technically at least for a brief period, I owned ed. That encouraged you to be somewhat careful. But I think that having everything on the same computer was contributed to a sense of community as well. And part of the community was the shared information, but the other part of it was simply knowing that other people were logged in at the same time. So the command called Who, which just told you who was logged in. That just by itself was definitely a community builder because it would, when you run Who, it would tell you who was logged in, but also when they had last done something. And if you sent them a message saying help or whatever, you might get a response. So I think that living on the same computer, both the shared information, but also the shared we're all listed right here and we can talk to each other easily was an improvement.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">Google, for example, keeps a lot of their source code in one single giant tree at this point. And that's definitely good for code discovery and so on, but it doesn't address the problem of whether your teammates are all sitting there online at the same time and easily accessible.</span>
<h1><b>Development Today</b></h1>
<strong>Adam:</strong>

<span style="font-weight: 400;">This development model of sharing a tree of source code, sharing a bin directory, it's interesting how in some ways, it mirrors how I work today. I ping teammates on Slack, we review PRs together, we're all making improvements to the same software. It's like in the 1970s, they've figured this out and we're just learning to recreate it.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">I don't want to sound cynical, but I think in a lot of cases, that's absolutely true, that there was a perfectly good mechanism that was appropriate 40, 50 years ago. And then it falls out of use and then people rediscover it, modified by whatever the current issues are or something like that. So, yeah, there's an awful lot of reinvention in that sense. That's absolutely fine because the circumstances are somewhat different.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">Yeah. The Unix room is now like a Slack channel somewhere.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">Yeah, exactly.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">Unix spread outside of Bell Labs, Bell wasn't allowed to make any money on it. So they distributed it pretty freely, including source code. People started adding contributions to it and it had a snowball effect. It wasn't open source, but it was close to it. It had a very permissive license.</span>
<h1><b>Programming is Harder now</b></h1>
<strong>Adam:</strong>

<span style="font-weight: 400;"> In my mind, these guys like Brian, like Ken Thompson, like Dennis Ritchie, these guys were like elite programmers. And part of my goal in this interview was to figure out what some of their secrets are. But Brian said programming is a lot different today.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">I found it easier to program when I was trying to figure out the logic for myself rather than trying to figure out where in the infinite stack of documentation was the function I needed. So for me, programming is more like creating something rather than looking it up, and too much of today's programming is more like looking it up.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">That makes sense. And yeah, I can see magical, I guess, if you're just pulling something in to do something. And I do have a sense though, how like... So you guys, you're in the Unix room, you were building all these little tools and the tools were starting to accrete and like no JS, is just a world that is accreted all of the things, or Python. So it's just that the end state of this process or something.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">Yeah, it probably is. Accretion is probably the right world, and I don't know how that ends if it ever does.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">There's a book, A Deepness in the Sky, the science fiction book, takes place like thousands of years in the future on a spaceship or something like that. One of the main characters is a programmer archeologist because that's the job at that point is like, everything has been accreted and his job is mainly running various VMs of old systems and hooking them back together. And these archeologist, because he have to dig and try to find the thing-</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">This is thousands of years in the future or just today?</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">Yeah. Well, science fiction is always about the time it's written, I think more than the future. But he makes reference in the book, like the system he's using uses Unix timestamps. So the vision is some future where he's still running something based on what you guys created back then, which is, I don't know, if it's a scary or a beautiful vision or a scary vision.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">That's mind boggling. I assume that the time, _t went to 64 bits in there somewhere.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">Yeah. I don't know. That's funny. </span>
<h1><b>We didn't know it was important at the time</b></h1>
<span style="font-weight: 400;">At the beginning, you were talking about Richard Hamming and his work on important problems and you were working on trying to find this problem that's equivalent to the traveling salesman problem. And Ken was trying to port a video game onto an old machine. It seems like the advice was not well-placed there, you couldn't tell from the beginning which... Like yours seems like the more important problem, I guess.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">Yeah. That's interesting. Do as I say, not as I do, because you're right, it's hard to think that working on a better video game or whatever was in some sense, working on an important problem. I think underneath it, maybe let's say, Ken was working on an important problem which was, how do you create a programming environment in which programmers can be more productive? And then Dennis added to that, the observation, how do you make it into a community, so the people who are doing it are working in some sense together?</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">And I think those are important problems, seeing whether what you're doing on a day-to-day basis in some vague way is related to that. But all of that time sight, it's certainly at the time, I didn't think that any of that stuff was important in that sense</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">This is interesting, the important work that these guys did, it didn't seem like important work at the time. So how do you choose something important to work on?</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">I think the closest you get to important is thinking, "It's hard to write programs, what can we do to make it easier to write programs?" And that's partly something that I've felt myself, Gm, writing Fortran, Fortran is really hard to write with, can I do something better on that? And if what I find challenging or hard or whatever is also something that other people find hard or challenging or whatever, then if I do something that will improve my lot, I'm perhaps improving their lot at the same time.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">Yeah. I think that you've done a great job at that. I think you're too modest about your programming skills. I somehow suspect that you're better than you're letting on.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">Don't do a code review on me, please. Thank you.</span>

<strong>Adam:</strong>

<span style="font-weight: 400;">But this has been great. So thanks for your time.</span>

<strong>Brian:</strong>

<span style="font-weight: 400;">And it was great pleasure, fun talking to you. Well, talk to you again sometime.</span>
<h1>Closing Thoughts</h1>
<strong>Adam:</strong>

<span style="font-weight: 400;">I think my takeaway is forget about Richard Hamming's advice, do what's interesting, help, smooth out problems, find the community that you can collaborate with. And if you find a community you really gel with, treasure it. And who knows, maybe what you did a couple of decades later will turn out to be really important. What's your takeaway listener? If you like this episode, do me a huge favor and tell someone else to try out the show. Maybe you could text somebody you know and let them know, "Hey, check out The CoRecursive Podcast." The main thing I'm trying to do right now is just grow my listenership. So if you have any ideas for how to do that, let me know, but I think the key is just word of mouth. So think about who you know who might like the podcast. Until next time, thank you so much for listening.</span>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1754</wp:post_id>
		<wp:post_date><![CDATA[2020-11-01 06:00:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-11-01 11:00:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[058-brian-kernighan-unix-bell-labs]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="bell-labs"><![CDATA[Bell Labs]]></category>
		<category domain="category" nicename="transcript"><![CDATA[Transcript]]></category>
		<category domain="post_tag" nicename="unix"><![CDATA[Unix]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[419]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1756]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_primary_category]]></wp:meta_key>
		<wp:meta_value><![CDATA[157]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title>The Birth of Unix with Brian Kernighan</title>
		<link>https://corecursive.com/brian-kernighan-unix-bell-labs1/</link>
		<pubDate>Sun, 01 Nov 2020 11:00:12 +0000</pubDate>
		<dc:creator><![CDATA[webmaster@corecursive.com]]></dc:creator>
		<guid isPermaLink="false">https://corecursive.com/?p=1758</guid>
		<description></description>
		<content:encoded><![CDATA[<span style="font-weight: 400;">When you work on your computer, there are so many things you take for granted: operating systems, programming languages, they all have to come from somewhere. </span>

<span style="font-weight: 400;">In the late 1960s and 1970s, that somewhere was Bell Labs, and the operating system they were building was UNIX. </span>

<span style="font-weight: 400;">They were building more than just an operating system though. They were building a way to work with computers that had never existed before.  </span>

<span style="font-weight: 400;">In today's episode I talk to Brian Kernighan about the history of Unix.</span>
<h1><a href="https://corecursive.com/058-brian-kernighan-unix-bell-labs/" target="_blank" rel="noopener noreferrer">Podcast Transcript</a></h1>
<span style="font-weight: 400;">“If you wanted, you could go sit in your office and think deep thoughts or program, or write on your own blackboard or whatever, but then come back to the common space when you wanted to.“ - Brian Kernighan </span>

<span style="font-weight: 400;">“I found it easier to program when I was trying to figure out the logic for myself rather than trying to figure out where in the infinite stack of documentation was the function I needed. So for me, programming is more like creating something rather than looking it up, and too much of today's programming is more like looking it up.” - Brian Kernighan </span>

<span style="font-weight: 400;">“If what I find challenging or hard or whatever is also something that other people find hard or challenging or whatever, then if I do something that will improve my lot, I'm perhaps improving their lot at the same time.” - Brian Kernighan</span>

<span style="font-weight: 400;"><strong>Links:</strong></span>

<a href="https://www.cs.princeton.edu/people/profile/bwk" target="_blank" rel="noopener noreferrer">Brian's Homepage</a>

<a href="https://www.amazon.com/dp/1695978552" target="_blank" rel="noopener noreferrer">Book: Unix: A History and a Memoir</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1758</wp:post_id>
		<wp:post_date><![CDATA[2020-11-01 06:00:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-11-01 11:00:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[brian-kernighan-unix-bell-labs1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_format" nicename="post-format-aside"><![CDATA[Aside]]></category>
		<category domain="category" nicename="podcast"><![CDATA[Podcast]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_80c63fc9ae2b78d8dc88eb0d0825af33]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_content_score]]></wp:meta_key>
		<wp:meta_value><![CDATA[90]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-time-jump]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:16:{i:0;s:35:"01: 19 -- My First Day at Bell Labs";i:1;s:53:"02:48 -- Thinking Great Thoughts with Richard Hamming";i:2;s:32:"05:43 -- Fortran and Punch Cards";i:3;s:41:"08:24 -- Time Sharing and Text Formatting";i:4;s:28:"12:09 -- The Multics Project";i:5;s:27:"14:16 -- Early Video Gaming";i:6;s:29:"16:40 -- Ken Thompson is Good";i:7;s:38:"20:36 -- The Patent Application Gambit";i:8;s:22:"24:31 -- The Unix Room";i:9;s:33:"26:35 -- Hierarchical File System";i:10;s:23:"29:40 -- Shell and Pipe";i:11;s:30:"34:19 -- The Unix Room Culture";i:12;s:35:"36:43 -- The 10-Kilo Chocolate Bars";i:13;s:37:"39:34 -- Demo Engineering for The CIA";i:14;s:26:"45:02 -- Development Today";i:15;s:41:"46:04 -- Why don't know what is important";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/058-Bell_Labs.mp3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-duration]]></wp:meta_key>
		<wp:meta_value><![CDATA[51:10]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-file-external-fsize]]></wp:meta_key>
		<wp:meta_value><![CDATA[48.18 MB]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-name]]></wp:meta_key>
		<wp:meta_value><![CDATA[Brian Kernighan]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-links]]></wp:meta_key>
		<wp:meta_value><![CDATA[<a href="https://www.cs.princeton.edu/people/profile/bwk">Brian Kernighan</a>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
		<wp:meta_value><![CDATA[1353]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1763]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_twitter-title]]></wp:meta_key>
		<wp:meta_value><![CDATA[The Birth of Unix with Brian Kernighan]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_twitter-description]]></wp:meta_key>
		<wp:meta_value><![CDATA[In today’s episode Brain Kernighan shares the story of the birth of UNIX]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_twitter-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://corecursive.com/wp-content/uploads/2020/10/CoRecursive-Featured-Image-2.png]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_yoast_wpseo_twitter-image-id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1756]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
		<wp:meta_value><![CDATA[brian-kernighan-unix-bell-labs]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[sonus_podcast-guest-image]]></wp:meta_key>
		<wp:meta_value><![CDATA[1761]]></wp:meta_value>
		</wp:postmeta>
							</item>
				</channel>
</rss>
	
<!--
Performance optimized by W3 Total Cache. Learn more: https://www.boldgrid.com/w3-total-cache/

Object Caching 70/1004 objects using disk
Page Caching using disk: enhanced{w3tc_pagecache_reject_reason}

Served from: corecursive.com @ 2020-11-10 14:36:30 by W3 Total Cache
-->